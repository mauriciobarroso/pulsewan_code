
pulsewan_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d168  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e28  0801d2a0  0801d2a0  0001e2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801e0c8  0801e0c8  0001f0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801e1a0  0801e1a0  00020144  2**0
                  CONTENTS
  5 .ARM          00000008  0801e1a0  0801e1a0  0001f1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801e1a8  0801e1a8  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801e1a8  0801e1a8  0001f1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801e1ac  0801e1ac  0001f1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000144  20000000  0801e1b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000022f0  20000144  0801e2f4  00020144  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002434  0801e2f4  00020434  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 13 .debug_info   000473ec  00000000  00000000  0002016e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000afa8  00000000  00000000  0006755a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000037a8  00000000  00000000  00072508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002a5f  00000000  00000000  00075cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a0a2  00000000  00000000  0007870f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00042c17  00000000  00000000  000a27b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0c10  00000000  00000000  000e53c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b5fd8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e5fc  00000000  00000000  001b601c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001c4618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000144 	.word	0x20000144
 8000154:	00000000 	.word	0x00000000
 8000158:	0801d288 	.word	0x0801d288

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000148 	.word	0x20000148
 8000174:	0801d288 	.word	0x0801d288

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_fmul>:
 8000188:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800018c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000190:	bf1e      	ittt	ne
 8000192:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000196:	ea92 0f0c 	teqne	r2, ip
 800019a:	ea93 0f0c 	teqne	r3, ip
 800019e:	d06f      	beq.n	8000280 <__aeabi_fmul+0xf8>
 80001a0:	441a      	add	r2, r3
 80001a2:	ea80 0c01 	eor.w	ip, r0, r1
 80001a6:	0240      	lsls	r0, r0, #9
 80001a8:	bf18      	it	ne
 80001aa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001ae:	d01e      	beq.n	80001ee <__aeabi_fmul+0x66>
 80001b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80001b4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001b8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001bc:	fba0 3101 	umull	r3, r1, r0, r1
 80001c0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001c4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001c8:	bf3e      	ittt	cc
 80001ca:	0049      	lslcc	r1, r1, #1
 80001cc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001d0:	005b      	lslcc	r3, r3, #1
 80001d2:	ea40 0001 	orr.w	r0, r0, r1
 80001d6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001da:	2afd      	cmp	r2, #253	@ 0xfd
 80001dc:	d81d      	bhi.n	800021a <__aeabi_fmul+0x92>
 80001de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001e6:	bf08      	it	eq
 80001e8:	f020 0001 	biceq.w	r0, r0, #1
 80001ec:	4770      	bx	lr
 80001ee:	f090 0f00 	teq	r0, #0
 80001f2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001f6:	bf08      	it	eq
 80001f8:	0249      	lsleq	r1, r1, #9
 80001fa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001fe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000202:	3a7f      	subs	r2, #127	@ 0x7f
 8000204:	bfc2      	ittt	gt
 8000206:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800020a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800020e:	4770      	bxgt	lr
 8000210:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000214:	f04f 0300 	mov.w	r3, #0
 8000218:	3a01      	subs	r2, #1
 800021a:	dc5d      	bgt.n	80002d8 <__aeabi_fmul+0x150>
 800021c:	f112 0f19 	cmn.w	r2, #25
 8000220:	bfdc      	itt	le
 8000222:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000226:	4770      	bxle	lr
 8000228:	f1c2 0200 	rsb	r2, r2, #0
 800022c:	0041      	lsls	r1, r0, #1
 800022e:	fa21 f102 	lsr.w	r1, r1, r2
 8000232:	f1c2 0220 	rsb	r2, r2, #32
 8000236:	fa00 fc02 	lsl.w	ip, r0, r2
 800023a:	ea5f 0031 	movs.w	r0, r1, rrx
 800023e:	f140 0000 	adc.w	r0, r0, #0
 8000242:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000246:	bf08      	it	eq
 8000248:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800024c:	4770      	bx	lr
 800024e:	f092 0f00 	teq	r2, #0
 8000252:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0040      	lsleq	r0, r0, #1
 800025a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800025e:	3a01      	subeq	r2, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xce>
 8000262:	ea40 000c 	orr.w	r0, r0, ip
 8000266:	f093 0f00 	teq	r3, #0
 800026a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	bf02      	ittt	eq
 8000270:	0049      	lsleq	r1, r1, #1
 8000272:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000276:	3b01      	subeq	r3, #1
 8000278:	d0f9      	beq.n	800026e <__aeabi_fmul+0xe6>
 800027a:	ea41 010c 	orr.w	r1, r1, ip
 800027e:	e78f      	b.n	80001a0 <__aeabi_fmul+0x18>
 8000280:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	bf18      	it	ne
 800028a:	ea93 0f0c 	teqne	r3, ip
 800028e:	d00a      	beq.n	80002a6 <__aeabi_fmul+0x11e>
 8000290:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000294:	bf18      	it	ne
 8000296:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800029a:	d1d8      	bne.n	800024e <__aeabi_fmul+0xc6>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	4770      	bx	lr
 80002a6:	f090 0f00 	teq	r0, #0
 80002aa:	bf17      	itett	ne
 80002ac:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80002b0:	4608      	moveq	r0, r1
 80002b2:	f091 0f00 	teqne	r1, #0
 80002b6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002ba:	d014      	beq.n	80002e6 <__aeabi_fmul+0x15e>
 80002bc:	ea92 0f0c 	teq	r2, ip
 80002c0:	d101      	bne.n	80002c6 <__aeabi_fmul+0x13e>
 80002c2:	0242      	lsls	r2, r0, #9
 80002c4:	d10f      	bne.n	80002e6 <__aeabi_fmul+0x15e>
 80002c6:	ea93 0f0c 	teq	r3, ip
 80002ca:	d103      	bne.n	80002d4 <__aeabi_fmul+0x14c>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	bf18      	it	ne
 80002d0:	4608      	movne	r0, r1
 80002d2:	d108      	bne.n	80002e6 <__aeabi_fmul+0x15e>
 80002d4:	ea80 0001 	eor.w	r0, r0, r1
 80002d8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002dc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002e0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002e4:	4770      	bx	lr
 80002e6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ea:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__gedf2>:
 8000668:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800066c:	e006      	b.n	800067c <__cmpdf2+0x4>
 800066e:	bf00      	nop

08000670 <__ledf2>:
 8000670:	f04f 0c01 	mov.w	ip, #1
 8000674:	e002      	b.n	800067c <__cmpdf2+0x4>
 8000676:	bf00      	nop

08000678 <__cmpdf2>:
 8000678:	f04f 0c01 	mov.w	ip, #1
 800067c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000680:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000684:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000688:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800068c:	bf18      	it	ne
 800068e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000692:	d01b      	beq.n	80006cc <__cmpdf2+0x54>
 8000694:	b001      	add	sp, #4
 8000696:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800069a:	bf0c      	ite	eq
 800069c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006a0:	ea91 0f03 	teqne	r1, r3
 80006a4:	bf02      	ittt	eq
 80006a6:	ea90 0f02 	teqeq	r0, r2
 80006aa:	2000      	moveq	r0, #0
 80006ac:	4770      	bxeq	lr
 80006ae:	f110 0f00 	cmn.w	r0, #0
 80006b2:	ea91 0f03 	teq	r1, r3
 80006b6:	bf58      	it	pl
 80006b8:	4299      	cmppl	r1, r3
 80006ba:	bf08      	it	eq
 80006bc:	4290      	cmpeq	r0, r2
 80006be:	bf2c      	ite	cs
 80006c0:	17d8      	asrcs	r0, r3, #31
 80006c2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006c6:	f040 0001 	orr.w	r0, r0, #1
 80006ca:	4770      	bx	lr
 80006cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006d4:	d102      	bne.n	80006dc <__cmpdf2+0x64>
 80006d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006da:	d107      	bne.n	80006ec <__cmpdf2+0x74>
 80006dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d1d6      	bne.n	8000694 <__cmpdf2+0x1c>
 80006e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006ea:	d0d3      	beq.n	8000694 <__cmpdf2+0x1c>
 80006ec:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop

080006f4 <__aeabi_cdrcmple>:
 80006f4:	4684      	mov	ip, r0
 80006f6:	4610      	mov	r0, r2
 80006f8:	4662      	mov	r2, ip
 80006fa:	468c      	mov	ip, r1
 80006fc:	4619      	mov	r1, r3
 80006fe:	4663      	mov	r3, ip
 8000700:	e000      	b.n	8000704 <__aeabi_cdcmpeq>
 8000702:	bf00      	nop

08000704 <__aeabi_cdcmpeq>:
 8000704:	b501      	push	{r0, lr}
 8000706:	f7ff ffb7 	bl	8000678 <__cmpdf2>
 800070a:	2800      	cmp	r0, #0
 800070c:	bf48      	it	mi
 800070e:	f110 0f00 	cmnmi.w	r0, #0
 8000712:	bd01      	pop	{r0, pc}

08000714 <__aeabi_dcmpeq>:
 8000714:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000718:	f7ff fff4 	bl	8000704 <__aeabi_cdcmpeq>
 800071c:	bf0c      	ite	eq
 800071e:	2001      	moveq	r0, #1
 8000720:	2000      	movne	r0, #0
 8000722:	f85d fb08 	ldr.w	pc, [sp], #8
 8000726:	bf00      	nop

08000728 <__aeabi_dcmplt>:
 8000728:	f84d ed08 	str.w	lr, [sp, #-8]!
 800072c:	f7ff ffea 	bl	8000704 <__aeabi_cdcmpeq>
 8000730:	bf34      	ite	cc
 8000732:	2001      	movcc	r0, #1
 8000734:	2000      	movcs	r0, #0
 8000736:	f85d fb08 	ldr.w	pc, [sp], #8
 800073a:	bf00      	nop

0800073c <__aeabi_dcmple>:
 800073c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000740:	f7ff ffe0 	bl	8000704 <__aeabi_cdcmpeq>
 8000744:	bf94      	ite	ls
 8000746:	2001      	movls	r0, #1
 8000748:	2000      	movhi	r0, #0
 800074a:	f85d fb08 	ldr.w	pc, [sp], #8
 800074e:	bf00      	nop

08000750 <__aeabi_dcmpge>:
 8000750:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000754:	f7ff ffce 	bl	80006f4 <__aeabi_cdrcmple>
 8000758:	bf94      	ite	ls
 800075a:	2001      	movls	r0, #1
 800075c:	2000      	movhi	r0, #0
 800075e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000762:	bf00      	nop

08000764 <__aeabi_dcmpgt>:
 8000764:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000768:	f7ff ffc4 	bl	80006f4 <__aeabi_cdrcmple>
 800076c:	bf34      	ite	cc
 800076e:	2001      	movcc	r0, #1
 8000770:	2000      	movcs	r0, #0
 8000772:	f85d fb08 	ldr.w	pc, [sp], #8
 8000776:	bf00      	nop

08000778 <__aeabi_d2iz>:
 8000778:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800077c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000780:	d215      	bcs.n	80007ae <__aeabi_d2iz+0x36>
 8000782:	d511      	bpl.n	80007a8 <__aeabi_d2iz+0x30>
 8000784:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000788:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800078c:	d912      	bls.n	80007b4 <__aeabi_d2iz+0x3c>
 800078e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000792:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000796:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800079a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800079e:	fa23 f002 	lsr.w	r0, r3, r2
 80007a2:	bf18      	it	ne
 80007a4:	4240      	negne	r0, r0
 80007a6:	4770      	bx	lr
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007b2:	d105      	bne.n	80007c0 <__aeabi_d2iz+0x48>
 80007b4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007b8:	bf08      	it	eq
 80007ba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007be:	4770      	bx	lr
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop

080007c8 <__aeabi_frsub>:
 80007c8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80007cc:	e002      	b.n	80007d4 <__addsf3>
 80007ce:	bf00      	nop

080007d0 <__aeabi_fsub>:
 80007d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080007d4 <__addsf3>:
 80007d4:	0042      	lsls	r2, r0, #1
 80007d6:	bf1f      	itttt	ne
 80007d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007dc:	ea92 0f03 	teqne	r2, r3
 80007e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007e8:	d06a      	beq.n	80008c0 <__addsf3+0xec>
 80007ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007f2:	bfc1      	itttt	gt
 80007f4:	18d2      	addgt	r2, r2, r3
 80007f6:	4041      	eorgt	r1, r0
 80007f8:	4048      	eorgt	r0, r1
 80007fa:	4041      	eorgt	r1, r0
 80007fc:	bfb8      	it	lt
 80007fe:	425b      	neglt	r3, r3
 8000800:	2b19      	cmp	r3, #25
 8000802:	bf88      	it	hi
 8000804:	4770      	bxhi	lr
 8000806:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800080a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800080e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000812:	bf18      	it	ne
 8000814:	4240      	negne	r0, r0
 8000816:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800081a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800081e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000822:	bf18      	it	ne
 8000824:	4249      	negne	r1, r1
 8000826:	ea92 0f03 	teq	r2, r3
 800082a:	d03f      	beq.n	80008ac <__addsf3+0xd8>
 800082c:	f1a2 0201 	sub.w	r2, r2, #1
 8000830:	fa41 fc03 	asr.w	ip, r1, r3
 8000834:	eb10 000c 	adds.w	r0, r0, ip
 8000838:	f1c3 0320 	rsb	r3, r3, #32
 800083c:	fa01 f103 	lsl.w	r1, r1, r3
 8000840:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000844:	d502      	bpl.n	800084c <__addsf3+0x78>
 8000846:	4249      	negs	r1, r1
 8000848:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800084c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000850:	d313      	bcc.n	800087a <__addsf3+0xa6>
 8000852:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000856:	d306      	bcc.n	8000866 <__addsf3+0x92>
 8000858:	0840      	lsrs	r0, r0, #1
 800085a:	ea4f 0131 	mov.w	r1, r1, rrx
 800085e:	f102 0201 	add.w	r2, r2, #1
 8000862:	2afe      	cmp	r2, #254	@ 0xfe
 8000864:	d251      	bcs.n	800090a <__addsf3+0x136>
 8000866:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800086a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800086e:	bf08      	it	eq
 8000870:	f020 0001 	biceq.w	r0, r0, #1
 8000874:	ea40 0003 	orr.w	r0, r0, r3
 8000878:	4770      	bx	lr
 800087a:	0049      	lsls	r1, r1, #1
 800087c:	eb40 0000 	adc.w	r0, r0, r0
 8000880:	3a01      	subs	r2, #1
 8000882:	bf28      	it	cs
 8000884:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000888:	d2ed      	bcs.n	8000866 <__addsf3+0x92>
 800088a:	fab0 fc80 	clz	ip, r0
 800088e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000892:	ebb2 020c 	subs.w	r2, r2, ip
 8000896:	fa00 f00c 	lsl.w	r0, r0, ip
 800089a:	bfaa      	itet	ge
 800089c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008a0:	4252      	neglt	r2, r2
 80008a2:	4318      	orrge	r0, r3
 80008a4:	bfbc      	itt	lt
 80008a6:	40d0      	lsrlt	r0, r2
 80008a8:	4318      	orrlt	r0, r3
 80008aa:	4770      	bx	lr
 80008ac:	f092 0f00 	teq	r2, #0
 80008b0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80008b4:	bf06      	itte	eq
 80008b6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80008ba:	3201      	addeq	r2, #1
 80008bc:	3b01      	subne	r3, #1
 80008be:	e7b5      	b.n	800082c <__addsf3+0x58>
 80008c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008c8:	bf18      	it	ne
 80008ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008ce:	d021      	beq.n	8000914 <__addsf3+0x140>
 80008d0:	ea92 0f03 	teq	r2, r3
 80008d4:	d004      	beq.n	80008e0 <__addsf3+0x10c>
 80008d6:	f092 0f00 	teq	r2, #0
 80008da:	bf08      	it	eq
 80008dc:	4608      	moveq	r0, r1
 80008de:	4770      	bx	lr
 80008e0:	ea90 0f01 	teq	r0, r1
 80008e4:	bf1c      	itt	ne
 80008e6:	2000      	movne	r0, #0
 80008e8:	4770      	bxne	lr
 80008ea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80008ee:	d104      	bne.n	80008fa <__addsf3+0x126>
 80008f0:	0040      	lsls	r0, r0, #1
 80008f2:	bf28      	it	cs
 80008f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80008f8:	4770      	bx	lr
 80008fa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80008fe:	bf3c      	itt	cc
 8000900:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000904:	4770      	bxcc	lr
 8000906:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800090a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800090e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000912:	4770      	bx	lr
 8000914:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000918:	bf16      	itet	ne
 800091a:	4608      	movne	r0, r1
 800091c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000920:	4601      	movne	r1, r0
 8000922:	0242      	lsls	r2, r0, #9
 8000924:	bf06      	itte	eq
 8000926:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800092a:	ea90 0f01 	teqeq	r0, r1
 800092e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000932:	4770      	bx	lr

08000934 <__aeabi_ui2f>:
 8000934:	f04f 0300 	mov.w	r3, #0
 8000938:	e004      	b.n	8000944 <__aeabi_i2f+0x8>
 800093a:	bf00      	nop

0800093c <__aeabi_i2f>:
 800093c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000940:	bf48      	it	mi
 8000942:	4240      	negmi	r0, r0
 8000944:	ea5f 0c00 	movs.w	ip, r0
 8000948:	bf08      	it	eq
 800094a:	4770      	bxeq	lr
 800094c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000950:	4601      	mov	r1, r0
 8000952:	f04f 0000 	mov.w	r0, #0
 8000956:	e01c      	b.n	8000992 <__aeabi_l2f+0x2a>

08000958 <__aeabi_ul2f>:
 8000958:	ea50 0201 	orrs.w	r2, r0, r1
 800095c:	bf08      	it	eq
 800095e:	4770      	bxeq	lr
 8000960:	f04f 0300 	mov.w	r3, #0
 8000964:	e00a      	b.n	800097c <__aeabi_l2f+0x14>
 8000966:	bf00      	nop

08000968 <__aeabi_l2f>:
 8000968:	ea50 0201 	orrs.w	r2, r0, r1
 800096c:	bf08      	it	eq
 800096e:	4770      	bxeq	lr
 8000970:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000974:	d502      	bpl.n	800097c <__aeabi_l2f+0x14>
 8000976:	4240      	negs	r0, r0
 8000978:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800097c:	ea5f 0c01 	movs.w	ip, r1
 8000980:	bf02      	ittt	eq
 8000982:	4684      	moveq	ip, r0
 8000984:	4601      	moveq	r1, r0
 8000986:	2000      	moveq	r0, #0
 8000988:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800098c:	bf08      	it	eq
 800098e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000992:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000996:	fabc f28c 	clz	r2, ip
 800099a:	3a08      	subs	r2, #8
 800099c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009a0:	db10      	blt.n	80009c4 <__aeabi_l2f+0x5c>
 80009a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80009a6:	4463      	add	r3, ip
 80009a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80009ac:	f1c2 0220 	rsb	r2, r2, #32
 80009b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80009b4:	fa20 f202 	lsr.w	r2, r0, r2
 80009b8:	eb43 0002 	adc.w	r0, r3, r2
 80009bc:	bf08      	it	eq
 80009be:	f020 0001 	biceq.w	r0, r0, #1
 80009c2:	4770      	bx	lr
 80009c4:	f102 0220 	add.w	r2, r2, #32
 80009c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80009cc:	f1c2 0220 	rsb	r2, r2, #32
 80009d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009d4:	fa21 f202 	lsr.w	r2, r1, r2
 80009d8:	eb43 0002 	adc.w	r0, r3, r2
 80009dc:	bf08      	it	eq
 80009de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_f2iz>:
 80009e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80009ec:	d30f      	bcc.n	8000a0e <__aeabi_f2iz+0x2a>
 80009ee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80009f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009f6:	d90d      	bls.n	8000a14 <__aeabi_f2iz+0x30>
 80009f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a00:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a04:	fa23 f002 	lsr.w	r0, r3, r2
 8000a08:	bf18      	it	ne
 8000a0a:	4240      	negne	r0, r0
 8000a0c:	4770      	bx	lr
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	4770      	bx	lr
 8000a14:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000a18:	d101      	bne.n	8000a1e <__aeabi_f2iz+0x3a>
 8000a1a:	0242      	lsls	r2, r0, #9
 8000a1c:	d105      	bne.n	8000a2a <__aeabi_f2iz+0x46>
 8000a1e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000a22:	bf08      	it	eq
 8000a24:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0000 	mov.w	r0, #0
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_f2uiz>:
 8000a30:	0042      	lsls	r2, r0, #1
 8000a32:	d20e      	bcs.n	8000a52 <__aeabi_f2uiz+0x22>
 8000a34:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000a38:	d30b      	bcc.n	8000a52 <__aeabi_f2uiz+0x22>
 8000a3a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000a3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a42:	d409      	bmi.n	8000a58 <__aeabi_f2uiz+0x28>
 8000a44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0000 	mov.w	r0, #0
 8000a56:	4770      	bx	lr
 8000a58:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000a5c:	d101      	bne.n	8000a62 <__aeabi_f2uiz+0x32>
 8000a5e:	0242      	lsls	r2, r0, #9
 8000a60:	d102      	bne.n	8000a68 <__aeabi_f2uiz+0x38>
 8000a62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_uldivmod>:
 8000a70:	b953      	cbnz	r3, 8000a88 <__aeabi_uldivmod+0x18>
 8000a72:	b94a      	cbnz	r2, 8000a88 <__aeabi_uldivmod+0x18>
 8000a74:	2900      	cmp	r1, #0
 8000a76:	bf08      	it	eq
 8000a78:	2800      	cmpeq	r0, #0
 8000a7a:	bf1c      	itt	ne
 8000a7c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a80:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a84:	f000 b96a 	b.w	8000d5c <__aeabi_idiv0>
 8000a88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a90:	f000 f806 	bl	8000aa0 <__udivmoddi4>
 8000a94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a9c:	b004      	add	sp, #16
 8000a9e:	4770      	bx	lr

08000aa0 <__udivmoddi4>:
 8000aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa4:	9d08      	ldr	r5, [sp, #32]
 8000aa6:	460c      	mov	r4, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14e      	bne.n	8000b4a <__udivmoddi4+0xaa>
 8000aac:	4694      	mov	ip, r2
 8000aae:	458c      	cmp	ip, r1
 8000ab0:	4686      	mov	lr, r0
 8000ab2:	fab2 f282 	clz	r2, r2
 8000ab6:	d962      	bls.n	8000b7e <__udivmoddi4+0xde>
 8000ab8:	b14a      	cbz	r2, 8000ace <__udivmoddi4+0x2e>
 8000aba:	f1c2 0320 	rsb	r3, r2, #32
 8000abe:	4091      	lsls	r1, r2
 8000ac0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac8:	4319      	orrs	r1, r3
 8000aca:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f f68c 	uxth.w	r6, ip
 8000ad6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ada:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ade:	fb07 1114 	mls	r1, r7, r4, r1
 8000ae2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae6:	fb04 f106 	mul.w	r1, r4, r6
 8000aea:	4299      	cmp	r1, r3
 8000aec:	d90a      	bls.n	8000b04 <__udivmoddi4+0x64>
 8000aee:	eb1c 0303 	adds.w	r3, ip, r3
 8000af2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000af6:	f080 8112 	bcs.w	8000d1e <__udivmoddi4+0x27e>
 8000afa:	4299      	cmp	r1, r3
 8000afc:	f240 810f 	bls.w	8000d1e <__udivmoddi4+0x27e>
 8000b00:	3c02      	subs	r4, #2
 8000b02:	4463      	add	r3, ip
 8000b04:	1a59      	subs	r1, r3, r1
 8000b06:	fa1f f38e 	uxth.w	r3, lr
 8000b0a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0e:	fb07 1110 	mls	r1, r7, r0, r1
 8000b12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b16:	fb00 f606 	mul.w	r6, r0, r6
 8000b1a:	429e      	cmp	r6, r3
 8000b1c:	d90a      	bls.n	8000b34 <__udivmoddi4+0x94>
 8000b1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b22:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b26:	f080 80fc 	bcs.w	8000d22 <__udivmoddi4+0x282>
 8000b2a:	429e      	cmp	r6, r3
 8000b2c:	f240 80f9 	bls.w	8000d22 <__udivmoddi4+0x282>
 8000b30:	4463      	add	r3, ip
 8000b32:	3802      	subs	r0, #2
 8000b34:	1b9b      	subs	r3, r3, r6
 8000b36:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	b11d      	cbz	r5, 8000b46 <__udivmoddi4+0xa6>
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	2200      	movs	r2, #0
 8000b42:	e9c5 3200 	strd	r3, r2, [r5]
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d905      	bls.n	8000b5a <__udivmoddi4+0xba>
 8000b4e:	b10d      	cbz	r5, 8000b54 <__udivmoddi4+0xb4>
 8000b50:	e9c5 0100 	strd	r0, r1, [r5]
 8000b54:	2100      	movs	r1, #0
 8000b56:	4608      	mov	r0, r1
 8000b58:	e7f5      	b.n	8000b46 <__udivmoddi4+0xa6>
 8000b5a:	fab3 f183 	clz	r1, r3
 8000b5e:	2900      	cmp	r1, #0
 8000b60:	d146      	bne.n	8000bf0 <__udivmoddi4+0x150>
 8000b62:	42a3      	cmp	r3, r4
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xcc>
 8000b66:	4290      	cmp	r0, r2
 8000b68:	f0c0 80f0 	bcc.w	8000d4c <__udivmoddi4+0x2ac>
 8000b6c:	1a86      	subs	r6, r0, r2
 8000b6e:	eb64 0303 	sbc.w	r3, r4, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	2d00      	cmp	r5, #0
 8000b76:	d0e6      	beq.n	8000b46 <__udivmoddi4+0xa6>
 8000b78:	e9c5 6300 	strd	r6, r3, [r5]
 8000b7c:	e7e3      	b.n	8000b46 <__udivmoddi4+0xa6>
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	f040 8090 	bne.w	8000ca4 <__udivmoddi4+0x204>
 8000b84:	eba1 040c 	sub.w	r4, r1, ip
 8000b88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b8c:	fa1f f78c 	uxth.w	r7, ip
 8000b90:	2101      	movs	r1, #1
 8000b92:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b9a:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ba2:	fb07 f006 	mul.w	r0, r7, r6
 8000ba6:	4298      	cmp	r0, r3
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x11c>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bb2:	d202      	bcs.n	8000bba <__udivmoddi4+0x11a>
 8000bb4:	4298      	cmp	r0, r3
 8000bb6:	f200 80cd 	bhi.w	8000d54 <__udivmoddi4+0x2b4>
 8000bba:	4626      	mov	r6, r4
 8000bbc:	1a1c      	subs	r4, r3, r0
 8000bbe:	fa1f f38e 	uxth.w	r3, lr
 8000bc2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc6:	fb08 4410 	mls	r4, r8, r0, r4
 8000bca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bce:	fb00 f707 	mul.w	r7, r0, r7
 8000bd2:	429f      	cmp	r7, r3
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x148>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x146>
 8000be0:	429f      	cmp	r7, r3
 8000be2:	f200 80b0 	bhi.w	8000d46 <__udivmoddi4+0x2a6>
 8000be6:	4620      	mov	r0, r4
 8000be8:	1bdb      	subs	r3, r3, r7
 8000bea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bee:	e7a5      	b.n	8000b3c <__udivmoddi4+0x9c>
 8000bf0:	f1c1 0620 	rsb	r6, r1, #32
 8000bf4:	408b      	lsls	r3, r1
 8000bf6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bfa:	431f      	orrs	r7, r3
 8000bfc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c00:	fa04 f301 	lsl.w	r3, r4, r1
 8000c04:	ea43 030c 	orr.w	r3, r3, ip
 8000c08:	40f4      	lsrs	r4, r6
 8000c0a:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0e:	0c38      	lsrs	r0, r7, #16
 8000c10:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c14:	fbb4 fef0 	udiv	lr, r4, r0
 8000c18:	fa1f fc87 	uxth.w	ip, r7
 8000c1c:	fb00 441e 	mls	r4, r0, lr, r4
 8000c20:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c24:	fb0e f90c 	mul.w	r9, lr, ip
 8000c28:	45a1      	cmp	r9, r4
 8000c2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2e:	d90a      	bls.n	8000c46 <__udivmoddi4+0x1a6>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c36:	f080 8084 	bcs.w	8000d42 <__udivmoddi4+0x2a2>
 8000c3a:	45a1      	cmp	r9, r4
 8000c3c:	f240 8081 	bls.w	8000d42 <__udivmoddi4+0x2a2>
 8000c40:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c44:	443c      	add	r4, r7
 8000c46:	eba4 0409 	sub.w	r4, r4, r9
 8000c4a:	fa1f f983 	uxth.w	r9, r3
 8000c4e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c52:	fb00 4413 	mls	r4, r0, r3, r4
 8000c56:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c5a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5e:	45a4      	cmp	ip, r4
 8000c60:	d907      	bls.n	8000c72 <__udivmoddi4+0x1d2>
 8000c62:	193c      	adds	r4, r7, r4
 8000c64:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c68:	d267      	bcs.n	8000d3a <__udivmoddi4+0x29a>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	d965      	bls.n	8000d3a <__udivmoddi4+0x29a>
 8000c6e:	3b02      	subs	r3, #2
 8000c70:	443c      	add	r4, r7
 8000c72:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c76:	fba0 9302 	umull	r9, r3, r0, r2
 8000c7a:	eba4 040c 	sub.w	r4, r4, ip
 8000c7e:	429c      	cmp	r4, r3
 8000c80:	46ce      	mov	lr, r9
 8000c82:	469c      	mov	ip, r3
 8000c84:	d351      	bcc.n	8000d2a <__udivmoddi4+0x28a>
 8000c86:	d04e      	beq.n	8000d26 <__udivmoddi4+0x286>
 8000c88:	b155      	cbz	r5, 8000ca0 <__udivmoddi4+0x200>
 8000c8a:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8e:	eb64 040c 	sbc.w	r4, r4, ip
 8000c92:	fa04 f606 	lsl.w	r6, r4, r6
 8000c96:	40cb      	lsrs	r3, r1
 8000c98:	431e      	orrs	r6, r3
 8000c9a:	40cc      	lsrs	r4, r1
 8000c9c:	e9c5 6400 	strd	r6, r4, [r5]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	e750      	b.n	8000b46 <__udivmoddi4+0xa6>
 8000ca4:	f1c2 0320 	rsb	r3, r2, #32
 8000ca8:	fa20 f103 	lsr.w	r1, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	430c      	orrs	r4, r1
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc8:	fb08 3110 	mls	r1, r8, r0, r3
 8000ccc:	0c23      	lsrs	r3, r4, #16
 8000cce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd2:	fb00 f107 	mul.w	r1, r0, r7
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x24c>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000ce2:	d22c      	bcs.n	8000d3e <__udivmoddi4+0x29e>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d92a      	bls.n	8000d3e <__udivmoddi4+0x29e>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf4:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb01 f307 	mul.w	r3, r1, r7
 8000d00:	42a3      	cmp	r3, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x276>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d0c:	d213      	bcs.n	8000d36 <__udivmoddi4+0x296>
 8000d0e:	42a3      	cmp	r3, r4
 8000d10:	d911      	bls.n	8000d36 <__udivmoddi4+0x296>
 8000d12:	3902      	subs	r1, #2
 8000d14:	4464      	add	r4, ip
 8000d16:	1ae4      	subs	r4, r4, r3
 8000d18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d1c:	e739      	b.n	8000b92 <__udivmoddi4+0xf2>
 8000d1e:	4604      	mov	r4, r0
 8000d20:	e6f0      	b.n	8000b04 <__udivmoddi4+0x64>
 8000d22:	4608      	mov	r0, r1
 8000d24:	e706      	b.n	8000b34 <__udivmoddi4+0x94>
 8000d26:	45c8      	cmp	r8, r9
 8000d28:	d2ae      	bcs.n	8000c88 <__udivmoddi4+0x1e8>
 8000d2a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d32:	3801      	subs	r0, #1
 8000d34:	e7a8      	b.n	8000c88 <__udivmoddi4+0x1e8>
 8000d36:	4631      	mov	r1, r6
 8000d38:	e7ed      	b.n	8000d16 <__udivmoddi4+0x276>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	e799      	b.n	8000c72 <__udivmoddi4+0x1d2>
 8000d3e:	4630      	mov	r0, r6
 8000d40:	e7d4      	b.n	8000cec <__udivmoddi4+0x24c>
 8000d42:	46d6      	mov	lr, sl
 8000d44:	e77f      	b.n	8000c46 <__udivmoddi4+0x1a6>
 8000d46:	4463      	add	r3, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e74d      	b.n	8000be8 <__udivmoddi4+0x148>
 8000d4c:	4606      	mov	r6, r0
 8000d4e:	4623      	mov	r3, r4
 8000d50:	4608      	mov	r0, r1
 8000d52:	e70f      	b.n	8000b74 <__udivmoddi4+0xd4>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	4463      	add	r3, ip
 8000d58:	e730      	b.n	8000bbc <__udivmoddi4+0x11c>
 8000d5a:	bf00      	nop

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d7c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d84:	68fb      	ldr	r3, [r7, #12]
}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d9c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000da6:	4013      	ands	r3, r2
 8000da8:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000db8:	4b23      	ldr	r3, [pc, #140]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000dba:	4a24      	ldr	r2, [pc, #144]	@ (8000e4c <MX_ADC_Init+0x98>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dbe:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000dc0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dc4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000dda:	2204      	movs	r2, #4
 8000ddc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000de4:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000dea:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000df0:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000df6:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e04:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e12:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000e18:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000e24:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <MX_ADC_Init+0x94>)
 8000e34:	f002 fa68 	bl	8003308 <HAL_ADC_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 8000e3e:	f000 fe6b 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000160 	.word	0x20000160
 8000e4c:	40012400 	.word	0x40012400

08000e50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <HAL_ADC_MspInit+0x24>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d103      	bne.n	8000e6a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e62:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e66:	f7ff ff7b 	bl	8000d60 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40012400 	.word	0x40012400

08000e78 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <HAL_ADC_MspDeInit+0x24>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d103      	bne.n	8000e92 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000e8a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e8e:	f7ff ff7f 	bl	8000d90 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40012400 	.word	0x40012400

08000ea0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <SYS_InitMeasurement+0x14>)
 8000ea6:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <SYS_InitMeasurement+0x18>)
 8000ea8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000160 	.word	0x20000160
 8000eb8:	40012400 	.word	0x40012400

08000ebc <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000eca:	f000 f869 	bl	8000fa0 <SYS_GetBatteryLevel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000ed2:	482d      	ldr	r0, [pc, #180]	@ (8000f88 <SYS_GetTemperatureLevel+0xcc>)
 8000ed4:	f000 f898 	bl	8001008 <ADC_ReadChannels>
 8000ed8:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000eda:	4b2c      	ldr	r3, [pc, #176]	@ (8000f8c <SYS_GetTemperatureLevel+0xd0>)
 8000edc:	881a      	ldrh	r2, [r3, #0]
 8000ede:	4b2c      	ldr	r3, [pc, #176]	@ (8000f90 <SYS_GetTemperatureLevel+0xd4>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d026      	beq.n	8000f34 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000ee6:	4b29      	ldr	r3, [pc, #164]	@ (8000f8c <SYS_GetTemperatureLevel+0xd0>)
 8000ee8:	881a      	ldrh	r2, [r3, #0]
 8000eea:	4b29      	ldr	r3, [pc, #164]	@ (8000f90 <SYS_GetTemperatureLevel+0xd4>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d01c      	beq.n	8000f2c <SYS_GetTemperatureLevel+0x70>
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	4a25      	ldr	r2, [pc, #148]	@ (8000f94 <SYS_GetTemperatureLevel+0xd8>)
 8000efe:	fba2 2303 	umull	r2, r3, r2, r3
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b22      	ldr	r3, [pc, #136]	@ (8000f90 <SYS_GetTemperatureLevel+0xd4>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2264      	movs	r2, #100	@ 0x64
 8000f0e:	fb03 f202 	mul.w	r2, r3, r2
 8000f12:	4b1e      	ldr	r3, [pc, #120]	@ (8000f8c <SYS_GetTemperatureLevel+0xd0>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	4619      	mov	r1, r3
 8000f18:	4b1d      	ldr	r3, [pc, #116]	@ (8000f90 <SYS_GetTemperatureLevel+0xd4>)
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	1acb      	subs	r3, r1, r3
 8000f1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	331e      	adds	r3, #30
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	b21b      	sxth	r3, r3
 8000f2a:	e001      	b.n	8000f30 <SYS_GetTemperatureLevel+0x74>
 8000f2c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000f30:	803b      	strh	r3, [r7, #0]
 8000f32:	e01d      	b.n	8000f70 <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	fb03 f202 	mul.w	r2, r3, r2
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <SYS_GetTemperatureLevel+0xdc>)
 8000f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8000f42:	1ad2      	subs	r2, r2, r3
 8000f44:	0852      	lsrs	r2, r2, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	0adb      	lsrs	r3, r3, #11
 8000f4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f4e:	fb02 f303 	mul.w	r3, r2, r3
 8000f52:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 8000f56:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 8000f5a:	4a10      	ldr	r2, [pc, #64]	@ (8000f9c <SYS_GetTemperatureLevel+0xe0>)
 8000f5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f60:	1292      	asrs	r2, r2, #10
 8000f62:	17db      	asrs	r3, r3, #31
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	331e      	adds	r3, #30
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	b21b      	sxth	r3, r3
 8000f6e:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8000f70:	883b      	ldrh	r3, [r7, #0]
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 8000f7a:	883b      	ldrh	r3, [r7, #0]
 8000f7c:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	b0001000 	.word	0xb0001000
 8000f8c:	1fff75c8 	.word	0x1fff75c8
 8000f90:	1fff75a8 	.word	0x1fff75a8
 8000f94:	09ee009f 	.word	0x09ee009f
 8000f98:	00100101 	.word	0x00100101
 8000f9c:	68db8bad 	.word	0x68db8bad

08000fa0 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000fae:	4813      	ldr	r0, [pc, #76]	@ (8000ffc <SYS_GetBatteryLevel+0x5c>)
 8000fb0:	f000 f82a 	bl	8001008 <ADC_ReadChannels>
 8000fb4:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	80fb      	strh	r3, [r7, #6]
 8000fc0:	e016      	b.n	8000ff0 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <SYS_GetBatteryLevel+0x60>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d00b      	beq.n	8000fe6 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <SYS_GetBatteryLevel+0x60>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8000fd8:	fb03 f202 	mul.w	r2, r3, r2
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	80fb      	strh	r3, [r7, #6]
 8000fe4:	e004      	b.n	8000ff0 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000fe6:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <SYS_GetBatteryLevel+0x64>)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	b4002000 	.word	0xb4002000
 8001000:	1fff75aa 	.word	0x1fff75aa
 8001004:	004c08d8 	.word	0x004c08d8

08001008 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001020:	f7ff fec8 	bl	8000db4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001024:	481a      	ldr	r0, [pc, #104]	@ (8001090 <ADC_ReadChannels+0x88>)
 8001026:	f002 ff8e 	bl	8003f46 <HAL_ADCEx_Calibration_Start>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001030:	f000 fd72 	bl	8001b18 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800103c:	2300      	movs	r3, #0
 800103e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	4619      	mov	r1, r3
 8001046:	4812      	ldr	r0, [pc, #72]	@ (8001090 <ADC_ReadChannels+0x88>)
 8001048:	f002 fc9a 	bl	8003980 <HAL_ADC_ConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001052:	f000 fd61 	bl	8001b18 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001056:	480e      	ldr	r0, [pc, #56]	@ (8001090 <ADC_ReadChannels+0x88>)
 8001058:	f002 fb76 	bl	8003748 <HAL_ADC_Start>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001062:	f000 fd59 	bl	8001b18 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001066:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800106a:	4809      	ldr	r0, [pc, #36]	@ (8001090 <ADC_ReadChannels+0x88>)
 800106c:	f002 fbe4 	bl	8003838 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001070:	4807      	ldr	r0, [pc, #28]	@ (8001090 <ADC_ReadChannels+0x88>)
 8001072:	f002 fbaf 	bl	80037d4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001076:	4806      	ldr	r0, [pc, #24]	@ (8001090 <ADC_ReadChannels+0x88>)
 8001078:	f002 fc75 	bl	8003966 <HAL_ADC_GetValue>
 800107c:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800107e:	4804      	ldr	r0, [pc, #16]	@ (8001090 <ADC_ReadChannels+0x88>)
 8001080:	f002 fad6 	bl	8003630 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001084:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000160 	.word	0x20000160

08001094 <LL_AHB1_GRP1_EnableClock>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800109c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80010a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4013      	ands	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010b8:	68fb      	ldr	r3, [r7, #12]
}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010c8:	2004      	movs	r0, #4
 80010ca:	f7ff ffe3 	bl	8001094 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ce:	2001      	movs	r0, #1
 80010d0:	f7ff ffe0 	bl	8001094 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	200b      	movs	r0, #11
 80010da:	f003 f8fc 	bl	80042d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010de:	200b      	movs	r0, #11
 80010e0:	f003 f913 	bl	800430a <HAL_NVIC_EnableIRQ>

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <FLASH_IF_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
FLASH_IF_StatusTypedef FLASH_IF_Init(void *pAllocRamBuffer)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Init_1 */

  /* USER CODE END FLASH_IF_Init_1 */
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 80010f4:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <FLASH_IF_Init+0x20>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN FLASH_IF_Init_2 */

  /* USER CODE END FLASH_IF_Init_2 */
  return ret_status;
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	200001c4 	.word	0x200001c4

0800110c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001118:	23ff      	movs	r3, #255	@ 0xff
 800111a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001122:	d311      	bcc.n	8001148 <FLASH_IF_Write+0x3c>
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <FLASH_IF_Write+0x48>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	029a      	lsls	r2, r3, #10
 800112a:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <FLASH_IF_Write+0x4c>)
 800112c:	4013      	ands	r3, r2
 800112e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001132:	3b01      	subs	r3, #1
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4293      	cmp	r3, r2
 8001138:	d306      	bcc.n	8001148 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f000 f85a 	bl	80011f8 <FLASH_IF_INT_Write>
 8001144:	4603      	mov	r3, r0
 8001146:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001148:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	1fff75e0 	.word	0x1fff75e0
 8001158:	03fffc00 	.word	0x03fffc00

0800115c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001168:	23ff      	movs	r3, #255	@ 0xff
 800116a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001172:	d311      	bcc.n	8001198 <FLASH_IF_Read+0x3c>
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <FLASH_IF_Read+0x48>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	029a      	lsls	r2, r3, #10
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <FLASH_IF_Read+0x4c>)
 800117c:	4013      	ands	r3, r2
 800117e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001182:	3b01      	subs	r3, #1
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	4293      	cmp	r3, r2
 8001188:	d306      	bcc.n	8001198 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f000 f93a 	bl	8001408 <FLASH_IF_INT_Read>
 8001194:	4603      	mov	r3, r0
 8001196:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001198:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	1fff75e0 	.word	0x1fff75e0
 80011a8:	03fffc00 	.word	0x03fffc00

080011ac <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80011b6:	23ff      	movs	r3, #255	@ 0xff
 80011b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80011c0:	d310      	bcc.n	80011e4 <FLASH_IF_Erase+0x38>
 80011c2:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <FLASH_IF_Erase+0x44>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	029a      	lsls	r2, r3, #10
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <FLASH_IF_Erase+0x48>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80011d0:	3b01      	subs	r3, #1
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d305      	bcc.n	80011e4 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80011d8:	6839      	ldr	r1, [r7, #0]
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f932 	bl	8001444 <FLASH_IF_INT_Erase>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80011e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	1fff75e0 	.word	0x1fff75e0
 80011f4:	03fffc00 	.word	0x03fffc00

080011f8 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b090      	sub	sp, #64	@ 0x40
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00c      	beq.n	8001236 <FLASH_IF_INT_Write+0x3e>
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d009      	beq.n	8001236 <FLASH_IF_INT_Write+0x3e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	2b00      	cmp	r3, #0
 800122a:	d104      	bne.n	8001236 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001236:	f06f 0305 	mvn.w	r3, #5
 800123a:	e0da      	b.n	80013f2 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800123c:	f000 f992 	bl	8001564 <FLASH_IF_INT_Clear_Error>
 8001240:	4603      	mov	r3, r0
 8001242:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 8001246:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800124a:	2b00      	cmp	r3, #0
 800124c:	f040 80cf 	bne.w	80013ee <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001250:	f003 fcb2 	bl	8004bb8 <HAL_FLASH_Unlock>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	f040 80c6 	bne.w	80013e8 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 800125c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800125e:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001262:	4b66      	ldr	r3, [pc, #408]	@ (80013fc <FLASH_IF_INT_Write+0x204>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	0299      	lsls	r1, r3, #10
 8001268:	4b65      	ldr	r3, [pc, #404]	@ (8001400 <FLASH_IF_INT_Write+0x208>)
 800126a:	400b      	ands	r3, r1
 800126c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001270:	fb01 f303 	mul.w	r3, r1, r3
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	0adb      	lsrs	r3, r3, #11
 8001278:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800127a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001284:	3b01      	subs	r3, #1
 8001286:	4a5d      	ldr	r2, [pc, #372]	@ (80013fc <FLASH_IF_INT_Write+0x204>)
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	0291      	lsls	r1, r2, #10
 800128c:	4a5c      	ldr	r2, [pc, #368]	@ (8001400 <FLASH_IF_INT_Write+0x208>)
 800128e:	400a      	ands	r2, r1
 8001290:	fbb3 f1f2 	udiv	r1, r3, r2
 8001294:	fb01 f202 	mul.w	r2, r1, r2
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	0ada      	lsrs	r2, r3, #11
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	3301      	adds	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d905      	bls.n	80012b6 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80012aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012b0:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80012b4:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ba:	e089      	b.n	80013d0 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80012bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012be:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80012c2:	02db      	lsls	r3, r3, #11
 80012c4:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80012c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 f925 	bl	8001518 <FLASH_IF_INT_IsEmpty>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d031      	beq.n	8001338 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 80012d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001404 <FLASH_IF_INT_Write+0x20c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d103      	bne.n	80012e4 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 80012dc:	23fa      	movs	r3, #250	@ 0xfa
 80012de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 80012e2:	e07e      	b.n	80013e2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80012e4:	4b47      	ldr	r3, [pc, #284]	@ (8001404 <FLASH_IF_INT_Write+0x20c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6939      	ldr	r1, [r7, #16]
 80012ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f88a 	bl	8001408 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80012f4:	4b43      	ldr	r3, [pc, #268]	@ (8001404 <FLASH_IF_INT_Write+0x20c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012fe:	4413      	add	r3, r2
 8001300:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001304:	b292      	uxth	r2, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f01a fc50 	bl	801bbac <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f896 	bl	8001444 <FLASH_IF_INT_Erase>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800131e:	23fe      	movs	r3, #254	@ 0xfe
 8001320:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001324:	e05d      	b.n	80013e2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 800132a:	4b36      	ldr	r3, [pc, #216]	@ (8001404 <FLASH_IF_INT_Write+0x20c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001330:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	e005      	b.n	8001344 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 800133c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800133e:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001342:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001348:	e026      	b.n	8001398 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800134a:	6a3a      	ldr	r2, [r7, #32]
 800134c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800134e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001356:	2001      	movs	r0, #1
 8001358:	f003 fbea 	bl	8004b30 <HAL_FLASH_Program>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d113      	bne.n	800138a <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001368:	6a3a      	ldr	r2, [r7, #32]
 800136a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800136c:	4413      	add	r3, r2
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	4299      	cmp	r1, r3
 8001374:	bf08      	it	eq
 8001376:	4290      	cmpeq	r0, r2
 8001378:	d003      	beq.n	8001382 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 800137a:	23fc      	movs	r3, #252	@ 0xfc
 800137c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 8001380:	e00e      	b.n	80013a0 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	3308      	adds	r3, #8
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
 8001388:	e003      	b.n	8001392 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 800138a:	23fc      	movs	r3, #252	@ 0xfc
 800138c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 8001390:	e006      	b.n	80013a0 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001394:	3308      	adds	r3, #8
 8001396:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001398:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	429a      	cmp	r2, r3
 800139e:	d3d4      	bcc.n	800134a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80013a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d11b      	bne.n	80013e0 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80013a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80013aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ac:	4413      	add	r3, r2
 80013ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 80013b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013b4:	4413      	add	r3, r2
 80013b6:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80013c2:	bf28      	it	cs
 80013c4:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80013c8:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80013ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013cc:	3301      	adds	r3, #1
 80013ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	4413      	add	r3, r2
 80013d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013d8:	429a      	cmp	r2, r3
 80013da:	f4ff af6f 	bcc.w	80012bc <FLASH_IF_INT_Write+0xc4>
 80013de:	e000      	b.n	80013e2 <FLASH_IF_INT_Write+0x1ea>
          break;
 80013e0:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80013e2:	f003 fc0b 	bl	8004bfc <HAL_FLASH_Lock>
 80013e6:	e002      	b.n	80013ee <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80013e8:	23fb      	movs	r3, #251	@ 0xfb
 80013ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 80013ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3740      	adds	r7, #64	@ 0x40
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	1fff75e0 	.word	0x1fff75e0
 8001400:	03fffc00 	.word	0x03fffc00
 8001404:	200001c4 	.word	0x200001c4

08001408 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <FLASH_IF_INT_Read+0x1c>
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001424:	f06f 0305 	mvn.w	r3, #5
 8001428:	e008      	b.n	800143c <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	b29b      	uxth	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f01a fbba 	bl	801bbac <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001438:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001464:	f06f 0305 	mvn.w	r3, #5
 8001468:	e04e      	b.n	8001508 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800146a:	f000 f87b 	bl	8001564 <FLASH_IF_INT_Clear_Error>
 800146e:	4603      	mov	r3, r0
 8001470:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001472:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d144      	bne.n	8001504 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 800147a:	f003 fb9d 	bl	8004bb8 <HAL_FLASH_Unlock>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d13d      	bne.n	8001500 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001484:	2302      	movs	r3, #2
 8001486:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 800148e:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <FLASH_IF_INT_Erase+0xcc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	0299      	lsls	r1, r3, #10
 8001494:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <FLASH_IF_INT_Erase+0xd0>)
 8001496:	400b      	ands	r3, r1
 8001498:	fbb2 f1f3 	udiv	r1, r2, r3
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	0adb      	lsrs	r3, r3, #11
 80014a4:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80014b0:	3b01      	subs	r3, #1
 80014b2:	4a17      	ldr	r2, [pc, #92]	@ (8001510 <FLASH_IF_INT_Erase+0xcc>)
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	0291      	lsls	r1, r2, #10
 80014b8:	4a16      	ldr	r2, [pc, #88]	@ (8001514 <FLASH_IF_INT_Erase+0xd0>)
 80014ba:	400a      	ands	r2, r1
 80014bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80014c0:	fb01 f202 	mul.w	r2, r1, r2
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	0ada      	lsrs	r2, r3, #11
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	3301      	adds	r3, #1
 80014ce:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80014d0:	f107 0214 	add.w	r2, r7, #20
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 fc6e 	bl	8004dbc <HAL_FLASHEx_Erase>
 80014e0:	4603      	mov	r3, r0
 80014e2:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 80014e4:	7fbb      	ldrb	r3, [r7, #30]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80014ea:	7fbb      	ldrb	r3, [r7, #30]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d101      	bne.n	80014f4 <FLASH_IF_INT_Erase+0xb0>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e001      	b.n	80014f8 <FLASH_IF_INT_Erase+0xb4>
 80014f4:	f06f 0301 	mvn.w	r3, #1
 80014f8:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80014fa:	f003 fb7f 	bl	8004bfc <HAL_FLASH_Lock>
 80014fe:	e001      	b.n	8001504 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001500:	23fb      	movs	r3, #251	@ 0xfb
 8001502:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001504:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	1fff75e0 	.word	0x1fff75e0
 8001514:	03fffc00 	.word	0x03fffc00

08001518 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	e011      	b.n	8001550 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001536:	bf08      	it	eq
 8001538:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 800153c:	d002      	beq.n	8001544 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 800153e:	2301      	movs	r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
      break;
 8001542:	e009      	b.n	8001558 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3308      	adds	r3, #8
 8001548:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	3308      	adds	r3, #8
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d3e9      	bcc.n	800152c <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001558:	68fb      	ldr	r3, [r7, #12]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 800156a:	23fb      	movs	r3, #251	@ 0xfb
 800156c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800156e:	f003 fb23 	bl	8004bb8 <HAL_FLASH_Unlock>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d110      	bne.n	800159a <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001578:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <FLASH_IF_INT_Clear_Error+0x44>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <FLASH_IF_INT_Clear_Error+0x44>)
 800157e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001586:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 800158a:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 800158c:	f003 fb36 	bl	8004bfc <HAL_FLASH_Lock>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	58004000 	.word	0x58004000

080015ac <LL_AHB2_GRP1_EnableClock>:
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4013      	ands	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015d0:	68fb      	ldr	r3, [r7, #12]
}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f0:	2002      	movs	r0, #2
 80015f2:	f7ff ffdb 	bl	80015ac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff ffd8 	bl	80015ac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fc:	2080      	movs	r0, #128	@ 0x80
 80015fe:	f7ff ffd5 	bl	80015ac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	2004      	movs	r0, #4
 8001604:	f7ff ffd2 	bl	80015ac <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, JOIN_LED_Pin|RF_CTRL1_Pin|EWDT_DONE_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800160e:	4840      	ldr	r0, [pc, #256]	@ (8001710 <MX_GPIO_Init+0x134>)
 8001610:	f003 fed6 	bl	80053c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PERIF_EN_Pin|PULSES_EN_Pin, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800161a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800161e:	f003 fecf 	bl	80053c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_CTRL2_GPIO_Port, RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001628:	483a      	ldr	r0, [pc, #232]	@ (8001714 <MX_GPIO_Init+0x138>)
 800162a:	f003 fec9 	bl	80053c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PULSES_LED_GPIO_Port, PULSES_LED_Pin, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001638:	f003 fec2 	bl	80053c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB3 PB4 PB7 PB0
                           PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_0
 800163c:	f241 0399 	movw	r3, #4249	@ 0x1099
 8001640:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001642:	2303      	movs	r3, #3
 8001644:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	4619      	mov	r1, r3
 800164e:	4830      	ldr	r0, [pc, #192]	@ (8001710 <MX_GPIO_Init+0x134>)
 8001650:	f003 fc88 	bl	8004f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = JOIN_LED_Pin|RF_CTRL1_Pin|EWDT_DONE_Pin;
 8001654:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8001658:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	4829      	ldr	r0, [pc, #164]	@ (8001710 <MX_GPIO_Init+0x134>)
 800166c:	f003 fc7a 	bl	8004f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA13 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001670:	f246 03f3 	movw	r3, #24819	@ 0x60f3
 8001674:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001676:	2303      	movs	r3, #3
 8001678:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	4619      	mov	r1, r3
 8001682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001686:	f003 fc6d 	bl	8004f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PERIF_EN_Pin|PULSES_EN_Pin|PULSES_LED_Pin;
 800168a:	f44f 4303 	mov.w	r3, #33536	@ 0x8300
 800168e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a4:	f003 fc5e 	bl	8004f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016a8:	2308      	movs	r3, #8
 80016aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ac:	2303      	movs	r3, #3
 80016ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4817      	ldr	r0, [pc, #92]	@ (8001718 <MX_GPIO_Init+0x13c>)
 80016ba:	f003 fc53 	bl	8004f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EWDT_WAKE_Pin;
 80016be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EWDT_WAKE_GPIO_Port, &GPIO_InitStruct);
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d6:	f003 fc45 	bl	8004f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_CTRL2_Pin;
 80016da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RF_CTRL2_GPIO_Port, &GPIO_InitStruct);
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	4619      	mov	r1, r3
 80016f0:	4808      	ldr	r0, [pc, #32]	@ (8001714 <MX_GPIO_Init+0x138>)
 80016f2:	f003 fc37 	bl	8004f64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2029      	movs	r0, #41	@ 0x29
 80016fc:	f002 fdeb 	bl	80042d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001700:	2029      	movs	r0, #41	@ 0x29
 8001702:	f002 fe02 	bl	800430a <HAL_NVIC_EnableIRQ>

}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	48000400 	.word	0x48000400
 8001714:	48000800 	.word	0x48000800
 8001718:	48001c00 	.word	0x48001c00

0800171c <LL_AHB2_GRP1_EnableClock>:
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001728:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800172a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4313      	orrs	r3, r2
 8001732:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001734:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001738:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001740:	68fb      	ldr	r3, [r7, #12]
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <LL_APB1_GRP1_EnableClock>:
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001758:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800175a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4313      	orrs	r3, r2
 8001762:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001768:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4013      	ands	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001770:	68fb      	ldr	r3, [r7, #12]
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001780:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <MX_I2C2_Init+0x74>)
 8001782:	4a1c      	ldr	r2, [pc, #112]	@ (80017f4 <MX_I2C2_Init+0x78>)
 8001784:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 8001786:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <MX_I2C2_Init+0x74>)
 8001788:	4a1b      	ldr	r2, [pc, #108]	@ (80017f8 <MX_I2C2_Init+0x7c>)
 800178a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800178c:	4b18      	ldr	r3, [pc, #96]	@ (80017f0 <MX_I2C2_Init+0x74>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001792:	4b17      	ldr	r3, [pc, #92]	@ (80017f0 <MX_I2C2_Init+0x74>)
 8001794:	2201      	movs	r2, #1
 8001796:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001798:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <MX_I2C2_Init+0x74>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800179e:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <MX_I2C2_Init+0x74>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017a4:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <MX_I2C2_Init+0x74>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <MX_I2C2_Init+0x74>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <MX_I2C2_Init+0x74>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017b6:	480e      	ldr	r0, [pc, #56]	@ (80017f0 <MX_I2C2_Init+0x74>)
 80017b8:	f003 fe32 	bl	8005420 <HAL_I2C_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017c2:	f000 f9a9 	bl	8001b18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017c6:	2100      	movs	r1, #0
 80017c8:	4809      	ldr	r0, [pc, #36]	@ (80017f0 <MX_I2C2_Init+0x74>)
 80017ca:	f004 fb0d 	bl	8005de8 <HAL_I2CEx_ConfigAnalogFilter>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017d4:	f000 f9a0 	bl	8001b18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017d8:	2100      	movs	r1, #0
 80017da:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <MX_I2C2_Init+0x74>)
 80017dc:	f004 fb4e 	bl	8005e7c <HAL_I2CEx_ConfigDigitalFilter>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017e6:	f000 f997 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200001c8 	.word	0x200001c8
 80017f4:	40005800 	.word	0x40005800
 80017f8:	2010091a 	.word	0x2010091a

080017fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b096      	sub	sp, #88	@ 0x58
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2238      	movs	r2, #56	@ 0x38
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f01b fc87 	bl	801d130 <memset>
  if(i2cHandle->Instance==I2C2)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a17      	ldr	r2, [pc, #92]	@ (8001884 <HAL_I2C_MspInit+0x88>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d126      	bne.n	800187a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800182c:	2380      	movs	r3, #128	@ 0x80
 800182e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8001830:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <HAL_I2C_MspInit+0x8c>)
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	4618      	mov	r0, r3
 800183a:	f006 f8d9 	bl	80079f0 <HAL_RCCEx_PeriphCLKConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001844:	f000 f968 	bl	8001b18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001848:	2001      	movs	r0, #1
 800184a:	f7ff ff67 	bl	800171c <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA11     ------> I2C2_SDA
    PA12     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800184e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001852:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001854:	2312      	movs	r3, #18
 8001856:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001860:	2304      	movs	r3, #4
 8001862:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001868:	4619      	mov	r1, r3
 800186a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800186e:	f003 fb79 	bl	8004f64 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001872:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001876:	f7ff ff69 	bl	800174c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800187a:	bf00      	nop
 800187c:	3758      	adds	r7, #88	@ 0x58
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40005800 	.word	0x40005800
 8001888:	000c0400 	.word	0x000c0400

0800188c <LL_AHB2_GRP1_EnableClock>:
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001898:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800189a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4013      	ands	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b0:	68fb      	ldr	r3, [r7, #12]
}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <LL_APB1_GRP1_EnableClock>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80018ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018e0:	68fb      	ldr	r3, [r7, #12]
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80018f0:	4b16      	ldr	r3, [pc, #88]	@ (800194c <MX_LPTIM1_Init+0x60>)
 80018f2:	4a17      	ldr	r2, [pc, #92]	@ (8001950 <MX_LPTIM1_Init+0x64>)
 80018f4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <MX_LPTIM1_Init+0x60>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80018fc:	4b13      	ldr	r3, [pc, #76]	@ (800194c <MX_LPTIM1_Init+0x60>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8001902:	4b12      	ldr	r3, [pc, #72]	@ (800194c <MX_LPTIM1_Init+0x60>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8001908:	4b10      	ldr	r3, [pc, #64]	@ (800194c <MX_LPTIM1_Init+0x60>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800190e:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <MX_LPTIM1_Init+0x60>)
 8001910:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001914:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001916:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <MX_LPTIM1_Init+0x60>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800191c:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <MX_LPTIM1_Init+0x60>)
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8001922:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <MX_LPTIM1_Init+0x60>)
 8001924:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001928:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800192a:	4b08      	ldr	r3, [pc, #32]	@ (800194c <MX_LPTIM1_Init+0x60>)
 800192c:	2200      	movs	r2, #0
 800192e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <MX_LPTIM1_Init+0x60>)
 8001932:	2200      	movs	r2, #0
 8001934:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001936:	4805      	ldr	r0, [pc, #20]	@ (800194c <MX_LPTIM1_Init+0x60>)
 8001938:	f004 fb5c 	bl	8005ff4 <HAL_LPTIM_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8001942:	f000 f8e9 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	2000021c 	.word	0x2000021c
 8001950:	40007c00 	.word	0x40007c00

08001954 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b096      	sub	sp, #88	@ 0x58
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	2238      	movs	r2, #56	@ 0x38
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f01b fbdb 	bl	801d130 <memset>
  if(lptimHandle->Instance==LPTIM1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a17      	ldr	r2, [pc, #92]	@ (80019dc <HAL_LPTIM_MspInit+0x88>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d126      	bne.n	80019d2 <HAL_LPTIM_MspInit+0x7e>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001984:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001988:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800198a:	f04f 130c 	mov.w	r3, #786444	@ 0xc000c
 800198e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	4618      	mov	r0, r3
 8001996:	f006 f82b 	bl	80079f0 <HAL_RCCEx_PeriphCLKConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 80019a0:	f000 f8ba 	bl	8001b18 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80019a4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80019a8:	f7ff ff88 	bl	80018bc <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ac:	2002      	movs	r0, #2
 80019ae:	f7ff ff6d 	bl	800188c <LL_AHB2_GRP1_EnableClock>
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    */
    GPIO_InitStruct.Pin = PULSES_IN_Pin;
 80019b2:	2320      	movs	r3, #32
 80019b4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 80019c2:	2301      	movs	r3, #1
 80019c4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(PULSES_IN_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80019ca:	4619      	mov	r1, r3
 80019cc:	4804      	ldr	r0, [pc, #16]	@ (80019e0 <HAL_LPTIM_MspInit+0x8c>)
 80019ce:	f003 fac9 	bl	8004f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 80019d2:	bf00      	nop
 80019d4:	3758      	adds	r7, #88	@ 0x58
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40007c00 	.word	0x40007c00
 80019e0:	48000400 	.word	0x48000400

080019e4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80019ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019f4:	f023 0218 	bic.w	r2, r3, #24
 80019f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
	...

08001a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a14:	f001 fa3e 	bl	8002e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a18:	f000 f824 	bl	8001a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a1c:	f7ff fdde 	bl	80015dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001a20:	f7ff fb50 	bl	80010c4 <MX_DMA_Init>
  MX_ADC_Init();
 8001a24:	f7ff f9c6 	bl	8000db4 <MX_ADC_Init>
  MX_RTC_Init();
 8001a28:	f000 f8a4 	bl	8001b74 <MX_RTC_Init>
  MX_LoRaWAN_Init();
 8001a2c:	f009 fb74 	bl	800b118 <MX_LoRaWAN_Init>
  MX_LPTIM1_Init();
 8001a30:	f7ff ff5c 	bl	80018ec <MX_LPTIM1_Init>
  MX_USART2_UART_Init();
 8001a34:	f000 ffd6 	bl	80029e4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001a38:	f7ff fea0 	bl	800177c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_LPTIM_Counter_Start(&hlptim1, 0xFFFF) != HAL_OK) {
 8001a3c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001a40:	4806      	ldr	r0, [pc, #24]	@ (8001a5c <main+0x4c>)
 8001a42:	f004 fb9f 	bl	8006184 <HAL_LPTIM_Counter_Start>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <main+0x40>
  	Error_Handler();
 8001a4c:	f000 f864 	bl	8001b18 <Error_Handler>
  }

  shtc3_sleep(&hi2c2);
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <main+0x50>)
 8001a52:	f000 f91f 	bl	8001c94 <shtc3_sleep>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001a56:	f009 fb67 	bl	800b128 <MX_LoRaWAN_Process>
 8001a5a:	e7fc      	b.n	8001a56 <main+0x46>
 8001a5c:	2000021c 	.word	0x2000021c
 8001a60:	200001c8 	.word	0x200001c8

08001a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b09a      	sub	sp, #104	@ 0x68
 8001a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6a:	f107 0320 	add.w	r3, r7, #32
 8001a6e:	2248      	movs	r2, #72	@ 0x48
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f01b fb5c 	bl	801d130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a78:	f107 0308 	add.w	r3, r7, #8
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
 8001a88:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a8a:	f004 fd41 	bl	8006510 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff ffa8 	bl	80019e4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a94:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <SystemClock_Config+0xb0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b14 <SystemClock_Config+0xb0>)
 8001a9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <SystemClock_Config+0xb0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001ab0:	2324      	movs	r3, #36	@ 0x24
 8001ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ab4:	2381      	movs	r3, #129	@ 0x81
 8001ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001ac0:	23b0      	movs	r3, #176	@ 0xb0
 8001ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac8:	f107 0320 	add.w	r3, r7, #32
 8001acc:	4618      	mov	r0, r3
 8001ace:	f005 f86b 	bl	8006ba8 <HAL_RCC_OscConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001ad8:	f000 f81e 	bl	8001b18 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001adc:	234f      	movs	r3, #79	@ 0x4f
 8001ade:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001af4:	f107 0308 	add.w	r3, r7, #8
 8001af8:	2102      	movs	r1, #2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f005 fbd6 	bl	80072ac <HAL_RCC_ClockConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b06:	f000 f807 	bl	8001b18 <Error_Handler>
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	3768      	adds	r7, #104	@ 0x68
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	58000400 	.word	0x58000400

08001b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1c:	b672      	cpsid	i
}
 8001b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <Error_Handler+0x8>

08001b24 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001b28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <LL_APB1_GRP1_EnableClock>:
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b68:	68fb      	ldr	r3, [r7, #12]
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	@ 0x30
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	222c      	movs	r2, #44	@ 0x2c
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f01b fad5 	bl	801d130 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b86:	4b23      	ldr	r3, [pc, #140]	@ (8001c14 <MX_RTC_Init+0xa0>)
 8001b88:	4a23      	ldr	r2, [pc, #140]	@ (8001c18 <MX_RTC_Init+0xa4>)
 8001b8a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001b8c:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <MX_RTC_Init+0xa0>)
 8001b8e:	221f      	movs	r2, #31
 8001b90:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b92:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <MX_RTC_Init+0xa0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b98:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <MX_RTC_Init+0xa0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c14 <MX_RTC_Init+0xa0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <MX_RTC_Init+0xa0>)
 8001ba6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001baa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001bac:	4b19      	ldr	r3, [pc, #100]	@ (8001c14 <MX_RTC_Init+0xa0>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001bb2:	4b18      	ldr	r3, [pc, #96]	@ (8001c14 <MX_RTC_Init+0xa0>)
 8001bb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bb8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bba:	4816      	ldr	r0, [pc, #88]	@ (8001c14 <MX_RTC_Init+0xa0>)
 8001bbc:	f006 f832 	bl	8007c24 <HAL_RTC_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001bc6:	f7ff ffa7 	bl	8001b18 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001bca:	4812      	ldr	r0, [pc, #72]	@ (8001c14 <MX_RTC_Init+0xa0>)
 8001bcc:	f006 fb28 	bl	8008220 <HAL_RTCEx_SetSSRU_IT>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001bd6:	f7ff ff9f 	bl	8001b18 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_YES;
 8001bda:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001bde:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001be8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001bec:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001bee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4806      	ldr	r0, [pc, #24]	@ (8001c14 <MX_RTC_Init+0xa0>)
 8001bfc:	f006 f894 	bl	8007d28 <HAL_RTC_SetAlarm_IT>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_RTC_Init+0x96>
  {
    Error_Handler();
 8001c06:	f7ff ff87 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	3730      	adds	r7, #48	@ 0x30
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000258 	.word	0x20000258
 8001c18:	40002800 	.word	0x40002800

08001c1c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b090      	sub	sp, #64	@ 0x40
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c24:	f107 0308 	add.w	r3, r7, #8
 8001c28:	2238      	movs	r2, #56	@ 0x38
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f01b fa7f 	bl	801d130 <memset>
  if(rtcHandle->Instance==RTC)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a16      	ldr	r2, [pc, #88]	@ (8001c90 <HAL_RTC_MspInit+0x74>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d125      	bne.n	8001c88 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c40:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c46:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f005 fecf 	bl	80079f0 <HAL_RCCEx_PeriphCLKConfig>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001c58:	f7ff ff5e 	bl	8001b18 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c5c:	f7ff ff62 	bl	8001b24 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001c60:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001c64:	f7ff ff6e 	bl	8001b44 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	f002 fb32 	bl	80042d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001c72:	2002      	movs	r0, #2
 8001c74:	f002 fb49 	bl	800430a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	202a      	movs	r0, #42	@ 0x2a
 8001c7e:	f002 fb2a 	bl	80042d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001c82:	202a      	movs	r0, #42	@ 0x2a
 8001c84:	f002 fb41 	bl	800430a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c88:	bf00      	nop
 8001c8a:	3740      	adds	r7, #64	@ 0x40
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40002800 	.word	0x40002800

08001c94 <shtc3_sleep>:

  return 0;
}

uint32_t shtc3_sleep(I2C_HandleTypeDef *hi2c)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	6078      	str	r0, [r7, #4]
  uint16_t command = SHTC3_CMD_SLEEP;
 8001c9c:	f649 03b0 	movw	r3, #39088	@ 0x98b0
 8001ca0:	817b      	strh	r3, [r7, #10]
  uint32_t res = HAL_I2C_Master_Transmit(hi2c, SHTC3_ADDRESS_WRITE, (uint8_t*)&command, 2, 100);
 8001ca2:	f107 020a 	add.w	r2, r7, #10
 8001ca6:	2364      	movs	r3, #100	@ 0x64
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2302      	movs	r3, #2
 8001cac:	21e0      	movs	r1, #224	@ 0xe0
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f003 fc46 	bl	8005540 <HAL_I2C_Master_Transmit>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60fb      	str	r3, [r7, #12]

  return res == HAL_OK;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	bf0c      	ite	eq
 8001cbe:	2301      	moveq	r3, #1
 8001cc0:	2300      	movne	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <shtc3_wakeup>:

uint32_t shtc3_wakeup(I2C_HandleTypeDef *hi2c)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	6078      	str	r0, [r7, #4]
  uint16_t command = SHTC3_CMD_WAKEUP;
 8001cd4:	f241 7335 	movw	r3, #5941	@ 0x1735
 8001cd8:	817b      	strh	r3, [r7, #10]
  uint32_t res = HAL_I2C_Master_Transmit(hi2c, SHTC3_ADDRESS_WRITE, (uint8_t*)&command, 2, 100);
 8001cda:	f107 020a 	add.w	r2, r7, #10
 8001cde:	2364      	movs	r3, #100	@ 0x64
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	21e0      	movs	r1, #224	@ 0xe0
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f003 fc2a 	bl	8005540 <HAL_I2C_Master_Transmit>
 8001cec:	4603      	mov	r3, r0
 8001cee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(10);
 8001cf0:	200a      	movs	r0, #10
 8001cf2:	f000 fb9f 	bl	8002434 <HAL_Delay>

  return res == HAL_OK;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf0c      	ite	eq
 8001cfc:	2301      	moveq	r3, #1
 8001cfe:	2300      	movne	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <checkCRC>:


static uint32_t checkCRC(uint16_t value, uint8_t expected)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	460a      	mov	r2, r1
 8001d14:	80fb      	strh	r3, [r7, #6]
 8001d16:	4613      	mov	r3, r2
 8001d18:	717b      	strb	r3, [r7, #5]
	uint8_t data[2] = {value >> 8, value & 0xFF};
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	723b      	strb	r3, [r7, #8]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	727b      	strb	r3, [r7, #9]
	uint8_t crc = 0xFF;
 8001d2a:	23ff      	movs	r3, #255	@ 0xff
 8001d2c:	73fb      	strb	r3, [r7, #15]
	uint8_t poly = 0x31;
 8001d2e:	2331      	movs	r3, #49	@ 0x31
 8001d30:	733b      	strb	r3, [r7, #12]

	for (uint8_t indi = 0; indi < 2; indi++) {
 8001d32:	2300      	movs	r3, #0
 8001d34:	73bb      	strb	r3, [r7, #14]
 8001d36:	e023      	b.n	8001d80 <checkCRC+0x76>
		crc ^= data[indi];
 8001d38:	7bbb      	ldrb	r3, [r7, #14]
 8001d3a:	3310      	adds	r3, #16
 8001d3c:	443b      	add	r3, r7
 8001d3e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	4053      	eors	r3, r2
 8001d46:	73fb      	strb	r3, [r7, #15]
		for (uint8_t indj = 0; indj < 8; indj++) {
 8001d48:	2300      	movs	r3, #0
 8001d4a:	737b      	strb	r3, [r7, #13]
 8001d4c:	e012      	b.n	8001d74 <checkCRC+0x6a>
			if (crc & 0x80) {
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	da08      	bge.n	8001d68 <checkCRC+0x5e>
				crc = (uint8_t)((crc << 1) ^ poly);
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	b25a      	sxtb	r2, r3
 8001d5c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001d60:	4053      	eors	r3, r2
 8001d62:	b25b      	sxtb	r3, r3
 8001d64:	73fb      	strb	r3, [r7, #15]
 8001d66:	e002      	b.n	8001d6e <checkCRC+0x64>
			} else {
				crc <<= 1;
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
		for (uint8_t indj = 0; indj < 8; indj++) {
 8001d6e:	7b7b      	ldrb	r3, [r7, #13]
 8001d70:	3301      	adds	r3, #1
 8001d72:	737b      	strb	r3, [r7, #13]
 8001d74:	7b7b      	ldrb	r3, [r7, #13]
 8001d76:	2b07      	cmp	r3, #7
 8001d78:	d9e9      	bls.n	8001d4e <checkCRC+0x44>
	for (uint8_t indi = 0; indi < 2; indi++) {
 8001d7a:	7bbb      	ldrb	r3, [r7, #14]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	73bb      	strb	r3, [r7, #14]
 8001d80:	7bbb      	ldrb	r3, [r7, #14]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d9d8      	bls.n	8001d38 <checkCRC+0x2e>
			}
		}
	}

	if (expected ^ crc)	{
 8001d86:	797a      	ldrb	r2, [r7, #5]
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d001      	beq.n	8001d92 <checkCRC+0x88>
    return 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <checkCRC+0x8a>
	}
  return 1;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
	...

08001da0 <_read_values>:

static uint32_t _read_values(uint8_t* data, int32_t* out_temp, int32_t* out_hum)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  // Check CRC
  uint32_t raw_hum = data[0] << 8 | data[1];
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	3201      	adds	r2, #1
 8001db6:	7812      	ldrb	r2, [r2, #0]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
  uint32_t raw_temp = data[3] << 8 | data[4];
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3303      	adds	r3, #3
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	3204      	adds	r2, #4
 8001dc8:	7812      	ldrb	r2, [r2, #0]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]

  if (!checkCRC(raw_hum, data[2])) {
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f7ff ff95 	bl	8001d0a <checkCRC>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <_read_values+0x4a>
    return 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e02e      	b.n	8001e48 <_read_values+0xa8>
  }
  if (!checkCRC(raw_temp, data[5])) {
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3305      	adds	r3, #5
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4619      	mov	r1, r3
 8001df6:	4610      	mov	r0, r2
 8001df8:	f7ff ff87 	bl	8001d0a <checkCRC>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <_read_values+0x66>
    return 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e020      	b.n	8001e48 <_read_values+0xa8>
  }

  // Convert values
  if (out_hum) {
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <_read_values+0x82>
    *out_hum = raw_hum * 100 / 65535;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2264      	movs	r2, #100	@ 0x64
 8001e10:	fb02 f303 	mul.w	r3, r2, r3
 8001e14:	4a0e      	ldr	r2, [pc, #56]	@ (8001e50 <_read_values+0xb0>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0bdb      	lsrs	r3, r3, #15
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	601a      	str	r2, [r3, #0]
  }
  if (out_temp) {
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00e      	beq.n	8001e46 <_read_values+0xa6>
    *out_temp = raw_temp * 17500 / 65535 - 4500;
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	f244 425c 	movw	r2, #17500	@ 0x445c
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	4a07      	ldr	r2, [pc, #28]	@ (8001e50 <_read_values+0xb0>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	0bdb      	lsrs	r3, r3, #15
 8001e3a:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 8001e3e:	3b14      	subs	r3, #20
 8001e40:	461a      	mov	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	601a      	str	r2, [r3, #0]
  }

  return 1;
 8001e46:	2301      	movs	r3, #1
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	80008001 	.word	0x80008001

08001e54 <_perform_measurements>:

static uint32_t _perform_measurements(I2C_HandleTypeDef *hi2c, uint16_t command, int32_t* out_temp, int32_t* out_hum)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	@ 0x28
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	460b      	mov	r3, r1
 8001e62:	817b      	strh	r3, [r7, #10]
	shtc3_wakeup(hi2c);
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f7ff ff31 	bl	8001ccc <shtc3_wakeup>

  uint8_t result[6];

  uint32_t res = HAL_I2C_Master_Transmit(hi2c, SHTC3_ADDRESS_WRITE, (uint8_t*)&command, 2, 100);
 8001e6a:	f107 020a 	add.w	r2, r7, #10
 8001e6e:	2364      	movs	r3, #100	@ 0x64
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2302      	movs	r3, #2
 8001e74:	21e0      	movs	r1, #224	@ 0xe0
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f003 fb62 	bl	8005540 <HAL_I2C_Master_Transmit>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	61fb      	str	r3, [r7, #28]
  if (res != HAL_OK) {
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <_perform_measurements+0x36>
    return 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e017      	b.n	8001eba <_perform_measurements+0x66>
  }

  res = HAL_I2C_Master_Receive(hi2c, SHTC3_ADDRESS_READ, result, 6, 100);
 8001e8a:	f107 0214 	add.w	r2, r7, #20
 8001e8e:	2364      	movs	r3, #100	@ 0x64
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2306      	movs	r3, #6
 8001e94:	21e1      	movs	r1, #225	@ 0xe1
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f003 fc46 	bl	8005728 <HAL_I2C_Master_Receive>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	61fb      	str	r3, [r7, #28]
  if (res != HAL_OK) {
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <_perform_measurements+0x56>
    return 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e007      	b.n	8001eba <_perform_measurements+0x66>
  }

  return _read_values(result, out_temp, out_hum);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ff74 	bl	8001da0 <_read_values>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3720      	adds	r7, #32
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <shtc3_perform_measurements>:

uint32_t shtc3_perform_measurements(I2C_HandleTypeDef *hi2c, int32_t* out_temp, int32_t* out_hum)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
  return _perform_measurements(hi2c, SHTC3_CMD_CLK_STRETCH_READ_HUM_FIRST, out_temp, out_hum);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	f242 415c 	movw	r1, #9308	@ 0x245c
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f7ff ffbc 	bl	8001e54 <_perform_measurements>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001eec:	4b03      	ldr	r3, [pc, #12]	@ (8001efc <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	58000400 	.word	0x58000400

08001f00 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001f1c:	f001 f826 	bl	8002f6c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001f20:	f7ff ffe2 	bl	8001ee8 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001f24:	2001      	movs	r0, #1
 8001f26:	f004 fb85 	bl	8006634 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001f32:	f001 f829 	bl	8002f88 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001f36:	f000 ff03 	bl	8002d40 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001f42:	f001 f813 	bl	8002f6c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001f46:	2101      	movs	r1, #1
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f004 faef 	bl	800652c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001f56:	f001 f817 	bl	8002f88 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f6e:	bf00      	nop
 8001f70:	e7fd      	b.n	8001f6e <NMI_Handler+0x4>

08001f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f76:	bf00      	nop
 8001f78:	e7fd      	b.n	8001f76 <HardFault_Handler+0x4>

08001f7a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7e:	bf00      	nop
 8001f80:	e7fd      	b.n	8001f7e <MemManage_Handler+0x4>

08001f82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f86:	bf00      	nop
 8001f88:	e7fd      	b.n	8001f86 <BusFault_Handler+0x4>

08001f8a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8e:	bf00      	nop
 8001f90:	e7fd      	b.n	8001f8e <UsageFault_Handler+0x4>

08001f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fba:	f000 ffc5 	bl	8002f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001fc8:	4802      	ldr	r0, [pc, #8]	@ (8001fd4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001fca:	f006 f965 	bl	8008298 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000258 	.word	0x20000258

08001fd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001fdc:	4802      	ldr	r0, [pc, #8]	@ (8001fe8 <DMA1_Channel1_IRQHandler+0x10>)
 8001fde:	f002 fc37 	bl	8004850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000338 	.word	0x20000338

08001fec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ff0:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <USART2_IRQHandler+0x10>)
 8001ff2:	f006 ff9b 	bl	8008f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200002a4 	.word	0x200002a4

08002000 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EWDT_WAKE_Pin);
 8002004:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002008:	f003 f9f2 	bl	80053f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}

08002010 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002014:	4802      	ldr	r0, [pc, #8]	@ (8002020 <RTC_Alarm_IRQHandler+0x10>)
 8002016:	f005 ffef 	bl	8007ff8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000258 	.word	0x20000258

08002024 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <SUBGHZ_Radio_IRQHandler+0x10>)
 800202a:	f006 fca3 	bl	8008974 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000290 	.word	0x20000290

08002038 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002044:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002046:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4313      	orrs	r3, r2
 800204e:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002054:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4013      	ands	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800205c:	68fb      	ldr	r3, [r7, #12]
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <MX_SUBGHZ_Init+0x20>)
 800206e:	2210      	movs	r2, #16
 8002070:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002072:	4805      	ldr	r0, [pc, #20]	@ (8002088 <MX_SUBGHZ_Init+0x20>)
 8002074:	f006 f9fc 	bl	8008470 <HAL_SUBGHZ_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800207e:	f7ff fd4b 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000290 	.word	0x20000290

0800208c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002094:	2001      	movs	r0, #1
 8002096:	f7ff ffcf 	bl	8002038 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	2032      	movs	r0, #50	@ 0x32
 80020a0:	f002 f919 	bl	80042d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80020a4:	2032      	movs	r0, #50	@ 0x32
 80020a6:	f002 f930 	bl	800430a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <LL_RCC_SetClkAfterWakeFromStop>:
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80020ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80020c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80020dc:	4b02      	ldr	r3, [pc, #8]	@ (80020e8 <LL_FLASH_GetUDN+0x10>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	1fff7580 	.word	0x1fff7580

080020ec <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80020f0:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <LL_FLASH_GetDeviceID+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	b2db      	uxtb	r3, r3
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	1fff7584 	.word	0x1fff7584

08002104 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002108:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <LL_FLASH_GetSTCompanyID+0x14>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0a1b      	lsrs	r3, r3, #8
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	1fff7584 	.word	0x1fff7584

0800211c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002120:	2000      	movs	r0, #0
 8002122:	f7ff ffc6 	bl	80020b2 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002126:	f01a facd 	bl	801c6c4 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800212a:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <SystemApp_Init+0x48>)
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002130:	f000 f98c 	bl	800244c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002134:	f01a fd56 	bl	801cbe4 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002138:	480b      	ldr	r0, [pc, #44]	@ (8002168 <SystemApp_Init+0x4c>)
 800213a:	f01a fe01 	bl	801cd40 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800213e:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <SystemApp_Init+0x50>)
 8002140:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002144:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002146:	2002      	movs	r0, #2
 8002148:	f01a fe08 	bl	801cd5c <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 800214c:	f7fe fea8 	bl	8000ea0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002150:	f000 f9b8 	bl	80024c4 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002154:	f019 fc84 	bl	801ba60 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002158:	2101      	movs	r1, #1
 800215a:	2001      	movs	r0, #1
 800215c:	f019 fcc0 	bl	801bae0 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	2000029c 	.word	0x2000029c
 8002168:	08002381 	.word	0x08002381
 800216c:	58004000 	.word	0x58004000

08002170 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002174:	f019 fce4 	bl	801bb40 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}

0800217c <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002186:	f7fe ff0b 	bl	8000fa0 <SYS_GetBatteryLevel>
 800218a:	4603      	mov	r3, r0
 800218c:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800218e:	88bb      	ldrh	r3, [r7, #4]
 8002190:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002194:	4293      	cmp	r3, r2
 8002196:	d902      	bls.n	800219e <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002198:	23fe      	movs	r3, #254	@ 0xfe
 800219a:	71fb      	strb	r3, [r7, #7]
 800219c:	e014      	b.n	80021c8 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 800219e:	88bb      	ldrh	r3, [r7, #4]
 80021a0:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80021a4:	d202      	bcs.n	80021ac <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	71fb      	strb	r3, [r7, #7]
 80021aa:	e00d      	b.n	80021c8 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80021ac:	88bb      	ldrh	r3, [r7, #4]
 80021ae:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 80021b2:	461a      	mov	r2, r3
 80021b4:	4613      	mov	r3, r2
 80021b6:	01db      	lsls	r3, r3, #7
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	461a      	mov	r2, r3
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <GetBatteryLevel+0x98>)
 80021c0:	fba3 2302 	umull	r2, r3, r3, r2
 80021c4:	09db      	lsrs	r3, r3, #7
 80021c6:	71fb      	strb	r3, [r7, #7]
  }

  /* USER CODE BEGIN GetBatteryLevel_2 */
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80021c8:	f7fe feea 	bl	8000fa0 <SYS_GetBatteryLevel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	80bb      	strh	r3, [r7, #4]

  if (batteryLevelmV > 3300)
 80021d0:	88bb      	ldrh	r3, [r7, #4]
 80021d2:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d902      	bls.n	80021e0 <GetBatteryLevel+0x64>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80021da:	23fe      	movs	r3, #254	@ 0xfe
 80021dc:	71fb      	strb	r3, [r7, #7]
 80021de:	e014      	b.n	800220a <GetBatteryLevel+0x8e>
  }
  else if (batteryLevelmV < VDD_MIN)
 80021e0:	88bb      	ldrh	r3, [r7, #4]
 80021e2:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80021e6:	d202      	bcs.n	80021ee <GetBatteryLevel+0x72>
  {
    batteryLevel = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	71fb      	strb	r3, [r7, #7]
 80021ec:	e00d      	b.n	800220a <GetBatteryLevel+0x8e>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (3300 - VDD_MIN));
 80021ee:	88bb      	ldrh	r3, [r7, #4]
 80021f0:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 80021f4:	461a      	mov	r2, r3
 80021f6:	4613      	mov	r3, r2
 80021f8:	01db      	lsls	r3, r3, #7
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	461a      	mov	r2, r3
 8002200:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <GetBatteryLevel+0x9c>)
 8002202:	fba3 2302 	umull	r2, r3, r3, r2
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	71fb      	strb	r3, [r7, #7]
  }
  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 800220a:	79fb      	ldrb	r3, [r7, #7]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	1b4e81b5 	.word	0x1b4e81b5
 8002218:	057619f1 	.word	0x057619f1

0800221c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	4618      	mov	r0, r3
 800222a:	f000 f919 	bl	8002460 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fbd7 	bl	80009e4 <__aeabi_f2iz>
 8002236:	4603      	mov	r3, r0
 8002238:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 800223a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002246:	b590      	push	{r4, r7, lr}
 8002248:	b087      	sub	sp, #28
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002252:	f7ff ff41 	bl	80020d8 <LL_FLASH_GetUDN>
 8002256:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800225e:	d138      	bne.n	80022d2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002260:	f000 fea0 	bl	8002fa4 <HAL_GetUIDw0>
 8002264:	4604      	mov	r4, r0
 8002266:	f000 feb1 	bl	8002fcc <HAL_GetUIDw2>
 800226a:	4603      	mov	r3, r0
 800226c:	4423      	add	r3, r4
 800226e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002270:	f000 fea2 	bl	8002fb8 <HAL_GetUIDw1>
 8002274:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	0e1a      	lsrs	r2, r3, #24
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3307      	adds	r3, #7
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	0c1a      	lsrs	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3306      	adds	r3, #6
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	0a1a      	lsrs	r2, r3, #8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3305      	adds	r3, #5
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3304      	adds	r3, #4
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	0e1a      	lsrs	r2, r3, #24
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3303      	adds	r3, #3
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	0c1a      	lsrs	r2, r3, #16
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3302      	adds	r3, #2
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	0a1a      	lsrs	r2, r3, #8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3301      	adds	r3, #1
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80022d0:	e031      	b.n	8002336 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3307      	adds	r3, #7
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	0a1a      	lsrs	r2, r3, #8
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3306      	adds	r3, #6
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	0c1a      	lsrs	r2, r3, #16
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3305      	adds	r3, #5
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	0e1a      	lsrs	r2, r3, #24
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3304      	adds	r3, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002300:	f7ff fef4 	bl	80020ec <LL_FLASH_GetDeviceID>
 8002304:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3303      	adds	r3, #3
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002310:	f7ff fef8 	bl	8002104 <LL_FLASH_GetSTCompanyID>
 8002314:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3302      	adds	r3, #2
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	0a1a      	lsrs	r2, r3, #8
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3301      	adds	r3, #1
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	0c1b      	lsrs	r3, r3, #16
 8002330:	b2da      	uxtb	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	701a      	strb	r2, [r3, #0]
}
 8002336:	bf00      	nop
 8002338:	371c      	adds	r7, #28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd90      	pop	{r4, r7, pc}

0800233e <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 800233e:	b590      	push	{r4, r7, lr}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8002346:	f7ff fec7 	bl	80020d8 <LL_FLASH_GetUDN>
 800234a:	4602      	mov	r2, r0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002358:	d10d      	bne.n	8002376 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800235a:	f000 fe23 	bl	8002fa4 <HAL_GetUIDw0>
 800235e:	4604      	mov	r4, r0
 8002360:	f000 fe2a 	bl	8002fb8 <HAL_GetUIDw1>
 8002364:	4603      	mov	r3, r0
 8002366:	405c      	eors	r4, r3
 8002368:	f000 fe30 	bl	8002fcc <HAL_GetUIDw2>
 800236c:	4603      	mov	r3, r0
 800236e:	ea84 0203 	eor.w	r2, r4, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	bd90      	pop	{r4, r7, pc}
	...

08002380 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af02      	add	r7, sp, #8
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	4618      	mov	r0, r3
 8002390:	f019 fce6 	bl	801bd60 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800239a:	9200      	str	r2, [sp, #0]
 800239c:	4a07      	ldr	r2, [pc, #28]	@ (80023bc <TimestampNow+0x3c>)
 800239e:	2110      	movs	r1, #16
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f81d 	bl	80023e0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7fd fee6 	bl	8000178 <strlen>
 80023ac:	4603      	mov	r3, r0
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	0801d2a0 	.word	0x0801d2a0

080023c0 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80023c4:	2101      	movs	r1, #1
 80023c6:	2002      	movs	r0, #2
 80023c8:	f019 fb5a 	bl	801ba80 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80023cc:	bf00      	nop
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80023d4:	2100      	movs	r1, #0
 80023d6:	2002      	movs	r0, #2
 80023d8:	f019 fb52 	bl	801ba80 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}

080023e0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80023e0:	b40c      	push	{r2, r3}
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80023ec:	f107 031c 	add.w	r3, r7, #28
 80023f0:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80023f2:	6839      	ldr	r1, [r7, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f019 fe83 	bl	801c104 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002408:	b002      	add	sp, #8
 800240a:	4770      	bx	lr

0800240c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002416:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <HAL_GetTick+0x24>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800241e:	f000 f91d 	bl	800265c <TIMER_IF_GetTimerValue>
 8002422:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002424:	687b      	ldr	r3, [r7, #4]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000029c 	.word	0x2000029c

08002434 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f993 	bl	800276a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8002450:	f000 fdc6 	bl	8002fe0 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002454:	f000 fdca 	bl	8002fec <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002458:	f000 fdce 	bl	8002ff8 <HAL_DBGMCU_DisableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}

08002460 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002468:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <EnvSensors_Read+0x50>)
 800246a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 800246c:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <EnvSensors_Read+0x54>)
 800246e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002470:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <EnvSensors_Read+0x58>)
 8002472:	60fb      	str	r3, [r7, #12]
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8002474:	f7fe fd22 	bl	8000ebc <SYS_GetTemperatureLevel>
 8002478:	4603      	mov	r3, r0
 800247a:	121b      	asrs	r3, r3, #8
 800247c:	b21b      	sxth	r3, r3
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fa5c 	bl	800093c <__aeabi_i2f>
 8002484:	4603      	mov	r3, r0
 8002486:	613b      	str	r3, [r7, #16]
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a07      	ldr	r2, [pc, #28]	@ (80024bc <EnvSensors_Read+0x5c>)
 800249e:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a07      	ldr	r2, [pc, #28]	@ (80024c0 <EnvSensors_Read+0x60>)
 80024a4:	611a      	str	r2, [r3, #16]

  return 0;
 80024a6:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	42480000 	.word	0x42480000
 80024b4:	41900000 	.word	0x41900000
 80024b8:	447a0000 	.word	0x447a0000
 80024bc:	003e090d 	.word	0x003e090d
 80024c0:	000503ab 	.word	0x000503ab

080024c4 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
 80024ce:	687b      	ldr	r3, [r7, #4]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002506:	4b14      	ldr	r3, [pc, #80]	@ (8002558 <TIMER_IF_Init+0x5c>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	f083 0301 	eor.w	r3, r3, #1
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01b      	beq.n	800254c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002514:	4b11      	ldr	r3, [pc, #68]	@ (800255c <TIMER_IF_Init+0x60>)
 8002516:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800251a:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 800251c:	f7ff fb2a 	bl	8001b74 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002520:	f000 f856 	bl	80025d0 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002524:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002528:	480c      	ldr	r0, [pc, #48]	@ (800255c <TIMER_IF_Init+0x60>)
 800252a:	f005 fd09 	bl	8007f40 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800252e:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <TIMER_IF_Init+0x60>)
 8002530:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002534:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002536:	4809      	ldr	r0, [pc, #36]	@ (800255c <TIMER_IF_Init+0x60>)
 8002538:	f005 fe40 	bl	80081bc <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 800253c:	2000      	movs	r0, #0
 800253e:	f000 f9d3 	bl	80028e8 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002542:	f000 f85f 	bl	8002604 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002546:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <TIMER_IF_Init+0x5c>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 800254c:	79fb      	ldrb	r3, [r7, #7]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	2000029d 	.word	0x2000029d
 800255c:	20000258 	.word	0x20000258

08002560 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08e      	sub	sp, #56	@ 0x38
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800256e:	f107 0308 	add.w	r3, r7, #8
 8002572:	222c      	movs	r2, #44	@ 0x2c
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f01a fdda 	bl	801d130 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 800257c:	f000 f828 	bl	80025d0 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002580:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <TIMER_IF_StartTimer+0x68>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	4413      	add	r3, r2
 8002588:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	43db      	mvns	r3, r3
 8002592:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002598:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800259c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800259e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025a2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80025a4:	f107 0308 	add.w	r3, r7, #8
 80025a8:	2201      	movs	r2, #1
 80025aa:	4619      	mov	r1, r3
 80025ac:	4807      	ldr	r0, [pc, #28]	@ (80025cc <TIMER_IF_StartTimer+0x6c>)
 80025ae:	f005 fbbb 	bl	8007d28 <HAL_RTC_SetAlarm_IT>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80025b8:	f7ff faae 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80025bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3738      	adds	r7, #56	@ 0x38
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200002a0 	.word	0x200002a0
 80025cc:	20000258 	.word	0x20000258

080025d0 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80025da:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <TIMER_IF_StopTimer+0x2c>)
 80025dc:	2201      	movs	r2, #1
 80025de:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80025e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025e4:	4806      	ldr	r0, [pc, #24]	@ (8002600 <TIMER_IF_StopTimer+0x30>)
 80025e6:	f005 fcab 	bl	8007f40 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80025ea:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <TIMER_IF_StopTimer+0x30>)
 80025ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025f0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80025f2:	79fb      	ldrb	r3, [r7, #7]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40002800 	.word	0x40002800
 8002600:	20000258 	.word	0x20000258

08002604 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002608:	f000 f98e 	bl	8002928 <GetTimerTicks>
 800260c:	4603      	mov	r3, r0
 800260e:	4a03      	ldr	r2, [pc, #12]	@ (800261c <TIMER_IF_SetTimerContext+0x18>)
 8002610:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002612:	4b02      	ldr	r3, [pc, #8]	@ (800261c <TIMER_IF_SetTimerContext+0x18>)
 8002614:	681b      	ldr	r3, [r3, #0]
}
 8002616:	4618      	mov	r0, r3
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200002a0 	.word	0x200002a0

08002620 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002624:	4b02      	ldr	r3, [pc, #8]	@ (8002630 <TIMER_IF_GetTimerContext+0x10>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	200002a0 	.word	0x200002a0

08002634 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800263e:	f000 f973 	bl	8002928 <GetTimerTicks>
 8002642:	4602      	mov	r2, r0
 8002644:	4b04      	ldr	r3, [pc, #16]	@ (8002658 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 800264c:	687b      	ldr	r3, [r7, #4]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200002a0 	.word	0x200002a0

0800265c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <TIMER_IF_GetTimerValue+0x24>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800266e:	f000 f95b 	bl	8002928 <GetTimerTicks>
 8002672:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002674:	687b      	ldr	r3, [r7, #4]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	2000029d 	.word	0x2000029d

08002684 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800268e:	2303      	movs	r3, #3
 8002690:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002692:	687b      	ldr	r3, [r7, #4]
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800269e:	b5b0      	push	{r4, r5, r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80026a6:	2100      	movs	r1, #0
 80026a8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	2000      	movs	r0, #0
 80026ae:	460a      	mov	r2, r1
 80026b0:	4603      	mov	r3, r0
 80026b2:	0d95      	lsrs	r5, r2, #22
 80026b4:	0294      	lsls	r4, r2, #10
 80026b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	4620      	mov	r0, r4
 80026c0:	4629      	mov	r1, r5
 80026c2:	f7fe f9d5 	bl	8000a70 <__aeabi_uldivmod>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4613      	mov	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bdb0      	pop	{r4, r5, r7, pc}

080026d8 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80026d8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80026e2:	2100      	movs	r1, #0
 80026e4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	2000      	movs	r0, #0
 80026ea:	460c      	mov	r4, r1
 80026ec:	4605      	mov	r5, r0
 80026ee:	4620      	mov	r0, r4
 80026f0:	4629      	mov	r1, r5
 80026f2:	f04f 0a00 	mov.w	sl, #0
 80026f6:	f04f 0b00 	mov.w	fp, #0
 80026fa:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80026fe:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002702:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002706:	4650      	mov	r0, sl
 8002708:	4659      	mov	r1, fp
 800270a:	1b02      	subs	r2, r0, r4
 800270c:	eb61 0305 	sbc.w	r3, r1, r5
 8002710:	f04f 0000 	mov.w	r0, #0
 8002714:	f04f 0100 	mov.w	r1, #0
 8002718:	0099      	lsls	r1, r3, #2
 800271a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800271e:	0090      	lsls	r0, r2, #2
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	eb12 0804 	adds.w	r8, r2, r4
 8002728:	eb43 0905 	adc.w	r9, r3, r5
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002738:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800273c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002740:	4690      	mov	r8, r2
 8002742:	4699      	mov	r9, r3
 8002744:	4640      	mov	r0, r8
 8002746:	4649      	mov	r1, r9
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	0a82      	lsrs	r2, r0, #10
 8002752:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002756:	0a8b      	lsrs	r3, r1, #10
 8002758:	4613      	mov	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 800275c:	68fb      	ldr	r3, [r7, #12]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002768:	4770      	bx	lr

0800276a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ff93 	bl	800269e <TIMER_IF_Convert_ms2Tick>
 8002778:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800277a:	f000 f8d5 	bl	8002928 <GetTimerTicks>
 800277e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002780:	e000      	b.n	8002784 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002782:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002784:	f000 f8d0 	bl	8002928 <GetTimerTicks>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d8f6      	bhi.n	8002782 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80027a6:	f01a f8db 	bl	801c960 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80027ba:	f000 f8a5 	bl	8002908 <TIMER_IF_BkUp_Read_MSBticks>
 80027be:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3301      	adds	r3, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 f88f 	bl	80028e8 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80027d2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027d6:	b08c      	sub	sp, #48	@ 0x30
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80027e0:	f000 f8a2 	bl	8002928 <GetTimerTicks>
 80027e4:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80027e6:	f000 f88f 	bl	8002908 <TIMER_IF_BkUp_Read_MSBticks>
 80027ea:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	2200      	movs	r2, #0
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	60fa      	str	r2, [r7, #12]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	000b      	movs	r3, r1
 8002800:	2200      	movs	r2, #0
 8002802:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002804:	2000      	movs	r0, #0
 8002806:	460c      	mov	r4, r1
 8002808:	4605      	mov	r5, r0
 800280a:	eb12 0804 	adds.w	r8, r2, r4
 800280e:	eb43 0905 	adc.w	r9, r3, r5
 8002812:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002816:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	0a82      	lsrs	r2, r0, #10
 8002824:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002828:	0a8b      	lsrs	r3, r1, #10
 800282a:	4613      	mov	r3, r2
 800282c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2200      	movs	r2, #0
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800283c:	f04f 0b00 	mov.w	fp, #0
 8002840:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff46 	bl	80026d8 <TIMER_IF_Convert_Tick2ms>
 800284c:	4603      	mov	r3, r0
 800284e:	b29a      	uxth	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002856:	4618      	mov	r0, r3
 8002858:	3730      	adds	r7, #48	@ 0x30
 800285a:	46bd      	mov	sp, r7
 800285c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002860 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	2100      	movs	r1, #0
 800286c:	4803      	ldr	r0, [pc, #12]	@ (800287c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800286e:	f005 fd37 	bl	80082e0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000258 	.word	0x20000258

08002880 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	2101      	movs	r1, #1
 800288c:	4803      	ldr	r0, [pc, #12]	@ (800289c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800288e:	f005 fd27 	bl	80082e0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000258 	.word	0x20000258

080028a0 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80028aa:	2100      	movs	r1, #0
 80028ac:	4804      	ldr	r0, [pc, #16]	@ (80028c0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80028ae:	f005 fd2f 	bl	8008310 <HAL_RTCEx_BKUPRead>
 80028b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80028b4:	687b      	ldr	r3, [r7, #4]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000258 	.word	0x20000258

080028c4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80028ce:	2101      	movs	r1, #1
 80028d0:	4804      	ldr	r0, [pc, #16]	@ (80028e4 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80028d2:	f005 fd1d 	bl	8008310 <HAL_RTCEx_BKUPRead>
 80028d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80028d8:	687b      	ldr	r3, [r7, #4]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000258 	.word	0x20000258

080028e8 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	2102      	movs	r1, #2
 80028f4:	4803      	ldr	r0, [pc, #12]	@ (8002904 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80028f6:	f005 fcf3 	bl	80082e0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000258 	.word	0x20000258

08002908 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800290e:	2102      	movs	r1, #2
 8002910:	4804      	ldr	r0, [pc, #16]	@ (8002924 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002912:	f005 fcfd 	bl	8008310 <HAL_RTCEx_BKUPRead>
 8002916:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002918:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000258 	.word	0x20000258

08002928 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800292e:	480b      	ldr	r0, [pc, #44]	@ (800295c <GetTimerTicks+0x34>)
 8002930:	f7ff fdd9 	bl	80024e6 <LL_RTC_TIME_GetSubSecond>
 8002934:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002936:	e003      	b.n	8002940 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002938:	4808      	ldr	r0, [pc, #32]	@ (800295c <GetTimerTicks+0x34>)
 800293a:	f7ff fdd4 	bl	80024e6 <LL_RTC_TIME_GetSubSecond>
 800293e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002940:	4806      	ldr	r0, [pc, #24]	@ (800295c <GetTimerTicks+0x34>)
 8002942:	f7ff fdd0 	bl	80024e6 <LL_RTC_TIME_GetSubSecond>
 8002946:	4602      	mov	r2, r0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4293      	cmp	r3, r2
 800294c:	d1f4      	bne.n	8002938 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40002800 	.word	0x40002800

08002960 <LL_AHB2_GRP1_EnableClock>:
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800296c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800296e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4313      	orrs	r3, r2
 8002976:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002984:	68fb      	ldr	r3, [r7, #12]
}
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <LL_APB1_GRP1_EnableClock>:
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800299c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800299e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80029a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4013      	ands	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029b4:	68fb      	ldr	r3, [r7, #12]
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <LL_APB1_GRP1_DisableClock>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029d6:	4013      	ands	r3, r2
 80029d8:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029e8:	4b22      	ldr	r3, [pc, #136]	@ (8002a74 <MX_USART2_UART_Init+0x90>)
 80029ea:	4a23      	ldr	r2, [pc, #140]	@ (8002a78 <MX_USART2_UART_Init+0x94>)
 80029ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029ee:	4b21      	ldr	r3, [pc, #132]	@ (8002a74 <MX_USART2_UART_Init+0x90>)
 80029f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a74 <MX_USART2_UART_Init+0x90>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a74 <MX_USART2_UART_Init+0x90>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a02:	4b1c      	ldr	r3, [pc, #112]	@ (8002a74 <MX_USART2_UART_Init+0x90>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a08:	4b1a      	ldr	r3, [pc, #104]	@ (8002a74 <MX_USART2_UART_Init+0x90>)
 8002a0a:	220c      	movs	r2, #12
 8002a0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a0e:	4b19      	ldr	r3, [pc, #100]	@ (8002a74 <MX_USART2_UART_Init+0x90>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a14:	4b17      	ldr	r3, [pc, #92]	@ (8002a74 <MX_USART2_UART_Init+0x90>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a1a:	4b16      	ldr	r3, [pc, #88]	@ (8002a74 <MX_USART2_UART_Init+0x90>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a20:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <MX_USART2_UART_Init+0x90>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a26:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <MX_USART2_UART_Init+0x90>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a2c:	4811      	ldr	r0, [pc, #68]	@ (8002a74 <MX_USART2_UART_Init+0x90>)
 8002a2e:	f006 f960 	bl	8008cf2 <HAL_UART_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002a38:	f7ff f86e 	bl	8001b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	480d      	ldr	r0, [pc, #52]	@ (8002a74 <MX_USART2_UART_Init+0x90>)
 8002a40:	f008 fa80 	bl	800af44 <HAL_UARTEx_SetTxFifoThreshold>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002a4a:	f7ff f865 	bl	8001b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4808      	ldr	r0, [pc, #32]	@ (8002a74 <MX_USART2_UART_Init+0x90>)
 8002a52:	f008 fab5 	bl	800afc0 <HAL_UARTEx_SetRxFifoThreshold>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002a5c:	f7ff f85c 	bl	8001b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a60:	4804      	ldr	r0, [pc, #16]	@ (8002a74 <MX_USART2_UART_Init+0x90>)
 8002a62:	f008 fa37 	bl	800aed4 <HAL_UARTEx_DisableFifoMode>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002a6c:	f7ff f854 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	200002a4 	.word	0x200002a4
 8002a78:	40004400 	.word	0x40004400

08002a7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b096      	sub	sp, #88	@ 0x58
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a94:	f107 030c 	add.w	r3, r7, #12
 8002a98:	2238      	movs	r2, #56	@ 0x38
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f01a fb47 	bl	801d130 <memset>
  if(uartHandle->Instance==USART2)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a38      	ldr	r2, [pc, #224]	@ (8002b88 <HAL_UART_MspInit+0x10c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d168      	bne.n	8002b7e <HAL_UART_MspInit+0x102>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002aac:	2302      	movs	r3, #2
 8002aae:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ab0:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002ab4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ab6:	f107 030c 	add.w	r3, r7, #12
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 ff98 	bl	80079f0 <HAL_RCCEx_PeriphCLKConfig>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002ac6:	f7ff f827 	bl	8001b18 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aca:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002ace:	f7ff ff5f 	bl	8002990 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	f7ff ff44 	bl	8002960 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ad8:	2304      	movs	r3, #4
 8002ada:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002adc:	2302      	movs	r3, #2
 8002ade:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ae8:	2307      	movs	r3, #7
 8002aea:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aec:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002af0:	4619      	mov	r1, r3
 8002af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002af6:	f002 fa35 	bl	8004f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002afa:	2308      	movs	r3, #8
 8002afc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b02:	2301      	movs	r3, #1
 8002b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b0a:	2307      	movs	r3, #7
 8002b0c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b12:	4619      	mov	r1, r3
 8002b14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b18:	f002 fa24 	bl	8004f64 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b8c <HAL_UART_MspInit+0x110>)
 8002b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002b90 <HAL_UART_MspInit+0x114>)
 8002b20:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002b22:	4b1a      	ldr	r3, [pc, #104]	@ (8002b8c <HAL_UART_MspInit+0x110>)
 8002b24:	2214      	movs	r2, #20
 8002b26:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b28:	4b18      	ldr	r3, [pc, #96]	@ (8002b8c <HAL_UART_MspInit+0x110>)
 8002b2a:	2210      	movs	r2, #16
 8002b2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b2e:	4b17      	ldr	r3, [pc, #92]	@ (8002b8c <HAL_UART_MspInit+0x110>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b34:	4b15      	ldr	r3, [pc, #84]	@ (8002b8c <HAL_UART_MspInit+0x110>)
 8002b36:	2280      	movs	r2, #128	@ 0x80
 8002b38:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b3a:	4b14      	ldr	r3, [pc, #80]	@ (8002b8c <HAL_UART_MspInit+0x110>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b40:	4b12      	ldr	r3, [pc, #72]	@ (8002b8c <HAL_UART_MspInit+0x110>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b46:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <HAL_UART_MspInit+0x110>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b8c <HAL_UART_MspInit+0x110>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b52:	480e      	ldr	r0, [pc, #56]	@ (8002b8c <HAL_UART_MspInit+0x110>)
 8002b54:	f001 fc02 	bl	800435c <HAL_DMA_Init>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002b5e:	f7fe ffdb 	bl	8001b18 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a09      	ldr	r2, [pc, #36]	@ (8002b8c <HAL_UART_MspInit+0x110>)
 8002b66:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002b68:	4a08      	ldr	r2, [pc, #32]	@ (8002b8c <HAL_UART_MspInit+0x110>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2100      	movs	r1, #0
 8002b72:	2025      	movs	r0, #37	@ 0x25
 8002b74:	f001 fbaf 	bl	80042d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b78:	2025      	movs	r0, #37	@ 0x25
 8002b7a:	f001 fbc6 	bl	800430a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b7e:	bf00      	nop
 8002b80:	3758      	adds	r7, #88	@ 0x58
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40004400 	.word	0x40004400
 8002b8c:	20000338 	.word	0x20000338
 8002b90:	40020008 	.word	0x40020008

08002b94 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8002bd0 <HAL_UART_MspDeInit+0x3c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d110      	bne.n	8002bc8 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8002ba6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002baa:	f7ff ff09 	bl	80029c0 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002bae:	210c      	movs	r1, #12
 8002bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bb4:	f002 fb36 	bl	8005224 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 fc75 	bl	80044ac <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002bc2:	2025      	movs	r0, #37	@ 0x25
 8002bc4:	f001 fbaf 	bl	8004326 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40004400 	.word	0x40004400

08002bd4 <LL_APB1_GRP1_ForceReset>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002be2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <LL_APB1_GRP1_ReleaseReset>:
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr
	...

08002c1c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002c24:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <LL_EXTI_EnableIT_0_31+0x24>)
 8002c26:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002c2a:	4905      	ldr	r1, [pc, #20]	@ (8002c40 <LL_EXTI_EnableIT_0_31+0x24>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	58000800 	.word	0x58000800

08002c44 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002c4c:	4a07      	ldr	r2, [pc, #28]	@ (8002c6c <vcom_Init+0x28>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002c52:	f7fe fa37 	bl	80010c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002c56:	f7ff fec5 	bl	80029e4 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8002c5a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002c5e:	f7ff ffdd 	bl	8002c1c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002c62:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	2000039c 	.word	0x2000039c

08002c70 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002c74:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002c78:	f7ff ffac 	bl	8002bd4 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8002c7c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002c80:	f7ff ffb9 	bl	8002bf6 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002c84:	4804      	ldr	r0, [pc, #16]	@ (8002c98 <vcom_DeInit+0x28>)
 8002c86:	f7ff ff85 	bl	8002b94 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002c8a:	200f      	movs	r0, #15
 8002c8c:	f001 fb4b 	bl	8004326 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002c90:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200002a4 	.word	0x200002a4

08002c9c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002ca8:	887b      	ldrh	r3, [r7, #2]
 8002caa:	461a      	mov	r2, r3
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4804      	ldr	r0, [pc, #16]	@ (8002cc0 <vcom_Trace_DMA+0x24>)
 8002cb0:	f006 f8bc 	bl	8008e2c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002cb4:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200002a4 	.word	0x200002a4

08002cc4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002ccc:	4a19      	ldr	r2, [pc, #100]	@ (8002d34 <vcom_ReceiveInit+0x70>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002cd2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002cd6:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002cd8:	f107 0308 	add.w	r3, r7, #8
 8002cdc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ce0:	4815      	ldr	r0, [pc, #84]	@ (8002d38 <vcom_ReceiveInit+0x74>)
 8002ce2:	f008 f86a 	bl	800adba <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002ce6:	bf00      	nop
 8002ce8:	4b13      	ldr	r3, [pc, #76]	@ (8002d38 <vcom_ReceiveInit+0x74>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf6:	d0f7      	beq.n	8002ce8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002cf8:	bf00      	nop
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002d38 <vcom_ReceiveInit+0x74>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d08:	d1f7      	bne.n	8002cfa <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <vcom_ReceiveInit+0x74>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <vcom_ReceiveInit+0x74>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002d18:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002d1a:	4807      	ldr	r0, [pc, #28]	@ (8002d38 <vcom_ReceiveInit+0x74>)
 8002d1c:	f008 f8a8 	bl	800ae70 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002d20:	2201      	movs	r2, #1
 8002d22:	4906      	ldr	r1, [pc, #24]	@ (8002d3c <vcom_ReceiveInit+0x78>)
 8002d24:	4804      	ldr	r0, [pc, #16]	@ (8002d38 <vcom_ReceiveInit+0x74>)
 8002d26:	f006 f835 	bl	8008d94 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002d2a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200003a0 	.word	0x200003a0
 8002d38:	200002a4 	.word	0x200002a4
 8002d3c:	20000398 	.word	0x20000398

08002d40 <vcom_Resume>:

void vcom_Resume(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d44:	4808      	ldr	r0, [pc, #32]	@ (8002d68 <vcom_Resume+0x28>)
 8002d46:	f005 ffd4 	bl	8008cf2 <HAL_UART_Init>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002d50:	f7fe fee2 	bl	8001b18 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002d54:	4805      	ldr	r0, [pc, #20]	@ (8002d6c <vcom_Resume+0x2c>)
 8002d56:	f001 fb01 	bl	800435c <HAL_DMA_Init>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002d60:	f7fe feda 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	200002a4 	.word	0x200002a4
 8002d6c:	20000338 	.word	0x20000338

08002d70 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a05      	ldr	r2, [pc, #20]	@ (8002d94 <HAL_UART_TxCpltCallback+0x24>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d103      	bne.n	8002d8a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002d82:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <HAL_UART_TxCpltCallback+0x28>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2000      	movs	r0, #0
 8002d88:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40004400 	.word	0x40004400
 8002d98:	2000039c 	.word	0x2000039c

08002d9c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0d      	ldr	r2, [pc, #52]	@ (8002de0 <HAL_UART_RxCpltCallback+0x44>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d113      	bne.n	8002dd6 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002dae:	4b0d      	ldr	r3, [pc, #52]	@ (8002de4 <HAL_UART_RxCpltCallback+0x48>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_UART_RxCpltCallback+0x30>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002dc0:	4b08      	ldr	r3, [pc, #32]	@ (8002de4 <HAL_UART_RxCpltCallback+0x48>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	4807      	ldr	r0, [pc, #28]	@ (8002de8 <HAL_UART_RxCpltCallback+0x4c>)
 8002dca:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002dcc:	2201      	movs	r2, #1
 8002dce:	4906      	ldr	r1, [pc, #24]	@ (8002de8 <HAL_UART_RxCpltCallback+0x4c>)
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f005 ffdf 	bl	8008d94 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40004400 	.word	0x40004400
 8002de4:	200003a0 	.word	0x200003a0
 8002de8:	20000398 	.word	0x20000398

08002dec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dec:	480d      	ldr	r0, [pc, #52]	@ (8002e24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002df0:	f7ff fb73 	bl	80024da <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002df4:	480c      	ldr	r0, [pc, #48]	@ (8002e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8002df6:	490d      	ldr	r1, [pc, #52]	@ (8002e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002df8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e30 <LoopForever+0xe>)
  movs r3, #0
 8002dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dfc:	e002      	b.n	8002e04 <LoopCopyDataInit>

08002dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e02:	3304      	adds	r3, #4

08002e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e08:	d3f9      	bcc.n	8002dfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8002e38 <LoopForever+0x16>)
  movs r3, #0
 8002e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e10:	e001      	b.n	8002e16 <LoopFillZerobss>

08002e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e14:	3204      	adds	r2, #4

08002e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e18:	d3fb      	bcc.n	8002e12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e1a:	f01a f991 	bl	801d140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e1e:	f7fe fdf7 	bl	8001a10 <main>

08002e22 <LoopForever>:

LoopForever:
    b LoopForever
 8002e22:	e7fe      	b.n	8002e22 <LoopForever>
  ldr   r0, =_estack
 8002e24:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e2c:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8002e30:	0801e1b0 	.word	0x0801e1b0
  ldr r2, =_sbss
 8002e34:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8002e38:	20002434 	.word	0x20002434

08002e3c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e3c:	e7fe      	b.n	8002e3c <ADC_IRQHandler>
	...

08002e40 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002e44:	4b04      	ldr	r3, [pc, #16]	@ (8002e58 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4a03      	ldr	r2, [pc, #12]	@ (8002e58 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	6053      	str	r3, [r2, #4]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	e0042000 	.word	0xe0042000

08002e5c <LL_DBGMCU_DisableDBGStopMode>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002e60:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4a03      	ldr	r2, [pc, #12]	@ (8002e74 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002e66:	f023 0302 	bic.w	r3, r3, #2
 8002e6a:	6053      	str	r3, [r2, #4]
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr
 8002e74:	e0042000 	.word	0xe0042000

08002e78 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002e7c:	4b04      	ldr	r3, [pc, #16]	@ (8002e90 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4a03      	ldr	r2, [pc, #12]	@ (8002e90 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002e82:	f023 0304 	bic.w	r3, r3, #4
 8002e86:	6053      	str	r3, [r2, #4]
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	e0042000 	.word	0xe0042000

08002e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e9e:	2003      	movs	r0, #3
 8002ea0:	f001 fa0e 	bl	80042c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ea4:	f004 fbc6 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4a09      	ldr	r2, [pc, #36]	@ (8002ed0 <HAL_Init+0x3c>)
 8002eac:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002eae:	200f      	movs	r0, #15
 8002eb0:	f000 f810 	bl	8002ed4 <HAL_InitTick>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	71fb      	strb	r3, [r7, #7]
 8002ebe:	e001      	b.n	8002ec4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ec0:	f7ff f84d 	bl	8001f5e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000000 	.word	0x20000000

08002ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ee0:	4b17      	ldr	r3, [pc, #92]	@ (8002f40 <HAL_InitTick+0x6c>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d024      	beq.n	8002f32 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ee8:	f004 fba4 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b14      	ldr	r3, [pc, #80]	@ (8002f40 <HAL_InitTick+0x6c>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ef8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	4618      	mov	r0, r3
 8002f02:	f001 fa1e 	bl	8004342 <HAL_SYSTICK_Config>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10f      	bne.n	8002f2c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b0f      	cmp	r3, #15
 8002f10:	d809      	bhi.n	8002f26 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f12:	2200      	movs	r2, #0
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f1a:	f001 f9dc 	bl	80042d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f1e:	4a09      	ldr	r2, [pc, #36]	@ (8002f44 <HAL_InitTick+0x70>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	e007      	b.n	8002f36 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
 8002f2a:	e004      	b.n	8002f36 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
 8002f30:	e001      	b.n	8002f36 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000008 	.word	0x20000008
 8002f44:	20000004 	.word	0x20000004

08002f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f4c:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <HAL_IncTick+0x1c>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <HAL_IncTick+0x20>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4413      	add	r3, r2
 8002f58:	4a03      	ldr	r2, [pc, #12]	@ (8002f68 <HAL_IncTick+0x20>)
 8002f5a:	6013      	str	r3, [r2, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	20000008 	.word	0x20000008
 8002f68:	200003a4 	.word	0x200003a4

08002f6c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002f70:	4b04      	ldr	r3, [pc, #16]	@ (8002f84 <HAL_SuspendTick+0x18>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a03      	ldr	r2, [pc, #12]	@ (8002f84 <HAL_SuspendTick+0x18>)
 8002f76:	f023 0302 	bic.w	r3, r3, #2
 8002f7a:	6013      	str	r3, [r2, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	e000e010 	.word	0xe000e010

08002f88 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002f8c:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <HAL_ResumeTick+0x18>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a03      	ldr	r2, [pc, #12]	@ (8002fa0 <HAL_ResumeTick+0x18>)
 8002f92:	f043 0302 	orr.w	r3, r3, #2
 8002f96:	6013      	str	r3, [r2, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	e000e010 	.word	0xe000e010

08002fa4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002fa8:	4b02      	ldr	r3, [pc, #8]	@ (8002fb4 <HAL_GetUIDw0+0x10>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	1fff7590 	.word	0x1fff7590

08002fb8 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002fbc:	4b02      	ldr	r3, [pc, #8]	@ (8002fc8 <HAL_GetUIDw1+0x10>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	1fff7594 	.word	0x1fff7594

08002fcc <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002fd0:	4b02      	ldr	r3, [pc, #8]	@ (8002fdc <HAL_GetUIDw2+0x10>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	1fff7598 	.word	0x1fff7598

08002fe0 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002fe4:	f7ff ff2c 	bl	8002e40 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002fe8:	bf00      	nop
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002ff0:	f7ff ff34 	bl	8002e5c <LL_DBGMCU_DisableDBGStopMode>
}
 8002ff4:	bf00      	nop
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002ffc:	f7ff ff3c 	bl	8002e78 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}

08003004 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	601a      	str	r2, [r3, #0]
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr

08003042 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003042:	b480      	push	{r7}
 8003044:	b085      	sub	sp, #20
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2107      	movs	r1, #7
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	401a      	ands	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	431a      	orrs	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2107      	movs	r1, #7
 8003094:	fa01 f303 	lsl.w	r3, r1, r3
 8003098:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	210f      	movs	r1, #15
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	401a      	ands	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	f003 010f 	and.w	r1, r3, #15
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	fa01 f303 	lsl.w	r3, r1, r3
 8003104:	431a      	orrs	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800314c:	43db      	mvns	r3, r3
 800314e:	401a      	ands	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800315e:	b480      	push	{r7}
 8003160:	b085      	sub	sp, #20
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	43db      	mvns	r3, r3
 8003174:	401a      	ands	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	0219      	lsls	r1, r3, #8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	400b      	ands	r3, r1
 800317e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8003182:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003186:	431a      	orrs	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80031a6:	f023 0317 	bic.w	r3, r3, #23
 80031aa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80031cc:	f023 0317 	bic.w	r3, r3, #23
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6093      	str	r3, [r2, #8]
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031f2:	d101      	bne.n	80031f8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003214:	f023 0317 	bic.w	r3, r3, #23
 8003218:	f043 0201 	orr.w	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800323a:	f023 0317 	bic.w	r3, r3, #23
 800323e:	f043 0202 	orr.w	r2, r3, #2
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <LL_ADC_IsEnabled+0x18>
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <LL_ADC_IsEnabled+0x1a>
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b02      	cmp	r3, #2
 8003286:	d101      	bne.n	800328c <LL_ADC_IsDisableOngoing+0x18>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <LL_ADC_IsDisableOngoing+0x1a>
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032a8:	f023 0317 	bic.w	r3, r3, #23
 80032ac:	f043 0204 	orr.w	r2, r3, #4
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr

080032be <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032ce:	f023 0317 	bic.w	r3, r3, #23
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d101      	bne.n	80032fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003314:	2300      	movs	r3, #0
 8003316:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e17e      	b.n	8003628 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003334:	2b00      	cmp	r3, #0
 8003336:	d109      	bne.n	800334c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7fd fd89 	bl	8000e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ff44 	bl	80031de <LL_ADC_IsInternalRegulatorEnabled>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d115      	bne.n	8003388 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ff18 	bl	8003196 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003366:	4b9e      	ldr	r3, [pc, #632]	@ (80035e0 <HAL_ADC_Init+0x2d8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	099b      	lsrs	r3, r3, #6
 800336c:	4a9d      	ldr	r2, [pc, #628]	@ (80035e4 <HAL_ADC_Init+0x2dc>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	099b      	lsrs	r3, r3, #6
 8003374:	3301      	adds	r3, #1
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800337a:	e002      	b.n	8003382 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3b01      	subs	r3, #1
 8003380:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f9      	bne.n	800337c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff26 	bl	80031de <LL_ADC_IsInternalRegulatorEnabled>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10d      	bne.n	80033b4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339c:	f043 0210 	orr.w	r2, r3, #16
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a8:	f043 0201 	orr.w	r2, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff93 	bl	80032e4 <LL_ADC_REG_IsConversionOngoing>
 80033be:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f040 8124 	bne.w	8003616 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f040 8120 	bne.w	8003616 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033da:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80033de:	f043 0202 	orr.w	r2, r3, #2
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff ff30 	bl	8003250 <LL_ADC_IsEnabled>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 80a7 	bne.w	8003546 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	7e1b      	ldrb	r3, [r3, #24]
 8003400:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003402:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	7e5b      	ldrb	r3, [r3, #25]
 8003408:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800340a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	7e9b      	ldrb	r3, [r3, #26]
 8003410:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003412:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003418:	2a00      	cmp	r2, #0
 800341a:	d002      	beq.n	8003422 <HAL_ADC_Init+0x11a>
 800341c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003420:	e000      	b.n	8003424 <HAL_ADC_Init+0x11c>
 8003422:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003424:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800342a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	da04      	bge.n	800343e <HAL_ADC_Init+0x136>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800343c:	e001      	b.n	8003442 <HAL_ADC_Init+0x13a>
 800343e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8003442:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800344a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800344c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3020 	ldrb.w	r3, [r3, #32]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d114      	bne.n	8003488 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	7e9b      	ldrb	r3, [r3, #26]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d104      	bne.n	8003470 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	e00b      	b.n	8003488 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003474:	f043 0220 	orr.w	r2, r3, #32
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003480:	f043 0201 	orr.w	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	2b00      	cmp	r3, #0
 800348e:	d009      	beq.n	80034a4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800349c:	4313      	orrs	r3, r2
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 80034ae:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	69b9      	ldr	r1, [r7, #24]
 80034b8:	430b      	orrs	r3, r1
 80034ba:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034c8:	4313      	orrs	r3, r2
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d111      	bne.n	80034fe <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034e6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80034ec:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80034f2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	4b38      	ldr	r3, [pc, #224]	@ (80035e8 <HAL_ADC_Init+0x2e0>)
 8003506:	4013      	ands	r3, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	6979      	ldr	r1, [r7, #20]
 800350e:	430b      	orrs	r3, r1
 8003510:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800351a:	d014      	beq.n	8003546 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003524:	d00f      	beq.n	8003546 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800352a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800352e:	d00a      	beq.n	8003546 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003530:	4b2e      	ldr	r3, [pc, #184]	@ (80035ec <HAL_ADC_Init+0x2e4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003540:	492a      	ldr	r1, [pc, #168]	@ (80035ec <HAL_ADC_Init+0x2e4>)
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800354e:	461a      	mov	r2, r3
 8003550:	2100      	movs	r1, #0
 8003552:	f7ff fd76 	bl	8003042 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	461a      	mov	r2, r3
 8003560:	4923      	ldr	r1, [pc, #140]	@ (80035f0 <HAL_ADC_Init+0x2e8>)
 8003562:	f7ff fd6e 	bl	8003042 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d108      	bne.n	8003580 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f062 020f 	orn	r2, r2, #15
 800357c:	629a      	str	r2, [r3, #40]	@ 0x28
 800357e:	e017      	b.n	80035b0 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003588:	d112      	bne.n	80035b0 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	3b01      	subs	r3, #1
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	f003 031c 	and.w	r3, r3, #28
 800359c:	f06f 020f 	mvn.w	r2, #15
 80035a0:	fa02 f103 	lsl.w	r1, r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2100      	movs	r1, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fd61 	bl	800307e <LL_ADC_GetSamplingTimeCommonChannels>
 80035bc:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d116      	bne.n	80035f4 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d0:	f023 0303 	bic.w	r3, r3, #3
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80035dc:	e023      	b.n	8003626 <HAL_ADC_Init+0x31e>
 80035de:	bf00      	nop
 80035e0:	20000000 	.word	0x20000000
 80035e4:	053e2d63 	.word	0x053e2d63
 80035e8:	1ffffc02 	.word	0x1ffffc02
 80035ec:	40012708 	.word	0x40012708
 80035f0:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f8:	f023 0312 	bic.w	r3, r3, #18
 80035fc:	f043 0210 	orr.w	r2, r3, #16
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003608:	f043 0201 	orr.w	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003614:	e007      	b.n	8003626 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	f043 0210 	orr.w	r2, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003626:	7ffb      	ldrb	r3, [r7, #31]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3720      	adds	r7, #32
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e07a      	b.n	8003738 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003646:	f043 0202 	orr.w	r2, r3, #2
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 face 	bl	8003bf0 <ADC_ConversionStop>
 8003654:	4603      	mov	r3, r0
 8003656:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10f      	bne.n	800367e <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fb92 	bl	8003d88 <ADC_Disable>
 8003664:	4603      	mov	r3, r0
 8003666:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d102      	bne.n	8003674 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fd9f 	bl	80031bc <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 800368c:	f023 0303 	bic.w	r3, r3, #3
 8003690:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f240 329f 	movw	r2, #927	@ 0x39f
 800369a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68d9      	ldr	r1, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4b26      	ldr	r3, [pc, #152]	@ (8003740 <HAL_ADC_DeInit+0x110>)
 80036a8:	400b      	ands	r3, r1
 80036aa:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 80036ba:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0207 	bic.w	r2, r2, #7
 80036ca:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6a1a      	ldr	r2, [r3, #32]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80036da:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80036ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80036fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800370a:	4b0e      	ldr	r3, [pc, #56]	@ (8003744 <HAL_ADC_DeInit+0x114>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a0d      	ldr	r2, [pc, #52]	@ (8003744 <HAL_ADC_DeInit+0x114>)
 8003710:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003714:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd fbae 	bl	8000e78 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003736:	7bfb      	ldrb	r3, [r7, #15]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	833e0200 	.word	0x833e0200
 8003744:	40012708 	.word	0x40012708

08003748 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fdc5 	bl	80032e4 <LL_ADC_REG_IsConversionOngoing>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d132      	bne.n	80037c6 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_ADC_Start+0x26>
 800376a:	2302      	movs	r3, #2
 800376c:	e02e      	b.n	80037cc <HAL_ADC_Start+0x84>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fa80 	bl	8003c7c <ADC_Enable>
 800377c:	4603      	mov	r3, r0
 800377e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d11a      	bne.n	80037bc <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800378a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800378e:	f023 0301 	bic.w	r3, r3, #1
 8003792:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	221c      	movs	r2, #28
 80037a6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fd6f 	bl	8003298 <LL_ADC_REG_StartConversion>
 80037ba:	e006      	b.n	80037ca <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80037c4:	e001      	b.n	80037ca <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
 80037c8:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_ADC_Stop+0x16>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e022      	b.n	8003830 <HAL_ADC_Stop+0x5c>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f9fc 	bl	8003bf0 <ADC_ConversionStop>
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d111      	bne.n	8003826 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fac0 	bl	8003d88 <ADC_Disable>
 8003808:	4603      	mov	r3, r0
 800380a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003816:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800381a:	f023 0301 	bic.w	r3, r3, #1
 800381e:	f043 0201 	orr.w	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800382e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	2b08      	cmp	r3, #8
 8003848:	d102      	bne.n	8003850 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800384a:	2308      	movs	r3, #8
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	e010      	b.n	8003872 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003862:	f043 0220 	orr.w	r2, r3, #32
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e077      	b.n	800395e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800386e:	2304      	movs	r3, #4
 8003870:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003872:	f7fe fdcb 	bl	800240c <HAL_GetTick>
 8003876:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003878:	e021      	b.n	80038be <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003880:	d01d      	beq.n	80038be <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003882:	f7fe fdc3 	bl	800240c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d302      	bcc.n	8003898 <HAL_ADC_PollForConversion+0x60>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d112      	bne.n	80038be <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10b      	bne.n	80038be <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038aa:	f043 0204 	orr.w	r2, r3, #4
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e04f      	b.n	800395e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0d6      	beq.n	800387a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff fbe6 	bl	80030ae <LL_ADC_REG_IsTriggerSourceSWStart>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d031      	beq.n	800394c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	7e9b      	ldrb	r3, [r3, #26]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d12d      	bne.n	800394c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d126      	bne.n	800394c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fcee 	bl	80032e4 <LL_ADC_REG_IsConversionOngoing>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d112      	bne.n	8003934 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 020c 	bic.w	r2, r2, #12
 800391c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003922:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003926:	f023 0301 	bic.w	r3, r3, #1
 800392a:	f043 0201 	orr.w	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	659a      	str	r2, [r3, #88]	@ 0x58
 8003932:	e00b      	b.n	800394c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003938:	f043 0220 	orr.w	r2, r3, #32
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003944:	f043 0201 	orr.w	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	7e1b      	ldrb	r3, [r3, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d103      	bne.n	800395c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	220c      	movs	r2, #12
 800395a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr
	...

08003980 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x28>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e110      	b.n	8003bca <HAL_ADC_ConfigChannel+0x24a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fc95 	bl	80032e4 <LL_ADC_REG_IsConversionOngoing>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f040 80f7 	bne.w	8003bb0 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	f000 80b1 	beq.w	8003b2e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039d4:	d004      	beq.n	80039e0 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039da:	4a7e      	ldr	r2, [pc, #504]	@ (8003bd4 <HAL_ADC_ConfigChannel+0x254>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d108      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4619      	mov	r1, r3
 80039ea:	4610      	mov	r0, r2
 80039ec:	f7ff fb92 	bl	8003114 <LL_ADC_REG_SetSequencerChAdd>
 80039f0:	e041      	b.n	8003a76 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	210f      	movs	r1, #15
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	401a      	ands	r2, r3
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0xa0>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	0e9b      	lsrs	r3, r3, #26
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	e011      	b.n	8003a44 <HAL_ADC_ConfigChannel+0xc4>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	fa93 f3a3 	rbit	r3, r3
 8003a2c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003a38:	2320      	movs	r3, #32
 8003a3a:	e003      	b.n	8003a44 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	6839      	ldr	r1, [r7, #0]
 8003a46:	6849      	ldr	r1, [r1, #4]
 8003a48:	f001 011f 	and.w	r1, r1, #31
 8003a4c:	408b      	lsls	r3, r1
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d808      	bhi.n	8003a76 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	f7ff fb2e 	bl	80030d2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6819      	ldr	r1, [r3, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	461a      	mov	r2, r3
 8003a84:	f7ff fb6b 	bl	800315e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f280 8097 	bge.w	8003bc0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a92:	4851      	ldr	r0, [pc, #324]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x258>)
 8003a94:	f7ff fac8 	bl	8003028 <LL_ADC_GetCommonPathInternalCh>
 8003a98:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a4f      	ldr	r2, [pc, #316]	@ (8003bdc <HAL_ADC_ConfigChannel+0x25c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d120      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d11b      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4848      	ldr	r0, [pc, #288]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x258>)
 8003ab8:	f7ff faa4 	bl	8003004 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003abc:	4b48      	ldr	r3, [pc, #288]	@ (8003be0 <HAL_ADC_ConfigChannel+0x260>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	099b      	lsrs	r3, r3, #6
 8003ac2:	4a48      	ldr	r2, [pc, #288]	@ (8003be4 <HAL_ADC_ConfigChannel+0x264>)
 8003ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac8:	099b      	lsrs	r3, r3, #6
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	4613      	mov	r3, r2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003ad6:	e002      	b.n	8003ade <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f9      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ae4:	e06c      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a3f      	ldr	r2, [pc, #252]	@ (8003be8 <HAL_ADC_ConfigChannel+0x268>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10c      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d107      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b00:	4619      	mov	r1, r3
 8003b02:	4835      	ldr	r0, [pc, #212]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x258>)
 8003b04:	f7ff fa7e 	bl	8003004 <LL_ADC_SetCommonPathInternalCh>
 8003b08:	e05a      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a37      	ldr	r2, [pc, #220]	@ (8003bec <HAL_ADC_ConfigChannel+0x26c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d155      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d150      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b24:	4619      	mov	r1, r3
 8003b26:	482c      	ldr	r0, [pc, #176]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x258>)
 8003b28:	f7ff fa6c 	bl	8003004 <LL_ADC_SetCommonPathInternalCh>
 8003b2c:	e048      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b36:	d004      	beq.n	8003b42 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b3c:	4a25      	ldr	r2, [pc, #148]	@ (8003bd4 <HAL_ADC_ConfigChannel+0x254>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d107      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	f7ff faf3 	bl	8003138 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	da32      	bge.n	8003bc0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b5a:	481f      	ldr	r0, [pc, #124]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x258>)
 8003b5c:	f7ff fa64 	bl	8003028 <LL_ADC_GetCommonPathInternalCh>
 8003b60:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1d      	ldr	r2, [pc, #116]	@ (8003bdc <HAL_ADC_ConfigChannel+0x25c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d107      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003b72:	4619      	mov	r1, r3
 8003b74:	4818      	ldr	r0, [pc, #96]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x258>)
 8003b76:	f7ff fa45 	bl	8003004 <LL_ADC_SetCommonPathInternalCh>
 8003b7a:	e021      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a19      	ldr	r2, [pc, #100]	@ (8003be8 <HAL_ADC_ConfigChannel+0x268>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d107      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4812      	ldr	r0, [pc, #72]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x258>)
 8003b90:	f7ff fa38 	bl	8003004 <LL_ADC_SetCommonPathInternalCh>
 8003b94:	e014      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a14      	ldr	r2, [pc, #80]	@ (8003bec <HAL_ADC_ConfigChannel+0x26c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d10f      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	480b      	ldr	r0, [pc, #44]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x258>)
 8003baa:	f7ff fa2b 	bl	8003004 <LL_ADC_SetCommonPathInternalCh>
 8003bae:	e007      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb4:	f043 0220 	orr.w	r2, r3, #32
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003bc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	80000004 	.word	0x80000004
 8003bd8:	40012708 	.word	0x40012708
 8003bdc:	b0001000 	.word	0xb0001000
 8003be0:	20000000 	.word	0x20000000
 8003be4:	053e2d63 	.word	0x053e2d63
 8003be8:	b8004000 	.word	0xb8004000
 8003bec:	b4002000 	.word	0xb4002000

08003bf0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff fb71 	bl	80032e4 <LL_ADC_REG_IsConversionOngoing>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d033      	beq.n	8003c70 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fb31 	bl	8003274 <LL_ADC_IsDisableOngoing>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d104      	bne.n	8003c22 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fb4e 	bl	80032be <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c22:	f7fe fbf3 	bl	800240c <HAL_GetTick>
 8003c26:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c28:	e01b      	b.n	8003c62 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c2a:	f7fe fbef 	bl	800240c <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d914      	bls.n	8003c62 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00d      	beq.n	8003c62 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4a:	f043 0210 	orr.w	r2, r3, #16
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c56:	f043 0201 	orr.w	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e007      	b.n	8003c72 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1dc      	bne.n	8003c2a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff fadf 	bl	8003250 <LL_ADC_IsEnabled>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d169      	bne.n	8003d6c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	4b36      	ldr	r3, [pc, #216]	@ (8003d78 <ADC_Enable+0xfc>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00d      	beq.n	8003cc2 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003caa:	f043 0210 	orr.w	r2, r3, #16
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb6:	f043 0201 	orr.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e055      	b.n	8003d6e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff fa9c 	bl	8003204 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003ccc:	482b      	ldr	r0, [pc, #172]	@ (8003d7c <ADC_Enable+0x100>)
 8003cce:	f7ff f9ab 	bl	8003028 <LL_ADC_GetCommonPathInternalCh>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00f      	beq.n	8003cfc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cdc:	4b28      	ldr	r3, [pc, #160]	@ (8003d80 <ADC_Enable+0x104>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	099b      	lsrs	r3, r3, #6
 8003ce2:	4a28      	ldr	r2, [pc, #160]	@ (8003d84 <ADC_Enable+0x108>)
 8003ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce8:	099b      	lsrs	r3, r3, #6
 8003cea:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003cec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003cee:	e002      	b.n	8003cf6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f9      	bne.n	8003cf0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	7e5b      	ldrb	r3, [r3, #25]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d033      	beq.n	8003d6c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003d04:	f7fe fb82 	bl	800240c <HAL_GetTick>
 8003d08:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d0a:	e028      	b.n	8003d5e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fa9d 	bl	8003250 <LL_ADC_IsEnabled>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fa6f 	bl	8003204 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d26:	f7fe fb71 	bl	800240c <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d914      	bls.n	8003d5e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d00d      	beq.n	8003d5e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d46:	f043 0210 	orr.w	r2, r3, #16
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d52:	f043 0201 	orr.w	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e007      	b.n	8003d6e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d1cf      	bne.n	8003d0c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	80000017 	.word	0x80000017
 8003d7c:	40012708 	.word	0x40012708
 8003d80:	20000000 	.word	0x20000000
 8003d84:	053e2d63 	.word	0x053e2d63

08003d88 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fa6d 	bl	8003274 <LL_ADC_IsDisableOngoing>
 8003d9a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fa55 	bl	8003250 <LL_ADC_IsEnabled>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d047      	beq.n	8003e3c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d144      	bne.n	8003e3c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0305 	and.w	r3, r3, #5
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d10c      	bne.n	8003dda <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fa30 	bl	800322a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2203      	movs	r2, #3
 8003dd0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dd2:	f7fe fb1b 	bl	800240c <HAL_GetTick>
 8003dd6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dd8:	e029      	b.n	8003e2e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dde:	f043 0210 	orr.w	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dea:	f043 0201 	orr.w	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e023      	b.n	8003e3e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003df6:	f7fe fb09 	bl	800240c <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d914      	bls.n	8003e2e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00d      	beq.n	8003e2e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e16:	f043 0210 	orr.w	r2, r3, #16
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e22:	f043 0201 	orr.w	r2, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e007      	b.n	8003e3e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1dc      	bne.n	8003df6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <LL_ADC_SetCalibrationFactor>:
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e56:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <LL_ADC_GetCalibrationFactor>:
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr

08003e8a <LL_ADC_Enable>:
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e9a:	f023 0317 	bic.w	r3, r3, #23
 8003e9e:	f043 0201 	orr.w	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr

08003eb0 <LL_ADC_Disable>:
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ec0:	f023 0317 	bic.w	r3, r3, #23
 8003ec4:	f043 0202 	orr.w	r2, r3, #2
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	609a      	str	r2, [r3, #8]
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr

08003ed6 <LL_ADC_IsEnabled>:
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <LL_ADC_IsEnabled+0x18>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <LL_ADC_IsEnabled+0x1a>
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr

08003efa <LL_ADC_StartCalibration>:
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f0a:	f023 0317 	bic.w	r3, r3, #23
 8003f0e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	609a      	str	r2, [r3, #8]
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr

08003f20 <LL_ADC_IsCalibrationOnGoing>:
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f34:	d101      	bne.n	8003f3a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr

08003f46 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b088      	sub	sp, #32
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_ADCEx_Calibration_Start+0x1e>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e0b9      	b.n	80040d8 <HAL_ADCEx_Calibration_Start+0x192>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff ff0b 	bl	8003d88 <ADC_Disable>
 8003f72:	4603      	mov	r3, r0
 8003f74:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff ffab 	bl	8003ed6 <LL_ADC_IsEnabled>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f040 809d 	bne.w	80040c2 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003f90:	f043 0202 	orr.w	r2, r3, #2
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	f248 0303 	movw	r3, #32771	@ 0x8003
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003fb4:	f023 0303 	bic.w	r3, r3, #3
 8003fb8:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	e02e      	b.n	800401e <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff ff98 	bl	8003efa <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fca:	e014      	b.n	8003ff6 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8003fd8:	d30d      	bcc.n	8003ff6 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fde:	f023 0312 	bic.w	r3, r3, #18
 8003fe2:	f043 0210 	orr.w	r2, r3, #16
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e070      	b.n	80040d8 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff ff90 	bl	8003f20 <LL_ADC_IsCalibrationOnGoing>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e2      	bne.n	8003fcc <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff ff2f 	bl	8003e6e <LL_ADC_GetCalibrationFactor>
 8004010:	4602      	mov	r2, r0
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	4413      	add	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	3301      	adds	r3, #1
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	2b07      	cmp	r3, #7
 8004022:	d9cd      	bls.n	8003fc0 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff ff29 	bl	8003e8a <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	69b9      	ldr	r1, [r7, #24]
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff ff01 	bl	8003e46 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff ff31 	bl	8003eb0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800404e:	f7fe f9dd 	bl	800240c <HAL_GetTick>
 8004052:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004054:	e01c      	b.n	8004090 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004056:	f7fe f9d9 	bl	800240c <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d915      	bls.n	8004090 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff ff34 	bl	8003ed6 <LL_ADC_IsEnabled>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00d      	beq.n	8004090 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004078:	f043 0210 	orr.w	r2, r3, #16
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004084:	f043 0201 	orr.w	r2, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e023      	b.n	80040d8 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff1e 	bl	8003ed6 <LL_ADC_IsEnabled>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1da      	bne.n	8004056 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68d9      	ldr	r1, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b4:	f023 0303 	bic.w	r3, r3, #3
 80040b8:	f043 0201 	orr.w	r2, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	659a      	str	r2, [r3, #88]	@ 0x58
 80040c0:	e005      	b.n	80040ce <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c6:	f043 0210 	orr.w	r2, r3, #16
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004124 <__NVIC_SetPriorityGrouping+0x44>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040fc:	4013      	ands	r3, r2
 80040fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004108:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800410c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004112:	4a04      	ldr	r2, [pc, #16]	@ (8004124 <__NVIC_SetPriorityGrouping+0x44>)
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	60d3      	str	r3, [r2, #12]
}
 8004118:	bf00      	nop
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	e000ed00 	.word	0xe000ed00

08004128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800412c:	4b04      	ldr	r3, [pc, #16]	@ (8004140 <__NVIC_GetPriorityGrouping+0x18>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	0a1b      	lsrs	r3, r3, #8
 8004132:	f003 0307 	and.w	r3, r3, #7
}
 8004136:	4618      	mov	r0, r3
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	e000ed00 	.word	0xe000ed00

08004144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800414e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004152:	2b00      	cmp	r3, #0
 8004154:	db0b      	blt.n	800416e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	f003 021f 	and.w	r2, r3, #31
 800415c:	4906      	ldr	r1, [pc, #24]	@ (8004178 <__NVIC_EnableIRQ+0x34>)
 800415e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	2001      	movs	r0, #1
 8004166:	fa00 f202 	lsl.w	r2, r0, r2
 800416a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr
 8004178:	e000e100 	.word	0xe000e100

0800417c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418a:	2b00      	cmp	r3, #0
 800418c:	db12      	blt.n	80041b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	f003 021f 	and.w	r2, r3, #31
 8004194:	490a      	ldr	r1, [pc, #40]	@ (80041c0 <__NVIC_DisableIRQ+0x44>)
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2001      	movs	r0, #1
 800419e:	fa00 f202 	lsl.w	r2, r0, r2
 80041a2:	3320      	adds	r3, #32
 80041a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80041a8:	f3bf 8f4f 	dsb	sy
}
 80041ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041ae:	f3bf 8f6f 	isb	sy
}
 80041b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	e000e100 	.word	0xe000e100

080041c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	6039      	str	r1, [r7, #0]
 80041ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	db0a      	blt.n	80041ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	490c      	ldr	r1, [pc, #48]	@ (8004210 <__NVIC_SetPriority+0x4c>)
 80041de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e2:	0112      	lsls	r2, r2, #4
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	440b      	add	r3, r1
 80041e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041ec:	e00a      	b.n	8004204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	4908      	ldr	r1, [pc, #32]	@ (8004214 <__NVIC_SetPriority+0x50>)
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	3b04      	subs	r3, #4
 80041fc:	0112      	lsls	r2, r2, #4
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	440b      	add	r3, r1
 8004202:	761a      	strb	r2, [r3, #24]
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	e000e100 	.word	0xe000e100
 8004214:	e000ed00 	.word	0xe000ed00

08004218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004218:	b480      	push	{r7}
 800421a:	b089      	sub	sp, #36	@ 0x24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f1c3 0307 	rsb	r3, r3, #7
 8004232:	2b04      	cmp	r3, #4
 8004234:	bf28      	it	cs
 8004236:	2304      	movcs	r3, #4
 8004238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3304      	adds	r3, #4
 800423e:	2b06      	cmp	r3, #6
 8004240:	d902      	bls.n	8004248 <NVIC_EncodePriority+0x30>
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	3b03      	subs	r3, #3
 8004246:	e000      	b.n	800424a <NVIC_EncodePriority+0x32>
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800424c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43da      	mvns	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	401a      	ands	r2, r3
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004260:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	fa01 f303 	lsl.w	r3, r1, r3
 800426a:	43d9      	mvns	r1, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004270:	4313      	orrs	r3, r2
         );
}
 8004272:	4618      	mov	r0, r3
 8004274:	3724      	adds	r7, #36	@ 0x24
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr

0800427c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3b01      	subs	r3, #1
 8004288:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800428c:	d301      	bcc.n	8004292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800428e:	2301      	movs	r3, #1
 8004290:	e00f      	b.n	80042b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004292:	4a0a      	ldr	r2, [pc, #40]	@ (80042bc <SysTick_Config+0x40>)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3b01      	subs	r3, #1
 8004298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800429a:	210f      	movs	r1, #15
 800429c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042a0:	f7ff ff90 	bl	80041c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042a4:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <SysTick_Config+0x40>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042aa:	4b04      	ldr	r3, [pc, #16]	@ (80042bc <SysTick_Config+0x40>)
 80042ac:	2207      	movs	r2, #7
 80042ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	e000e010 	.word	0xe000e010

080042c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff ff09 	bl	80040e0 <__NVIC_SetPriorityGrouping>
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b086      	sub	sp, #24
 80042da:	af00      	add	r7, sp, #0
 80042dc:	4603      	mov	r3, r0
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
 80042e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042e4:	f7ff ff20 	bl	8004128 <__NVIC_GetPriorityGrouping>
 80042e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	6978      	ldr	r0, [r7, #20]
 80042f0:	f7ff ff92 	bl	8004218 <NVIC_EncodePriority>
 80042f4:	4602      	mov	r2, r0
 80042f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042fa:	4611      	mov	r1, r2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff61 	bl	80041c4 <__NVIC_SetPriority>
}
 8004302:	bf00      	nop
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	4603      	mov	r3, r0
 8004312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff13 	bl	8004144 <__NVIC_EnableIRQ>
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	4603      	mov	r3, r0
 800432e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff ff21 	bl	800417c <__NVIC_DisableIRQ>
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff ff96 	bl	800427c <SysTick_Config>
 8004350:	4603      	mov	r3, r0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e08e      	b.n	800448c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	4b47      	ldr	r3, [pc, #284]	@ (8004494 <HAL_DMA_Init+0x138>)
 8004376:	429a      	cmp	r2, r3
 8004378:	d80f      	bhi.n	800439a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	4b45      	ldr	r3, [pc, #276]	@ (8004498 <HAL_DMA_Init+0x13c>)
 8004382:	4413      	add	r3, r2
 8004384:	4a45      	ldr	r2, [pc, #276]	@ (800449c <HAL_DMA_Init+0x140>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	009a      	lsls	r2, r3, #2
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a42      	ldr	r2, [pc, #264]	@ (80044a0 <HAL_DMA_Init+0x144>)
 8004396:	641a      	str	r2, [r3, #64]	@ 0x40
 8004398:	e00e      	b.n	80043b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	4b40      	ldr	r3, [pc, #256]	@ (80044a4 <HAL_DMA_Init+0x148>)
 80043a2:	4413      	add	r3, r2
 80043a4:	4a3d      	ldr	r2, [pc, #244]	@ (800449c <HAL_DMA_Init+0x140>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	009a      	lsls	r2, r3, #2
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a3c      	ldr	r2, [pc, #240]	@ (80044a8 <HAL_DMA_Init+0x14c>)
 80043b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80043ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6819      	ldr	r1, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fb24 	bl	8004a58 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004418:	d102      	bne.n	8004420 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004428:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800442c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004436:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d010      	beq.n	8004462 <HAL_DMA_Init+0x106>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b04      	cmp	r3, #4
 8004446:	d80c      	bhi.n	8004462 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fb4d 	bl	8004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800445e:	605a      	str	r2, [r3, #4]
 8004460:	e008      	b.n	8004474 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40020407 	.word	0x40020407
 8004498:	bffdfff8 	.word	0xbffdfff8
 800449c:	cccccccd 	.word	0xcccccccd
 80044a0:	40020000 	.word	0x40020000
 80044a4:	bffdfbf8 	.word	0xbffdfbf8
 80044a8:	40020400 	.word	0x40020400

080044ac <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e07b      	b.n	80045b6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0201 	bic.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	4b3a      	ldr	r3, [pc, #232]	@ (80045c0 <HAL_DMA_DeInit+0x114>)
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d80f      	bhi.n	80044fa <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	4b38      	ldr	r3, [pc, #224]	@ (80045c4 <HAL_DMA_DeInit+0x118>)
 80044e2:	4413      	add	r3, r2
 80044e4:	4a38      	ldr	r2, [pc, #224]	@ (80045c8 <HAL_DMA_DeInit+0x11c>)
 80044e6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ea:	091b      	lsrs	r3, r3, #4
 80044ec:	009a      	lsls	r2, r3, #2
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a35      	ldr	r2, [pc, #212]	@ (80045cc <HAL_DMA_DeInit+0x120>)
 80044f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80044f8:	e00e      	b.n	8004518 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	4b33      	ldr	r3, [pc, #204]	@ (80045d0 <HAL_DMA_DeInit+0x124>)
 8004502:	4413      	add	r3, r2
 8004504:	4a30      	ldr	r2, [pc, #192]	@ (80045c8 <HAL_DMA_DeInit+0x11c>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	091b      	lsrs	r3, r3, #4
 800450c:	009a      	lsls	r2, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2f      	ldr	r2, [pc, #188]	@ (80045d4 <HAL_DMA_DeInit+0x128>)
 8004516:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004524:	f003 021c 	and.w	r2, r3, #28
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	2101      	movs	r1, #1
 800452e:	fa01 f202 	lsl.w	r2, r1, r2
 8004532:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fa8f 	bl	8004a58 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800454a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00f      	beq.n	8004574 <HAL_DMA_DeInit+0xc8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b04      	cmp	r3, #4
 800455a:	d80b      	bhi.n	8004574 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fac3 	bl	8004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004572:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40020407 	.word	0x40020407
 80045c4:	bffdfff8 	.word	0xbffdfff8
 80045c8:	cccccccd 	.word	0xcccccccd
 80045cc:	40020000 	.word	0x40020000
 80045d0:	bffdfbf8 	.word	0xbffdfbf8
 80045d4:	40020400 	.word	0x40020400

080045d8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_DMA_Start_IT+0x20>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e069      	b.n	80046cc <HAL_DMA_Start_IT+0xf4>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	d155      	bne.n	80046b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0201 	bic.w	r2, r2, #1
 8004628:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f9d3 	bl	80049dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 020e 	orr.w	r2, r2, #14
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	e00f      	b.n	8004670 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0204 	bic.w	r2, r2, #4
 800465e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 020a 	orr.w	r2, r2, #10
 800466e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004688:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800468c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e008      	b.n	80046ca <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2280      	movs	r2, #128	@ 0x80
 80046bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e04f      	b.n	8004786 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d008      	beq.n	8004704 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2204      	movs	r2, #4
 80046f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e040      	b.n	8004786 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 020e 	bic.w	r2, r2, #14
 8004712:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800471e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004722:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004738:	f003 021c 	and.w	r2, r3, #28
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004740:	2101      	movs	r1, #1
 8004742:	fa01 f202 	lsl.w	r2, r1, r2
 8004746:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004750:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00c      	beq.n	8004774 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004764:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004768:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004772:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr

08004790 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d005      	beq.n	80047b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2204      	movs	r2, #4
 80047ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	73fb      	strb	r3, [r7, #15]
 80047b2:	e047      	b.n	8004844 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 020e 	bic.w	r2, r2, #14
 80047c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0201 	bic.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e8:	f003 021c 	and.w	r2, r3, #28
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	2101      	movs	r1, #1
 80047f2:	fa01 f202 	lsl.w	r2, r1, r2
 80047f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004800:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00c      	beq.n	8004824 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004814:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004818:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004822:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4798      	blx	r3
    }
  }
  return status;
 8004844:	7bfb      	ldrb	r3, [r7, #15]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486c:	f003 031c 	and.w	r3, r3, #28
 8004870:	2204      	movs	r2, #4
 8004872:	409a      	lsls	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4013      	ands	r3, r2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d027      	beq.n	80048cc <HAL_DMA_IRQHandler+0x7c>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	d022      	beq.n	80048cc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d107      	bne.n	80048a4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0204 	bic.w	r2, r2, #4
 80048a2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a8:	f003 021c 	and.w	r2, r3, #28
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b0:	2104      	movs	r1, #4
 80048b2:	fa01 f202 	lsl.w	r2, r1, r2
 80048b6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8081 	beq.w	80049c4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80048ca:	e07b      	b.n	80049c4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d0:	f003 031c 	and.w	r3, r3, #28
 80048d4:	2202      	movs	r2, #2
 80048d6:	409a      	lsls	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d03d      	beq.n	800495c <HAL_DMA_IRQHandler+0x10c>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d038      	beq.n	800495c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10b      	bne.n	8004910 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 020a 	bic.w	r2, r2, #10
 8004906:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	4b2e      	ldr	r3, [pc, #184]	@ (80049d0 <HAL_DMA_IRQHandler+0x180>)
 8004918:	429a      	cmp	r2, r3
 800491a:	d909      	bls.n	8004930 <HAL_DMA_IRQHandler+0xe0>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004920:	f003 031c 	and.w	r3, r3, #28
 8004924:	4a2b      	ldr	r2, [pc, #172]	@ (80049d4 <HAL_DMA_IRQHandler+0x184>)
 8004926:	2102      	movs	r1, #2
 8004928:	fa01 f303 	lsl.w	r3, r1, r3
 800492c:	6053      	str	r3, [r2, #4]
 800492e:	e008      	b.n	8004942 <HAL_DMA_IRQHandler+0xf2>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004934:	f003 031c 	and.w	r3, r3, #28
 8004938:	4a27      	ldr	r2, [pc, #156]	@ (80049d8 <HAL_DMA_IRQHandler+0x188>)
 800493a:	2102      	movs	r1, #2
 800493c:	fa01 f303 	lsl.w	r3, r1, r3
 8004940:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d038      	beq.n	80049c4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800495a:	e033      	b.n	80049c4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004960:	f003 031c 	and.w	r3, r3, #28
 8004964:	2208      	movs	r2, #8
 8004966:	409a      	lsls	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d02a      	beq.n	80049c6 <HAL_DMA_IRQHandler+0x176>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d025      	beq.n	80049c6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 020e 	bic.w	r2, r2, #14
 8004988:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498e:	f003 021c 	and.w	r2, r3, #28
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	2101      	movs	r1, #1
 8004998:	fa01 f202 	lsl.w	r2, r1, r2
 800499c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d004      	beq.n	80049c6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop
}
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40020080 	.word	0x40020080
 80049d4:	40020400 	.word	0x40020400
 80049d8:	40020000 	.word	0x40020000

080049dc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d004      	beq.n	8004a06 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a04:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0a:	f003 021c 	and.w	r2, r3, #28
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a12:	2101      	movs	r1, #1
 8004a14:	fa01 f202 	lsl.w	r2, r1, r2
 8004a18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d108      	bne.n	8004a3c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a3a:	e007      	b.n	8004a4c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	60da      	str	r2, [r3, #12]
}
 8004a4c:	bf00      	nop
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr
	...

08004a58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	4b1c      	ldr	r3, [pc, #112]	@ (8004ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d813      	bhi.n	8004a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a70:	089b      	lsrs	r3, r3, #2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a78:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	3b08      	subs	r3, #8
 8004a88:	4a14      	ldr	r2, [pc, #80]	@ (8004adc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8e:	091b      	lsrs	r3, r3, #4
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	e011      	b.n	8004ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a98:	089b      	lsrs	r3, r3, #2
 8004a9a:	009a      	lsls	r2, r3, #2
 8004a9c:	4b10      	ldr	r3, [pc, #64]	@ (8004ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004a9e:	4413      	add	r3, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	3b08      	subs	r3, #8
 8004aac:	4a0b      	ldr	r2, [pc, #44]	@ (8004adc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004aae:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	3307      	adds	r3, #7
 8004ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004abc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40020407 	.word	0x40020407
 8004adc:	cccccccd 	.word	0xcccccccd
 8004ae0:	4002081c 	.word	0x4002081c
 8004ae4:	40020880 	.word	0x40020880

08004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004af8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4b0a      	ldr	r3, [pc, #40]	@ (8004b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	461a      	mov	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a08      	ldr	r2, [pc, #32]	@ (8004b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2201      	movs	r2, #1
 8004b18:	409a      	lsls	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004b1e:	bf00      	nop
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr
 8004b28:	1000823f 	.word	0x1000823f
 8004b2c:	40020940 	.word	0x40020940

08004b30 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8004bb0 <HAL_FLASH_Program+0x80>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_FLASH_Program+0x1a>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e02d      	b.n	8004ba6 <HAL_FLASH_Program+0x76>
 8004b4a:	4b19      	ldr	r3, [pc, #100]	@ (8004bb0 <HAL_FLASH_Program+0x80>)
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b50:	4b17      	ldr	r3, [pc, #92]	@ (8004bb0 <HAL_FLASH_Program+0x80>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004b5a:	f000 f869 	bl	8004c30 <FLASH_WaitForLastOperation>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004b62:	7dfb      	ldrb	r3, [r7, #23]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d11a      	bne.n	8004b9e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d105      	bne.n	8004b7a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b72:	68b8      	ldr	r0, [r7, #8]
 8004b74:	f000 f8be 	bl	8004cf4 <FLASH_Program_DoubleWord>
 8004b78:	e004      	b.n	8004b84 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	68b8      	ldr	r0, [r7, #8]
 8004b80:	f000 f8de 	bl	8004d40 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004b88:	f000 f852 	bl	8004c30 <FLASH_WaitForLastOperation>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004b90:	4b08      	ldr	r3, [pc, #32]	@ (8004bb4 <HAL_FLASH_Program+0x84>)
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	43db      	mvns	r3, r3
 8004b98:	4906      	ldr	r1, [pc, #24]	@ (8004bb4 <HAL_FLASH_Program+0x84>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b9e:	4b04      	ldr	r3, [pc, #16]	@ (8004bb0 <HAL_FLASH_Program+0x80>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	200003a8 	.word	0x200003a8
 8004bb4:	58004000 	.word	0x58004000

08004bb8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf0 <HAL_FLASH_Unlock+0x38>)
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	da0b      	bge.n	8004be2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004bca:	4b09      	ldr	r3, [pc, #36]	@ (8004bf0 <HAL_FLASH_Unlock+0x38>)
 8004bcc:	4a09      	ldr	r2, [pc, #36]	@ (8004bf4 <HAL_FLASH_Unlock+0x3c>)
 8004bce:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004bd0:	4b07      	ldr	r3, [pc, #28]	@ (8004bf0 <HAL_FLASH_Unlock+0x38>)
 8004bd2:	4a09      	ldr	r2, [pc, #36]	@ (8004bf8 <HAL_FLASH_Unlock+0x40>)
 8004bd4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004bd6:	4b06      	ldr	r3, [pc, #24]	@ (8004bf0 <HAL_FLASH_Unlock+0x38>)
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	da01      	bge.n	8004be2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004be2:	79fb      	ldrb	r3, [r7, #7]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	58004000 	.word	0x58004000
 8004bf4:	45670123 	.word	0x45670123
 8004bf8:	cdef89ab 	.word	0xcdef89ab

08004bfc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004c06:	4b09      	ldr	r3, [pc, #36]	@ (8004c2c <HAL_FLASH_Lock+0x30>)
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	4a08      	ldr	r2, [pc, #32]	@ (8004c2c <HAL_FLASH_Lock+0x30>)
 8004c0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c10:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004c12:	4b06      	ldr	r3, [pc, #24]	@ (8004c2c <HAL_FLASH_Lock+0x30>)
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	db01      	blt.n	8004c1e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	58004000 	.word	0x58004000

08004c30 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004c38:	f7fd fbe8 	bl	800240c <HAL_GetTick>
 8004c3c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004c3e:	e009      	b.n	8004c54 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004c40:	f7fd fbe4 	bl	800240c <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d801      	bhi.n	8004c54 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e046      	b.n	8004ce2 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004c54:	4b25      	ldr	r3, [pc, #148]	@ (8004cec <FLASH_WaitForLastOperation+0xbc>)
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c60:	d0ee      	beq.n	8004c40 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004c62:	4b22      	ldr	r3, [pc, #136]	@ (8004cec <FLASH_WaitForLastOperation+0xbc>)
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004c72:	4b1e      	ldr	r3, [pc, #120]	@ (8004cec <FLASH_WaitForLastOperation+0xbc>)
 8004c74:	2201      	movs	r2, #1
 8004c76:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004c7e:	4013      	ands	r3, r2
 8004c80:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c88:	d307      	bcc.n	8004c9a <FLASH_WaitForLastOperation+0x6a>
 8004c8a:	4b18      	ldr	r3, [pc, #96]	@ (8004cec <FLASH_WaitForLastOperation+0xbc>)
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004c94:	4915      	ldr	r1, [pc, #84]	@ (8004cec <FLASH_WaitForLastOperation+0xbc>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	618b      	str	r3, [r1, #24]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d004      	beq.n	8004cae <FLASH_WaitForLastOperation+0x7e>
 8004ca4:	4a11      	ldr	r2, [pc, #68]	@ (8004cec <FLASH_WaitForLastOperation+0xbc>)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004cac:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00e      	beq.n	8004cd2 <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004cb4:	4a0e      	ldr	r2, [pc, #56]	@ (8004cf0 <FLASH_WaitForLastOperation+0xc0>)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e011      	b.n	8004ce2 <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004cbe:	f7fd fba5 	bl	800240c <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d801      	bhi.n	8004cd2 <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e007      	b.n	8004ce2 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004cd2:	4b06      	ldr	r3, [pc, #24]	@ (8004cec <FLASH_WaitForLastOperation+0xbc>)
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cde:	d0ee      	beq.n	8004cbe <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	58004000 	.word	0x58004000
 8004cf0:	200003a8 	.word	0x200003a8

08004cf4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004d00:	4b0e      	ldr	r3, [pc, #56]	@ (8004d3c <FLASH_Program_DoubleWord+0x48>)
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	4a0d      	ldr	r2, [pc, #52]	@ (8004d3c <FLASH_Program_DoubleWord+0x48>)
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004d12:	f3bf 8f6f 	isb	sy
}
 8004d16:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004d18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	000a      	movs	r2, r1
 8004d26:	2300      	movs	r3, #0
 8004d28:	68f9      	ldr	r1, [r7, #12]
 8004d2a:	3104      	adds	r1, #4
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	600b      	str	r3, [r1, #0]
}
 8004d30:	bf00      	nop
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	58004000 	.word	0x58004000

08004d40 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004d40:	b480      	push	{r7}
 8004d42:	b089      	sub	sp, #36	@ 0x24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004d4a:	2340      	movs	r3, #64	@ 0x40
 8004d4c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004d56:	4b18      	ldr	r3, [pc, #96]	@ (8004db8 <FLASH_Program_Fast+0x78>)
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	4a17      	ldr	r2, [pc, #92]	@ (8004db8 <FLASH_Program_Fast+0x78>)
 8004d5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d60:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d62:	f3ef 8310 	mrs	r3, PRIMASK
 8004d66:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d68:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004d6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d6c:	b672      	cpsid	i
}
 8004d6e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	3304      	adds	r3, #4
 8004d82:	617b      	str	r3, [r7, #20]
    row_index--;
 8004d84:	7ffb      	ldrb	r3, [r7, #31]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004d8a:	7ffb      	ldrb	r3, [r7, #31]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1ef      	bne.n	8004d70 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004d90:	bf00      	nop
 8004d92:	4b09      	ldr	r3, [pc, #36]	@ (8004db8 <FLASH_Program_Fast+0x78>)
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d9e:	d0f8      	beq.n	8004d92 <FLASH_Program_Fast+0x52>
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f383 8810 	msr	PRIMASK, r3
}
 8004daa:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004dac:	bf00      	nop
 8004dae:	3724      	adds	r7, #36	@ 0x24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	58004000 	.word	0x58004000

08004dbc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004dc6:	4b28      	ldr	r3, [pc, #160]	@ (8004e68 <HAL_FLASHEx_Erase+0xac>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_FLASHEx_Erase+0x16>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	e046      	b.n	8004e60 <HAL_FLASHEx_Erase+0xa4>
 8004dd2:	4b25      	ldr	r3, [pc, #148]	@ (8004e68 <HAL_FLASHEx_Erase+0xac>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004dd8:	4b23      	ldr	r3, [pc, #140]	@ (8004e68 <HAL_FLASHEx_Erase+0xac>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004dde:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004de2:	f7ff ff25 	bl	8004c30 <FLASH_WaitForLastOperation>
 8004de6:	4603      	mov	r3, r0
 8004de8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d133      	bne.n	8004e58 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d108      	bne.n	8004e0a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004df8:	f000 f838 	bl	8004e6c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004dfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004e00:	f7ff ff16 	bl	8004c30 <FLASH_WaitForLastOperation>
 8004e04:	4603      	mov	r3, r0
 8004e06:	73fb      	strb	r3, [r7, #15]
 8004e08:	e024      	b.n	8004e54 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e10:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	60bb      	str	r3, [r7, #8]
 8004e18:	e012      	b.n	8004e40 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004e1a:	68b8      	ldr	r0, [r7, #8]
 8004e1c:	f000 f836 	bl	8004e8c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004e24:	f7ff ff04 	bl	8004c30 <FLASH_WaitForLastOperation>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	601a      	str	r2, [r3, #0]
          break;
 8004e38:	e00a      	b.n	8004e50 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	60bb      	str	r3, [r7, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4413      	add	r3, r2
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d3e4      	bcc.n	8004e1a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004e50:	f000 f878 	bl	8004f44 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004e54:	f000 f832 	bl	8004ebc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004e58:	4b03      	ldr	r3, [pc, #12]	@ (8004e68 <HAL_FLASHEx_Erase+0xac>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	701a      	strb	r2, [r3, #0]

  return status;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	200003a8 	.word	0x200003a8

08004e6c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004e70:	4b05      	ldr	r3, [pc, #20]	@ (8004e88 <FLASH_MassErase+0x1c>)
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	4a04      	ldr	r2, [pc, #16]	@ (8004e88 <FLASH_MassErase+0x1c>)
 8004e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e7a:	f043 0304 	orr.w	r3, r3, #4
 8004e7e:	6153      	str	r3, [r2, #20]
#endif
}
 8004e80:	bf00      	nop
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr
 8004e88:	58004000 	.word	0x58004000

08004e8c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004e94:	4b08      	ldr	r3, [pc, #32]	@ (8004eb8 <FLASH_PageErase+0x2c>)
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	4a05      	ldr	r2, [pc, #20]	@ (8004eb8 <FLASH_PageErase+0x2c>)
 8004ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea8:	f043 0302 	orr.w	r3, r3, #2
 8004eac:	6153      	str	r3, [r2, #20]
#endif
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr
 8004eb8:	58004000 	.word	0x58004000

08004ebc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d117      	bne.n	8004efc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004ed2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ed6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004ed8:	4b19      	ldr	r3, [pc, #100]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a18      	ldr	r2, [pc, #96]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004ede:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	4b16      	ldr	r3, [pc, #88]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a15      	ldr	r2, [pc, #84]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004eea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004eee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ef0:	4b13      	ldr	r3, [pc, #76]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a12      	ldr	r2, [pc, #72]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004ef6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004efa:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004efc:	4b10      	ldr	r3, [pc, #64]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d117      	bne.n	8004f38 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004f08:	4b0d      	ldr	r3, [pc, #52]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a0c      	ldr	r2, [pc, #48]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004f0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f12:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004f14:	4b0a      	ldr	r3, [pc, #40]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a09      	ldr	r2, [pc, #36]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004f1a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	4b07      	ldr	r3, [pc, #28]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a06      	ldr	r2, [pc, #24]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004f26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f2a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f2c:	4b04      	ldr	r3, [pc, #16]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a03      	ldr	r2, [pc, #12]	@ (8004f40 <FLASH_FlushCaches+0x84>)
 8004f32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f36:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004f38:	bf00      	nop
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr
 8004f40:	58004000 	.word	0x58004000

08004f44 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004f48:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <FLASH_AcknowledgePageErase+0x1c>)
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	4a04      	ldr	r2, [pc, #16]	@ (8004f60 <FLASH_AcknowledgePageErase+0x1c>)
 8004f4e:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8004f52:	f023 0302 	bic.w	r3, r3, #2
 8004f56:	6153      	str	r3, [r2, #20]
#endif
}
 8004f58:	bf00      	nop
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr
 8004f60:	58004000 	.word	0x58004000

08004f64 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f72:	e140      	b.n	80051f6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	2101      	movs	r1, #1
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f80:	4013      	ands	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 8132 	beq.w	80051f0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d005      	beq.n	8004fa4 <HAL_GPIO_Init+0x40>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d130      	bne.n	8005006 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	2203      	movs	r2, #3
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fda:	2201      	movs	r2, #1
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	f003 0201 	and.w	r2, r3, #1
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b03      	cmp	r3, #3
 8005010:	d017      	beq.n	8005042 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	2203      	movs	r2, #3
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	43db      	mvns	r3, r3
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4013      	ands	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d123      	bne.n	8005096 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	08da      	lsrs	r2, r3, #3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3208      	adds	r2, #8
 8005056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800505a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	220f      	movs	r2, #15
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43db      	mvns	r3, r3
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4013      	ands	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	08da      	lsrs	r2, r3, #3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3208      	adds	r2, #8
 8005090:	6939      	ldr	r1, [r7, #16]
 8005092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	2203      	movs	r2, #3
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	43db      	mvns	r3, r3
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4013      	ands	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f003 0203 	and.w	r2, r3, #3
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 808c 	beq.w	80051f0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80050d8:	4a4e      	ldr	r2, [pc, #312]	@ (8005214 <HAL_GPIO_Init+0x2b0>)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	089b      	lsrs	r3, r3, #2
 80050de:	3302      	adds	r3, #2
 80050e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f003 0303 	and.w	r3, r3, #3
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	2207      	movs	r2, #7
 80050f0:	fa02 f303 	lsl.w	r3, r2, r3
 80050f4:	43db      	mvns	r3, r3
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4013      	ands	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005102:	d00d      	beq.n	8005120 <HAL_GPIO_Init+0x1bc>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a44      	ldr	r2, [pc, #272]	@ (8005218 <HAL_GPIO_Init+0x2b4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d007      	beq.n	800511c <HAL_GPIO_Init+0x1b8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a43      	ldr	r2, [pc, #268]	@ (800521c <HAL_GPIO_Init+0x2b8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d101      	bne.n	8005118 <HAL_GPIO_Init+0x1b4>
 8005114:	2302      	movs	r3, #2
 8005116:	e004      	b.n	8005122 <HAL_GPIO_Init+0x1be>
 8005118:	2307      	movs	r3, #7
 800511a:	e002      	b.n	8005122 <HAL_GPIO_Init+0x1be>
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <HAL_GPIO_Init+0x1be>
 8005120:	2300      	movs	r3, #0
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	f002 0203 	and.w	r2, r2, #3
 8005128:	0092      	lsls	r2, r2, #2
 800512a:	4093      	lsls	r3, r2
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005132:	4938      	ldr	r1, [pc, #224]	@ (8005214 <HAL_GPIO_Init+0x2b0>)
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	089b      	lsrs	r3, r3, #2
 8005138:	3302      	adds	r3, #2
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005140:	4b37      	ldr	r3, [pc, #220]	@ (8005220 <HAL_GPIO_Init+0x2bc>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	43db      	mvns	r3, r3
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4013      	ands	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005164:	4a2e      	ldr	r2, [pc, #184]	@ (8005220 <HAL_GPIO_Init+0x2bc>)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800516a:	4b2d      	ldr	r3, [pc, #180]	@ (8005220 <HAL_GPIO_Init+0x2bc>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	43db      	mvns	r3, r3
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4013      	ands	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800518e:	4a24      	ldr	r2, [pc, #144]	@ (8005220 <HAL_GPIO_Init+0x2bc>)
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005194:	4b22      	ldr	r3, [pc, #136]	@ (8005220 <HAL_GPIO_Init+0x2bc>)
 8005196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800519a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	43db      	mvns	r3, r3
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4013      	ands	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80051ba:	4a19      	ldr	r2, [pc, #100]	@ (8005220 <HAL_GPIO_Init+0x2bc>)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80051c2:	4b17      	ldr	r3, [pc, #92]	@ (8005220 <HAL_GPIO_Init+0x2bc>)
 80051c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051c8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	43db      	mvns	r3, r3
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4013      	ands	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80051e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005220 <HAL_GPIO_Init+0x2bc>)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	3301      	adds	r3, #1
 80051f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	f47f aeb7 	bne.w	8004f74 <HAL_GPIO_Init+0x10>
  }
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40010000 	.word	0x40010000
 8005218:	48000400 	.word	0x48000400
 800521c:	48000800 	.word	0x48000800
 8005220:	58000800 	.word	0x58000800

08005224 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005232:	e0af      	b.n	8005394 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005234:	2201      	movs	r2, #1
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	4013      	ands	r3, r2
 8005240:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80a2 	beq.w	800538e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800524a:	4a59      	ldr	r2, [pc, #356]	@ (80053b0 <HAL_GPIO_DeInit+0x18c>)
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	089b      	lsrs	r3, r3, #2
 8005250:	3302      	adds	r3, #2
 8005252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005256:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	2207      	movs	r2, #7
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4013      	ands	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005272:	d00d      	beq.n	8005290 <HAL_GPIO_DeInit+0x6c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a4f      	ldr	r2, [pc, #316]	@ (80053b4 <HAL_GPIO_DeInit+0x190>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d007      	beq.n	800528c <HAL_GPIO_DeInit+0x68>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a4e      	ldr	r2, [pc, #312]	@ (80053b8 <HAL_GPIO_DeInit+0x194>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d101      	bne.n	8005288 <HAL_GPIO_DeInit+0x64>
 8005284:	2302      	movs	r3, #2
 8005286:	e004      	b.n	8005292 <HAL_GPIO_DeInit+0x6e>
 8005288:	2307      	movs	r3, #7
 800528a:	e002      	b.n	8005292 <HAL_GPIO_DeInit+0x6e>
 800528c:	2301      	movs	r3, #1
 800528e:	e000      	b.n	8005292 <HAL_GPIO_DeInit+0x6e>
 8005290:	2300      	movs	r3, #0
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	f002 0203 	and.w	r2, r2, #3
 8005298:	0092      	lsls	r2, r2, #2
 800529a:	4093      	lsls	r3, r2
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d136      	bne.n	8005310 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80052a2:	4b46      	ldr	r3, [pc, #280]	@ (80053bc <HAL_GPIO_DeInit+0x198>)
 80052a4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	43db      	mvns	r3, r3
 80052ac:	4943      	ldr	r1, [pc, #268]	@ (80053bc <HAL_GPIO_DeInit+0x198>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80052b4:	4b41      	ldr	r3, [pc, #260]	@ (80053bc <HAL_GPIO_DeInit+0x198>)
 80052b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	43db      	mvns	r3, r3
 80052be:	493f      	ldr	r1, [pc, #252]	@ (80053bc <HAL_GPIO_DeInit+0x198>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80052c6:	4b3d      	ldr	r3, [pc, #244]	@ (80053bc <HAL_GPIO_DeInit+0x198>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	43db      	mvns	r3, r3
 80052ce:	493b      	ldr	r1, [pc, #236]	@ (80053bc <HAL_GPIO_DeInit+0x198>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80052d4:	4b39      	ldr	r3, [pc, #228]	@ (80053bc <HAL_GPIO_DeInit+0x198>)
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	43db      	mvns	r3, r3
 80052dc:	4937      	ldr	r1, [pc, #220]	@ (80053bc <HAL_GPIO_DeInit+0x198>)
 80052de:	4013      	ands	r3, r2
 80052e0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	2207      	movs	r2, #7
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80052f2:	4a2f      	ldr	r2, [pc, #188]	@ (80053b0 <HAL_GPIO_DeInit+0x18c>)
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	089b      	lsrs	r3, r3, #2
 80052f8:	3302      	adds	r3, #2
 80052fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	43da      	mvns	r2, r3
 8005302:	482b      	ldr	r0, [pc, #172]	@ (80053b0 <HAL_GPIO_DeInit+0x18c>)
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	089b      	lsrs	r3, r3, #2
 8005308:	400a      	ands	r2, r1
 800530a:	3302      	adds	r3, #2
 800530c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	2103      	movs	r1, #3
 800531a:	fa01 f303 	lsl.w	r3, r1, r3
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	08da      	lsrs	r2, r3, #3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3208      	adds	r2, #8
 800532c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	220f      	movs	r2, #15
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43db      	mvns	r3, r3
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	08d2      	lsrs	r2, r2, #3
 8005344:	4019      	ands	r1, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3208      	adds	r2, #8
 800534a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	2103      	movs	r1, #3
 8005358:	fa01 f303 	lsl.w	r3, r1, r3
 800535c:	43db      	mvns	r3, r3
 800535e:	401a      	ands	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	2101      	movs	r1, #1
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	fa01 f303 	lsl.w	r3, r1, r3
 8005370:	43db      	mvns	r3, r3
 8005372:	401a      	ands	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	2103      	movs	r1, #3
 8005382:	fa01 f303 	lsl.w	r3, r1, r3
 8005386:	43db      	mvns	r3, r3
 8005388:	401a      	ands	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	3301      	adds	r3, #1
 8005392:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	fa22 f303 	lsr.w	r3, r2, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	f47f af49 	bne.w	8005234 <HAL_GPIO_DeInit+0x10>
  }
}
 80053a2:	bf00      	nop
 80053a4:	bf00      	nop
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40010000 	.word	0x40010000
 80053b4:	48000400 	.word	0x48000400
 80053b8:	48000800 	.word	0x48000800
 80053bc:	58000800 	.word	0x58000800

080053c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	807b      	strh	r3, [r7, #2]
 80053cc:	4613      	mov	r3, r2
 80053ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053d0:	787b      	ldrb	r3, [r7, #1]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053d6:	887a      	ldrh	r2, [r7, #2]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053dc:	e002      	b.n	80053e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053de:	887a      	ldrh	r2, [r7, #2]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr
	...

080053f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053fa:	4b08      	ldr	r3, [pc, #32]	@ (800541c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d006      	beq.n	8005414 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005406:	4a05      	ldr	r2, [pc, #20]	@ (800541c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005408:	88fb      	ldrh	r3, [r7, #6]
 800540a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	4618      	mov	r0, r3
 8005410:	f005 ff52 	bl	800b2b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005414:	bf00      	nop
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	58000800 	.word	0x58000800

08005420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e081      	b.n	8005536 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fc f9d8 	bl	80017fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2224      	movs	r2, #36	@ 0x24
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0201 	bic.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005470:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005480:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d107      	bne.n	800549a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005496:	609a      	str	r2, [r3, #8]
 8005498:	e006      	b.n	80054a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80054a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d104      	bne.n	80054ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80054c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691a      	ldr	r2, [r3, #16]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	69d9      	ldr	r1, [r3, #28]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1a      	ldr	r2, [r3, #32]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af02      	add	r7, sp, #8
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	607a      	str	r2, [r7, #4]
 800554a:	461a      	mov	r2, r3
 800554c:	460b      	mov	r3, r1
 800554e:	817b      	strh	r3, [r7, #10]
 8005550:	4613      	mov	r3, r2
 8005552:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b20      	cmp	r3, #32
 800555e:	f040 80da 	bne.w	8005716 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_I2C_Master_Transmit+0x30>
 800556c:	2302      	movs	r3, #2
 800556e:	e0d3      	b.n	8005718 <HAL_I2C_Master_Transmit+0x1d8>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005578:	f7fc ff48 	bl	800240c <HAL_GetTick>
 800557c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	2319      	movs	r3, #25
 8005584:	2201      	movs	r2, #1
 8005586:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f9e5 	bl	800595a <I2C_WaitOnFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e0be      	b.n	8005718 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2221      	movs	r2, #33	@ 0x21
 800559e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2210      	movs	r2, #16
 80055a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	893a      	ldrh	r2, [r7, #8]
 80055ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	2bff      	cmp	r3, #255	@ 0xff
 80055ca:	d90e      	bls.n	80055ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	22ff      	movs	r2, #255	@ 0xff
 80055d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	8979      	ldrh	r1, [r7, #10]
 80055da:	4b51      	ldr	r3, [pc, #324]	@ (8005720 <HAL_I2C_Master_Transmit+0x1e0>)
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 fbd0 	bl	8005d88 <I2C_TransferConfig>
 80055e8:	e06c      	b.n	80056c4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	8979      	ldrh	r1, [r7, #10]
 80055fc:	4b48      	ldr	r3, [pc, #288]	@ (8005720 <HAL_I2C_Master_Transmit+0x1e0>)
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 fbbf 	bl	8005d88 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800560a:	e05b      	b.n	80056c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	6a39      	ldr	r1, [r7, #32]
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f9e2 	bl	80059da <I2C_WaitOnTXISFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e07b      	b.n	8005718 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	781a      	ldrb	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d034      	beq.n	80056c4 <HAL_I2C_Master_Transmit+0x184>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800565e:	2b00      	cmp	r3, #0
 8005660:	d130      	bne.n	80056c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	2200      	movs	r2, #0
 800566a:	2180      	movs	r1, #128	@ 0x80
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 f974 	bl	800595a <I2C_WaitOnFlagUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e04d      	b.n	8005718 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005680:	b29b      	uxth	r3, r3
 8005682:	2bff      	cmp	r3, #255	@ 0xff
 8005684:	d90e      	bls.n	80056a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	22ff      	movs	r2, #255	@ 0xff
 800568a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005690:	b2da      	uxtb	r2, r3
 8005692:	8979      	ldrh	r1, [r7, #10]
 8005694:	2300      	movs	r3, #0
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 fb73 	bl	8005d88 <I2C_TransferConfig>
 80056a2:	e00f      	b.n	80056c4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	8979      	ldrh	r1, [r7, #10]
 80056b6:	2300      	movs	r3, #0
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fb62 	bl	8005d88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d19e      	bne.n	800560c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	6a39      	ldr	r1, [r7, #32]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f9c1 	bl	8005a5a <I2C_WaitOnSTOPFlagUntilTimeout>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e01a      	b.n	8005718 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2220      	movs	r2, #32
 80056e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6859      	ldr	r1, [r3, #4]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <HAL_I2C_Master_Transmit+0x1e4>)
 80056f6:	400b      	ands	r3, r1
 80056f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	e000      	b.n	8005718 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005716:	2302      	movs	r3, #2
  }
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	80002000 	.word	0x80002000
 8005724:	fe00e800 	.word	0xfe00e800

08005728 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af02      	add	r7, sp, #8
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	607a      	str	r2, [r7, #4]
 8005732:	461a      	mov	r2, r3
 8005734:	460b      	mov	r3, r1
 8005736:	817b      	strh	r3, [r7, #10]
 8005738:	4613      	mov	r3, r2
 800573a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b20      	cmp	r3, #32
 8005746:	f040 80db 	bne.w	8005900 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005750:	2b01      	cmp	r3, #1
 8005752:	d101      	bne.n	8005758 <HAL_I2C_Master_Receive+0x30>
 8005754:	2302      	movs	r3, #2
 8005756:	e0d4      	b.n	8005902 <HAL_I2C_Master_Receive+0x1da>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005760:	f7fc fe54 	bl	800240c <HAL_GetTick>
 8005764:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	2319      	movs	r3, #25
 800576c:	2201      	movs	r2, #1
 800576e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f8f1 	bl	800595a <I2C_WaitOnFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e0bf      	b.n	8005902 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2222      	movs	r2, #34	@ 0x22
 8005786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2210      	movs	r2, #16
 800578e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	893a      	ldrh	r2, [r7, #8]
 80057a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2bff      	cmp	r3, #255	@ 0xff
 80057b2:	d90e      	bls.n	80057d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	22ff      	movs	r2, #255	@ 0xff
 80057b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	8979      	ldrh	r1, [r7, #10]
 80057c2:	4b52      	ldr	r3, [pc, #328]	@ (800590c <HAL_I2C_Master_Receive+0x1e4>)
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 fadc 	bl	8005d88 <I2C_TransferConfig>
 80057d0:	e06d      	b.n	80058ae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	8979      	ldrh	r1, [r7, #10]
 80057e4:	4b49      	ldr	r3, [pc, #292]	@ (800590c <HAL_I2C_Master_Receive+0x1e4>)
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 facb 	bl	8005d88 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80057f2:	e05c      	b.n	80058ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	6a39      	ldr	r1, [r7, #32]
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 f96b 	bl	8005ad4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e07c      	b.n	8005902 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d034      	beq.n	80058ae <HAL_I2C_Master_Receive+0x186>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005848:	2b00      	cmp	r3, #0
 800584a:	d130      	bne.n	80058ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	2200      	movs	r2, #0
 8005854:	2180      	movs	r1, #128	@ 0x80
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 f87f 	bl	800595a <I2C_WaitOnFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e04d      	b.n	8005902 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586a:	b29b      	uxth	r3, r3
 800586c:	2bff      	cmp	r3, #255	@ 0xff
 800586e:	d90e      	bls.n	800588e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	22ff      	movs	r2, #255	@ 0xff
 8005874:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800587a:	b2da      	uxtb	r2, r3
 800587c:	8979      	ldrh	r1, [r7, #10]
 800587e:	2300      	movs	r3, #0
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fa7e 	bl	8005d88 <I2C_TransferConfig>
 800588c:	e00f      	b.n	80058ae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589c:	b2da      	uxtb	r2, r3
 800589e:	8979      	ldrh	r1, [r7, #10]
 80058a0:	2300      	movs	r3, #0
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fa6d 	bl	8005d88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d19d      	bne.n	80057f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	6a39      	ldr	r1, [r7, #32]
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 f8cc 	bl	8005a5a <I2C_WaitOnSTOPFlagUntilTimeout>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e01a      	b.n	8005902 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2220      	movs	r2, #32
 80058d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6859      	ldr	r1, [r3, #4]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	4b0c      	ldr	r3, [pc, #48]	@ (8005910 <HAL_I2C_Master_Receive+0x1e8>)
 80058e0:	400b      	ands	r3, r1
 80058e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2220      	movs	r2, #32
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	e000      	b.n	8005902 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005900:	2302      	movs	r3, #2
  }
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	80002400 	.word	0x80002400
 8005910:	fe00e800 	.word	0xfe00e800

08005914 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b02      	cmp	r3, #2
 8005928:	d103      	bne.n	8005932 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2200      	movs	r2, #0
 8005930:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b01      	cmp	r3, #1
 800593e:	d007      	beq.n	8005950 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	619a      	str	r2, [r3, #24]
  }
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr

0800595a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b084      	sub	sp, #16
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	4613      	mov	r3, r2
 8005968:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800596a:	e022      	b.n	80059b2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005972:	d01e      	beq.n	80059b2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005974:	f7fc fd4a 	bl	800240c <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d302      	bcc.n	800598a <I2C_WaitOnFlagUntilTimeout+0x30>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d113      	bne.n	80059b2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598e:	f043 0220 	orr.w	r2, r3, #32
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e00f      	b.n	80059d2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699a      	ldr	r2, [r3, #24]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4013      	ands	r3, r2
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	429a      	cmp	r2, r3
 80059c0:	bf0c      	ite	eq
 80059c2:	2301      	moveq	r3, #1
 80059c4:	2300      	movne	r3, #0
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d0cd      	beq.n	800596c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059e6:	e02c      	b.n	8005a42 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 f8eb 	bl	8005bc8 <I2C_IsErrorOccurred>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e02a      	b.n	8005a52 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a02:	d01e      	beq.n	8005a42 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a04:	f7fc fd02 	bl	800240c <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d302      	bcc.n	8005a1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d113      	bne.n	8005a42 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1e:	f043 0220 	orr.w	r2, r3, #32
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e007      	b.n	8005a52 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d1cb      	bne.n	80059e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b084      	sub	sp, #16
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	60b9      	str	r1, [r7, #8]
 8005a64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a66:	e028      	b.n	8005aba <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	68b9      	ldr	r1, [r7, #8]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f8ab 	bl	8005bc8 <I2C_IsErrorOccurred>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e026      	b.n	8005aca <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7c:	f7fc fcc6 	bl	800240c <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d302      	bcc.n	8005a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d113      	bne.n	8005aba <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a96:	f043 0220 	orr.w	r2, r3, #32
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e007      	b.n	8005aca <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d1cf      	bne.n	8005a68 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ae0:	e064      	b.n	8005bac <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	68b9      	ldr	r1, [r7, #8]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f86e 	bl	8005bc8 <I2C_IsErrorOccurred>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e062      	b.n	8005bbc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b20      	cmp	r3, #32
 8005b02:	d138      	bne.n	8005b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d105      	bne.n	8005b1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e04e      	b.n	8005bbc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	2b10      	cmp	r3, #16
 8005b2a:	d107      	bne.n	8005b3c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2210      	movs	r2, #16
 8005b32:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2204      	movs	r2, #4
 8005b38:	645a      	str	r2, [r3, #68]	@ 0x44
 8005b3a:	e002      	b.n	8005b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2220      	movs	r2, #32
 8005b48:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6859      	ldr	r1, [r3, #4]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005b56:	400b      	ands	r3, r1
 8005b58:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e022      	b.n	8005bbc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b76:	f7fc fc49 	bl	800240c <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d302      	bcc.n	8005b8c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10f      	bne.n	8005bac <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b90:	f043 0220 	orr.w	r2, r3, #32
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e007      	b.n	8005bbc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d193      	bne.n	8005ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	fe00e800 	.word	0xfe00e800

08005bc8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08a      	sub	sp, #40	@ 0x28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d068      	beq.n	8005cc6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2210      	movs	r2, #16
 8005bfa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005bfc:	e049      	b.n	8005c92 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c04:	d045      	beq.n	8005c92 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c06:	f7fc fc01 	bl	800240c <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d302      	bcc.n	8005c1c <I2C_IsErrorOccurred+0x54>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d13a      	bne.n	8005c92 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c3e:	d121      	bne.n	8005c84 <I2C_IsErrorOccurred+0xbc>
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c46:	d01d      	beq.n	8005c84 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005c48:	7cfb      	ldrb	r3, [r7, #19]
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d01a      	beq.n	8005c84 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005c5e:	f7fc fbd5 	bl	800240c <HAL_GetTick>
 8005c62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c64:	e00e      	b.n	8005c84 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c66:	f7fc fbd1 	bl	800240c <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b19      	cmp	r3, #25
 8005c72:	d907      	bls.n	8005c84 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	f043 0320 	orr.w	r3, r3, #32
 8005c7a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005c82:	e006      	b.n	8005c92 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d1e9      	bne.n	8005c66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	f003 0320 	and.w	r3, r3, #32
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d003      	beq.n	8005ca8 <I2C_IsErrorOccurred+0xe0>
 8005ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0aa      	beq.n	8005bfe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d103      	bne.n	8005cb8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	f043 0304 	orr.w	r3, r3, #4
 8005cbe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00b      	beq.n	8005cf0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ce8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00b      	beq.n	8005d12 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	f043 0308 	orr.w	r3, r3, #8
 8005d00:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	f043 0302 	orr.w	r3, r3, #2
 8005d22:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005d34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01c      	beq.n	8005d76 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f7ff fde9 	bl	8005914 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6859      	ldr	r1, [r3, #4]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8005d84 <I2C_IsErrorOccurred+0x1bc>)
 8005d4e:	400b      	ands	r3, r1
 8005d50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005d76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3728      	adds	r7, #40	@ 0x28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	fe00e800 	.word	0xfe00e800

08005d88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	607b      	str	r3, [r7, #4]
 8005d92:	460b      	mov	r3, r1
 8005d94:	817b      	strh	r3, [r7, #10]
 8005d96:	4613      	mov	r3, r2
 8005d98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d9a:	897b      	ldrh	r3, [r7, #10]
 8005d9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005da0:	7a7b      	ldrb	r3, [r7, #9]
 8005da2:	041b      	lsls	r3, r3, #16
 8005da4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005da8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005db6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	0d5b      	lsrs	r3, r3, #21
 8005dc2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005dc6:	4b07      	ldr	r3, [pc, #28]	@ (8005de4 <I2C_TransferConfig+0x5c>)
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	ea02 0103 	and.w	r1, r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005dda:	bf00      	nop
 8005ddc:	371c      	adds	r7, #28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bc80      	pop	{r7}
 8005de2:	4770      	bx	lr
 8005de4:	03ff63ff 	.word	0x03ff63ff

08005de8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	d138      	bne.n	8005e70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e032      	b.n	8005e72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2224      	movs	r2, #36	@ 0x24
 8005e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0201 	bic.w	r2, r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6819      	ldr	r1, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e000      	b.n	8005e72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e70:	2302      	movs	r3, #2
  }
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr

08005e7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	d139      	bne.n	8005f06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e033      	b.n	8005f08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2224      	movs	r2, #36	@ 0x24
 8005eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0201 	bic.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ece:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	021b      	lsls	r3, r3, #8
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 0201 	orr.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e000      	b.n	8005f08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f06:	2302      	movs	r3, #2
  }
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr

08005f12 <LL_RCC_SetLPTIMClockSource>:
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	0c1b      	lsrs	r3, r3, #16
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	401a      	ands	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	041b      	lsls	r3, r3, #16
 8005f30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr

08005f44 <LL_RCC_GetLPTIMClockSource>:
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8005f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f50:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4013      	ands	r3, r2
 8005f58:	0c1a      	lsrs	r2, r3, #16
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4313      	orrs	r3, r2
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bc80      	pop	{r7}
 8005f66:	4770      	bx	lr

08005f68 <LL_APB1_GRP1_ForceReset>:
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8005f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bc80      	pop	{r7}
 8005f88:	4770      	bx	lr

08005f8a <LL_APB1_GRP2_ForceReset>:
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8005f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bc80      	pop	{r7}
 8005faa:	4770      	bx	lr

08005fac <LL_APB1_GRP1_ReleaseReset>:
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8005fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	43db      	mvns	r3, r3
 8005fbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr

08005fd0 <LL_APB1_GRP2_ReleaseReset>:
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8005fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bc80      	pop	{r7}
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e0b6      	b.n	8006174 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d106      	bne.n	8006026 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7fb fc97 	bl	8001954 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0201 	orr.w	r2, r2, #1
 800603c:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006046:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006050:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8006052:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f8f2 	bl	8006240 <LPTIM_WaitForFlag>
 800605c:	4603      	mov	r3, r0
 800605e:	2b03      	cmp	r3, #3
 8006060:	d101      	bne.n	8006066 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e086      	b.n	8006174 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f91a 	bl	80062a0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f8d9 	bl	8006224 <HAL_LPTIM_GetState>
 8006072:	4603      	mov	r3, r0
 8006074:	2b03      	cmp	r3, #3
 8006076:	d101      	bne.n	800607c <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e07b      	b.n	8006174 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d004      	beq.n	8006096 <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006090:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006094:	d103      	bne.n	800609e <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f023 031e 	bic.w	r3, r3, #30
 800609c:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d005      	beq.n	80060b6 <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80060b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80060b4:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4b30      	ldr	r3, [pc, #192]	@ (800617c <HAL_LPTIM_Init+0x188>)
 80060ba:	4013      	ands	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80060c6:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80060cc:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80060d2:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80060d8:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d107      	bne.n	80060f8 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80060f0:	4313      	orrs	r3, r2
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d004      	beq.n	800610a <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006104:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006108:	d107      	bne.n	800611a <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8006112:	4313      	orrs	r3, r2
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006122:	4293      	cmp	r3, r2
 8006124:	d00a      	beq.n	800613c <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800612e:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8006134:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a0d      	ldr	r2, [pc, #52]	@ (8006180 <HAL_LPTIM_Init+0x18c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d108      	bne.n	8006160 <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	621a      	str	r2, [r3, #32]
 800615e:	e004      	b.n	800616a <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006168:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	ff19f1fe 	.word	0xff19f1fe
 8006180:	40007c00 	.word	0x40007c00

08006184 <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2202      	movs	r2, #2
 8006192:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d00c      	beq.n	80061b8 <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061a6:	d107      	bne.n	80061b8 <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 80061b6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2210      	movs	r2, #16
 80061ce:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80061d8:	2110      	movs	r1, #16
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f830 	bl	8006240 <LPTIM_WaitForFlag>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d101      	bne.n	80061ea <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e00c      	b.n	8006204 <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f042 0204 	orr.w	r2, r2, #4
 80061f8:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(const LPTIM_HandleTypeDef *hlptim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69db      	ldr	r3, [r3, #28]
}
 800621a:	4618      	mov	r0, r3
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	bc80      	pop	{r7}
 8006222:	4770      	bx	lr

08006224 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006232:	b2db      	uxtb	r3, r3
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr
	...

08006240 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800624e:	4b12      	ldr	r3, [pc, #72]	@ (8006298 <LPTIM_WaitForFlag+0x58>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a12      	ldr	r2, [pc, #72]	@ (800629c <LPTIM_WaitForFlag+0x5c>)
 8006254:	fba2 2303 	umull	r2, r3, r2, r3
 8006258:	0b9b      	lsrs	r3, r3, #14
 800625a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800625e:	fb02 f303 	mul.w	r3, r2, r3
 8006262:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	3b01      	subs	r3, #1
 8006268:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	4013      	ands	r3, r2
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	429a      	cmp	r2, r3
 8006282:	d002      	beq.n	800628a <LPTIM_WaitForFlag+0x4a>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1ec      	bne.n	8006264 <LPTIM_WaitForFlag+0x24>

  return result;
 800628a:	7bfb      	ldrb	r3, [r7, #15]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	20000000 	.word	0x20000000
 800629c:	d1b71759 	.word	0xd1b71759

080062a0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08e      	sub	sp, #56	@ 0x38
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ac:	f3ef 8310 	mrs	r3, PRIMASK
 80062b0:	613b      	str	r3, [r7, #16]
  return(result);
 80062b2:	693b      	ldr	r3, [r7, #16]
  uint32_t primask_bit;
  uint32_t tmpOR;
  uint32_t tmpRCR;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80062b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80062b6:	2301      	movs	r3, #1
 80062b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f383 8810 	msr	PRIMASK, r3
}
 80062c0:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a8f      	ldr	r2, [pc, #572]	@ (8006504 <LPTIM_Disable+0x264>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d015      	beq.n	80062f8 <LPTIM_Disable+0x58>
 80062cc:	4a8d      	ldr	r2, [pc, #564]	@ (8006504 <LPTIM_Disable+0x264>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d818      	bhi.n	8006304 <LPTIM_Disable+0x64>
 80062d2:	4a8d      	ldr	r2, [pc, #564]	@ (8006508 <LPTIM_Disable+0x268>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d003      	beq.n	80062e0 <LPTIM_Disable+0x40>
 80062d8:	4a8c      	ldr	r2, [pc, #560]	@ (800650c <LPTIM_Disable+0x26c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d006      	beq.n	80062ec <LPTIM_Disable+0x4c>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 80062de:	e011      	b.n	8006304 <LPTIM_Disable+0x64>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80062e0:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 80062e4:	f7ff fe2e 	bl	8005f44 <LL_RCC_GetLPTIMClockSource>
 80062e8:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 80062ea:	e00c      	b.n	8006306 <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80062ec:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 80062f0:	f7ff fe28 	bl	8005f44 <LL_RCC_GetLPTIMClockSource>
 80062f4:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 80062f6:	e006      	b.n	8006306 <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 80062f8:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 80062fc:	f7ff fe22 	bl	8005f44 <LL_RCC_GetLPTIMClockSource>
 8006300:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 8006302:	e000      	b.n	8006306 <LPTIM_Disable+0x66>
      break;
 8006304:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpCFGR = hlptim->Instance->CFGR;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	62bb      	str	r3, [r7, #40]	@ 0x28
  tmpCMP = hlptim->Instance->CMP;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpARR = hlptim->Instance->ARR;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	623b      	str	r3, [r7, #32]
  tmpOR = hlptim->Instance->OR;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	61fb      	str	r3, [r7, #28]
  tmpRCR = hlptim->Instance->RCR;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006334:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a72      	ldr	r2, [pc, #456]	@ (8006504 <LPTIM_Disable+0x264>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d019      	beq.n	8006374 <LPTIM_Disable+0xd4>
 8006340:	4a70      	ldr	r2, [pc, #448]	@ (8006504 <LPTIM_Disable+0x264>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d81d      	bhi.n	8006382 <LPTIM_Disable+0xe2>
 8006346:	4a70      	ldr	r2, [pc, #448]	@ (8006508 <LPTIM_Disable+0x268>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <LPTIM_Disable+0xb4>
 800634c:	4a6f      	ldr	r2, [pc, #444]	@ (800650c <LPTIM_Disable+0x26c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d009      	beq.n	8006366 <LPTIM_Disable+0xc6>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 8006352:	e016      	b.n	8006382 <LPTIM_Disable+0xe2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8006354:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006358:	f7ff fe06 	bl	8005f68 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800635c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006360:	f7ff fe24 	bl	8005fac <LL_APB1_GRP1_ReleaseReset>
      break;
 8006364:	e00e      	b.n	8006384 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8006366:	2020      	movs	r0, #32
 8006368:	f7ff fe0f 	bl	8005f8a <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 800636c:	2020      	movs	r0, #32
 800636e:	f7ff fe2f 	bl	8005fd0 <LL_APB1_GRP2_ReleaseReset>
      break;
 8006372:	e007      	b.n	8006384 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8006374:	2040      	movs	r0, #64	@ 0x40
 8006376:	f7ff fe08 	bl	8005f8a <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 800637a:	2040      	movs	r0, #64	@ 0x40
 800637c:	f7ff fe28 	bl	8005fd0 <LL_APB1_GRP2_ReleaseReset>
      break;
 8006380:	e000      	b.n	8006384 <LPTIM_Disable+0xe4>
      break;
 8006382:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <LPTIM_Disable+0xf8>
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d103      	bne.n	8006398 <LPTIM_Disable+0xf8>
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 8097 	beq.w	80064c6 <LPTIM_Disable+0x226>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a59      	ldr	r2, [pc, #356]	@ (8006504 <LPTIM_Disable+0x264>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d013      	beq.n	80063ca <LPTIM_Disable+0x12a>
 80063a2:	4a58      	ldr	r2, [pc, #352]	@ (8006504 <LPTIM_Disable+0x264>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d815      	bhi.n	80063d4 <LPTIM_Disable+0x134>
 80063a8:	4a57      	ldr	r2, [pc, #348]	@ (8006508 <LPTIM_Disable+0x268>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d003      	beq.n	80063b6 <LPTIM_Disable+0x116>
 80063ae:	4a57      	ldr	r2, [pc, #348]	@ (800650c <LPTIM_Disable+0x26c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d005      	beq.n	80063c0 <LPTIM_Disable+0x120>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 80063b4:	e00e      	b.n	80063d4 <LPTIM_Disable+0x134>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80063b6:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 80063ba:	f7ff fdaa 	bl	8005f12 <LL_RCC_SetLPTIMClockSource>
        break;
 80063be:	e00a      	b.n	80063d6 <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80063c0:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 80063c4:	f7ff fda5 	bl	8005f12 <LL_RCC_SetLPTIMClockSource>
        break;
 80063c8:	e005      	b.n	80063d6 <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 80063ca:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 80063ce:	f7ff fda0 	bl	8005f12 <LL_RCC_SetLPTIMClockSource>
        break;
 80063d2:	e000      	b.n	80063d6 <LPTIM_Disable+0x136>
        break;
 80063d4:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01a      	beq.n	8006412 <LPTIM_Disable+0x172>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f2:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80063f4:	2108      	movs	r1, #8
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff ff22 	bl	8006240 <LPTIM_WaitForFlag>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d103      	bne.n	800640a <LPTIM_Disable+0x16a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2203      	movs	r2, #3
 8006406:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2208      	movs	r2, #8
 8006410:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01a      	beq.n	800644e <LPTIM_Disable+0x1ae>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6a3a      	ldr	r2, [r7, #32]
 800642e:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006430:	2110      	movs	r1, #16
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7ff ff04 	bl	8006240 <LPTIM_WaitForFlag>
 8006438:	4603      	mov	r3, r0
 800643a:	2b03      	cmp	r3, #3
 800643c:	d103      	bne.n	8006446 <LPTIM_Disable+0x1a6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2203      	movs	r2, #3
 8006442:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2210      	movs	r2, #16
 800644c:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01c      	beq.n	800648e <LPTIM_Disable+0x1ee>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0201 	orr.w	r2, r2, #1
 8006462:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800646c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7ff fee5 	bl	8006240 <LPTIM_WaitForFlag>
 8006476:	4603      	mov	r3, r0
 8006478:	2b03      	cmp	r3, #3
 800647a:	d103      	bne.n	8006484 <LPTIM_Disable+0x1e4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2203      	movs	r2, #3
 8006480:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800648c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1c      	ldr	r2, [pc, #112]	@ (8006504 <LPTIM_Disable+0x264>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d011      	beq.n	80064bc <LPTIM_Disable+0x21c>
 8006498:	4a1a      	ldr	r2, [pc, #104]	@ (8006504 <LPTIM_Disable+0x264>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d812      	bhi.n	80064c4 <LPTIM_Disable+0x224>
 800649e:	4a1a      	ldr	r2, [pc, #104]	@ (8006508 <LPTIM_Disable+0x268>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d003      	beq.n	80064ac <LPTIM_Disable+0x20c>
 80064a4:	4a19      	ldr	r2, [pc, #100]	@ (800650c <LPTIM_Disable+0x26c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d004      	beq.n	80064b4 <LPTIM_Disable+0x214>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 80064aa:	e00b      	b.n	80064c4 <LPTIM_Disable+0x224>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80064ac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80064ae:	f7ff fd30 	bl	8005f12 <LL_RCC_SetLPTIMClockSource>
        break;
 80064b2:	e008      	b.n	80064c6 <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80064b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80064b6:	f7ff fd2c 	bl	8005f12 <LL_RCC_SetLPTIMClockSource>
        break;
 80064ba:	e004      	b.n	80064c6 <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 80064bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80064be:	f7ff fd28 	bl	8005f12 <LL_RCC_SetLPTIMClockSource>
        break;
 80064c2:	e000      	b.n	80064c6 <LPTIM_Disable+0x226>
        break;
 80064c4:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	691a      	ldr	r2, [r3, #16]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0201 	bic.w	r2, r2, #1
 80064d4:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064dc:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064e4:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	621a      	str	r2, [r3, #32]
 80064ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f383 8810 	msr	PRIMASK, r3
}
 80064f8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80064fa:	bf00      	nop
 80064fc:	3738      	adds	r7, #56	@ 0x38
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40009800 	.word	0x40009800
 8006508:	40007c00 	.word	0x40007c00
 800650c:	40009400 	.word	0x40009400

08006510 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006514:	4b04      	ldr	r3, [pc, #16]	@ (8006528 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a03      	ldr	r2, [pc, #12]	@ (8006528 <HAL_PWR_EnableBkUpAccess+0x18>)
 800651a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800651e:	6013      	str	r3, [r2, #0]
}
 8006520:	bf00      	nop
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr
 8006528:	58000400 	.word	0x58000400

0800652c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10c      	bne.n	8006558 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800653e:	4b13      	ldr	r3, [pc, #76]	@ (800658c <HAL_PWR_EnterSLEEPMode+0x60>)
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006546:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800654a:	d10d      	bne.n	8006568 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800654c:	f000 f83c 	bl	80065c8 <HAL_PWREx_DisableLowPowerRunMode>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d008      	beq.n	8006568 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8006556:	e015      	b.n	8006584 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8006558:	4b0c      	ldr	r3, [pc, #48]	@ (800658c <HAL_PWR_EnterSLEEPMode+0x60>)
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006564:	f000 f822 	bl	80065ac <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006568:	4b09      	ldr	r3, [pc, #36]	@ (8006590 <HAL_PWR_EnterSLEEPMode+0x64>)
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	4a08      	ldr	r2, [pc, #32]	@ (8006590 <HAL_PWR_EnterSLEEPMode+0x64>)
 800656e:	f023 0304 	bic.w	r3, r3, #4
 8006572:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800657a:	bf30      	wfi
 800657c:	e002      	b.n	8006584 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800657e:	bf40      	sev
    __WFE();
 8006580:	bf20      	wfe
    __WFE();
 8006582:	bf20      	wfe
  }
}
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	58000400 	.word	0x58000400
 8006590:	e000ed00 	.word	0xe000ed00

08006594 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006598:	4b03      	ldr	r3, [pc, #12]	@ (80065a8 <HAL_PWREx_GetVoltageRange+0x14>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr
 80065a8:	58000400 	.word	0x58000400

080065ac <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80065b0:	4b04      	ldr	r3, [pc, #16]	@ (80065c4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a03      	ldr	r2, [pc, #12]	@ (80065c4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80065b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065ba:	6013      	str	r3, [r2, #0]
}
 80065bc:	bf00      	nop
 80065be:	46bd      	mov	sp, r7
 80065c0:	bc80      	pop	{r7}
 80065c2:	4770      	bx	lr
 80065c4:	58000400 	.word	0x58000400

080065c8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80065ce:	4b16      	ldr	r3, [pc, #88]	@ (8006628 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a15      	ldr	r2, [pc, #84]	@ (8006628 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80065d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065d8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80065da:	4b14      	ldr	r3, [pc, #80]	@ (800662c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2232      	movs	r2, #50	@ 0x32
 80065e0:	fb02 f303 	mul.w	r3, r2, r3
 80065e4:	4a12      	ldr	r2, [pc, #72]	@ (8006630 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80065e6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ea:	0c9b      	lsrs	r3, r3, #18
 80065ec:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80065ee:	e002      	b.n	80065f6 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80065f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006628 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006602:	d102      	bne.n	800660a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1f2      	bne.n	80065f0 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800660a:	4b07      	ldr	r3, [pc, #28]	@ (8006628 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006616:	d101      	bne.n	800661c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e000      	b.n	800661e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	bc80      	pop	{r7}
 8006626:	4770      	bx	lr
 8006628:	58000400 	.word	0x58000400
 800662c:	20000000 	.word	0x20000000
 8006630:	431bde83 	.word	0x431bde83

08006634 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	4603      	mov	r3, r0
 800663c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800663e:	4b10      	ldr	r3, [pc, #64]	@ (8006680 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f023 0307 	bic.w	r3, r3, #7
 8006646:	4a0e      	ldr	r2, [pc, #56]	@ (8006680 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006648:	f043 0302 	orr.w	r3, r3, #2
 800664c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800664e:	4b0d      	ldr	r3, [pc, #52]	@ (8006684 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	4a0c      	ldr	r2, [pc, #48]	@ (8006684 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006654:	f043 0304 	orr.w	r3, r3, #4
 8006658:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800665a:	79fb      	ldrb	r3, [r7, #7]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d101      	bne.n	8006664 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006660:	bf30      	wfi
 8006662:	e002      	b.n	800666a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006664:	bf40      	sev
    __WFE();
 8006666:	bf20      	wfe
    __WFE();
 8006668:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800666a:	4b06      	ldr	r3, [pc, #24]	@ (8006684 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	4a05      	ldr	r2, [pc, #20]	@ (8006684 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006670:	f023 0304 	bic.w	r3, r3, #4
 8006674:	6113      	str	r3, [r2, #16]
}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	bc80      	pop	{r7}
 800667e:	4770      	bx	lr
 8006680:	58000400 	.word	0x58000400
 8006684:	e000ed00 	.word	0xe000ed00

08006688 <LL_PWR_IsEnabledBkUpAccess>:
{
 8006688:	b480      	push	{r7}
 800668a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800668c:	4b06      	ldr	r3, [pc, #24]	@ (80066a8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006698:	d101      	bne.n	800669e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800669a:	2301      	movs	r3, #1
 800669c:	e000      	b.n	80066a0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bc80      	pop	{r7}
 80066a6:	4770      	bx	lr
 80066a8:	58000400 	.word	0x58000400

080066ac <LL_RCC_HSE_EnableTcxo>:
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80066b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80066be:	6013      	str	r3, [r2, #0]
}
 80066c0:	bf00      	nop
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr

080066c8 <LL_RCC_HSE_DisableTcxo>:
{
 80066c8:	b480      	push	{r7}
 80066ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80066cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80066da:	6013      	str	r3, [r2, #0]
}
 80066dc:	bf00      	nop
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr

080066e4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80066e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066f6:	d101      	bne.n	80066fc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr

08006706 <LL_RCC_HSE_Enable>:
{
 8006706:	b480      	push	{r7}
 8006708:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800670a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006718:	6013      	str	r3, [r2, #0]
}
 800671a:	bf00      	nop
 800671c:	46bd      	mov	sp, r7
 800671e:	bc80      	pop	{r7}
 8006720:	4770      	bx	lr

08006722 <LL_RCC_HSE_Disable>:
{
 8006722:	b480      	push	{r7}
 8006724:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006730:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006734:	6013      	str	r3, [r2, #0]
}
 8006736:	bf00      	nop
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr

0800673e <LL_RCC_HSE_IsReady>:
{
 800673e:	b480      	push	{r7}
 8006740:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800674c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006750:	d101      	bne.n	8006756 <LL_RCC_HSE_IsReady+0x18>
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <LL_RCC_HSE_IsReady+0x1a>
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr

08006760 <LL_RCC_HSI_Enable>:
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800676e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006772:	6013      	str	r3, [r2, #0]
}
 8006774:	bf00      	nop
 8006776:	46bd      	mov	sp, r7
 8006778:	bc80      	pop	{r7}
 800677a:	4770      	bx	lr

0800677c <LL_RCC_HSI_Disable>:
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800678a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800678e:	6013      	str	r3, [r2, #0]
}
 8006790:	bf00      	nop
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr

08006798 <LL_RCC_HSI_IsReady>:
{
 8006798:	b480      	push	{r7}
 800679a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800679c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067aa:	d101      	bne.n	80067b0 <LL_RCC_HSI_IsReady+0x18>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e000      	b.n	80067b2 <LL_RCC_HSI_IsReady+0x1a>
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr

080067ba <LL_RCC_HSI_SetCalibTrimming>:
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80067c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	061b      	lsls	r3, r3, #24
 80067d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067d4:	4313      	orrs	r3, r2
 80067d6:	604b      	str	r3, [r1, #4]
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr

080067e2 <LL_RCC_LSE_IsReady>:
{
 80067e2:	b480      	push	{r7}
 80067e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80067e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d101      	bne.n	80067fa <LL_RCC_LSE_IsReady+0x18>
 80067f6:	2301      	movs	r3, #1
 80067f8:	e000      	b.n	80067fc <LL_RCC_LSE_IsReady+0x1a>
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc80      	pop	{r7}
 8006802:	4770      	bx	lr

08006804 <LL_RCC_LSI_Enable>:
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800680c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006810:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006814:	f043 0301 	orr.w	r3, r3, #1
 8006818:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800681c:	bf00      	nop
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr

08006824 <LL_RCC_LSI_Disable>:
{
 8006824:	b480      	push	{r7}
 8006826:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800682c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006830:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006834:	f023 0301 	bic.w	r3, r3, #1
 8006838:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800683c:	bf00      	nop
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr

08006844 <LL_RCC_LSI_IsReady>:
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800684c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b02      	cmp	r3, #2
 8006856:	d101      	bne.n	800685c <LL_RCC_LSI_IsReady+0x18>
 8006858:	2301      	movs	r3, #1
 800685a:	e000      	b.n	800685e <LL_RCC_LSI_IsReady+0x1a>
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	46bd      	mov	sp, r7
 8006862:	bc80      	pop	{r7}
 8006864:	4770      	bx	lr

08006866 <LL_RCC_MSI_Enable>:
{
 8006866:	b480      	push	{r7}
 8006868:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800686a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006874:	f043 0301 	orr.w	r3, r3, #1
 8006878:	6013      	str	r3, [r2, #0]
}
 800687a:	bf00      	nop
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr

08006882 <LL_RCC_MSI_Disable>:
{
 8006882:	b480      	push	{r7}
 8006884:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006890:	f023 0301 	bic.w	r3, r3, #1
 8006894:	6013      	str	r3, [r2, #0]
}
 8006896:	bf00      	nop
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr

0800689e <LL_RCC_MSI_IsReady>:
{
 800689e:	b480      	push	{r7}
 80068a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80068a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d101      	bne.n	80068b4 <LL_RCC_MSI_IsReady+0x16>
 80068b0:	2301      	movs	r3, #1
 80068b2:	e000      	b.n	80068b6 <LL_RCC_MSI_IsReady+0x18>
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bc80      	pop	{r7}
 80068bc:	4770      	bx	lr

080068be <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80068be:	b480      	push	{r7}
 80068c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80068c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d101      	bne.n	80068d4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e000      	b.n	80068d6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	46bd      	mov	sp, r7
 80068da:	bc80      	pop	{r7}
 80068dc:	4770      	bx	lr

080068de <LL_RCC_MSI_GetRange>:
{
 80068de:	b480      	push	{r7}
 80068e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80068e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr

080068f4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80068f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006900:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8006904:	4618      	mov	r0, r3
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr

0800690c <LL_RCC_MSI_SetCalibTrimming>:
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	021b      	lsls	r3, r3, #8
 8006922:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006926:	4313      	orrs	r3, r2
 8006928:	604b      	str	r3, [r1, #4]
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr

08006934 <LL_RCC_SetSysClkSource>:
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800693c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f023 0203 	bic.w	r2, r3, #3
 8006946:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4313      	orrs	r3, r2
 800694e:	608b      	str	r3, [r1, #8]
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	bc80      	pop	{r7}
 8006958:	4770      	bx	lr

0800695a <LL_RCC_GetSysClkSource>:
{
 800695a:	b480      	push	{r7}
 800695c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800695e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f003 030c 	and.w	r3, r3, #12
}
 8006968:	4618      	mov	r0, r3
 800696a:	46bd      	mov	sp, r7
 800696c:	bc80      	pop	{r7}
 800696e:	4770      	bx	lr

08006970 <LL_RCC_SetAHBPrescaler>:
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006982:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4313      	orrs	r3, r2
 800698a:	608b      	str	r3, [r1, #8]
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	bc80      	pop	{r7}
 8006994:	4770      	bx	lr

08006996 <LL_RCC_SetAHB3Prescaler>:
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800699e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80069a6:	f023 020f 	bic.w	r2, r3, #15
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	091b      	lsrs	r3, r3, #4
 80069ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069b2:	4313      	orrs	r3, r2
 80069b4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	bc80      	pop	{r7}
 80069c0:	4770      	bx	lr

080069c2 <LL_RCC_SetAPB1Prescaler>:
{
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80069ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4313      	orrs	r3, r2
 80069dc:	608b      	str	r3, [r1, #8]
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <LL_RCC_SetAPB2Prescaler>:
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80069f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80069fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	608b      	str	r3, [r1, #8]
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bc80      	pop	{r7}
 8006a0c:	4770      	bx	lr

08006a0e <LL_RCC_GetAHBPrescaler>:
{
 8006a0e:	b480      	push	{r7}
 8006a10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr

08006a24 <LL_RCC_GetAHB3Prescaler>:
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bc80      	pop	{r7}
 8006a3c:	4770      	bx	lr

08006a3e <LL_RCC_GetAPB1Prescaler>:
{
 8006a3e:	b480      	push	{r7}
 8006a40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006a42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bc80      	pop	{r7}
 8006a52:	4770      	bx	lr

08006a54 <LL_RCC_GetAPB2Prescaler>:
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bc80      	pop	{r7}
 8006a68:	4770      	bx	lr

08006a6a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a7c:	6013      	str	r3, [r2, #0]
}
 8006a7e:	bf00      	nop
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr

08006a86 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006a86:	b480      	push	{r7}
 8006a88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006a8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a98:	6013      	str	r3, [r2, #0]
}
 8006a9a:	bf00      	nop
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr

08006aa2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ab4:	d101      	bne.n	8006aba <LL_RCC_PLL_IsReady+0x18>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e000      	b.n	8006abc <LL_RCC_PLL_IsReady+0x1a>
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc80      	pop	{r7}
 8006ac2:	4770      	bx	lr

08006ac4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	0a1b      	lsrs	r3, r3, #8
 8006ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr

08006adc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bc80      	pop	{r7}
 8006af0:	4770      	bx	lr

08006af2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006af2:	b480      	push	{r7}
 8006af4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bc80      	pop	{r7}
 8006b06:	4770      	bx	lr

08006b08 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f003 0303 	and.w	r3, r3, #3
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bc80      	pop	{r7}
 8006b1c:	4770      	bx	lr

08006b1e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b30:	d101      	bne.n	8006b36 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bc80      	pop	{r7}
 8006b3e:	4770      	bx	lr

08006b40 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006b40:	b480      	push	{r7}
 8006b42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b48:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006b4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b54:	d101      	bne.n	8006b5a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e000      	b.n	8006b5c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bc80      	pop	{r7}
 8006b62:	4770      	bx	lr

08006b64 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006b64:	b480      	push	{r7}
 8006b66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b76:	d101      	bne.n	8006b7c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e000      	b.n	8006b7e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bc80      	pop	{r7}
 8006b84:	4770      	bx	lr

08006b86 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006b86:	b480      	push	{r7}
 8006b88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b98:	d101      	bne.n	8006b9e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e000      	b.n	8006ba0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e36f      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bba:	f7ff fece 	bl	800695a <LL_RCC_GetSysClkSource>
 8006bbe:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bc0:	f7ff ffa2 	bl	8006b08 <LL_RCC_PLL_GetMainSource>
 8006bc4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 80c4 	beq.w	8006d5c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d005      	beq.n	8006be6 <HAL_RCC_OscConfig+0x3e>
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	2b0c      	cmp	r3, #12
 8006bde:	d176      	bne.n	8006cce <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d173      	bne.n	8006cce <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e353      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0308 	and.w	r3, r3, #8
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d005      	beq.n	8006c10 <HAL_RCC_OscConfig+0x68>
 8006c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c0e:	e006      	b.n	8006c1e <HAL_RCC_OscConfig+0x76>
 8006c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c18:	091b      	lsrs	r3, r3, #4
 8006c1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d222      	bcs.n	8006c68 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fd3c 	bl	80076a4 <RCC_SetFlashLatencyFromMSIRange>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e331      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c40:	f043 0308 	orr.w	r3, r3, #8
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff fe53 	bl	800690c <LL_RCC_MSI_SetCalibTrimming>
 8006c66:	e021      	b.n	8006cac <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c72:	f043 0308 	orr.w	r3, r3, #8
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff fe3a 	bl	800690c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fd01 	bl	80076a4 <RCC_SetFlashLatencyFromMSIRange>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e2f6      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006cac:	f000 fcc2 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	4aa7      	ldr	r2, [pc, #668]	@ (8006f50 <HAL_RCC_OscConfig+0x3a8>)
 8006cb4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8006cb6:	4ba7      	ldr	r3, [pc, #668]	@ (8006f54 <HAL_RCC_OscConfig+0x3ac>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fc f90a 	bl	8002ed4 <HAL_InitTick>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8006cc4:	7cfb      	ldrb	r3, [r7, #19]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d047      	beq.n	8006d5a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8006cca:	7cfb      	ldrb	r3, [r7, #19]
 8006ccc:	e2e5      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d02c      	beq.n	8006d30 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006cd6:	f7ff fdc6 	bl	8006866 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006cda:	f7fb fb97 	bl	800240c <HAL_GetTick>
 8006cde:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006ce0:	e008      	b.n	8006cf4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ce2:	f7fb fb93 	bl	800240c <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e2d2      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006cf4:	f7ff fdd3 	bl	800689e <LL_RCC_MSI_IsReady>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0f1      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d08:	f043 0308 	orr.w	r3, r3, #8
 8006d0c:	6013      	str	r3, [r2, #0]
 8006d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d20:	4313      	orrs	r3, r2
 8006d22:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff fdef 	bl	800690c <LL_RCC_MSI_SetCalibTrimming>
 8006d2e:	e015      	b.n	8006d5c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006d30:	f7ff fda7 	bl	8006882 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006d34:	f7fb fb6a 	bl	800240c <HAL_GetTick>
 8006d38:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d3c:	f7fb fb66 	bl	800240c <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e2a5      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006d4e:	f7ff fda6 	bl	800689e <LL_RCC_MSI_IsReady>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1f1      	bne.n	8006d3c <HAL_RCC_OscConfig+0x194>
 8006d58:	e000      	b.n	8006d5c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006d5a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d058      	beq.n	8006e1a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	2b08      	cmp	r3, #8
 8006d6c:	d005      	beq.n	8006d7a <HAL_RCC_OscConfig+0x1d2>
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	2b0c      	cmp	r3, #12
 8006d72:	d108      	bne.n	8006d86 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d105      	bne.n	8006d86 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d14b      	bne.n	8006e1a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e289      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8006d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006da4:	d102      	bne.n	8006dac <HAL_RCC_OscConfig+0x204>
 8006da6:	f7ff fcae 	bl	8006706 <LL_RCC_HSE_Enable>
 8006daa:	e00d      	b.n	8006dc8 <HAL_RCC_OscConfig+0x220>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8006db4:	d104      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x218>
 8006db6:	f7ff fc79 	bl	80066ac <LL_RCC_HSE_EnableTcxo>
 8006dba:	f7ff fca4 	bl	8006706 <LL_RCC_HSE_Enable>
 8006dbe:	e003      	b.n	8006dc8 <HAL_RCC_OscConfig+0x220>
 8006dc0:	f7ff fcaf 	bl	8006722 <LL_RCC_HSE_Disable>
 8006dc4:	f7ff fc80 	bl	80066c8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d012      	beq.n	8006df6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd0:	f7fb fb1c 	bl	800240c <HAL_GetTick>
 8006dd4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dd8:	f7fb fb18 	bl	800240c <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b64      	cmp	r3, #100	@ 0x64
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e257      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006dea:	f7ff fca8 	bl	800673e <LL_RCC_HSE_IsReady>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d0f1      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x230>
 8006df4:	e011      	b.n	8006e1a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006df6:	f7fb fb09 	bl	800240c <HAL_GetTick>
 8006dfa:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006dfc:	e008      	b.n	8006e10 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dfe:	f7fb fb05 	bl	800240c <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b64      	cmp	r3, #100	@ 0x64
 8006e0a:	d901      	bls.n	8006e10 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e244      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006e10:	f7ff fc95 	bl	800673e <LL_RCC_HSE_IsReady>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1f1      	bne.n	8006dfe <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d046      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d005      	beq.n	8006e38 <HAL_RCC_OscConfig+0x290>
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	2b0c      	cmp	r3, #12
 8006e30:	d10e      	bne.n	8006e50 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d10b      	bne.n	8006e50 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e22a      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7ff fcb6 	bl	80067ba <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006e4e:	e031      	b.n	8006eb4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d019      	beq.n	8006e8c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e58:	f7ff fc82 	bl	8006760 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5c:	f7fb fad6 	bl	800240c <HAL_GetTick>
 8006e60:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006e62:	e008      	b.n	8006e76 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e64:	f7fb fad2 	bl	800240c <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e211      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006e76:	f7ff fc8f 	bl	8006798 <LL_RCC_HSI_IsReady>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0f1      	beq.n	8006e64 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff fc98 	bl	80067ba <LL_RCC_HSI_SetCalibTrimming>
 8006e8a:	e013      	b.n	8006eb4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e8c:	f7ff fc76 	bl	800677c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e90:	f7fb fabc 	bl	800240c <HAL_GetTick>
 8006e94:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e98:	f7fb fab8 	bl	800240c <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e1f7      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006eaa:	f7ff fc75 	bl	8006798 <LL_RCC_HSI_IsReady>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1f1      	bne.n	8006e98 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d06e      	beq.n	8006f9e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d056      	beq.n	8006f76 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8006ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ed0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	69da      	ldr	r2, [r3, #28]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f003 0310 	and.w	r3, r3, #16
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d031      	beq.n	8006f44 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d006      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e1d0      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d013      	beq.n	8006f2a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8006f02:	f7ff fc8f 	bl	8006824 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f06:	f7fb fa81 	bl	800240c <HAL_GetTick>
 8006f0a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006f0c:	e008      	b.n	8006f20 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f0e:	f7fb fa7d 	bl	800240c <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b11      	cmp	r3, #17
 8006f1a:	d901      	bls.n	8006f20 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e1bc      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8006f20:	f7ff fc90 	bl	8006844 <LL_RCC_LSI_IsReady>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1f1      	bne.n	8006f0e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f32:	f023 0210 	bic.w	r2, r3, #16
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f44:	f7ff fc5e 	bl	8006804 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f48:	f7fb fa60 	bl	800240c <HAL_GetTick>
 8006f4c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006f4e:	e00c      	b.n	8006f6a <HAL_RCC_OscConfig+0x3c2>
 8006f50:	20000000 	.word	0x20000000
 8006f54:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f58:	f7fb fa58 	bl	800240c <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b11      	cmp	r3, #17
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e197      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006f6a:	f7ff fc6b 	bl	8006844 <LL_RCC_LSI_IsReady>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0f1      	beq.n	8006f58 <HAL_RCC_OscConfig+0x3b0>
 8006f74:	e013      	b.n	8006f9e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f76:	f7ff fc55 	bl	8006824 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f7a:	f7fb fa47 	bl	800240c <HAL_GetTick>
 8006f7e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006f80:	e008      	b.n	8006f94 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f82:	f7fb fa43 	bl	800240c <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b11      	cmp	r3, #17
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e182      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006f94:	f7ff fc56 	bl	8006844 <LL_RCC_LSI_IsReady>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1f1      	bne.n	8006f82 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0304 	and.w	r3, r3, #4
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 80d8 	beq.w	800715c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006fac:	f7ff fb6c 	bl	8006688 <LL_PWR_IsEnabledBkUpAccess>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d113      	bne.n	8006fde <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006fb6:	f7ff faab 	bl	8006510 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fba:	f7fb fa27 	bl	800240c <HAL_GetTick>
 8006fbe:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006fc0:	e008      	b.n	8006fd4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fc2:	f7fb fa23 	bl	800240c <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d901      	bls.n	8006fd4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e162      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006fd4:	f7ff fb58 	bl	8006688 <LL_PWR_IsEnabledBkUpAccess>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0f1      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d07b      	beq.n	80070de <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	2b85      	cmp	r3, #133	@ 0x85
 8006fec:	d003      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2b05      	cmp	r3, #5
 8006ff4:	d109      	bne.n	800700a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ffe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007002:	f043 0304 	orr.w	r3, r3, #4
 8007006:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800700a:	f7fb f9ff 	bl	800240c <HAL_GetTick>
 800700e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007018:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800701c:	f043 0301 	orr.w	r3, r3, #1
 8007020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007024:	e00a      	b.n	800703c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007026:	f7fb f9f1 	bl	800240c <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007034:	4293      	cmp	r3, r2
 8007036:	d901      	bls.n	800703c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e12e      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800703c:	f7ff fbd1 	bl	80067e2 <LL_RCC_LSE_IsReady>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0ef      	beq.n	8007026 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	2b81      	cmp	r3, #129	@ 0x81
 800704c:	d003      	beq.n	8007056 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	2b85      	cmp	r3, #133	@ 0x85
 8007054:	d121      	bne.n	800709a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007056:	f7fb f9d9 	bl	800240c <HAL_GetTick>
 800705a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800705c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007064:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007070:	e00a      	b.n	8007088 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007072:	f7fb f9cb 	bl	800240c <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007080:	4293      	cmp	r3, r2
 8007082:	d901      	bls.n	8007088 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e108      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800708c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0ec      	beq.n	8007072 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007098:	e060      	b.n	800715c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800709a:	f7fb f9b7 	bl	800240c <HAL_GetTick>
 800709e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80070a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80070b4:	e00a      	b.n	80070cc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070b6:	f7fb f9a9 	bl	800240c <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d901      	bls.n	80070cc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e0e6      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80070cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1ec      	bne.n	80070b6 <HAL_RCC_OscConfig+0x50e>
 80070dc:	e03e      	b.n	800715c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070de:	f7fb f995 	bl	800240c <HAL_GetTick>
 80070e2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80070e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80070f8:	e00a      	b.n	8007110 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070fa:	f7fb f987 	bl	800240c <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007108:	4293      	cmp	r3, r2
 800710a:	d901      	bls.n	8007110 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e0c4      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1ec      	bne.n	80070fa <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007120:	f7fb f974 	bl	800240c <HAL_GetTick>
 8007124:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800712a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800712e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007132:	f023 0301 	bic.w	r3, r3, #1
 8007136:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800713a:	e00a      	b.n	8007152 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800713c:	f7fb f966 	bl	800240c <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800714a:	4293      	cmp	r3, r2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e0a3      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007152:	f7ff fb46 	bl	80067e2 <LL_RCC_LSE_IsReady>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1ef      	bne.n	800713c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 8099 	beq.w	8007298 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	2b0c      	cmp	r3, #12
 800716a:	d06c      	beq.n	8007246 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007170:	2b02      	cmp	r3, #2
 8007172:	d14b      	bne.n	800720c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007174:	f7ff fc87 	bl	8006a86 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007178:	f7fb f948 	bl	800240c <HAL_GetTick>
 800717c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007180:	f7fb f944 	bl	800240c <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b0a      	cmp	r3, #10
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e083      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007192:	f7ff fc86 	bl	8006aa2 <LL_RCC_PLL_IsReady>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1f1      	bne.n	8007180 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800719c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	4b40      	ldr	r3, [pc, #256]	@ (80072a4 <HAL_RCC_OscConfig+0x6fc>)
 80071a4:	4013      	ands	r3, r2
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80071ae:	4311      	orrs	r1, r2
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80071b4:	0212      	lsls	r2, r2, #8
 80071b6:	4311      	orrs	r1, r2
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80071bc:	4311      	orrs	r1, r2
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80071c2:	4311      	orrs	r1, r2
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80071c8:	430a      	orrs	r2, r1
 80071ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071d2:	f7ff fc4a 	bl	8006a6a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80071d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80071e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071e4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071e6:	f7fb f911 	bl	800240c <HAL_GetTick>
 80071ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80071ec:	e008      	b.n	8007200 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071ee:	f7fb f90d 	bl	800240c <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	2b0a      	cmp	r3, #10
 80071fa:	d901      	bls.n	8007200 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e04c      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007200:	f7ff fc4f 	bl	8006aa2 <LL_RCC_PLL_IsReady>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0f1      	beq.n	80071ee <HAL_RCC_OscConfig+0x646>
 800720a:	e045      	b.n	8007298 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800720c:	f7ff fc3b 	bl	8006a86 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007210:	f7fb f8fc 	bl	800240c <HAL_GetTick>
 8007214:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007218:	f7fb f8f8 	bl	800240c <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b0a      	cmp	r3, #10
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e037      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800722a:	f7ff fc3a 	bl	8006aa2 <LL_RCC_PLL_IsReady>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1f1      	bne.n	8007218 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800723e:	4b1a      	ldr	r3, [pc, #104]	@ (80072a8 <HAL_RCC_OscConfig+0x700>)
 8007240:	4013      	ands	r3, r2
 8007242:	60cb      	str	r3, [r1, #12]
 8007244:	e028      	b.n	8007298 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724a:	2b01      	cmp	r3, #1
 800724c:	d101      	bne.n	8007252 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e023      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	f003 0203 	and.w	r2, r3, #3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007264:	429a      	cmp	r2, r3
 8007266:	d115      	bne.n	8007294 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007272:	429a      	cmp	r2, r3
 8007274:	d10e      	bne.n	8007294 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007280:	021b      	lsls	r3, r3, #8
 8007282:	429a      	cmp	r2, r3
 8007284:	d106      	bne.n	8007294 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007290:	429a      	cmp	r2, r3
 8007292:	d001      	beq.n	8007298 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e000      	b.n	800729a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3720      	adds	r7, #32
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	11c1808c 	.word	0x11c1808c
 80072a8:	eefefffc 	.word	0xeefefffc

080072ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e10f      	b.n	80074e0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072c0:	4b89      	ldr	r3, [pc, #548]	@ (80074e8 <HAL_RCC_ClockConfig+0x23c>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0307 	and.w	r3, r3, #7
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d91b      	bls.n	8007306 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ce:	4b86      	ldr	r3, [pc, #536]	@ (80074e8 <HAL_RCC_ClockConfig+0x23c>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f023 0207 	bic.w	r2, r3, #7
 80072d6:	4984      	ldr	r1, [pc, #528]	@ (80074e8 <HAL_RCC_ClockConfig+0x23c>)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	4313      	orrs	r3, r2
 80072dc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072de:	f7fb f895 	bl	800240c <HAL_GetTick>
 80072e2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072e4:	e008      	b.n	80072f8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80072e6:	f7fb f891 	bl	800240c <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d901      	bls.n	80072f8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e0f3      	b.n	80074e0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072f8:	4b7b      	ldr	r3, [pc, #492]	@ (80074e8 <HAL_RCC_ClockConfig+0x23c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0307 	and.w	r3, r3, #7
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d1ef      	bne.n	80072e6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d016      	beq.n	8007340 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	4618      	mov	r0, r3
 8007318:	f7ff fb2a 	bl	8006970 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800731c:	f7fb f876 	bl	800240c <HAL_GetTick>
 8007320:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007322:	e008      	b.n	8007336 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007324:	f7fb f872 	bl	800240c <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b02      	cmp	r3, #2
 8007330:	d901      	bls.n	8007336 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e0d4      	b.n	80074e0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007336:	f7ff fbf2 	bl	8006b1e <LL_RCC_IsActiveFlag_HPRE>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d0f1      	beq.n	8007324 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007348:	2b00      	cmp	r3, #0
 800734a:	d016      	beq.n	800737a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	4618      	mov	r0, r3
 8007352:	f7ff fb20 	bl	8006996 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007356:	f7fb f859 	bl	800240c <HAL_GetTick>
 800735a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800735c:	e008      	b.n	8007370 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800735e:	f7fb f855 	bl	800240c <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	2b02      	cmp	r3, #2
 800736a:	d901      	bls.n	8007370 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e0b7      	b.n	80074e0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007370:	f7ff fbe6 	bl	8006b40 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0f1      	beq.n	800735e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0304 	and.w	r3, r3, #4
 8007382:	2b00      	cmp	r3, #0
 8007384:	d016      	beq.n	80073b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff fb19 	bl	80069c2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007390:	f7fb f83c 	bl	800240c <HAL_GetTick>
 8007394:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007396:	e008      	b.n	80073aa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007398:	f7fb f838 	bl	800240c <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d901      	bls.n	80073aa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e09a      	b.n	80074e0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80073aa:	f7ff fbdb 	bl	8006b64 <LL_RCC_IsActiveFlag_PPRE1>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d0f1      	beq.n	8007398 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0308 	and.w	r3, r3, #8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d017      	beq.n	80073f0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff fb0e 	bl	80069e8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80073cc:	f7fb f81e 	bl	800240c <HAL_GetTick>
 80073d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80073d4:	f7fb f81a 	bl	800240c <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e07c      	b.n	80074e0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80073e6:	f7ff fbce 	bl	8006b86 <LL_RCC_IsActiveFlag_PPRE2>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0f1      	beq.n	80073d4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d043      	beq.n	8007484 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	2b02      	cmp	r3, #2
 8007402:	d106      	bne.n	8007412 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007404:	f7ff f99b 	bl	800673e <LL_RCC_HSE_IsReady>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d11e      	bne.n	800744c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e066      	b.n	80074e0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	2b03      	cmp	r3, #3
 8007418:	d106      	bne.n	8007428 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800741a:	f7ff fb42 	bl	8006aa2 <LL_RCC_PLL_IsReady>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d113      	bne.n	800744c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e05b      	b.n	80074e0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d106      	bne.n	800743e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007430:	f7ff fa35 	bl	800689e <LL_RCC_MSI_IsReady>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d108      	bne.n	800744c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e050      	b.n	80074e0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800743e:	f7ff f9ab 	bl	8006798 <LL_RCC_HSI_IsReady>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e049      	b.n	80074e0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff fa6f 	bl	8006934 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007456:	f7fa ffd9 	bl	800240c <HAL_GetTick>
 800745a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800745c:	e00a      	b.n	8007474 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800745e:	f7fa ffd5 	bl	800240c <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800746c:	4293      	cmp	r3, r2
 800746e:	d901      	bls.n	8007474 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e035      	b.n	80074e0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007474:	f7ff fa71 	bl	800695a <LL_RCC_GetSysClkSource>
 8007478:	4602      	mov	r2, r0
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	429a      	cmp	r2, r3
 8007482:	d1ec      	bne.n	800745e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007484:	4b18      	ldr	r3, [pc, #96]	@ (80074e8 <HAL_RCC_ClockConfig+0x23c>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d21b      	bcs.n	80074ca <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007492:	4b15      	ldr	r3, [pc, #84]	@ (80074e8 <HAL_RCC_ClockConfig+0x23c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f023 0207 	bic.w	r2, r3, #7
 800749a:	4913      	ldr	r1, [pc, #76]	@ (80074e8 <HAL_RCC_ClockConfig+0x23c>)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	4313      	orrs	r3, r2
 80074a0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074a2:	f7fa ffb3 	bl	800240c <HAL_GetTick>
 80074a6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074a8:	e008      	b.n	80074bc <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80074aa:	f7fa ffaf 	bl	800240c <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d901      	bls.n	80074bc <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e011      	b.n	80074e0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074bc:	4b0a      	ldr	r3, [pc, #40]	@ (80074e8 <HAL_RCC_ClockConfig+0x23c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0307 	and.w	r3, r3, #7
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d1ef      	bne.n	80074aa <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80074ca:	f000 f8b3 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 80074ce:	4603      	mov	r3, r0
 80074d0:	4a06      	ldr	r2, [pc, #24]	@ (80074ec <HAL_RCC_ClockConfig+0x240>)
 80074d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80074d4:	4b06      	ldr	r3, [pc, #24]	@ (80074f0 <HAL_RCC_ClockConfig+0x244>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fb fcfb 	bl	8002ed4 <HAL_InitTick>
 80074de:	4603      	mov	r3, r0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	58004000 	.word	0x58004000
 80074ec:	20000000 	.word	0x20000000
 80074f0:	20000004 	.word	0x20000004

080074f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074f4:	b590      	push	{r4, r7, lr}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80074fa:	2300      	movs	r3, #0
 80074fc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007502:	f7ff fa2a 	bl	800695a <LL_RCC_GetSysClkSource>
 8007506:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007508:	f7ff fafe 	bl	8006b08 <LL_RCC_PLL_GetMainSource>
 800750c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <HAL_RCC_GetSysClockFreq+0x2c>
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b0c      	cmp	r3, #12
 8007518:	d139      	bne.n	800758e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d136      	bne.n	800758e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007520:	f7ff f9cd 	bl	80068be <LL_RCC_MSI_IsEnabledRangeSelect>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d115      	bne.n	8007556 <HAL_RCC_GetSysClockFreq+0x62>
 800752a:	f7ff f9c8 	bl	80068be <LL_RCC_MSI_IsEnabledRangeSelect>
 800752e:	4603      	mov	r3, r0
 8007530:	2b01      	cmp	r3, #1
 8007532:	d106      	bne.n	8007542 <HAL_RCC_GetSysClockFreq+0x4e>
 8007534:	f7ff f9d3 	bl	80068de <LL_RCC_MSI_GetRange>
 8007538:	4603      	mov	r3, r0
 800753a:	0a1b      	lsrs	r3, r3, #8
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	e005      	b.n	800754e <HAL_RCC_GetSysClockFreq+0x5a>
 8007542:	f7ff f9d7 	bl	80068f4 <LL_RCC_MSI_GetRangeAfterStandby>
 8007546:	4603      	mov	r3, r0
 8007548:	0a1b      	lsrs	r3, r3, #8
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	4a36      	ldr	r2, [pc, #216]	@ (8007628 <HAL_RCC_GetSysClockFreq+0x134>)
 8007550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007554:	e014      	b.n	8007580 <HAL_RCC_GetSysClockFreq+0x8c>
 8007556:	f7ff f9b2 	bl	80068be <LL_RCC_MSI_IsEnabledRangeSelect>
 800755a:	4603      	mov	r3, r0
 800755c:	2b01      	cmp	r3, #1
 800755e:	d106      	bne.n	800756e <HAL_RCC_GetSysClockFreq+0x7a>
 8007560:	f7ff f9bd 	bl	80068de <LL_RCC_MSI_GetRange>
 8007564:	4603      	mov	r3, r0
 8007566:	091b      	lsrs	r3, r3, #4
 8007568:	f003 030f 	and.w	r3, r3, #15
 800756c:	e005      	b.n	800757a <HAL_RCC_GetSysClockFreq+0x86>
 800756e:	f7ff f9c1 	bl	80068f4 <LL_RCC_MSI_GetRangeAfterStandby>
 8007572:	4603      	mov	r3, r0
 8007574:	091b      	lsrs	r3, r3, #4
 8007576:	f003 030f 	and.w	r3, r3, #15
 800757a:	4a2b      	ldr	r2, [pc, #172]	@ (8007628 <HAL_RCC_GetSysClockFreq+0x134>)
 800757c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007580:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d115      	bne.n	80075b4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800758c:	e012      	b.n	80075b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b04      	cmp	r3, #4
 8007592:	d102      	bne.n	800759a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007594:	4b25      	ldr	r3, [pc, #148]	@ (800762c <HAL_RCC_GetSysClockFreq+0x138>)
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	e00c      	b.n	80075b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2b08      	cmp	r3, #8
 800759e:	d109      	bne.n	80075b4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80075a0:	f7ff f8a0 	bl	80066e4 <LL_RCC_HSE_IsEnabledDiv2>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d102      	bne.n	80075b0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80075aa:	4b20      	ldr	r3, [pc, #128]	@ (800762c <HAL_RCC_GetSysClockFreq+0x138>)
 80075ac:	617b      	str	r3, [r7, #20]
 80075ae:	e001      	b.n	80075b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80075b0:	4b1f      	ldr	r3, [pc, #124]	@ (8007630 <HAL_RCC_GetSysClockFreq+0x13c>)
 80075b2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075b4:	f7ff f9d1 	bl	800695a <LL_RCC_GetSysClkSource>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b0c      	cmp	r3, #12
 80075bc:	d12f      	bne.n	800761e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80075be:	f7ff faa3 	bl	8006b08 <LL_RCC_PLL_GetMainSource>
 80075c2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d003      	beq.n	80075d2 <HAL_RCC_GetSysClockFreq+0xde>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d003      	beq.n	80075d8 <HAL_RCC_GetSysClockFreq+0xe4>
 80075d0:	e00d      	b.n	80075ee <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80075d2:	4b16      	ldr	r3, [pc, #88]	@ (800762c <HAL_RCC_GetSysClockFreq+0x138>)
 80075d4:	60fb      	str	r3, [r7, #12]
        break;
 80075d6:	e00d      	b.n	80075f4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80075d8:	f7ff f884 	bl	80066e4 <LL_RCC_HSE_IsEnabledDiv2>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d102      	bne.n	80075e8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80075e2:	4b12      	ldr	r3, [pc, #72]	@ (800762c <HAL_RCC_GetSysClockFreq+0x138>)
 80075e4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80075e6:	e005      	b.n	80075f4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80075e8:	4b11      	ldr	r3, [pc, #68]	@ (8007630 <HAL_RCC_GetSysClockFreq+0x13c>)
 80075ea:	60fb      	str	r3, [r7, #12]
        break;
 80075ec:	e002      	b.n	80075f4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	60fb      	str	r3, [r7, #12]
        break;
 80075f2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80075f4:	f7ff fa66 	bl	8006ac4 <LL_RCC_PLL_GetN>
 80075f8:	4602      	mov	r2, r0
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	fb03 f402 	mul.w	r4, r3, r2
 8007600:	f7ff fa77 	bl	8006af2 <LL_RCC_PLL_GetDivider>
 8007604:	4603      	mov	r3, r0
 8007606:	091b      	lsrs	r3, r3, #4
 8007608:	3301      	adds	r3, #1
 800760a:	fbb4 f4f3 	udiv	r4, r4, r3
 800760e:	f7ff fa65 	bl	8006adc <LL_RCC_PLL_GetR>
 8007612:	4603      	mov	r3, r0
 8007614:	0f5b      	lsrs	r3, r3, #29
 8007616:	3301      	adds	r3, #1
 8007618:	fbb4 f3f3 	udiv	r3, r4, r3
 800761c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800761e:	697b      	ldr	r3, [r7, #20]
}
 8007620:	4618      	mov	r0, r3
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	bd90      	pop	{r4, r7, pc}
 8007628:	0801da70 	.word	0x0801da70
 800762c:	00f42400 	.word	0x00f42400
 8007630:	01e84800 	.word	0x01e84800

08007634 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007634:	b598      	push	{r3, r4, r7, lr}
 8007636:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007638:	f7ff ff5c 	bl	80074f4 <HAL_RCC_GetSysClockFreq>
 800763c:	4604      	mov	r4, r0
 800763e:	f7ff f9e6 	bl	8006a0e <LL_RCC_GetAHBPrescaler>
 8007642:	4603      	mov	r3, r0
 8007644:	091b      	lsrs	r3, r3, #4
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	4a03      	ldr	r2, [pc, #12]	@ (8007658 <HAL_RCC_GetHCLKFreq+0x24>)
 800764c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007650:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007654:	4618      	mov	r0, r3
 8007656:	bd98      	pop	{r3, r4, r7, pc}
 8007658:	0801da10 	.word	0x0801da10

0800765c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800765c:	b598      	push	{r3, r4, r7, lr}
 800765e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007660:	f7ff ffe8 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 8007664:	4604      	mov	r4, r0
 8007666:	f7ff f9ea 	bl	8006a3e <LL_RCC_GetAPB1Prescaler>
 800766a:	4603      	mov	r3, r0
 800766c:	0a1b      	lsrs	r3, r3, #8
 800766e:	4a03      	ldr	r2, [pc, #12]	@ (800767c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007674:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007678:	4618      	mov	r0, r3
 800767a:	bd98      	pop	{r3, r4, r7, pc}
 800767c:	0801da50 	.word	0x0801da50

08007680 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007680:	b598      	push	{r3, r4, r7, lr}
 8007682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007684:	f7ff ffd6 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 8007688:	4604      	mov	r4, r0
 800768a:	f7ff f9e3 	bl	8006a54 <LL_RCC_GetAPB2Prescaler>
 800768e:	4603      	mov	r3, r0
 8007690:	0adb      	lsrs	r3, r3, #11
 8007692:	4a03      	ldr	r2, [pc, #12]	@ (80076a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007698:	fa24 f303 	lsr.w	r3, r4, r3
}
 800769c:	4618      	mov	r0, r3
 800769e:	bd98      	pop	{r3, r4, r7, pc}
 80076a0:	0801da50 	.word	0x0801da50

080076a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80076a4:	b590      	push	{r4, r7, lr}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	091b      	lsrs	r3, r3, #4
 80076b0:	f003 030f 	and.w	r3, r3, #15
 80076b4:	4a10      	ldr	r2, [pc, #64]	@ (80076f8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80076b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ba:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80076bc:	f7ff f9b2 	bl	8006a24 <LL_RCC_GetAHB3Prescaler>
 80076c0:	4603      	mov	r3, r0
 80076c2:	091b      	lsrs	r3, r3, #4
 80076c4:	f003 030f 	and.w	r3, r3, #15
 80076c8:	4a0c      	ldr	r2, [pc, #48]	@ (80076fc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80076ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	4a09      	ldr	r2, [pc, #36]	@ (8007700 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80076da:	fba2 2303 	umull	r2, r3, r2, r3
 80076de:	0c9c      	lsrs	r4, r3, #18
 80076e0:	f7fe ff58 	bl	8006594 <HAL_PWREx_GetVoltageRange>
 80076e4:	4603      	mov	r3, r0
 80076e6:	4619      	mov	r1, r3
 80076e8:	4620      	mov	r0, r4
 80076ea:	f000 f80b 	bl	8007704 <RCC_SetFlashLatency>
 80076ee:	4603      	mov	r3, r0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd90      	pop	{r4, r7, pc}
 80076f8:	0801da70 	.word	0x0801da70
 80076fc:	0801da10 	.word	0x0801da10
 8007700:	431bde83 	.word	0x431bde83

08007704 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b08e      	sub	sp, #56	@ 0x38
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800770e:	4a3a      	ldr	r2, [pc, #232]	@ (80077f8 <RCC_SetFlashLatency+0xf4>)
 8007710:	f107 0320 	add.w	r3, r7, #32
 8007714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007718:	6018      	str	r0, [r3, #0]
 800771a:	3304      	adds	r3, #4
 800771c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800771e:	4a37      	ldr	r2, [pc, #220]	@ (80077fc <RCC_SetFlashLatency+0xf8>)
 8007720:	f107 0318 	add.w	r3, r7, #24
 8007724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007728:	6018      	str	r0, [r3, #0]
 800772a:	3304      	adds	r3, #4
 800772c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800772e:	4a34      	ldr	r2, [pc, #208]	@ (8007800 <RCC_SetFlashLatency+0xfc>)
 8007730:	f107 030c 	add.w	r3, r7, #12
 8007734:	ca07      	ldmia	r2, {r0, r1, r2}
 8007736:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800773a:	2300      	movs	r3, #0
 800773c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007744:	d11b      	bne.n	800777e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007746:	2300      	movs	r3, #0
 8007748:	633b      	str	r3, [r7, #48]	@ 0x30
 800774a:	e014      	b.n	8007776 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800774c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774e:	005b      	lsls	r3, r3, #1
 8007750:	3338      	adds	r3, #56	@ 0x38
 8007752:	443b      	add	r3, r7
 8007754:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007758:	461a      	mov	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4293      	cmp	r3, r2
 800775e:	d807      	bhi.n	8007770 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	3338      	adds	r3, #56	@ 0x38
 8007766:	443b      	add	r3, r7
 8007768:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800776c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800776e:	e021      	b.n	80077b4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007772:	3301      	adds	r3, #1
 8007774:	633b      	str	r3, [r7, #48]	@ 0x30
 8007776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007778:	2b02      	cmp	r3, #2
 800777a:	d9e7      	bls.n	800774c <RCC_SetFlashLatency+0x48>
 800777c:	e01a      	b.n	80077b4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800777e:	2300      	movs	r3, #0
 8007780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007782:	e014      	b.n	80077ae <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007786:	005b      	lsls	r3, r3, #1
 8007788:	3338      	adds	r3, #56	@ 0x38
 800778a:	443b      	add	r3, r7
 800778c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007790:	461a      	mov	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4293      	cmp	r3, r2
 8007796:	d807      	bhi.n	80077a8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	3338      	adds	r3, #56	@ 0x38
 800779e:	443b      	add	r3, r7
 80077a0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80077a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077a6:	e005      	b.n	80077b4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80077a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077aa:	3301      	adds	r3, #1
 80077ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d9e7      	bls.n	8007784 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80077b4:	4b13      	ldr	r3, [pc, #76]	@ (8007804 <RCC_SetFlashLatency+0x100>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f023 0207 	bic.w	r2, r3, #7
 80077bc:	4911      	ldr	r1, [pc, #68]	@ (8007804 <RCC_SetFlashLatency+0x100>)
 80077be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c0:	4313      	orrs	r3, r2
 80077c2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80077c4:	f7fa fe22 	bl	800240c <HAL_GetTick>
 80077c8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80077ca:	e008      	b.n	80077de <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80077cc:	f7fa fe1e 	bl	800240c <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d901      	bls.n	80077de <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e007      	b.n	80077ee <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80077de:	4b09      	ldr	r3, [pc, #36]	@ (8007804 <RCC_SetFlashLatency+0x100>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0307 	and.w	r3, r3, #7
 80077e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d1ef      	bne.n	80077cc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3738      	adds	r7, #56	@ 0x38
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	0801d2ac 	.word	0x0801d2ac
 80077fc:	0801d2b4 	.word	0x0801d2b4
 8007800:	0801d2bc 	.word	0x0801d2bc
 8007804:	58004000 	.word	0x58004000

08007808 <LL_RCC_LSE_IsReady>:
{
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800780c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b02      	cmp	r3, #2
 800781a:	d101      	bne.n	8007820 <LL_RCC_LSE_IsReady+0x18>
 800781c:	2301      	movs	r3, #1
 800781e:	e000      	b.n	8007822 <LL_RCC_LSE_IsReady+0x1a>
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	46bd      	mov	sp, r7
 8007826:	bc80      	pop	{r7}
 8007828:	4770      	bx	lr

0800782a <LL_RCC_SetUSARTClockSource>:
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007836:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	0c1b      	lsrs	r3, r3, #16
 800783e:	43db      	mvns	r3, r3
 8007840:	401a      	ands	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	b29b      	uxth	r3, r3
 8007846:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800784a:	4313      	orrs	r3, r2
 800784c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	bc80      	pop	{r7}
 8007858:	4770      	bx	lr

0800785a <LL_RCC_SetI2SClockSource>:
{
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800786a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800786e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4313      	orrs	r3, r2
 8007876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	bc80      	pop	{r7}
 8007882:	4770      	bx	lr

08007884 <LL_RCC_SetLPUARTClockSource>:
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800788c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007894:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007898:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4313      	orrs	r3, r2
 80078a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bc80      	pop	{r7}
 80078ac:	4770      	bx	lr

080078ae <LL_RCC_SetI2CClockSource>:
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80078b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	091b      	lsrs	r3, r3, #4
 80078c2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80078c6:	43db      	mvns	r3, r3
 80078c8:	401a      	ands	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80078d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078d6:	4313      	orrs	r3, r2
 80078d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bc80      	pop	{r7}
 80078e4:	4770      	bx	lr

080078e6 <LL_RCC_SetLPTIMClockSource>:
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80078ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	0c1b      	lsrs	r3, r3, #16
 80078fa:	041b      	lsls	r3, r3, #16
 80078fc:	43db      	mvns	r3, r3
 80078fe:	401a      	ands	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	041b      	lsls	r3, r3, #16
 8007904:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007908:	4313      	orrs	r3, r2
 800790a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800790e:	bf00      	nop
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	bc80      	pop	{r7}
 8007916:	4770      	bx	lr

08007918 <LL_RCC_SetRNGClockSource>:
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007928:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800792c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4313      	orrs	r3, r2
 8007934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	bc80      	pop	{r7}
 8007940:	4770      	bx	lr

08007942 <LL_RCC_SetADCClockSource>:
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800794a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800794e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007952:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007956:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4313      	orrs	r3, r2
 800795e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007962:	bf00      	nop
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	bc80      	pop	{r7}
 800796a:	4770      	bx	lr

0800796c <LL_RCC_SetRTCClockSource>:
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800797c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007980:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4313      	orrs	r3, r2
 8007988:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	bc80      	pop	{r7}
 8007994:	4770      	bx	lr

08007996 <LL_RCC_GetRTCClockSource>:
{
 8007996:	b480      	push	{r7}
 8007998:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800799a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800799e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bc80      	pop	{r7}
 80079ac:	4770      	bx	lr

080079ae <LL_RCC_ForceBackupDomainReset>:
{
 80079ae:	b480      	push	{r7}
 80079b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80079b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80079be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80079c6:	bf00      	nop
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bc80      	pop	{r7}
 80079cc:	4770      	bx	lr

080079ce <LL_RCC_ReleaseBackupDomainReset>:
{
 80079ce:	b480      	push	{r7}
 80079d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80079d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80079de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80079e6:	bf00      	nop
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bc80      	pop	{r7}
 80079ec:	4770      	bx	lr
	...

080079f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80079f8:	2300      	movs	r3, #0
 80079fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80079fc:	2300      	movs	r3, #0
 80079fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007a00:	2300      	movs	r3, #0
 8007a02:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d058      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007a10:	f7fe fd7e 	bl	8006510 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a14:	f7fa fcfa 	bl	800240c <HAL_GetTick>
 8007a18:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007a1a:	e009      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a1c:	f7fa fcf6 	bl	800240c <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d902      	bls.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	74fb      	strb	r3, [r7, #19]
        break;
 8007a2e:	e006      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007a30:	4b7b      	ldr	r3, [pc, #492]	@ (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a3c:	d1ee      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8007a3e:	7cfb      	ldrb	r3, [r7, #19]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d13c      	bne.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007a44:	f7ff ffa7 	bl	8007996 <LL_RCC_GetRTCClockSource>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d00f      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a5e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a60:	f7ff ffa5 	bl	80079ae <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a64:	f7ff ffb3 	bl	80079ce <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d014      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7c:	f7fa fcc6 	bl	800240c <HAL_GetTick>
 8007a80:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8007a82:	e00b      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a84:	f7fa fcc2 	bl	800240c <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d902      	bls.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	74fb      	strb	r3, [r7, #19]
            break;
 8007a9a:	e004      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8007a9c:	f7ff feb4 	bl	8007808 <LL_RCC_LSE_IsReady>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d1ee      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007aa6:	7cfb      	ldrb	r3, [r7, #19]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d105      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7ff ff5b 	bl	800796c <LL_RCC_SetRTCClockSource>
 8007ab6:	e004      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ab8:	7cfb      	ldrb	r3, [r7, #19]
 8007aba:	74bb      	strb	r3, [r7, #18]
 8007abc:	e001      	b.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abe:	7cfb      	ldrb	r3, [r7, #19]
 8007ac0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d004      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7ff fea9 	bl	800782a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7ff fe9e 	bl	800782a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0320 	and.w	r3, r3, #32
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d004      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff fec0 	bl	8007884 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d004      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a1b      	ldr	r3, [r3, #32]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7ff fee6 	bl	80078e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d004      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7ff fedb 	bl	80078e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d004      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff fed0 	bl	80078e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d004      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff fea9 	bl	80078ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d004      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7ff fe9e 	bl	80078ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d004      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff fe93 	bl	80078ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0310 	and.w	r3, r3, #16
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d011      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff fe5e 	bl	800785a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ba6:	d107      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007bb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bb6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d010      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7ff fea5 	bl	8007918 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d107      	bne.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007be0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007be4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d011      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff fea3 	bl	8007942 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c04:	d107      	bne.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c14:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007c16:	7cbb      	ldrb	r3, [r7, #18]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3718      	adds	r7, #24
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	58000400 	.word	0x58000400

08007c24 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d071      	beq.n	8007d1a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d106      	bne.n	8007c50 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f7f9 ffe6 	bl	8001c1c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007c58:	4b32      	ldr	r3, [pc, #200]	@ (8007d24 <HAL_RTC_Init+0x100>)
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f003 0310 	and.w	r3, r3, #16
 8007c60:	2b10      	cmp	r3, #16
 8007c62:	d051      	beq.n	8007d08 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c64:	4b2f      	ldr	r3, [pc, #188]	@ (8007d24 <HAL_RTC_Init+0x100>)
 8007c66:	22ca      	movs	r2, #202	@ 0xca
 8007c68:	625a      	str	r2, [r3, #36]	@ 0x24
 8007c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8007d24 <HAL_RTC_Init+0x100>)
 8007c6c:	2253      	movs	r2, #83	@ 0x53
 8007c6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fa11 	bl	8008098 <RTC_EnterInitMode>
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d13f      	bne.n	8007d00 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007c80:	4b28      	ldr	r3, [pc, #160]	@ (8007d24 <HAL_RTC_Init+0x100>)
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	4a27      	ldr	r2, [pc, #156]	@ (8007d24 <HAL_RTC_Init+0x100>)
 8007c86:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8007c8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c8e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007c90:	4b24      	ldr	r3, [pc, #144]	@ (8007d24 <HAL_RTC_Init+0x100>)
 8007c92:	699a      	ldr	r2, [r3, #24]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6859      	ldr	r1, [r3, #4]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	4319      	orrs	r1, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	430b      	orrs	r3, r1
 8007ca4:	491f      	ldr	r1, [pc, #124]	@ (8007d24 <HAL_RTC_Init+0x100>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68da      	ldr	r2, [r3, #12]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	041b      	lsls	r3, r3, #16
 8007cb4:	491b      	ldr	r1, [pc, #108]	@ (8007d24 <HAL_RTC_Init+0x100>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007cba:	4b1a      	ldr	r3, [pc, #104]	@ (8007d24 <HAL_RTC_Init+0x100>)
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cca:	430b      	orrs	r3, r1
 8007ccc:	4915      	ldr	r1, [pc, #84]	@ (8007d24 <HAL_RTC_Init+0x100>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fa14 	bl	8008100 <RTC_ExitInitMode>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10e      	bne.n	8007d00 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8007ce2:	4b10      	ldr	r3, [pc, #64]	@ (8007d24 <HAL_RTC_Init+0x100>)
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a19      	ldr	r1, [r3, #32]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	4319      	orrs	r1, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	430b      	orrs	r3, r1
 8007cfa:	490a      	ldr	r1, [pc, #40]	@ (8007d24 <HAL_RTC_Init+0x100>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d00:	4b08      	ldr	r3, [pc, #32]	@ (8007d24 <HAL_RTC_Init+0x100>)
 8007d02:	22ff      	movs	r2, #255	@ 0xff
 8007d04:	625a      	str	r2, [r3, #36]	@ 0x24
 8007d06:	e001      	b.n	8007d0c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d103      	bne.n	8007d1a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	40002800 	.word	0x40002800

08007d28 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007d28:	b590      	push	{r4, r7, lr}
 8007d2a:	b087      	sub	sp, #28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d101      	bne.n	8007d46 <HAL_RTC_SetAlarm_IT+0x1e>
 8007d42:	2302      	movs	r3, #2
 8007d44:	e0f3      	b.n	8007f2e <HAL_RTC_SetAlarm_IT+0x206>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2202      	movs	r2, #2
 8007d52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8007d56:	4b78      	ldr	r3, [pc, #480]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d5e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d66:	d06a      	beq.n	8007e3e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d13a      	bne.n	8007de4 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007d6e:	4b72      	ldr	r3, [pc, #456]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d102      	bne.n	8007d80 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 f9f5 	bl	800817c <RTC_ByteToBcd2>
 8007d92:	4603      	mov	r3, r0
 8007d94:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	785b      	ldrb	r3, [r3, #1]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 f9ee 	bl	800817c <RTC_ByteToBcd2>
 8007da0:	4603      	mov	r3, r0
 8007da2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007da4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	789b      	ldrb	r3, [r3, #2]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f9e6 	bl	800817c <RTC_ByteToBcd2>
 8007db0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007db2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	78db      	ldrb	r3, [r3, #3]
 8007dba:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007dbc:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 f9d8 	bl	800817c <RTC_ByteToBcd2>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007dd0:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007dd8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007dde:	4313      	orrs	r3, r2
 8007de0:	617b      	str	r3, [r7, #20]
 8007de2:	e02c      	b.n	8007e3e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8007dec:	d00d      	beq.n	8007e0a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007df6:	d008      	beq.n	8007e0a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007df8:	4b4f      	ldr	r3, [pc, #316]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d102      	bne.n	8007e0a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2200      	movs	r2, #0
 8007e08:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	785b      	ldrb	r3, [r3, #1]
 8007e14:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007e16:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007e1c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	78db      	ldrb	r3, [r3, #3]
 8007e22:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007e24:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007e2c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007e2e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007e34:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e40:	22ca      	movs	r2, #202	@ 0xca
 8007e42:	625a      	str	r2, [r3, #36]	@ 0x24
 8007e44:	4b3c      	ldr	r3, [pc, #240]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e46:	2253      	movs	r2, #83	@ 0x53
 8007e48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e52:	d12c      	bne.n	8007eae <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007e54:	4b38      	ldr	r3, [pc, #224]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	4a37      	ldr	r2, [pc, #220]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e5a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007e5e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007e60:	4b35      	ldr	r3, [pc, #212]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e62:	2201      	movs	r2, #1
 8007e64:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e6c:	d107      	bne.n	8007e7e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	699a      	ldr	r2, [r3, #24]
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	4930      	ldr	r1, [pc, #192]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	644b      	str	r3, [r1, #68]	@ 0x44
 8007e7c:	e006      	b.n	8007e8c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8007e7e:	4a2e      	ldr	r2, [pc, #184]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007e84:	4a2c      	ldr	r2, [pc, #176]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007e8c:	4a2a      	ldr	r2, [pc, #168]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e98:	f043 0201 	orr.w	r2, r3, #1
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007ea0:	4b25      	ldr	r3, [pc, #148]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	4a24      	ldr	r2, [pc, #144]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ea6:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8007eaa:	6193      	str	r3, [r2, #24]
 8007eac:	e02b      	b.n	8007f06 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007eae:	4b22      	ldr	r3, [pc, #136]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	4a21      	ldr	r2, [pc, #132]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007eb4:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007eb8:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007eba:	4b1f      	ldr	r3, [pc, #124]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ec6:	d107      	bne.n	8007ed8 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	699a      	ldr	r2, [r3, #24]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	4919      	ldr	r1, [pc, #100]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8007ed6:	e006      	b.n	8007ee6 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8007ed8:	4a17      	ldr	r2, [pc, #92]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007ede:	4a16      	ldr	r2, [pc, #88]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8007ee6:	4a14      	ldr	r2, [pc, #80]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef2:	f043 0202 	orr.w	r2, r3, #2
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007efa:	4b0f      	ldr	r3, [pc, #60]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	4a0e      	ldr	r2, [pc, #56]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007f00:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8007f04:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007f06:	4b0d      	ldr	r3, [pc, #52]	@ (8007f3c <HAL_RTC_SetAlarm_IT+0x214>)
 8007f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8007f3c <HAL_RTC_SetAlarm_IT+0x214>)
 8007f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f12:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f16:	4b08      	ldr	r3, [pc, #32]	@ (8007f38 <HAL_RTC_SetAlarm_IT+0x210>)
 8007f18:	22ff      	movs	r2, #255	@ 0xff
 8007f1a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	371c      	adds	r7, #28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd90      	pop	{r4, r7, pc}
 8007f36:	bf00      	nop
 8007f38:	40002800 	.word	0x40002800
 8007f3c:	58000800 	.word	0x58000800

08007f40 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d101      	bne.n	8007f58 <HAL_RTC_DeactivateAlarm+0x18>
 8007f54:	2302      	movs	r3, #2
 8007f56:	e048      	b.n	8007fea <HAL_RTC_DeactivateAlarm+0xaa>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f68:	4b22      	ldr	r3, [pc, #136]	@ (8007ff4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f6a:	22ca      	movs	r2, #202	@ 0xca
 8007f6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8007f6e:	4b21      	ldr	r3, [pc, #132]	@ (8007ff4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f70:	2253      	movs	r2, #83	@ 0x53
 8007f72:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f7a:	d115      	bne.n	8007fa8 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ff4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	4a1c      	ldr	r2, [pc, #112]	@ (8007ff4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007f86:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007f88:	4b1a      	ldr	r3, [pc, #104]	@ (8007ff4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f8c:	4a19      	ldr	r2, [pc, #100]	@ (8007ff4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007f8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f92:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f98:	f023 0201 	bic.w	r2, r3, #1
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007fa0:	4b14      	ldr	r3, [pc, #80]	@ (8007ff4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007fa6:	e014      	b.n	8007fd2 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007fa8:	4b12      	ldr	r3, [pc, #72]	@ (8007ff4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	4a11      	ldr	r2, [pc, #68]	@ (8007ff4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007fae:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007fb2:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8007ff4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8007ff4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007fba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fbe:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc4:	f023 0202 	bic.w	r2, r3, #2
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007fcc:	4b09      	ldr	r3, [pc, #36]	@ (8007ff4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007fce:	2202      	movs	r2, #2
 8007fd0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fd2:	4b08      	ldr	r3, [pc, #32]	@ (8007ff4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007fd4:	22ff      	movs	r2, #255	@ 0xff
 8007fd6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bc80      	pop	{r7}
 8007ff2:	4770      	bx	lr
 8007ff4:	40002800 	.word	0x40002800

08007ff8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8008000:	4b11      	ldr	r3, [pc, #68]	@ (8008048 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008002:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008008:	4013      	ands	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	d005      	beq.n	8008022 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008016:	4b0c      	ldr	r3, [pc, #48]	@ (8008048 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008018:	2201      	movs	r2, #1
 800801a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7fa fbbe 	bl	800279e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f003 0302 	and.w	r3, r3, #2
 8008028:	2b00      	cmp	r3, #0
 800802a:	d005      	beq.n	8008038 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800802c:	4b06      	ldr	r3, [pc, #24]	@ (8008048 <HAL_RTC_AlarmIRQHandler+0x50>)
 800802e:	2202      	movs	r2, #2
 8008030:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f94a 	bl	80082cc <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8008040:	bf00      	nop
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	40002800 	.word	0x40002800

0800804c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008054:	4b0f      	ldr	r3, [pc, #60]	@ (8008094 <HAL_RTC_WaitForSynchro+0x48>)
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	4a0e      	ldr	r2, [pc, #56]	@ (8008094 <HAL_RTC_WaitForSynchro+0x48>)
 800805a:	f023 0320 	bic.w	r3, r3, #32
 800805e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008060:	f7fa f9d4 	bl	800240c <HAL_GetTick>
 8008064:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008066:	e009      	b.n	800807c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008068:	f7fa f9d0 	bl	800240c <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008076:	d901      	bls.n	800807c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e006      	b.n	800808a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800807c:	4b05      	ldr	r3, [pc, #20]	@ (8008094 <HAL_RTC_WaitForSynchro+0x48>)
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f003 0320 	and.w	r3, r3, #32
 8008084:	2b00      	cmp	r3, #0
 8008086:	d0ef      	beq.n	8008068 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	40002800 	.word	0x40002800

08008098 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80080a4:	4b15      	ldr	r3, [pc, #84]	@ (80080fc <RTC_EnterInitMode+0x64>)
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d120      	bne.n	80080f2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80080b0:	4b12      	ldr	r3, [pc, #72]	@ (80080fc <RTC_EnterInitMode+0x64>)
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	4a11      	ldr	r2, [pc, #68]	@ (80080fc <RTC_EnterInitMode+0x64>)
 80080b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ba:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80080bc:	f7fa f9a6 	bl	800240c <HAL_GetTick>
 80080c0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80080c2:	e00d      	b.n	80080e0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80080c4:	f7fa f9a2 	bl	800240c <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080d2:	d905      	bls.n	80080e0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2203      	movs	r2, #3
 80080dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80080e0:	4b06      	ldr	r3, [pc, #24]	@ (80080fc <RTC_EnterInitMode+0x64>)
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d102      	bne.n	80080f2 <RTC_EnterInitMode+0x5a>
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d1e8      	bne.n	80080c4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	40002800 	.word	0x40002800

08008100 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800810c:	4b1a      	ldr	r3, [pc, #104]	@ (8008178 <RTC_ExitInitMode+0x78>)
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	4a19      	ldr	r2, [pc, #100]	@ (8008178 <RTC_ExitInitMode+0x78>)
 8008112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008116:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008118:	4b17      	ldr	r3, [pc, #92]	@ (8008178 <RTC_ExitInitMode+0x78>)
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	f003 0320 	and.w	r3, r3, #32
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10c      	bne.n	800813e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7ff ff91 	bl	800804c <HAL_RTC_WaitForSynchro>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d01e      	beq.n	800816e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2203      	movs	r2, #3
 8008134:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	73fb      	strb	r3, [r7, #15]
 800813c:	e017      	b.n	800816e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800813e:	4b0e      	ldr	r3, [pc, #56]	@ (8008178 <RTC_ExitInitMode+0x78>)
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	4a0d      	ldr	r2, [pc, #52]	@ (8008178 <RTC_ExitInitMode+0x78>)
 8008144:	f023 0320 	bic.w	r3, r3, #32
 8008148:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7ff ff7e 	bl	800804c <HAL_RTC_WaitForSynchro>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d005      	beq.n	8008162 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2203      	movs	r2, #3
 800815a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008162:	4b05      	ldr	r3, [pc, #20]	@ (8008178 <RTC_ExitInitMode+0x78>)
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	4a04      	ldr	r2, [pc, #16]	@ (8008178 <RTC_ExitInitMode+0x78>)
 8008168:	f043 0320 	orr.w	r3, r3, #32
 800816c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800816e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	40002800 	.word	0x40002800

0800817c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008186:	2300      	movs	r3, #0
 8008188:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800818a:	79fb      	ldrb	r3, [r7, #7]
 800818c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800818e:	e005      	b.n	800819c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	3301      	adds	r3, #1
 8008194:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8008196:	7afb      	ldrb	r3, [r7, #11]
 8008198:	3b0a      	subs	r3, #10
 800819a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800819c:	7afb      	ldrb	r3, [r7, #11]
 800819e:	2b09      	cmp	r3, #9
 80081a0:	d8f6      	bhi.n	8008190 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	011b      	lsls	r3, r3, #4
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	7afb      	ldrb	r3, [r7, #11]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	b2db      	uxtb	r3, r3
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bc80      	pop	{r7}
 80081b8:	4770      	bx	lr
	...

080081bc <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d101      	bne.n	80081d2 <HAL_RTCEx_EnableBypassShadow+0x16>
 80081ce:	2302      	movs	r3, #2
 80081d0:	e01f      	b.n	8008212 <HAL_RTCEx_EnableBypassShadow+0x56>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2202      	movs	r2, #2
 80081de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081e2:	4b0e      	ldr	r3, [pc, #56]	@ (800821c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80081e4:	22ca      	movs	r2, #202	@ 0xca
 80081e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80081e8:	4b0c      	ldr	r3, [pc, #48]	@ (800821c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80081ea:	2253      	movs	r2, #83	@ 0x53
 80081ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80081ee:	4b0b      	ldr	r3, [pc, #44]	@ (800821c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	4a0a      	ldr	r2, [pc, #40]	@ (800821c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80081f4:	f043 0320 	orr.w	r3, r3, #32
 80081f8:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081fa:	4b08      	ldr	r3, [pc, #32]	@ (800821c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80081fc:	22ff      	movs	r2, #255	@ 0xff
 80081fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	bc80      	pop	{r7}
 800821a:	4770      	bx	lr
 800821c:	40002800 	.word	0x40002800

08008220 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <HAL_RTCEx_SetSSRU_IT+0x16>
 8008232:	2302      	movs	r3, #2
 8008234:	e027      	b.n	8008286 <HAL_RTCEx_SetSSRU_IT+0x66>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2202      	movs	r2, #2
 8008242:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008246:	4b12      	ldr	r3, [pc, #72]	@ (8008290 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008248:	22ca      	movs	r2, #202	@ 0xca
 800824a:	625a      	str	r2, [r3, #36]	@ 0x24
 800824c:	4b10      	ldr	r3, [pc, #64]	@ (8008290 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800824e:	2253      	movs	r2, #83	@ 0x53
 8008250:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8008252:	4b0f      	ldr	r3, [pc, #60]	@ (8008290 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	4a0e      	ldr	r2, [pc, #56]	@ (8008290 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800825c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800825e:	4b0d      	ldr	r3, [pc, #52]	@ (8008294 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008260:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008264:	4a0b      	ldr	r2, [pc, #44]	@ (8008294 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008266:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800826a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800826e:	4b08      	ldr	r3, [pc, #32]	@ (8008290 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008270:	22ff      	movs	r2, #255	@ 0xff
 8008272:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	bc80      	pop	{r7}
 800828e:	4770      	bx	lr
 8008290:	40002800 	.word	0x40002800
 8008294:	58000800 	.word	0x58000800

08008298 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80082a0:	4b09      	ldr	r3, [pc, #36]	@ (80082c8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80082a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d005      	beq.n	80082b8 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80082ac:	4b06      	ldr	r3, [pc, #24]	@ (80082c8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80082ae:	2240      	movs	r2, #64	@ 0x40
 80082b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7fa fa7d 	bl	80027b2 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	40002800 	.word	0x40002800

080082cc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	bc80      	pop	{r7}
 80082dc:	4770      	bx	lr
	...

080082e0 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b087      	sub	sp, #28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80082ec:	4b07      	ldr	r3, [pc, #28]	@ (800830c <HAL_RTCEx_BKUPWrite+0x2c>)
 80082ee:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	4413      	add	r3, r2
 80082f8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	601a      	str	r2, [r3, #0]
}
 8008300:	bf00      	nop
 8008302:	371c      	adds	r7, #28
 8008304:	46bd      	mov	sp, r7
 8008306:	bc80      	pop	{r7}
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	4000b100 	.word	0x4000b100

08008310 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800831a:	4b07      	ldr	r3, [pc, #28]	@ (8008338 <HAL_RTCEx_BKUPRead+0x28>)
 800831c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	4413      	add	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	bc80      	pop	{r7}
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	4000b100 	.word	0x4000b100

0800833c <LL_PWR_SetRadioBusyTrigger>:
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8008344:	4b06      	ldr	r3, [pc, #24]	@ (8008360 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800834c:	4904      	ldr	r1, [pc, #16]	@ (8008360 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4313      	orrs	r3, r2
 8008352:	608b      	str	r3, [r1, #8]
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	bc80      	pop	{r7}
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	58000400 	.word	0x58000400

08008364 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8008364:	b480      	push	{r7}
 8008366:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008368:	4b05      	ldr	r3, [pc, #20]	@ (8008380 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800836a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800836e:	4a04      	ldr	r2, [pc, #16]	@ (8008380 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008370:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008378:	bf00      	nop
 800837a:	46bd      	mov	sp, r7
 800837c:	bc80      	pop	{r7}
 800837e:	4770      	bx	lr
 8008380:	58000400 	.word	0x58000400

08008384 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8008384:	b480      	push	{r7}
 8008386:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008388:	4b05      	ldr	r3, [pc, #20]	@ (80083a0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800838a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800838e:	4a04      	ldr	r2, [pc, #16]	@ (80083a0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008390:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008398:	bf00      	nop
 800839a:	46bd      	mov	sp, r7
 800839c:	bc80      	pop	{r7}
 800839e:	4770      	bx	lr
 80083a0:	58000400 	.word	0x58000400

080083a4 <LL_PWR_ClearFlag_RFBUSY>:
{
 80083a4:	b480      	push	{r7}
 80083a6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80083a8:	4b03      	ldr	r3, [pc, #12]	@ (80083b8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80083aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083ae:	619a      	str	r2, [r3, #24]
}
 80083b0:	bf00      	nop
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bc80      	pop	{r7}
 80083b6:	4770      	bx	lr
 80083b8:	58000400 	.word	0x58000400

080083bc <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80083bc:	b480      	push	{r7}
 80083be:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80083c0:	4b06      	ldr	r3, [pc, #24]	@ (80083dc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80083c2:	695b      	ldr	r3, [r3, #20]
 80083c4:	f003 0302 	and.w	r3, r3, #2
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d101      	bne.n	80083d0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80083cc:	2301      	movs	r3, #1
 80083ce:	e000      	b.n	80083d2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bc80      	pop	{r7}
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	58000400 	.word	0x58000400

080083e0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80083e4:	4b06      	ldr	r3, [pc, #24]	@ (8008400 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	f003 0304 	and.w	r3, r3, #4
 80083ec:	2b04      	cmp	r3, #4
 80083ee:	d101      	bne.n	80083f4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80083f0:	2301      	movs	r3, #1
 80083f2:	e000      	b.n	80083f6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bc80      	pop	{r7}
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	58000400 	.word	0x58000400

08008404 <LL_RCC_RF_DisableReset>:
{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8008408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800840c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008410:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008414:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008418:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800841c:	bf00      	nop
 800841e:	46bd      	mov	sp, r7
 8008420:	bc80      	pop	{r7}
 8008422:	4770      	bx	lr

08008424 <LL_RCC_IsRFUnderReset>:
{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8008428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800842c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008438:	d101      	bne.n	800843e <LL_RCC_IsRFUnderReset+0x1a>
 800843a:	2301      	movs	r3, #1
 800843c:	e000      	b.n	8008440 <LL_RCC_IsRFUnderReset+0x1c>
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	46bd      	mov	sp, r7
 8008444:	bc80      	pop	{r7}
 8008446:	4770      	bx	lr

08008448 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008450:	4b06      	ldr	r3, [pc, #24]	@ (800846c <LL_EXTI_EnableIT_32_63+0x24>)
 8008452:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8008456:	4905      	ldr	r1, [pc, #20]	@ (800846c <LL_EXTI_EnableIT_32_63+0x24>)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4313      	orrs	r3, r2
 800845c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	bc80      	pop	{r7}
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	58000800 	.word	0x58000800

08008470 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d103      	bne.n	8008486 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	73fb      	strb	r3, [r7, #15]
    return status;
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	e052      	b.n	800852c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	799b      	ldrb	r3, [r3, #6]
 800848e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <HAL_SUBGHZ_Init+0x2c>
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	2b03      	cmp	r3, #3
 800849a:	d109      	bne.n	80084b0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7f9 fdf2 	bl	800208c <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80084a8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80084ac:	f7ff ffcc 	bl	8008448 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d126      	bne.n	8008504 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2202      	movs	r2, #2
 80084ba:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80084bc:	f7ff ffa2 	bl	8008404 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80084c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008534 <HAL_SUBGHZ_Init+0xc4>)
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	4613      	mov	r3, r2
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	1a9b      	subs	r3, r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	0cdb      	lsrs	r3, r3, #19
 80084ce:	2264      	movs	r2, #100	@ 0x64
 80084d0:	fb02 f303 	mul.w	r3, r2, r3
 80084d4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d105      	bne.n	80084e8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	609a      	str	r2, [r3, #8]
        break;
 80084e6:	e007      	b.n	80084f8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80084ee:	f7ff ff99 	bl	8008424 <LL_RCC_IsRFUnderReset>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1ee      	bne.n	80084d6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80084f8:	f7ff ff34 	bl	8008364 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80084fc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008500:	f7ff ff1c 	bl	800833c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8008504:	f7ff ff4e 	bl	80083a4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4618      	mov	r0, r3
 8008514:	f000 faac 	bl	8008a70 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	719a      	strb	r2, [r3, #6]

  return status;
 800852a:	7bfb      	ldrb	r3, [r7, #15]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	20000000 	.word	0x20000000

08008538 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	607a      	str	r2, [r7, #4]
 8008542:	461a      	mov	r2, r3
 8008544:	460b      	mov	r3, r1
 8008546:	817b      	strh	r3, [r7, #10]
 8008548:	4613      	mov	r3, r2
 800854a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	799b      	ldrb	r3, [r3, #6]
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b01      	cmp	r3, #1
 8008554:	d14a      	bne.n	80085ec <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	795b      	ldrb	r3, [r3, #5]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d101      	bne.n	8008562 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800855e:	2302      	movs	r3, #2
 8008560:	e045      	b.n	80085ee <HAL_SUBGHZ_WriteRegisters+0xb6>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2201      	movs	r2, #1
 8008566:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2202      	movs	r2, #2
 800856c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 fb4c 	bl	8008c0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008574:	f7ff ff06 	bl	8008384 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8008578:	210d      	movs	r1, #13
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f000 fa98 	bl	8008ab0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008580:	897b      	ldrh	r3, [r7, #10]
 8008582:	0a1b      	lsrs	r3, r3, #8
 8008584:	b29b      	uxth	r3, r3
 8008586:	b2db      	uxtb	r3, r3
 8008588:	4619      	mov	r1, r3
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 fa90 	bl	8008ab0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008590:	897b      	ldrh	r3, [r7, #10]
 8008592:	b2db      	uxtb	r3, r3
 8008594:	4619      	mov	r1, r3
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 fa8a 	bl	8008ab0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800859c:	2300      	movs	r3, #0
 800859e:	82bb      	strh	r3, [r7, #20]
 80085a0:	e00a      	b.n	80085b8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80085a2:	8abb      	ldrh	r3, [r7, #20]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	4413      	add	r3, r2
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	4619      	mov	r1, r3
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f000 fa7f 	bl	8008ab0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80085b2:	8abb      	ldrh	r3, [r7, #20]
 80085b4:	3301      	adds	r3, #1
 80085b6:	82bb      	strh	r3, [r7, #20]
 80085b8:	8aba      	ldrh	r2, [r7, #20]
 80085ba:	893b      	ldrh	r3, [r7, #8]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d3f0      	bcc.n	80085a2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80085c0:	f7ff fed0 	bl	8008364 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 fb45 	bl	8008c54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d002      	beq.n	80085d8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	75fb      	strb	r3, [r7, #23]
 80085d6:	e001      	b.n	80085dc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2201      	movs	r2, #1
 80085e0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	715a      	strb	r2, [r3, #5]

    return status;
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
 80085ea:	e000      	b.n	80085ee <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80085ec:	2302      	movs	r3, #2
  }
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b088      	sub	sp, #32
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	607a      	str	r2, [r7, #4]
 8008600:	461a      	mov	r2, r3
 8008602:	460b      	mov	r3, r1
 8008604:	817b      	strh	r3, [r7, #10]
 8008606:	4613      	mov	r3, r2
 8008608:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	799b      	ldrb	r3, [r3, #6]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b01      	cmp	r3, #1
 8008616:	d14a      	bne.n	80086ae <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	795b      	ldrb	r3, [r3, #5]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d101      	bne.n	8008624 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8008620:	2302      	movs	r3, #2
 8008622:	e045      	b.n	80086b0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2201      	movs	r2, #1
 8008628:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 faee 	bl	8008c0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008630:	f7ff fea8 	bl	8008384 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8008634:	211d      	movs	r1, #29
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 fa3a 	bl	8008ab0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800863c:	897b      	ldrh	r3, [r7, #10]
 800863e:	0a1b      	lsrs	r3, r3, #8
 8008640:	b29b      	uxth	r3, r3
 8008642:	b2db      	uxtb	r3, r3
 8008644:	4619      	mov	r1, r3
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 fa32 	bl	8008ab0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800864c:	897b      	ldrh	r3, [r7, #10]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	4619      	mov	r1, r3
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 fa2c 	bl	8008ab0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8008658:	2100      	movs	r1, #0
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f000 fa28 	bl	8008ab0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008660:	2300      	movs	r3, #0
 8008662:	82fb      	strh	r3, [r7, #22]
 8008664:	e009      	b.n	800867a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008666:	69b9      	ldr	r1, [r7, #24]
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 fa77 	bl	8008b5c <SUBGHZSPI_Receive>
      pData++;
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	3301      	adds	r3, #1
 8008672:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008674:	8afb      	ldrh	r3, [r7, #22]
 8008676:	3301      	adds	r3, #1
 8008678:	82fb      	strh	r3, [r7, #22]
 800867a:	8afa      	ldrh	r2, [r7, #22]
 800867c:	893b      	ldrh	r3, [r7, #8]
 800867e:	429a      	cmp	r2, r3
 8008680:	d3f1      	bcc.n	8008666 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008682:	f7ff fe6f 	bl	8008364 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 fae4 	bl	8008c54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	77fb      	strb	r3, [r7, #31]
 8008698:	e001      	b.n	800869e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800869a:	2300      	movs	r3, #0
 800869c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2201      	movs	r2, #1
 80086a2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	715a      	strb	r2, [r3, #5]

    return status;
 80086aa:	7ffb      	ldrb	r3, [r7, #31]
 80086ac:	e000      	b.n	80086b0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80086ae:	2302      	movs	r3, #2
  }
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3720      	adds	r7, #32
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	607a      	str	r2, [r7, #4]
 80086c2:	461a      	mov	r2, r3
 80086c4:	460b      	mov	r3, r1
 80086c6:	72fb      	strb	r3, [r7, #11]
 80086c8:	4613      	mov	r3, r2
 80086ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	799b      	ldrb	r3, [r3, #6]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d14a      	bne.n	800876c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	795b      	ldrb	r3, [r3, #5]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d101      	bne.n	80086e2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80086de:	2302      	movs	r3, #2
 80086e0:	e045      	b.n	800876e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 fa8f 	bl	8008c0c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80086ee:	7afb      	ldrb	r3, [r7, #11]
 80086f0:	2b84      	cmp	r3, #132	@ 0x84
 80086f2:	d002      	beq.n	80086fa <HAL_SUBGHZ_ExecSetCmd+0x42>
 80086f4:	7afb      	ldrb	r3, [r7, #11]
 80086f6:	2b94      	cmp	r3, #148	@ 0x94
 80086f8:	d103      	bne.n	8008702 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2201      	movs	r2, #1
 80086fe:	711a      	strb	r2, [r3, #4]
 8008700:	e002      	b.n	8008708 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008708:	f7ff fe3c 	bl	8008384 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800870c:	7afb      	ldrb	r3, [r7, #11]
 800870e:	4619      	mov	r1, r3
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f000 f9cd 	bl	8008ab0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008716:	2300      	movs	r3, #0
 8008718:	82bb      	strh	r3, [r7, #20]
 800871a:	e00a      	b.n	8008732 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800871c:	8abb      	ldrh	r3, [r7, #20]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	4413      	add	r3, r2
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	4619      	mov	r1, r3
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 f9c2 	bl	8008ab0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800872c:	8abb      	ldrh	r3, [r7, #20]
 800872e:	3301      	adds	r3, #1
 8008730:	82bb      	strh	r3, [r7, #20]
 8008732:	8aba      	ldrh	r2, [r7, #20]
 8008734:	893b      	ldrh	r3, [r7, #8]
 8008736:	429a      	cmp	r2, r3
 8008738:	d3f0      	bcc.n	800871c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800873a:	f7ff fe13 	bl	8008364 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800873e:	7afb      	ldrb	r3, [r7, #11]
 8008740:	2b84      	cmp	r3, #132	@ 0x84
 8008742:	d002      	beq.n	800874a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 fa85 	bl	8008c54 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d002      	beq.n	8008758 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	75fb      	strb	r3, [r7, #23]
 8008756:	e001      	b.n	800875c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2201      	movs	r2, #1
 8008760:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	715a      	strb	r2, [r3, #5]

    return status;
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	e000      	b.n	800876e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800876c:	2302      	movs	r3, #2
  }
}
 800876e:	4618      	mov	r0, r3
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b088      	sub	sp, #32
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	461a      	mov	r2, r3
 8008782:	460b      	mov	r3, r1
 8008784:	72fb      	strb	r3, [r7, #11]
 8008786:	4613      	mov	r3, r2
 8008788:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	799b      	ldrb	r3, [r3, #6]
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b01      	cmp	r3, #1
 8008796:	d13d      	bne.n	8008814 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	795b      	ldrb	r3, [r3, #5]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d101      	bne.n	80087a4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80087a0:	2302      	movs	r3, #2
 80087a2:	e038      	b.n	8008816 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2201      	movs	r2, #1
 80087a8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f000 fa2e 	bl	8008c0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80087b0:	f7ff fde8 	bl	8008384 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80087b4:	7afb      	ldrb	r3, [r7, #11]
 80087b6:	4619      	mov	r1, r3
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f000 f979 	bl	8008ab0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80087be:	2100      	movs	r1, #0
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 f975 	bl	8008ab0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80087c6:	2300      	movs	r3, #0
 80087c8:	82fb      	strh	r3, [r7, #22]
 80087ca:	e009      	b.n	80087e0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80087cc:	69b9      	ldr	r1, [r7, #24]
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f000 f9c4 	bl	8008b5c <SUBGHZSPI_Receive>
      pData++;
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	3301      	adds	r3, #1
 80087d8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80087da:	8afb      	ldrh	r3, [r7, #22]
 80087dc:	3301      	adds	r3, #1
 80087de:	82fb      	strh	r3, [r7, #22]
 80087e0:	8afa      	ldrh	r2, [r7, #22]
 80087e2:	893b      	ldrh	r3, [r7, #8]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d3f1      	bcc.n	80087cc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80087e8:	f7ff fdbc 	bl	8008364 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 fa31 	bl	8008c54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d002      	beq.n	8008800 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	77fb      	strb	r3, [r7, #31]
 80087fe:	e001      	b.n	8008804 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2201      	movs	r2, #1
 8008808:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	715a      	strb	r2, [r3, #5]

    return status;
 8008810:	7ffb      	ldrb	r3, [r7, #31]
 8008812:	e000      	b.n	8008816 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008814:	2302      	movs	r3, #2
  }
}
 8008816:	4618      	mov	r0, r3
 8008818:	3720      	adds	r7, #32
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b086      	sub	sp, #24
 8008822:	af00      	add	r7, sp, #0
 8008824:	60f8      	str	r0, [r7, #12]
 8008826:	607a      	str	r2, [r7, #4]
 8008828:	461a      	mov	r2, r3
 800882a:	460b      	mov	r3, r1
 800882c:	72fb      	strb	r3, [r7, #11]
 800882e:	4613      	mov	r3, r2
 8008830:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	799b      	ldrb	r3, [r3, #6]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b01      	cmp	r3, #1
 800883a:	d13e      	bne.n	80088ba <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	795b      	ldrb	r3, [r3, #5]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008844:	2302      	movs	r3, #2
 8008846:	e039      	b.n	80088bc <HAL_SUBGHZ_WriteBuffer+0x9e>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2201      	movs	r2, #1
 800884c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 f9dc 	bl	8008c0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008854:	f7ff fd96 	bl	8008384 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8008858:	210e      	movs	r1, #14
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f000 f928 	bl	8008ab0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008860:	7afb      	ldrb	r3, [r7, #11]
 8008862:	4619      	mov	r1, r3
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 f923 	bl	8008ab0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800886a:	2300      	movs	r3, #0
 800886c:	82bb      	strh	r3, [r7, #20]
 800886e:	e00a      	b.n	8008886 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008870:	8abb      	ldrh	r3, [r7, #20]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	4413      	add	r3, r2
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	4619      	mov	r1, r3
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f000 f918 	bl	8008ab0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008880:	8abb      	ldrh	r3, [r7, #20]
 8008882:	3301      	adds	r3, #1
 8008884:	82bb      	strh	r3, [r7, #20]
 8008886:	8aba      	ldrh	r2, [r7, #20]
 8008888:	893b      	ldrh	r3, [r7, #8]
 800888a:	429a      	cmp	r2, r3
 800888c:	d3f0      	bcc.n	8008870 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800888e:	f7ff fd69 	bl	8008364 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f000 f9de 	bl	8008c54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	75fb      	strb	r3, [r7, #23]
 80088a4:	e001      	b.n	80088aa <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2201      	movs	r2, #1
 80088ae:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	715a      	strb	r2, [r3, #5]

    return status;
 80088b6:	7dfb      	ldrb	r3, [r7, #23]
 80088b8:	e000      	b.n	80088bc <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80088ba:	2302      	movs	r3, #2
  }
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	607a      	str	r2, [r7, #4]
 80088ce:	461a      	mov	r2, r3
 80088d0:	460b      	mov	r3, r1
 80088d2:	72fb      	strb	r3, [r7, #11]
 80088d4:	4613      	mov	r3, r2
 80088d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	799b      	ldrb	r3, [r3, #6]
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d141      	bne.n	800896a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	795b      	ldrb	r3, [r3, #5]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d101      	bne.n	80088f2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80088ee:	2302      	movs	r3, #2
 80088f0:	e03c      	b.n	800896c <HAL_SUBGHZ_ReadBuffer+0xa8>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 f987 	bl	8008c0c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80088fe:	f7ff fd41 	bl	8008384 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008902:	211e      	movs	r1, #30
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 f8d3 	bl	8008ab0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800890a:	7afb      	ldrb	r3, [r7, #11]
 800890c:	4619      	mov	r1, r3
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 f8ce 	bl	8008ab0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008914:	2100      	movs	r1, #0
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 f8ca 	bl	8008ab0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800891c:	2300      	movs	r3, #0
 800891e:	82fb      	strh	r3, [r7, #22]
 8008920:	e009      	b.n	8008936 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008922:	69b9      	ldr	r1, [r7, #24]
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 f919 	bl	8008b5c <SUBGHZSPI_Receive>
      pData++;
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	3301      	adds	r3, #1
 800892e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008930:	8afb      	ldrh	r3, [r7, #22]
 8008932:	3301      	adds	r3, #1
 8008934:	82fb      	strh	r3, [r7, #22]
 8008936:	8afa      	ldrh	r2, [r7, #22]
 8008938:	893b      	ldrh	r3, [r7, #8]
 800893a:	429a      	cmp	r2, r3
 800893c:	d3f1      	bcc.n	8008922 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800893e:	f7ff fd11 	bl	8008364 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f000 f986 	bl	8008c54 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d002      	beq.n	8008956 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	77fb      	strb	r3, [r7, #31]
 8008954:	e001      	b.n	800895a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2201      	movs	r2, #1
 800895e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	715a      	strb	r2, [r3, #5]

    return status;
 8008966:	7ffb      	ldrb	r3, [r7, #31]
 8008968:	e000      	b.n	800896c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800896a:	2302      	movs	r3, #2
  }
}
 800896c:	4618      	mov	r0, r3
 800896e:	3720      	adds	r7, #32
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800897c:	2300      	movs	r3, #0
 800897e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8008980:	f107 020c 	add.w	r2, r7, #12
 8008984:	2302      	movs	r3, #2
 8008986:	2112      	movs	r1, #18
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff fef4 	bl	8008776 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800898e:	7b3b      	ldrb	r3, [r7, #12]
 8008990:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8008992:	89fb      	ldrh	r3, [r7, #14]
 8008994:	021b      	lsls	r3, r3, #8
 8008996:	b21a      	sxth	r2, r3
 8008998:	7b7b      	ldrb	r3, [r7, #13]
 800899a:	b21b      	sxth	r3, r3
 800899c:	4313      	orrs	r3, r2
 800899e:	b21b      	sxth	r3, r3
 80089a0:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80089a2:	f107 020c 	add.w	r2, r7, #12
 80089a6:	2302      	movs	r3, #2
 80089a8:	2102      	movs	r1, #2
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f7ff fe84 	bl	80086b8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80089b0:	89fb      	ldrh	r3, [r7, #14]
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d002      	beq.n	80089c0 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f012 fe74 	bl	801b6a8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80089c0:	89fb      	ldrh	r3, [r7, #14]
 80089c2:	f003 0302 	and.w	r3, r3, #2
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d002      	beq.n	80089d0 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f012 fe7a 	bl	801b6c4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80089d0:	89fb      	ldrh	r3, [r7, #14]
 80089d2:	f003 0304 	and.w	r3, r3, #4
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f012 feca 	bl	801b774 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80089e0:	89fb      	ldrh	r3, [r7, #14]
 80089e2:	f003 0308 	and.w	r3, r3, #8
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f012 fed0 	bl	801b790 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80089f0:	89fb      	ldrh	r3, [r7, #14]
 80089f2:	f003 0310 	and.w	r3, r3, #16
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f012 fed6 	bl	801b7ac <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8008a00:	89fb      	ldrh	r3, [r7, #14]
 8008a02:	f003 0320 	and.w	r3, r3, #32
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d002      	beq.n	8008a10 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f012 fea4 	bl	801b758 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008a10:	89fb      	ldrh	r3, [r7, #14]
 8008a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d002      	beq.n	8008a20 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f012 fe60 	bl	801b6e0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008a20:	89fb      	ldrh	r3, [r7, #14]
 8008a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00d      	beq.n	8008a46 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8008a2a:	89fb      	ldrh	r3, [r7, #14]
 8008a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d004      	beq.n	8008a3e <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008a34:	2101      	movs	r1, #1
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f012 fe60 	bl	801b6fc <HAL_SUBGHZ_CADStatusCallback>
 8008a3c:	e003      	b.n	8008a46 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008a3e:	2100      	movs	r1, #0
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f012 fe5b 	bl	801b6fc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8008a46:	89fb      	ldrh	r3, [r7, #14]
 8008a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f012 fe71 	bl	801b738 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8008a56:	89fb      	ldrh	r3, [r7, #14]
 8008a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f012 feb1 	bl	801b7c8 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8008a66:	bf00      	nop
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008a78:	4b0c      	ldr	r3, [pc, #48]	@ (8008aac <SUBGHZSPI_Init+0x3c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8008aac <SUBGHZSPI_Init+0x3c>)
 8008a7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a82:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008a84:	4a09      	ldr	r2, [pc, #36]	@ (8008aac <SUBGHZSPI_Init+0x3c>)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8008a8c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8008a8e:	4b07      	ldr	r3, [pc, #28]	@ (8008aac <SUBGHZSPI_Init+0x3c>)
 8008a90:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8008a94:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008a96:	4b05      	ldr	r3, [pc, #20]	@ (8008aac <SUBGHZSPI_Init+0x3c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a04      	ldr	r2, [pc, #16]	@ (8008aac <SUBGHZSPI_Init+0x3c>)
 8008a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aa0:	6013      	str	r3, [r2, #0]
}
 8008aa2:	bf00      	nop
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bc80      	pop	{r7}
 8008aaa:	4770      	bx	lr
 8008aac:	58010000 	.word	0x58010000

08008ab0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008ac0:	4b23      	ldr	r3, [pc, #140]	@ (8008b50 <SUBGHZSPI_Transmit+0xa0>)
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	00db      	lsls	r3, r3, #3
 8008ac8:	1a9b      	subs	r3, r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	0cdb      	lsrs	r3, r3, #19
 8008ace:	2264      	movs	r2, #100	@ 0x64
 8008ad0:	fb02 f303 	mul.w	r3, r2, r3
 8008ad4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d105      	bne.n	8008ae8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	609a      	str	r2, [r3, #8]
      break;
 8008ae6:	e008      	b.n	8008afa <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008aee:	4b19      	ldr	r3, [pc, #100]	@ (8008b54 <SUBGHZSPI_Transmit+0xa4>)
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d1ed      	bne.n	8008ad6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008afa:	4b17      	ldr	r3, [pc, #92]	@ (8008b58 <SUBGHZSPI_Transmit+0xa8>)
 8008afc:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	78fa      	ldrb	r2, [r7, #3]
 8008b02:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008b04:	4b12      	ldr	r3, [pc, #72]	@ (8008b50 <SUBGHZSPI_Transmit+0xa0>)
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	00db      	lsls	r3, r3, #3
 8008b0c:	1a9b      	subs	r3, r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	0cdb      	lsrs	r3, r3, #19
 8008b12:	2264      	movs	r2, #100	@ 0x64
 8008b14:	fb02 f303 	mul.w	r3, r2, r3
 8008b18:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d105      	bne.n	8008b2c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	609a      	str	r2, [r3, #8]
      break;
 8008b2a:	e008      	b.n	8008b3e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008b32:	4b08      	ldr	r3, [pc, #32]	@ (8008b54 <SUBGHZSPI_Transmit+0xa4>)
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d1ed      	bne.n	8008b1a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8008b3e:	4b05      	ldr	r3, [pc, #20]	@ (8008b54 <SUBGHZSPI_Transmit+0xa4>)
 8008b40:	68db      	ldr	r3, [r3, #12]

  return status;
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	371c      	adds	r7, #28
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bc80      	pop	{r7}
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	20000000 	.word	0x20000000
 8008b54:	58010000 	.word	0x58010000
 8008b58:	5801000c 	.word	0x5801000c

08008b5c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008b6a:	4b25      	ldr	r3, [pc, #148]	@ (8008c00 <SUBGHZSPI_Receive+0xa4>)
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	00db      	lsls	r3, r3, #3
 8008b72:	1a9b      	subs	r3, r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	0cdb      	lsrs	r3, r3, #19
 8008b78:	2264      	movs	r2, #100	@ 0x64
 8008b7a:	fb02 f303 	mul.w	r3, r2, r3
 8008b7e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d105      	bne.n	8008b92 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	609a      	str	r2, [r3, #8]
      break;
 8008b90:	e008      	b.n	8008ba4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008b98:	4b1a      	ldr	r3, [pc, #104]	@ (8008c04 <SUBGHZSPI_Receive+0xa8>)
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f003 0302 	and.w	r3, r3, #2
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d1ed      	bne.n	8008b80 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008ba4:	4b18      	ldr	r3, [pc, #96]	@ (8008c08 <SUBGHZSPI_Receive+0xac>)
 8008ba6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	22ff      	movs	r2, #255	@ 0xff
 8008bac:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008bae:	4b14      	ldr	r3, [pc, #80]	@ (8008c00 <SUBGHZSPI_Receive+0xa4>)
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	00db      	lsls	r3, r3, #3
 8008bb6:	1a9b      	subs	r3, r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	0cdb      	lsrs	r3, r3, #19
 8008bbc:	2264      	movs	r2, #100	@ 0x64
 8008bbe:	fb02 f303 	mul.w	r3, r2, r3
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d105      	bne.n	8008bd6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	609a      	str	r2, [r3, #8]
      break;
 8008bd4:	e008      	b.n	8008be8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008bdc:	4b09      	ldr	r3, [pc, #36]	@ (8008c04 <SUBGHZSPI_Receive+0xa8>)
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d1ed      	bne.n	8008bc4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008be8:	4b06      	ldr	r3, [pc, #24]	@ (8008c04 <SUBGHZSPI_Receive+0xa8>)
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	701a      	strb	r2, [r3, #0]

  return status;
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	371c      	adds	r7, #28
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bc80      	pop	{r7}
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	20000000 	.word	0x20000000
 8008c04:	58010000 	.word	0x58010000
 8008c08:	5801000c 	.word	0x5801000c

08008c0c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	791b      	ldrb	r3, [r3, #4]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d111      	bne.n	8008c40 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008c50 <SUBGHZ_CheckDeviceReady+0x44>)
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	4613      	mov	r3, r2
 8008c22:	005b      	lsls	r3, r3, #1
 8008c24:	4413      	add	r3, r2
 8008c26:	00db      	lsls	r3, r3, #3
 8008c28:	0c1b      	lsrs	r3, r3, #16
 8008c2a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008c2c:	f7ff fbaa 	bl	8008384 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	3b01      	subs	r3, #1
 8008c34:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1f9      	bne.n	8008c30 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008c3c:	f7ff fb92 	bl	8008364 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f807 	bl	8008c54 <SUBGHZ_WaitOnBusy>
 8008c46:	4603      	mov	r3, r0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	20000000 	.word	0x20000000

08008c54 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008c60:	4b12      	ldr	r3, [pc, #72]	@ (8008cac <SUBGHZ_WaitOnBusy+0x58>)
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	4613      	mov	r3, r2
 8008c66:	005b      	lsls	r3, r3, #1
 8008c68:	4413      	add	r3, r2
 8008c6a:	00db      	lsls	r3, r3, #3
 8008c6c:	0d1b      	lsrs	r3, r3, #20
 8008c6e:	2264      	movs	r2, #100	@ 0x64
 8008c70:	fb02 f303 	mul.w	r3, r2, r3
 8008c74:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8008c76:	f7ff fbb3 	bl	80083e0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8008c7a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d105      	bne.n	8008c8e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2202      	movs	r2, #2
 8008c8a:	609a      	str	r2, [r3, #8]
      break;
 8008c8c:	e009      	b.n	8008ca2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	3b01      	subs	r3, #1
 8008c92:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008c94:	f7ff fb92 	bl	80083bc <LL_PWR_IsActiveFlag_RFBUSYS>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d0e9      	beq.n	8008c76 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8008ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	20000000 	.word	0x20000000

08008cb0 <LL_RCC_GetUSARTClockSource>:
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	401a      	ands	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	041b      	lsls	r3, r3, #16
 8008cc8:	4313      	orrs	r3, r2
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bc80      	pop	{r7}
 8008cd2:	4770      	bx	lr

08008cd4 <LL_RCC_GetLPUARTClockSource>:
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ce0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4013      	ands	r3, r2
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bc80      	pop	{r7}
 8008cf0:	4770      	bx	lr

08008cf2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e042      	b.n	8008d8a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d106      	bne.n	8008d1c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7f9 feb0 	bl	8002a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2224      	movs	r2, #36	@ 0x24
 8008d20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f022 0201 	bic.w	r2, r2, #1
 8008d32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fc3b 	bl	80095b0 <UART_SetConfig>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d101      	bne.n	8008d44 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e022      	b.n	8008d8a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fea3 	bl	8009a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689a      	ldr	r2, [r3, #8]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f042 0201 	orr.w	r2, r2, #1
 8008d80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 ff29 	bl	8009bda <UART_CheckIdleState>
 8008d88:	4603      	mov	r3, r0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b08a      	sub	sp, #40	@ 0x28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008da8:	2b20      	cmp	r3, #32
 8008daa:	d137      	bne.n	8008e1c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <HAL_UART_Receive_IT+0x24>
 8008db2:	88fb      	ldrh	r3, [r7, #6]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e030      	b.n	8008e1e <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a18      	ldr	r2, [pc, #96]	@ (8008e28 <HAL_UART_Receive_IT+0x94>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d01f      	beq.n	8008e0c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d018      	beq.n	8008e0c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	e853 3f00 	ldrex	r3, [r3]
 8008de6:	613b      	str	r3, [r7, #16]
   return(result);
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	461a      	mov	r2, r3
 8008df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df8:	623b      	str	r3, [r7, #32]
 8008dfa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfc:	69f9      	ldr	r1, [r7, #28]
 8008dfe:	6a3a      	ldr	r2, [r7, #32]
 8008e00:	e841 2300 	strex	r3, r2, [r1]
 8008e04:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1e6      	bne.n	8008dda <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e0c:	88fb      	ldrh	r3, [r7, #6]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 fff8 	bl	8009e08 <UART_Start_Receive_IT>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	e000      	b.n	8008e1e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e1c:	2302      	movs	r3, #2
  }
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3728      	adds	r7, #40	@ 0x28
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	40008000 	.word	0x40008000

08008e2c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b08a      	sub	sp, #40	@ 0x28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	4613      	mov	r3, r2
 8008e38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e40:	2b20      	cmp	r3, #32
 8008e42:	d167      	bne.n	8008f14 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d002      	beq.n	8008e50 <HAL_UART_Transmit_DMA+0x24>
 8008e4a:	88fb      	ldrh	r3, [r7, #6]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e060      	b.n	8008f16 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	88fa      	ldrh	r2, [r7, #6]
 8008e5e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	88fa      	ldrh	r2, [r7, #6]
 8008e66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2221      	movs	r2, #33	@ 0x21
 8008e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d028      	beq.n	8008ed4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e86:	4a26      	ldr	r2, [pc, #152]	@ (8008f20 <HAL_UART_Transmit_DMA+0xf4>)
 8008e88:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e8e:	4a25      	ldr	r2, [pc, #148]	@ (8008f24 <HAL_UART_Transmit_DMA+0xf8>)
 8008e90:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e96:	4a24      	ldr	r2, [pc, #144]	@ (8008f28 <HAL_UART_Transmit_DMA+0xfc>)
 8008e98:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eaa:	4619      	mov	r1, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3328      	adds	r3, #40	@ 0x28
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	88fb      	ldrh	r3, [r7, #6]
 8008eb6:	f7fb fb8f 	bl	80045d8 <HAL_DMA_Start_IT>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d009      	beq.n	8008ed4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2210      	movs	r2, #16
 8008ec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e020      	b.n	8008f16 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2240      	movs	r2, #64	@ 0x40
 8008eda:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	613b      	str	r3, [r7, #16]
   return(result);
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3308      	adds	r3, #8
 8008efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008efc:	623a      	str	r2, [r7, #32]
 8008efe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	69f9      	ldr	r1, [r7, #28]
 8008f02:	6a3a      	ldr	r2, [r7, #32]
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e5      	bne.n	8008edc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	e000      	b.n	8008f16 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008f14:	2302      	movs	r3, #2
  }
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3728      	adds	r7, #40	@ 0x28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	0800a193 	.word	0x0800a193
 8008f24:	0800a22d 	.word	0x0800a22d
 8008f28:	0800a249 	.word	0x0800a249

08008f2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b0ba      	sub	sp, #232	@ 0xe8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008f56:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008f60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d11b      	bne.n	8008fa0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f6c:	f003 0320 	and.w	r3, r3, #32
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d015      	beq.n	8008fa0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f78:	f003 0320 	and.w	r3, r3, #32
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d105      	bne.n	8008f8c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d009      	beq.n	8008fa0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 82e3 	beq.w	800955c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	4798      	blx	r3
      }
      return;
 8008f9e:	e2dd      	b.n	800955c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 8123 	beq.w	80091f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008faa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008fae:	4b8d      	ldr	r3, [pc, #564]	@ (80091e4 <HAL_UART_IRQHandler+0x2b8>)
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d106      	bne.n	8008fc4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008fb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008fba:	4b8b      	ldr	r3, [pc, #556]	@ (80091e8 <HAL_UART_IRQHandler+0x2bc>)
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 8116 	beq.w	80091f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d011      	beq.n	8008ff4 <HAL_UART_IRQHandler+0xc8>
 8008fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00b      	beq.n	8008ff4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fea:	f043 0201 	orr.w	r2, r3, #1
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d011      	beq.n	8009024 <HAL_UART_IRQHandler+0xf8>
 8009000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00b      	beq.n	8009024 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2202      	movs	r2, #2
 8009012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800901a:	f043 0204 	orr.w	r2, r3, #4
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009028:	f003 0304 	and.w	r3, r3, #4
 800902c:	2b00      	cmp	r3, #0
 800902e:	d011      	beq.n	8009054 <HAL_UART_IRQHandler+0x128>
 8009030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00b      	beq.n	8009054 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2204      	movs	r2, #4
 8009042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800904a:	f043 0202 	orr.w	r2, r3, #2
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009058:	f003 0308 	and.w	r3, r3, #8
 800905c:	2b00      	cmp	r3, #0
 800905e:	d017      	beq.n	8009090 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009064:	f003 0320 	and.w	r3, r3, #32
 8009068:	2b00      	cmp	r3, #0
 800906a:	d105      	bne.n	8009078 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800906c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009070:	4b5c      	ldr	r3, [pc, #368]	@ (80091e4 <HAL_UART_IRQHandler+0x2b8>)
 8009072:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00b      	beq.n	8009090 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2208      	movs	r2, #8
 800907e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009086:	f043 0208 	orr.w	r2, r3, #8
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009098:	2b00      	cmp	r3, #0
 800909a:	d012      	beq.n	80090c2 <HAL_UART_IRQHandler+0x196>
 800909c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00c      	beq.n	80090c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80090b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090b8:	f043 0220 	orr.w	r2, r3, #32
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 8249 	beq.w	8009560 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090d2:	f003 0320 	and.w	r3, r3, #32
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d013      	beq.n	8009102 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80090da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090de:	f003 0320 	and.w	r3, r3, #32
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d105      	bne.n	80090f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d007      	beq.n	8009102 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009108:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009116:	2b40      	cmp	r3, #64	@ 0x40
 8009118:	d005      	beq.n	8009126 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800911a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800911e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009122:	2b00      	cmp	r3, #0
 8009124:	d054      	beq.n	80091d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 ffce 	bl	800a0c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009136:	2b40      	cmp	r3, #64	@ 0x40
 8009138:	d146      	bne.n	80091c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3308      	adds	r3, #8
 8009140:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009144:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009148:	e853 3f00 	ldrex	r3, [r3]
 800914c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009150:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009158:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3308      	adds	r3, #8
 8009162:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009166:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800916a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009172:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009176:	e841 2300 	strex	r3, r2, [r1]
 800917a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800917e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1d9      	bne.n	800913a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800918c:	2b00      	cmp	r3, #0
 800918e:	d017      	beq.n	80091c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009196:	4a15      	ldr	r2, [pc, #84]	@ (80091ec <HAL_UART_IRQHandler+0x2c0>)
 8009198:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fb faf5 	bl	8004790 <HAL_DMA_Abort_IT>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d019      	beq.n	80091e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80091ba:	4610      	mov	r0, r2
 80091bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091be:	e00f      	b.n	80091e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f9e0 	bl	8009586 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091c6:	e00b      	b.n	80091e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f9dc 	bl	8009586 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ce:	e007      	b.n	80091e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f9d8 	bl	8009586 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80091de:	e1bf      	b.n	8009560 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091e0:	bf00      	nop
    return;
 80091e2:	e1bd      	b.n	8009560 <HAL_UART_IRQHandler+0x634>
 80091e4:	10000001 	.word	0x10000001
 80091e8:	04000120 	.word	0x04000120
 80091ec:	0800a2c9 	.word	0x0800a2c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	f040 8153 	bne.w	80094a0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80091fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091fe:	f003 0310 	and.w	r3, r3, #16
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 814c 	beq.w	80094a0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800920c:	f003 0310 	and.w	r3, r3, #16
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 8145 	beq.w	80094a0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2210      	movs	r2, #16
 800921c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009228:	2b40      	cmp	r3, #64	@ 0x40
 800922a:	f040 80bb 	bne.w	80093a4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800923c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009240:	2b00      	cmp	r3, #0
 8009242:	f000 818f 	beq.w	8009564 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800924c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009250:	429a      	cmp	r2, r3
 8009252:	f080 8187 	bcs.w	8009564 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800925c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0320 	and.w	r3, r3, #32
 800926e:	2b00      	cmp	r3, #0
 8009270:	f040 8087 	bne.w	8009382 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009280:	e853 3f00 	ldrex	r3, [r3]
 8009284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009288:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800928c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009290:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	461a      	mov	r2, r3
 800929a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800929e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80092a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80092aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80092ae:	e841 2300 	strex	r3, r2, [r1]
 80092b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80092b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1da      	bne.n	8009274 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3308      	adds	r3, #8
 80092c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092c8:	e853 3f00 	ldrex	r3, [r3]
 80092cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80092ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80092d0:	f023 0301 	bic.w	r3, r3, #1
 80092d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3308      	adds	r3, #8
 80092de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80092e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80092e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80092ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80092f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e1      	bne.n	80092be <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3308      	adds	r3, #8
 8009300:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009302:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009304:	e853 3f00 	ldrex	r3, [r3]
 8009308:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800930a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800930c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3308      	adds	r3, #8
 800931a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800931e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009320:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009322:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009324:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009326:	e841 2300 	strex	r3, r2, [r1]
 800932a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800932c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1e3      	bne.n	80092fa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2220      	movs	r2, #32
 8009336:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009348:	e853 3f00 	ldrex	r3, [r3]
 800934c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800934e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009350:	f023 0310 	bic.w	r3, r3, #16
 8009354:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009362:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009364:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009366:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009368:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800936a:	e841 2300 	strex	r3, r2, [r1]
 800936e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1e4      	bne.n	8009340 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800937c:	4618      	mov	r0, r3
 800937e:	f7fb f9a9 	bl	80046d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2202      	movs	r2, #2
 8009386:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009394:	b29b      	uxth	r3, r3
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	b29b      	uxth	r3, r3
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f8fb 	bl	8009598 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093a2:	e0df      	b.n	8009564 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093be:	b29b      	uxth	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 80d1 	beq.w	8009568 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80093c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f000 80cc 	beq.w	8009568 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d8:	e853 3f00 	ldrex	r3, [r3]
 80093dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	461a      	mov	r2, r3
 80093ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80093f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80093f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e4      	bne.n	80093d0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3308      	adds	r3, #8
 800940c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	623b      	str	r3, [r7, #32]
   return(result);
 8009416:	6a3b      	ldr	r3, [r7, #32]
 8009418:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800941c:	f023 0301 	bic.w	r3, r3, #1
 8009420:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3308      	adds	r3, #8
 800942a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800942e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009430:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009432:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009436:	e841 2300 	strex	r3, r2, [r1]
 800943a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800943c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e1      	bne.n	8009406 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2220      	movs	r2, #32
 8009446:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	e853 3f00 	ldrex	r3, [r3]
 8009462:	60fb      	str	r3, [r7, #12]
   return(result);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f023 0310 	bic.w	r3, r3, #16
 800946a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009478:	61fb      	str	r3, [r7, #28]
 800947a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	69b9      	ldr	r1, [r7, #24]
 800947e:	69fa      	ldr	r2, [r7, #28]
 8009480:	e841 2300 	strex	r3, r2, [r1]
 8009484:	617b      	str	r3, [r7, #20]
   return(result);
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e4      	bne.n	8009456 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009492:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009496:	4619      	mov	r1, r3
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f87d 	bl	8009598 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800949e:	e063      	b.n	8009568 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80094a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00e      	beq.n	80094ca <HAL_UART_IRQHandler+0x59e>
 80094ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d008      	beq.n	80094ca <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80094c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f001 fc5e 	bl	800ad84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094c8:	e051      	b.n	800956e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80094ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d014      	beq.n	8009500 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80094d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d105      	bne.n	80094ee <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80094e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d008      	beq.n	8009500 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d03a      	beq.n	800956c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	4798      	blx	r3
    }
    return;
 80094fe:	e035      	b.n	800956c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009508:	2b00      	cmp	r3, #0
 800950a:	d009      	beq.n	8009520 <HAL_UART_IRQHandler+0x5f4>
 800950c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 feeb 	bl	800a2f4 <UART_EndTransmit_IT>
    return;
 800951e:	e026      	b.n	800956e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009524:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009528:	2b00      	cmp	r3, #0
 800952a:	d009      	beq.n	8009540 <HAL_UART_IRQHandler+0x614>
 800952c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009530:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d003      	beq.n	8009540 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f001 fc35 	bl	800ada8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800953e:	e016      	b.n	800956e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009544:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d010      	beq.n	800956e <HAL_UART_IRQHandler+0x642>
 800954c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009550:	2b00      	cmp	r3, #0
 8009552:	da0c      	bge.n	800956e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f001 fc1e 	bl	800ad96 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800955a:	e008      	b.n	800956e <HAL_UART_IRQHandler+0x642>
      return;
 800955c:	bf00      	nop
 800955e:	e006      	b.n	800956e <HAL_UART_IRQHandler+0x642>
    return;
 8009560:	bf00      	nop
 8009562:	e004      	b.n	800956e <HAL_UART_IRQHandler+0x642>
      return;
 8009564:	bf00      	nop
 8009566:	e002      	b.n	800956e <HAL_UART_IRQHandler+0x642>
      return;
 8009568:	bf00      	nop
 800956a:	e000      	b.n	800956e <HAL_UART_IRQHandler+0x642>
    return;
 800956c:	bf00      	nop
  }
}
 800956e:	37e8      	adds	r7, #232	@ 0xe8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	bc80      	pop	{r7}
 8009584:	4770      	bx	lr

08009586 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009586:	b480      	push	{r7}
 8009588:	b083      	sub	sp, #12
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800958e:	bf00      	nop
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	bc80      	pop	{r7}
 8009596:	4770      	bx	lr

08009598 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bc80      	pop	{r7}
 80095ac:	4770      	bx	lr
	...

080095b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095b4:	b08c      	sub	sp, #48	@ 0x30
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	689a      	ldr	r2, [r3, #8]
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	431a      	orrs	r2, r3
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	431a      	orrs	r2, r3
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	69db      	ldr	r3, [r3, #28]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	4b94      	ldr	r3, [pc, #592]	@ (8009830 <UART_SetConfig+0x280>)
 80095e0:	4013      	ands	r3, r2
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	6812      	ldr	r2, [r2, #0]
 80095e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095e8:	430b      	orrs	r3, r1
 80095ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	68da      	ldr	r2, [r3, #12]
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	430a      	orrs	r2, r1
 8009600:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a89      	ldr	r2, [pc, #548]	@ (8009834 <UART_SetConfig+0x284>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d004      	beq.n	800961c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009618:	4313      	orrs	r3, r2
 800961a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009626:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	6812      	ldr	r2, [r2, #0]
 800962e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009630:	430b      	orrs	r3, r1
 8009632:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963a:	f023 010f 	bic.w	r1, r3, #15
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	430a      	orrs	r2, r1
 8009648:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a7a      	ldr	r2, [pc, #488]	@ (8009838 <UART_SetConfig+0x288>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d127      	bne.n	80096a4 <UART_SetConfig+0xf4>
 8009654:	2003      	movs	r0, #3
 8009656:	f7ff fb2b 	bl	8008cb0 <LL_RCC_GetUSARTClockSource>
 800965a:	4603      	mov	r3, r0
 800965c:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8009660:	2b03      	cmp	r3, #3
 8009662:	d81b      	bhi.n	800969c <UART_SetConfig+0xec>
 8009664:	a201      	add	r2, pc, #4	@ (adr r2, 800966c <UART_SetConfig+0xbc>)
 8009666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966a:	bf00      	nop
 800966c:	0800967d 	.word	0x0800967d
 8009670:	0800968d 	.word	0x0800968d
 8009674:	08009685 	.word	0x08009685
 8009678:	08009695 	.word	0x08009695
 800967c:	2301      	movs	r3, #1
 800967e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009682:	e080      	b.n	8009786 <UART_SetConfig+0x1d6>
 8009684:	2302      	movs	r3, #2
 8009686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800968a:	e07c      	b.n	8009786 <UART_SetConfig+0x1d6>
 800968c:	2304      	movs	r3, #4
 800968e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009692:	e078      	b.n	8009786 <UART_SetConfig+0x1d6>
 8009694:	2308      	movs	r3, #8
 8009696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800969a:	e074      	b.n	8009786 <UART_SetConfig+0x1d6>
 800969c:	2310      	movs	r3, #16
 800969e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096a2:	e070      	b.n	8009786 <UART_SetConfig+0x1d6>
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a64      	ldr	r2, [pc, #400]	@ (800983c <UART_SetConfig+0x28c>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d138      	bne.n	8009720 <UART_SetConfig+0x170>
 80096ae:	200c      	movs	r0, #12
 80096b0:	f7ff fafe 	bl	8008cb0 <LL_RCC_GetUSARTClockSource>
 80096b4:	4603      	mov	r3, r0
 80096b6:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80096ba:	2b0c      	cmp	r3, #12
 80096bc:	d82c      	bhi.n	8009718 <UART_SetConfig+0x168>
 80096be:	a201      	add	r2, pc, #4	@ (adr r2, 80096c4 <UART_SetConfig+0x114>)
 80096c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c4:	080096f9 	.word	0x080096f9
 80096c8:	08009719 	.word	0x08009719
 80096cc:	08009719 	.word	0x08009719
 80096d0:	08009719 	.word	0x08009719
 80096d4:	08009709 	.word	0x08009709
 80096d8:	08009719 	.word	0x08009719
 80096dc:	08009719 	.word	0x08009719
 80096e0:	08009719 	.word	0x08009719
 80096e4:	08009701 	.word	0x08009701
 80096e8:	08009719 	.word	0x08009719
 80096ec:	08009719 	.word	0x08009719
 80096f0:	08009719 	.word	0x08009719
 80096f4:	08009711 	.word	0x08009711
 80096f8:	2300      	movs	r3, #0
 80096fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096fe:	e042      	b.n	8009786 <UART_SetConfig+0x1d6>
 8009700:	2302      	movs	r3, #2
 8009702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009706:	e03e      	b.n	8009786 <UART_SetConfig+0x1d6>
 8009708:	2304      	movs	r3, #4
 800970a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800970e:	e03a      	b.n	8009786 <UART_SetConfig+0x1d6>
 8009710:	2308      	movs	r3, #8
 8009712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009716:	e036      	b.n	8009786 <UART_SetConfig+0x1d6>
 8009718:	2310      	movs	r3, #16
 800971a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800971e:	e032      	b.n	8009786 <UART_SetConfig+0x1d6>
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a43      	ldr	r2, [pc, #268]	@ (8009834 <UART_SetConfig+0x284>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d12a      	bne.n	8009780 <UART_SetConfig+0x1d0>
 800972a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800972e:	f7ff fad1 	bl	8008cd4 <LL_RCC_GetLPUARTClockSource>
 8009732:	4603      	mov	r3, r0
 8009734:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009738:	d01a      	beq.n	8009770 <UART_SetConfig+0x1c0>
 800973a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800973e:	d81b      	bhi.n	8009778 <UART_SetConfig+0x1c8>
 8009740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009744:	d00c      	beq.n	8009760 <UART_SetConfig+0x1b0>
 8009746:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800974a:	d815      	bhi.n	8009778 <UART_SetConfig+0x1c8>
 800974c:	2b00      	cmp	r3, #0
 800974e:	d003      	beq.n	8009758 <UART_SetConfig+0x1a8>
 8009750:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009754:	d008      	beq.n	8009768 <UART_SetConfig+0x1b8>
 8009756:	e00f      	b.n	8009778 <UART_SetConfig+0x1c8>
 8009758:	2300      	movs	r3, #0
 800975a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800975e:	e012      	b.n	8009786 <UART_SetConfig+0x1d6>
 8009760:	2302      	movs	r3, #2
 8009762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009766:	e00e      	b.n	8009786 <UART_SetConfig+0x1d6>
 8009768:	2304      	movs	r3, #4
 800976a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800976e:	e00a      	b.n	8009786 <UART_SetConfig+0x1d6>
 8009770:	2308      	movs	r3, #8
 8009772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009776:	e006      	b.n	8009786 <UART_SetConfig+0x1d6>
 8009778:	2310      	movs	r3, #16
 800977a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800977e:	e002      	b.n	8009786 <UART_SetConfig+0x1d6>
 8009780:	2310      	movs	r3, #16
 8009782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a2a      	ldr	r2, [pc, #168]	@ (8009834 <UART_SetConfig+0x284>)
 800978c:	4293      	cmp	r3, r2
 800978e:	f040 80a4 	bne.w	80098da <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009792:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009796:	2b08      	cmp	r3, #8
 8009798:	d823      	bhi.n	80097e2 <UART_SetConfig+0x232>
 800979a:	a201      	add	r2, pc, #4	@ (adr r2, 80097a0 <UART_SetConfig+0x1f0>)
 800979c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a0:	080097c5 	.word	0x080097c5
 80097a4:	080097e3 	.word	0x080097e3
 80097a8:	080097cd 	.word	0x080097cd
 80097ac:	080097e3 	.word	0x080097e3
 80097b0:	080097d3 	.word	0x080097d3
 80097b4:	080097e3 	.word	0x080097e3
 80097b8:	080097e3 	.word	0x080097e3
 80097bc:	080097e3 	.word	0x080097e3
 80097c0:	080097db 	.word	0x080097db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097c4:	f7fd ff4a 	bl	800765c <HAL_RCC_GetPCLK1Freq>
 80097c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80097ca:	e010      	b.n	80097ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009840 <UART_SetConfig+0x290>)
 80097ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80097d0:	e00d      	b.n	80097ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097d2:	f7fd fe8f 	bl	80074f4 <HAL_RCC_GetSysClockFreq>
 80097d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80097d8:	e009      	b.n	80097ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80097e0:	e005      	b.n	80097ee <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80097e2:	2300      	movs	r3, #0
 80097e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80097ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80097ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f000 8137 	beq.w	8009a64 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097fa:	4a12      	ldr	r2, [pc, #72]	@ (8009844 <UART_SetConfig+0x294>)
 80097fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009800:	461a      	mov	r2, r3
 8009802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009804:	fbb3 f3f2 	udiv	r3, r3, r2
 8009808:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	685a      	ldr	r2, [r3, #4]
 800980e:	4613      	mov	r3, r2
 8009810:	005b      	lsls	r3, r3, #1
 8009812:	4413      	add	r3, r2
 8009814:	69ba      	ldr	r2, [r7, #24]
 8009816:	429a      	cmp	r2, r3
 8009818:	d305      	bcc.n	8009826 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009820:	69ba      	ldr	r2, [r7, #24]
 8009822:	429a      	cmp	r2, r3
 8009824:	d910      	bls.n	8009848 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800982c:	e11a      	b.n	8009a64 <UART_SetConfig+0x4b4>
 800982e:	bf00      	nop
 8009830:	cfff69f3 	.word	0xcfff69f3
 8009834:	40008000 	.word	0x40008000
 8009838:	40013800 	.word	0x40013800
 800983c:	40004400 	.word	0x40004400
 8009840:	00f42400 	.word	0x00f42400
 8009844:	0801db00 	.word	0x0801db00
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984a:	2200      	movs	r2, #0
 800984c:	60bb      	str	r3, [r7, #8]
 800984e:	60fa      	str	r2, [r7, #12]
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009854:	4a8e      	ldr	r2, [pc, #568]	@ (8009a90 <UART_SetConfig+0x4e0>)
 8009856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800985a:	b29b      	uxth	r3, r3
 800985c:	2200      	movs	r2, #0
 800985e:	603b      	str	r3, [r7, #0]
 8009860:	607a      	str	r2, [r7, #4]
 8009862:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009866:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800986a:	f7f7 f901 	bl	8000a70 <__aeabi_uldivmod>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4610      	mov	r0, r2
 8009874:	4619      	mov	r1, r3
 8009876:	f04f 0200 	mov.w	r2, #0
 800987a:	f04f 0300 	mov.w	r3, #0
 800987e:	020b      	lsls	r3, r1, #8
 8009880:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009884:	0202      	lsls	r2, r0, #8
 8009886:	6979      	ldr	r1, [r7, #20]
 8009888:	6849      	ldr	r1, [r1, #4]
 800988a:	0849      	lsrs	r1, r1, #1
 800988c:	2000      	movs	r0, #0
 800988e:	460c      	mov	r4, r1
 8009890:	4605      	mov	r5, r0
 8009892:	eb12 0804 	adds.w	r8, r2, r4
 8009896:	eb43 0905 	adc.w	r9, r3, r5
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	469a      	mov	sl, r3
 80098a2:	4693      	mov	fp, r2
 80098a4:	4652      	mov	r2, sl
 80098a6:	465b      	mov	r3, fp
 80098a8:	4640      	mov	r0, r8
 80098aa:	4649      	mov	r1, r9
 80098ac:	f7f7 f8e0 	bl	8000a70 <__aeabi_uldivmod>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	4613      	mov	r3, r2
 80098b6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098be:	d308      	bcc.n	80098d2 <UART_SetConfig+0x322>
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098c6:	d204      	bcs.n	80098d2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6a3a      	ldr	r2, [r7, #32]
 80098ce:	60da      	str	r2, [r3, #12]
 80098d0:	e0c8      	b.n	8009a64 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80098d8:	e0c4      	b.n	8009a64 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	69db      	ldr	r3, [r3, #28]
 80098de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098e2:	d167      	bne.n	80099b4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80098e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80098e8:	2b08      	cmp	r3, #8
 80098ea:	d828      	bhi.n	800993e <UART_SetConfig+0x38e>
 80098ec:	a201      	add	r2, pc, #4	@ (adr r2, 80098f4 <UART_SetConfig+0x344>)
 80098ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f2:	bf00      	nop
 80098f4:	08009919 	.word	0x08009919
 80098f8:	08009921 	.word	0x08009921
 80098fc:	08009929 	.word	0x08009929
 8009900:	0800993f 	.word	0x0800993f
 8009904:	0800992f 	.word	0x0800992f
 8009908:	0800993f 	.word	0x0800993f
 800990c:	0800993f 	.word	0x0800993f
 8009910:	0800993f 	.word	0x0800993f
 8009914:	08009937 	.word	0x08009937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009918:	f7fd fea0 	bl	800765c <HAL_RCC_GetPCLK1Freq>
 800991c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800991e:	e014      	b.n	800994a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009920:	f7fd feae 	bl	8007680 <HAL_RCC_GetPCLK2Freq>
 8009924:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009926:	e010      	b.n	800994a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009928:	4b5a      	ldr	r3, [pc, #360]	@ (8009a94 <UART_SetConfig+0x4e4>)
 800992a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800992c:	e00d      	b.n	800994a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800992e:	f7fd fde1 	bl	80074f4 <HAL_RCC_GetSysClockFreq>
 8009932:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009934:	e009      	b.n	800994a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800993a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800993c:	e005      	b.n	800994a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800993e:	2300      	movs	r3, #0
 8009940:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009948:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800994a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994c:	2b00      	cmp	r3, #0
 800994e:	f000 8089 	beq.w	8009a64 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009956:	4a4e      	ldr	r2, [pc, #312]	@ (8009a90 <UART_SetConfig+0x4e0>)
 8009958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800995c:	461a      	mov	r2, r3
 800995e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009960:	fbb3 f3f2 	udiv	r3, r3, r2
 8009964:	005a      	lsls	r2, r3, #1
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	085b      	lsrs	r3, r3, #1
 800996c:	441a      	add	r2, r3
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	fbb2 f3f3 	udiv	r3, r2, r3
 8009976:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	2b0f      	cmp	r3, #15
 800997c:	d916      	bls.n	80099ac <UART_SetConfig+0x3fc>
 800997e:	6a3b      	ldr	r3, [r7, #32]
 8009980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009984:	d212      	bcs.n	80099ac <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009986:	6a3b      	ldr	r3, [r7, #32]
 8009988:	b29b      	uxth	r3, r3
 800998a:	f023 030f 	bic.w	r3, r3, #15
 800998e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009990:	6a3b      	ldr	r3, [r7, #32]
 8009992:	085b      	lsrs	r3, r3, #1
 8009994:	b29b      	uxth	r3, r3
 8009996:	f003 0307 	and.w	r3, r3, #7
 800999a:	b29a      	uxth	r2, r3
 800999c:	8bfb      	ldrh	r3, [r7, #30]
 800999e:	4313      	orrs	r3, r2
 80099a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	8bfa      	ldrh	r2, [r7, #30]
 80099a8:	60da      	str	r2, [r3, #12]
 80099aa:	e05b      	b.n	8009a64 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80099b2:	e057      	b.n	8009a64 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80099b8:	2b08      	cmp	r3, #8
 80099ba:	d828      	bhi.n	8009a0e <UART_SetConfig+0x45e>
 80099bc:	a201      	add	r2, pc, #4	@ (adr r2, 80099c4 <UART_SetConfig+0x414>)
 80099be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c2:	bf00      	nop
 80099c4:	080099e9 	.word	0x080099e9
 80099c8:	080099f1 	.word	0x080099f1
 80099cc:	080099f9 	.word	0x080099f9
 80099d0:	08009a0f 	.word	0x08009a0f
 80099d4:	080099ff 	.word	0x080099ff
 80099d8:	08009a0f 	.word	0x08009a0f
 80099dc:	08009a0f 	.word	0x08009a0f
 80099e0:	08009a0f 	.word	0x08009a0f
 80099e4:	08009a07 	.word	0x08009a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099e8:	f7fd fe38 	bl	800765c <HAL_RCC_GetPCLK1Freq>
 80099ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099ee:	e014      	b.n	8009a1a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099f0:	f7fd fe46 	bl	8007680 <HAL_RCC_GetPCLK2Freq>
 80099f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099f6:	e010      	b.n	8009a1a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099f8:	4b26      	ldr	r3, [pc, #152]	@ (8009a94 <UART_SetConfig+0x4e4>)
 80099fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099fc:	e00d      	b.n	8009a1a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099fe:	f7fd fd79 	bl	80074f4 <HAL_RCC_GetSysClockFreq>
 8009a02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a04:	e009      	b.n	8009a1a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a0c:	e005      	b.n	8009a1a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009a18:	bf00      	nop
    }

    if (pclk != 0U)
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d021      	beq.n	8009a64 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a24:	4a1a      	ldr	r2, [pc, #104]	@ (8009a90 <UART_SetConfig+0x4e0>)
 8009a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	085b      	lsrs	r3, r3, #1
 8009a38:	441a      	add	r2, r3
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a44:	6a3b      	ldr	r3, [r7, #32]
 8009a46:	2b0f      	cmp	r3, #15
 8009a48:	d909      	bls.n	8009a5e <UART_SetConfig+0x4ae>
 8009a4a:	6a3b      	ldr	r3, [r7, #32]
 8009a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a50:	d205      	bcs.n	8009a5e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60da      	str	r2, [r3, #12]
 8009a5c:	e002      	b.n	8009a64 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	2200      	movs	r2, #0
 8009a78:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009a80:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3730      	adds	r7, #48	@ 0x30
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a8e:	bf00      	nop
 8009a90:	0801db00 	.word	0x0801db00
 8009a94:	00f42400 	.word	0x00f42400

08009a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa4:	f003 0301 	and.w	r3, r3, #1
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00a      	beq.n	8009ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	430a      	orrs	r2, r1
 8009ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac6:	f003 0302 	and.w	r3, r3, #2
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00a      	beq.n	8009ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	430a      	orrs	r2, r1
 8009ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae8:	f003 0304 	and.w	r3, r3, #4
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00a      	beq.n	8009b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	430a      	orrs	r2, r1
 8009b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0a:	f003 0308 	and.w	r3, r3, #8
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00a      	beq.n	8009b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	430a      	orrs	r2, r1
 8009b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b2c:	f003 0310 	and.w	r3, r3, #16
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00a      	beq.n	8009b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	430a      	orrs	r2, r1
 8009b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b4e:	f003 0320 	and.w	r3, r3, #32
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00a      	beq.n	8009b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	430a      	orrs	r2, r1
 8009b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d01a      	beq.n	8009bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b96:	d10a      	bne.n	8009bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	430a      	orrs	r2, r1
 8009bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00a      	beq.n	8009bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	430a      	orrs	r2, r1
 8009bce:	605a      	str	r2, [r3, #4]
  }
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bc80      	pop	{r7}
 8009bd8:	4770      	bx	lr

08009bda <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b086      	sub	sp, #24
 8009bde:	af02      	add	r7, sp, #8
 8009be0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009bea:	f7f8 fc0f 	bl	800240c <HAL_GetTick>
 8009bee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 0308 	and.w	r3, r3, #8
 8009bfa:	2b08      	cmp	r3, #8
 8009bfc:	d10e      	bne.n	8009c1c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bfe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f832 	bl	8009c76 <UART_WaitOnFlagUntilTimeout>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d001      	beq.n	8009c1c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e028      	b.n	8009c6e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0304 	and.w	r3, r3, #4
 8009c26:	2b04      	cmp	r3, #4
 8009c28:	d10e      	bne.n	8009c48 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c2a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 f81c 	bl	8009c76 <UART_WaitOnFlagUntilTimeout>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c44:	2303      	movs	r3, #3
 8009c46:	e012      	b.n	8009c6e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2220      	movs	r2, #32
 8009c4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2220      	movs	r2, #32
 8009c54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b09c      	sub	sp, #112	@ 0x70
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	60f8      	str	r0, [r7, #12]
 8009c7e:	60b9      	str	r1, [r7, #8]
 8009c80:	603b      	str	r3, [r7, #0]
 8009c82:	4613      	mov	r3, r2
 8009c84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c86:	e0a9      	b.n	8009ddc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c8e:	f000 80a5 	beq.w	8009ddc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c92:	f7f8 fbbb 	bl	800240c <HAL_GetTick>
 8009c96:	4602      	mov	r2, r0
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d302      	bcc.n	8009ca8 <UART_WaitOnFlagUntilTimeout+0x32>
 8009ca2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d140      	bne.n	8009d2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cb0:	e853 3f00 	ldrex	r3, [r3]
 8009cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cb8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009cbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cc8:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009ccc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009cce:	e841 2300 	strex	r3, r2, [r1]
 8009cd2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1e6      	bne.n	8009ca8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3308      	adds	r3, #8
 8009ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce4:	e853 3f00 	ldrex	r3, [r3]
 8009ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cec:	f023 0301 	bic.w	r3, r3, #1
 8009cf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	3308      	adds	r3, #8
 8009cf8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009cfa:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009cfc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009d00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d02:	e841 2300 	strex	r3, r2, [r1]
 8009d06:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1e5      	bne.n	8009cda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2220      	movs	r2, #32
 8009d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2220      	movs	r2, #32
 8009d1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e069      	b.n	8009dfe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 0304 	and.w	r3, r3, #4
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d051      	beq.n	8009ddc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d46:	d149      	bne.n	8009ddc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5a:	e853 3f00 	ldrex	r3, [r3]
 8009d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d62:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009d66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d72:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d78:	e841 2300 	strex	r3, r2, [r1]
 8009d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1e6      	bne.n	8009d52 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3308      	adds	r3, #8
 8009d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	e853 3f00 	ldrex	r3, [r3]
 8009d92:	613b      	str	r3, [r7, #16]
   return(result);
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	f023 0301 	bic.w	r3, r3, #1
 8009d9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	3308      	adds	r3, #8
 8009da2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009da4:	623a      	str	r2, [r7, #32]
 8009da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da8:	69f9      	ldr	r1, [r7, #28]
 8009daa:	6a3a      	ldr	r2, [r7, #32]
 8009dac:	e841 2300 	strex	r3, r2, [r1]
 8009db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1e5      	bne.n	8009d84 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2220      	movs	r2, #32
 8009dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2220      	movs	r2, #32
 8009dc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2220      	movs	r2, #32
 8009dcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e010      	b.n	8009dfe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	69da      	ldr	r2, [r3, #28]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	4013      	ands	r3, r2
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	bf0c      	ite	eq
 8009dec:	2301      	moveq	r3, #1
 8009dee:	2300      	movne	r3, #0
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	461a      	mov	r2, r3
 8009df4:	79fb      	ldrb	r3, [r7, #7]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	f43f af46 	beq.w	8009c88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3770      	adds	r7, #112	@ 0x70
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
	...

08009e08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b0a3      	sub	sp, #140	@ 0x8c
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	4613      	mov	r3, r2
 8009e14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	88fa      	ldrh	r2, [r7, #6]
 8009e20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	88fa      	ldrh	r2, [r7, #6]
 8009e28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e3a:	d10e      	bne.n	8009e5a <UART_Start_Receive_IT+0x52>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d105      	bne.n	8009e50 <UART_Start_Receive_IT+0x48>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009e4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e4e:	e02d      	b.n	8009eac <UART_Start_Receive_IT+0xa4>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	22ff      	movs	r2, #255	@ 0xff
 8009e54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e58:	e028      	b.n	8009eac <UART_Start_Receive_IT+0xa4>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10d      	bne.n	8009e7e <UART_Start_Receive_IT+0x76>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d104      	bne.n	8009e74 <UART_Start_Receive_IT+0x6c>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	22ff      	movs	r2, #255	@ 0xff
 8009e6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e72:	e01b      	b.n	8009eac <UART_Start_Receive_IT+0xa4>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	227f      	movs	r2, #127	@ 0x7f
 8009e78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e7c:	e016      	b.n	8009eac <UART_Start_Receive_IT+0xa4>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e86:	d10d      	bne.n	8009ea4 <UART_Start_Receive_IT+0x9c>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d104      	bne.n	8009e9a <UART_Start_Receive_IT+0x92>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	227f      	movs	r2, #127	@ 0x7f
 8009e94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e98:	e008      	b.n	8009eac <UART_Start_Receive_IT+0xa4>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	223f      	movs	r2, #63	@ 0x3f
 8009e9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ea2:	e003      	b.n	8009eac <UART_Start_Receive_IT+0xa4>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2222      	movs	r2, #34	@ 0x22
 8009eb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3308      	adds	r3, #8
 8009ec2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ec6:	e853 3f00 	ldrex	r3, [r3]
 8009eca:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009ecc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ece:	f043 0301 	orr.w	r3, r3, #1
 8009ed2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3308      	adds	r3, #8
 8009edc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009ee0:	673a      	str	r2, [r7, #112]	@ 0x70
 8009ee2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009ee6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009ee8:	e841 2300 	strex	r3, r2, [r1]
 8009eec:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009eee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1e3      	bne.n	8009ebc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009efc:	d14f      	bne.n	8009f9e <UART_Start_Receive_IT+0x196>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009f04:	88fa      	ldrh	r2, [r7, #6]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d349      	bcc.n	8009f9e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f12:	d107      	bne.n	8009f24 <UART_Start_Receive_IT+0x11c>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d103      	bne.n	8009f24 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4a46      	ldr	r2, [pc, #280]	@ (800a038 <UART_Start_Receive_IT+0x230>)
 8009f20:	675a      	str	r2, [r3, #116]	@ 0x74
 8009f22:	e002      	b.n	8009f2a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4a45      	ldr	r2, [pc, #276]	@ (800a03c <UART_Start_Receive_IT+0x234>)
 8009f28:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d01a      	beq.n	8009f68 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f3a:	e853 3f00 	ldrex	r3, [r3]
 8009f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f56:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f58:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009f5a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009f5c:	e841 2300 	strex	r3, r2, [r1]
 8009f60:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1e4      	bne.n	8009f32 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f72:	e853 3f00 	ldrex	r3, [r3]
 8009f76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3308      	adds	r3, #8
 8009f86:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009f88:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009f8a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f90:	e841 2300 	strex	r3, r2, [r1]
 8009f94:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1e5      	bne.n	8009f68 <UART_Start_Receive_IT+0x160>
 8009f9c:	e046      	b.n	800a02c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fa6:	d107      	bne.n	8009fb8 <UART_Start_Receive_IT+0x1b0>
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d103      	bne.n	8009fb8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	4a23      	ldr	r2, [pc, #140]	@ (800a040 <UART_Start_Receive_IT+0x238>)
 8009fb4:	675a      	str	r2, [r3, #116]	@ 0x74
 8009fb6:	e002      	b.n	8009fbe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	4a22      	ldr	r2, [pc, #136]	@ (800a044 <UART_Start_Receive_IT+0x23c>)
 8009fbc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d019      	beq.n	8009ffa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fce:	e853 3f00 	ldrex	r3, [r3]
 8009fd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009fda:	677b      	str	r3, [r7, #116]	@ 0x74
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fe6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009fea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009fec:	e841 2300 	strex	r3, r2, [r1]
 8009ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1e6      	bne.n	8009fc6 <UART_Start_Receive_IT+0x1be>
 8009ff8:	e018      	b.n	800a02c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	e853 3f00 	ldrex	r3, [r3]
 800a006:	613b      	str	r3, [r7, #16]
   return(result);
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	f043 0320 	orr.w	r3, r3, #32
 800a00e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	461a      	mov	r2, r3
 800a016:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a018:	623b      	str	r3, [r7, #32]
 800a01a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01c:	69f9      	ldr	r1, [r7, #28]
 800a01e:	6a3a      	ldr	r2, [r7, #32]
 800a020:	e841 2300 	strex	r3, r2, [r1]
 800a024:	61bb      	str	r3, [r7, #24]
   return(result);
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1e6      	bne.n	8009ffa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	378c      	adds	r7, #140	@ 0x8c
 800a032:	46bd      	mov	sp, r7
 800a034:	bc80      	pop	{r7}
 800a036:	4770      	bx	lr
 800a038:	0800aa1d 	.word	0x0800aa1d
 800a03c:	0800a6bd 	.word	0x0800a6bd
 800a040:	0800a505 	.word	0x0800a505
 800a044:	0800a34d 	.word	0x0800a34d

0800a048 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a048:	b480      	push	{r7}
 800a04a:	b08f      	sub	sp, #60	@ 0x3c
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	e853 3f00 	ldrex	r3, [r3]
 800a05c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a064:	637b      	str	r3, [r7, #52]	@ 0x34
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a06e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a070:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a072:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a074:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a076:	e841 2300 	strex	r3, r2, [r1]
 800a07a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1e6      	bne.n	800a050 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	3308      	adds	r3, #8
 800a088:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	e853 3f00 	ldrex	r3, [r3]
 800a090:	60bb      	str	r3, [r7, #8]
   return(result);
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a098:	633b      	str	r3, [r7, #48]	@ 0x30
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	3308      	adds	r3, #8
 800a0a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0a2:	61ba      	str	r2, [r7, #24]
 800a0a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a6:	6979      	ldr	r1, [r7, #20]
 800a0a8:	69ba      	ldr	r2, [r7, #24]
 800a0aa:	e841 2300 	strex	r3, r2, [r1]
 800a0ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1e5      	bne.n	800a082 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2220      	movs	r2, #32
 800a0ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a0be:	bf00      	nop
 800a0c0:	373c      	adds	r7, #60	@ 0x3c
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bc80      	pop	{r7}
 800a0c6:	4770      	bx	lr

0800a0c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b095      	sub	sp, #84	@ 0x54
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0d8:	e853 3f00 	ldrex	r3, [r3]
 800a0dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a0f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a0f6:	e841 2300 	strex	r3, r2, [r1]
 800a0fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d1e6      	bne.n	800a0d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	3308      	adds	r3, #8
 800a108:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10a:	6a3b      	ldr	r3, [r7, #32]
 800a10c:	e853 3f00 	ldrex	r3, [r3]
 800a110:	61fb      	str	r3, [r7, #28]
   return(result);
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a118:	f023 0301 	bic.w	r3, r3, #1
 800a11c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3308      	adds	r3, #8
 800a124:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a126:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a128:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a12c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a12e:	e841 2300 	strex	r3, r2, [r1]
 800a132:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1e3      	bne.n	800a102 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d118      	bne.n	800a174 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	e853 3f00 	ldrex	r3, [r3]
 800a14e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	f023 0310 	bic.w	r3, r3, #16
 800a156:	647b      	str	r3, [r7, #68]	@ 0x44
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	461a      	mov	r2, r3
 800a15e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a160:	61bb      	str	r3, [r7, #24]
 800a162:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a164:	6979      	ldr	r1, [r7, #20]
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	e841 2300 	strex	r3, r2, [r1]
 800a16c:	613b      	str	r3, [r7, #16]
   return(result);
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1e6      	bne.n	800a142 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2220      	movs	r2, #32
 800a178:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a188:	bf00      	nop
 800a18a:	3754      	adds	r7, #84	@ 0x54
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bc80      	pop	{r7}
 800a190:	4770      	bx	lr

0800a192 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b090      	sub	sp, #64	@ 0x40
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a19e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0320 	and.w	r3, r3, #32
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d137      	bne.n	800a21e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a1ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a1b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c0:	e853 3f00 	ldrex	r3, [r3]
 800a1c4:	623b      	str	r3, [r7, #32]
   return(result);
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a1ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3308      	adds	r3, #8
 800a1d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1d6:	633a      	str	r2, [r7, #48]	@ 0x30
 800a1d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1de:	e841 2300 	strex	r3, r2, [r1]
 800a1e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1e5      	bne.n	800a1b6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	e853 3f00 	ldrex	r3, [r3]
 800a1f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800a200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a208:	61fb      	str	r3, [r7, #28]
 800a20a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20c:	69b9      	ldr	r1, [r7, #24]
 800a20e:	69fa      	ldr	r2, [r7, #28]
 800a210:	e841 2300 	strex	r3, r2, [r1]
 800a214:	617b      	str	r3, [r7, #20]
   return(result);
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1e6      	bne.n	800a1ea <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a21c:	e002      	b.n	800a224 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a21e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a220:	f7f8 fda6 	bl	8002d70 <HAL_UART_TxCpltCallback>
}
 800a224:	bf00      	nop
 800a226:	3740      	adds	r7, #64	@ 0x40
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a238:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f7ff f99a 	bl	8009574 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a240:	bf00      	nop
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a254:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a25c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a264:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a270:	2b80      	cmp	r3, #128	@ 0x80
 800a272:	d109      	bne.n	800a288 <UART_DMAError+0x40>
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	2b21      	cmp	r3, #33	@ 0x21
 800a278:	d106      	bne.n	800a288 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a282:	6978      	ldr	r0, [r7, #20]
 800a284:	f7ff fee0 	bl	800a048 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a292:	2b40      	cmp	r3, #64	@ 0x40
 800a294:	d109      	bne.n	800a2aa <UART_DMAError+0x62>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2b22      	cmp	r3, #34	@ 0x22
 800a29a:	d106      	bne.n	800a2aa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a2a4:	6978      	ldr	r0, [r7, #20]
 800a2a6:	f7ff ff0f 	bl	800a0c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2b0:	f043 0210 	orr.w	r2, r3, #16
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2ba:	6978      	ldr	r0, [r7, #20]
 800a2bc:	f7ff f963 	bl	8009586 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2c0:	bf00      	nop
 800a2c2:	3718      	adds	r7, #24
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f7ff f94d 	bl	8009586 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ec:	bf00      	nop
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b088      	sub	sp, #32
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	e853 3f00 	ldrex	r3, [r3]
 800a308:	60bb      	str	r3, [r7, #8]
   return(result);
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a310:	61fb      	str	r3, [r7, #28]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	61bb      	str	r3, [r7, #24]
 800a31c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31e:	6979      	ldr	r1, [r7, #20]
 800a320:	69ba      	ldr	r2, [r7, #24]
 800a322:	e841 2300 	strex	r3, r2, [r1]
 800a326:	613b      	str	r3, [r7, #16]
   return(result);
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1e6      	bne.n	800a2fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2220      	movs	r2, #32
 800a332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7f8 fd17 	bl	8002d70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a342:	bf00      	nop
 800a344:	3720      	adds	r7, #32
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
	...

0800a34c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b09c      	sub	sp, #112	@ 0x70
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a35a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a364:	2b22      	cmp	r3, #34	@ 0x22
 800a366:	f040 80be 	bne.w	800a4e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a370:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a374:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a378:	b2d9      	uxtb	r1, r3
 800a37a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a384:	400a      	ands	r2, r1
 800a386:	b2d2      	uxtb	r2, r2
 800a388:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a38e:	1c5a      	adds	r2, r3, #1
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	3b01      	subs	r3, #1
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f040 80a1 	bne.w	800a4f6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3bc:	e853 3f00 	ldrex	r3, [r3]
 800a3c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a3c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3da:	e841 2300 	strex	r3, r2, [r1]
 800a3de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a3e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1e6      	bne.n	800a3b4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	3308      	adds	r3, #8
 800a3ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f0:	e853 3f00 	ldrex	r3, [r3]
 800a3f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3f8:	f023 0301 	bic.w	r3, r3, #1
 800a3fc:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3308      	adds	r3, #8
 800a404:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a406:	647a      	str	r2, [r7, #68]	@ 0x44
 800a408:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a40c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a40e:	e841 2300 	strex	r3, r2, [r1]
 800a412:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1e5      	bne.n	800a3e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2220      	movs	r2, #32
 800a41e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a33      	ldr	r2, [pc, #204]	@ (800a500 <UART_RxISR_8BIT+0x1b4>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d01f      	beq.n	800a478 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a442:	2b00      	cmp	r3, #0
 800a444:	d018      	beq.n	800a478 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a44e:	e853 3f00 	ldrex	r3, [r3]
 800a452:	623b      	str	r3, [r7, #32]
   return(result);
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a45a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	461a      	mov	r2, r3
 800a462:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a464:	633b      	str	r3, [r7, #48]	@ 0x30
 800a466:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a468:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a46a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a46c:	e841 2300 	strex	r3, r2, [r1]
 800a470:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1e6      	bne.n	800a446 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d12e      	bne.n	800a4de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	e853 3f00 	ldrex	r3, [r3]
 800a492:	60fb      	str	r3, [r7, #12]
   return(result);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f023 0310 	bic.w	r3, r3, #16
 800a49a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4a4:	61fb      	str	r3, [r7, #28]
 800a4a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a8:	69b9      	ldr	r1, [r7, #24]
 800a4aa:	69fa      	ldr	r2, [r7, #28]
 800a4ac:	e841 2300 	strex	r3, r2, [r1]
 800a4b0:	617b      	str	r3, [r7, #20]
   return(result);
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1e6      	bne.n	800a486 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	69db      	ldr	r3, [r3, #28]
 800a4be:	f003 0310 	and.w	r3, r3, #16
 800a4c2:	2b10      	cmp	r3, #16
 800a4c4:	d103      	bne.n	800a4ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2210      	movs	r2, #16
 800a4cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f7ff f85e 	bl	8009598 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a4dc:	e00b      	b.n	800a4f6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7f8 fc5c 	bl	8002d9c <HAL_UART_RxCpltCallback>
}
 800a4e4:	e007      	b.n	800a4f6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	699a      	ldr	r2, [r3, #24]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f042 0208 	orr.w	r2, r2, #8
 800a4f4:	619a      	str	r2, [r3, #24]
}
 800a4f6:	bf00      	nop
 800a4f8:	3770      	adds	r7, #112	@ 0x70
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	40008000 	.word	0x40008000

0800a504 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b09c      	sub	sp, #112	@ 0x70
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a512:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a51c:	2b22      	cmp	r3, #34	@ 0x22
 800a51e:	f040 80be 	bne.w	800a69e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a528:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a530:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a532:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a536:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a53a:	4013      	ands	r3, r2
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a540:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a546:	1c9a      	adds	r2, r3, #2
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a552:	b29b      	uxth	r3, r3
 800a554:	3b01      	subs	r3, #1
 800a556:	b29a      	uxth	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a564:	b29b      	uxth	r3, r3
 800a566:	2b00      	cmp	r3, #0
 800a568:	f040 80a1 	bne.w	800a6ae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a574:	e853 3f00 	ldrex	r3, [r3]
 800a578:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a57a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a57c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a580:	667b      	str	r3, [r7, #100]	@ 0x64
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	461a      	mov	r2, r3
 800a588:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a58a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a58c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a590:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a592:	e841 2300 	strex	r3, r2, [r1]
 800a596:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1e6      	bne.n	800a56c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3308      	adds	r3, #8
 800a5a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a8:	e853 3f00 	ldrex	r3, [r3]
 800a5ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b0:	f023 0301 	bic.w	r3, r3, #1
 800a5b4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	3308      	adds	r3, #8
 800a5bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a5be:	643a      	str	r2, [r7, #64]	@ 0x40
 800a5c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a5c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a5c6:	e841 2300 	strex	r3, r2, [r1]
 800a5ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1e5      	bne.n	800a59e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2220      	movs	r2, #32
 800a5d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a33      	ldr	r2, [pc, #204]	@ (800a6b8 <UART_RxISR_16BIT+0x1b4>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d01f      	beq.n	800a630 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d018      	beq.n	800a630 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a604:	6a3b      	ldr	r3, [r7, #32]
 800a606:	e853 3f00 	ldrex	r3, [r3]
 800a60a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a612:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	461a      	mov	r2, r3
 800a61a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a61c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a61e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a620:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a624:	e841 2300 	strex	r3, r2, [r1]
 800a628:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1e6      	bne.n	800a5fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a634:	2b01      	cmp	r3, #1
 800a636:	d12e      	bne.n	800a696 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	e853 3f00 	ldrex	r3, [r3]
 800a64a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	f023 0310 	bic.w	r3, r3, #16
 800a652:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	461a      	mov	r2, r3
 800a65a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a65c:	61bb      	str	r3, [r7, #24]
 800a65e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a660:	6979      	ldr	r1, [r7, #20]
 800a662:	69ba      	ldr	r2, [r7, #24]
 800a664:	e841 2300 	strex	r3, r2, [r1]
 800a668:	613b      	str	r3, [r7, #16]
   return(result);
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1e6      	bne.n	800a63e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	69db      	ldr	r3, [r3, #28]
 800a676:	f003 0310 	and.w	r3, r3, #16
 800a67a:	2b10      	cmp	r3, #16
 800a67c:	d103      	bne.n	800a686 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2210      	movs	r2, #16
 800a684:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a68c:	4619      	mov	r1, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7fe ff82 	bl	8009598 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a694:	e00b      	b.n	800a6ae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7f8 fb80 	bl	8002d9c <HAL_UART_RxCpltCallback>
}
 800a69c:	e007      	b.n	800a6ae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	699a      	ldr	r2, [r3, #24]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f042 0208 	orr.w	r2, r2, #8
 800a6ac:	619a      	str	r2, [r3, #24]
}
 800a6ae:	bf00      	nop
 800a6b0:	3770      	adds	r7, #112	@ 0x70
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	40008000 	.word	0x40008000

0800a6bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b0ac      	sub	sp, #176	@ 0xb0
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a6ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6f2:	2b22      	cmp	r3, #34	@ 0x22
 800a6f4:	f040 8182 	bne.w	800a9fc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a6fe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a702:	e125      	b.n	800a950 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a70a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a70e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a712:	b2d9      	uxtb	r1, r3
 800a714:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a71e:	400a      	ands	r2, r1
 800a720:	b2d2      	uxtb	r2, r2
 800a722:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a728:	1c5a      	adds	r2, r3, #1
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a734:	b29b      	uxth	r3, r3
 800a736:	3b01      	subs	r3, #1
 800a738:	b29a      	uxth	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a74a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a74e:	f003 0307 	and.w	r3, r3, #7
 800a752:	2b00      	cmp	r3, #0
 800a754:	d053      	beq.n	800a7fe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a75a:	f003 0301 	and.w	r3, r3, #1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d011      	beq.n	800a786 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a762:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00b      	beq.n	800a786 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2201      	movs	r2, #1
 800a774:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a77c:	f043 0201 	orr.w	r2, r3, #1
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d011      	beq.n	800a7b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a796:	f003 0301 	and.w	r3, r3, #1
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00b      	beq.n	800a7b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7ac:	f043 0204 	orr.w	r2, r3, #4
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a7ba:	f003 0304 	and.w	r3, r3, #4
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d011      	beq.n	800a7e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a7c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a7c6:	f003 0301 	and.w	r3, r3, #1
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00b      	beq.n	800a7e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2204      	movs	r2, #4
 800a7d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7dc:	f043 0202 	orr.w	r2, r3, #2
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d006      	beq.n	800a7fe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7fe fec8 	bl	8009586 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a804:	b29b      	uxth	r3, r3
 800a806:	2b00      	cmp	r3, #0
 800a808:	f040 80a2 	bne.w	800a950 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a812:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a814:	e853 3f00 	ldrex	r3, [r3]
 800a818:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a81a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a81c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a820:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	461a      	mov	r2, r3
 800a82a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a82e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a830:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a832:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a834:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a836:	e841 2300 	strex	r3, r2, [r1]
 800a83a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a83c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1e4      	bne.n	800a80c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	3308      	adds	r3, #8
 800a848:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a84c:	e853 3f00 	ldrex	r3, [r3]
 800a850:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a852:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a854:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a858:	f023 0301 	bic.w	r3, r3, #1
 800a85c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3308      	adds	r3, #8
 800a866:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a86a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a86c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a870:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a872:	e841 2300 	strex	r3, r2, [r1]
 800a876:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a878:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1e1      	bne.n	800a842 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2220      	movs	r2, #32
 800a882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a5f      	ldr	r2, [pc, #380]	@ (800aa14 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d021      	beq.n	800a8e0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d01a      	beq.n	800a8e0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8b2:	e853 3f00 	ldrex	r3, [r3]
 800a8b6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a8b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a8be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a8cc:	657b      	str	r3, [r7, #84]	@ 0x54
 800a8ce:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a8d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a8d4:	e841 2300 	strex	r3, r2, [r1]
 800a8d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a8da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1e4      	bne.n	800a8aa <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d130      	bne.n	800a94a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f6:	e853 3f00 	ldrex	r3, [r3]
 800a8fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fe:	f023 0310 	bic.w	r3, r3, #16
 800a902:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	461a      	mov	r2, r3
 800a90c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a910:	643b      	str	r3, [r7, #64]	@ 0x40
 800a912:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a914:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a916:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a918:	e841 2300 	strex	r3, r2, [r1]
 800a91c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a91e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a920:	2b00      	cmp	r3, #0
 800a922:	d1e4      	bne.n	800a8ee <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	f003 0310 	and.w	r3, r3, #16
 800a92e:	2b10      	cmp	r3, #16
 800a930:	d103      	bne.n	800a93a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2210      	movs	r2, #16
 800a938:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a940:	4619      	mov	r1, r3
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f7fe fe28 	bl	8009598 <HAL_UARTEx_RxEventCallback>
 800a948:	e002      	b.n	800a950 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7f8 fa26 	bl	8002d9c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a950:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a954:	2b00      	cmp	r3, #0
 800a956:	d006      	beq.n	800a966 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800a958:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a95c:	f003 0320 	and.w	r3, r3, #32
 800a960:	2b00      	cmp	r3, #0
 800a962:	f47f aecf 	bne.w	800a704 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a96c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a970:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a974:	2b00      	cmp	r3, #0
 800a976:	d049      	beq.n	800aa0c <UART_RxISR_8BIT_FIFOEN+0x350>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a97e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a982:	429a      	cmp	r2, r3
 800a984:	d242      	bcs.n	800aa0c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3308      	adds	r3, #8
 800a98c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98e:	6a3b      	ldr	r3, [r7, #32]
 800a990:	e853 3f00 	ldrex	r3, [r3]
 800a994:	61fb      	str	r3, [r7, #28]
   return(result);
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a99c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	3308      	adds	r3, #8
 800a9a6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a9aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a9ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9b2:	e841 2300 	strex	r3, r2, [r1]
 800a9b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1e3      	bne.n	800a986 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a15      	ldr	r2, [pc, #84]	@ (800aa18 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a9c2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	e853 3f00 	ldrex	r3, [r3]
 800a9d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	f043 0320 	orr.w	r3, r3, #32
 800a9d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a9e6:	61bb      	str	r3, [r7, #24]
 800a9e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ea:	6979      	ldr	r1, [r7, #20]
 800a9ec:	69ba      	ldr	r2, [r7, #24]
 800a9ee:	e841 2300 	strex	r3, r2, [r1]
 800a9f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1e4      	bne.n	800a9c4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a9fa:	e007      	b.n	800aa0c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	699a      	ldr	r2, [r3, #24]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f042 0208 	orr.w	r2, r2, #8
 800aa0a:	619a      	str	r2, [r3, #24]
}
 800aa0c:	bf00      	nop
 800aa0e:	37b0      	adds	r7, #176	@ 0xb0
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	40008000 	.word	0x40008000
 800aa18:	0800a34d 	.word	0x0800a34d

0800aa1c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b0ae      	sub	sp, #184	@ 0xb8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aa2a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa52:	2b22      	cmp	r3, #34	@ 0x22
 800aa54:	f040 8186 	bne.w	800ad64 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aa5e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa62:	e129      	b.n	800acb8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa6a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800aa76:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800aa7a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800aa7e:	4013      	ands	r3, r2
 800aa80:	b29a      	uxth	r2, r3
 800aa82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aa86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa8c:	1c9a      	adds	r2, r3, #2
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	b29a      	uxth	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aaae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aab2:	f003 0307 	and.w	r3, r3, #7
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d053      	beq.n	800ab62 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aaba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d011      	beq.n	800aaea <UART_RxISR_16BIT_FIFOEN+0xce>
 800aac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aaca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00b      	beq.n	800aaea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2201      	movs	r2, #1
 800aad8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aae0:	f043 0201 	orr.w	r2, r3, #1
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aaea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aaee:	f003 0302 	and.w	r3, r3, #2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d011      	beq.n	800ab1a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800aaf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800aafa:	f003 0301 	and.w	r3, r3, #1
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00b      	beq.n	800ab1a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2202      	movs	r2, #2
 800ab08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab10:	f043 0204 	orr.w	r2, r3, #4
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ab1e:	f003 0304 	and.w	r3, r3, #4
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d011      	beq.n	800ab4a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ab26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ab2a:	f003 0301 	and.w	r3, r3, #1
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00b      	beq.n	800ab4a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2204      	movs	r2, #4
 800ab38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab40:	f043 0202 	orr.w	r2, r3, #2
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d006      	beq.n	800ab62 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7fe fd16 	bl	8009586 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f040 80a4 	bne.w	800acb8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab78:	e853 3f00 	ldrex	r3, [r3]
 800ab7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ab7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ab92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ab96:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ab9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ab9e:	e841 2300 	strex	r3, r2, [r1]
 800aba2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1e2      	bne.n	800ab70 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	3308      	adds	r3, #8
 800abb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abb4:	e853 3f00 	ldrex	r3, [r3]
 800abb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800abba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800abbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abc0:	f023 0301 	bic.w	r3, r3, #1
 800abc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3308      	adds	r3, #8
 800abce:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800abd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800abd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800abd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800abda:	e841 2300 	strex	r3, r2, [r1]
 800abde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800abe0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1e1      	bne.n	800abaa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2220      	movs	r2, #32
 800abea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a5f      	ldr	r2, [pc, #380]	@ (800ad7c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d021      	beq.n	800ac48 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d01a      	beq.n	800ac48 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac1a:	e853 3f00 	ldrex	r3, [r3]
 800ac1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ac20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ac26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ac34:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac36:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ac3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac3c:	e841 2300 	strex	r3, r2, [r1]
 800ac40:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ac42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1e4      	bne.n	800ac12 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d130      	bne.n	800acb2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac5e:	e853 3f00 	ldrex	r3, [r3]
 800ac62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac66:	f023 0310 	bic.w	r3, r3, #16
 800ac6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	461a      	mov	r2, r3
 800ac74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ac78:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac80:	e841 2300 	strex	r3, r2, [r1]
 800ac84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1e4      	bne.n	800ac56 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	69db      	ldr	r3, [r3, #28]
 800ac92:	f003 0310 	and.w	r3, r3, #16
 800ac96:	2b10      	cmp	r3, #16
 800ac98:	d103      	bne.n	800aca2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2210      	movs	r2, #16
 800aca0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aca8:	4619      	mov	r1, r3
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7fe fc74 	bl	8009598 <HAL_UARTEx_RxEventCallback>
 800acb0:	e002      	b.n	800acb8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f7f8 f872 	bl	8002d9c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800acb8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d006      	beq.n	800acce <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800acc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800acc4:	f003 0320 	and.w	r3, r3, #32
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f47f aecb 	bne.w	800aa64 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800acd4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800acd8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d049      	beq.n	800ad74 <UART_RxISR_16BIT_FIFOEN+0x358>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ace6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800acea:	429a      	cmp	r2, r3
 800acec:	d242      	bcs.n	800ad74 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3308      	adds	r3, #8
 800acf4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf8:	e853 3f00 	ldrex	r3, [r3]
 800acfc:	623b      	str	r3, [r7, #32]
   return(result);
 800acfe:	6a3b      	ldr	r3, [r7, #32]
 800ad00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	3308      	adds	r3, #8
 800ad0e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ad12:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad1a:	e841 2300 	strex	r3, r2, [r1]
 800ad1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1e3      	bne.n	800acee <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a15      	ldr	r2, [pc, #84]	@ (800ad80 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ad2a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	e853 3f00 	ldrex	r3, [r3]
 800ad38:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f043 0320 	orr.w	r3, r3, #32
 800ad40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	461a      	mov	r2, r3
 800ad4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ad4e:	61fb      	str	r3, [r7, #28]
 800ad50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad52:	69b9      	ldr	r1, [r7, #24]
 800ad54:	69fa      	ldr	r2, [r7, #28]
 800ad56:	e841 2300 	strex	r3, r2, [r1]
 800ad5a:	617b      	str	r3, [r7, #20]
   return(result);
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1e4      	bne.n	800ad2c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad62:	e007      	b.n	800ad74 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	699a      	ldr	r2, [r3, #24]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f042 0208 	orr.w	r2, r2, #8
 800ad72:	619a      	str	r2, [r3, #24]
}
 800ad74:	bf00      	nop
 800ad76:	37b8      	adds	r7, #184	@ 0xb8
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	40008000 	.word	0x40008000
 800ad80:	0800a505 	.word	0x0800a505

0800ad84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bc80      	pop	{r7}
 800ad94:	4770      	bx	lr

0800ad96 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ad96:	b480      	push	{r7}
 800ad98:	b083      	sub	sp, #12
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ad9e:	bf00      	nop
 800ada0:	370c      	adds	r7, #12
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bc80      	pop	{r7}
 800ada6:	4770      	bx	lr

0800ada8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bc80      	pop	{r7}
 800adb8:	4770      	bx	lr

0800adba <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b088      	sub	sp, #32
 800adbe:	af02      	add	r7, sp, #8
 800adc0:	60f8      	str	r0, [r7, #12]
 800adc2:	1d3b      	adds	r3, r7, #4
 800adc4:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800add2:	2b01      	cmp	r3, #1
 800add4:	d101      	bne.n	800adda <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800add6:	2302      	movs	r3, #2
 800add8:	e046      	b.n	800ae68 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2201      	movs	r2, #1
 800adde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2224      	movs	r2, #36	@ 0x24
 800ade6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f022 0201 	bic.w	r2, r2, #1
 800adf8:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	430a      	orrs	r2, r1
 800ae0c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d105      	bne.n	800ae20 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800ae14:	1d3b      	adds	r3, r7, #4
 800ae16:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f000 f90e 	bl	800b03c <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f042 0201 	orr.w	r2, r2, #1
 800ae2e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae30:	f7f7 faec 	bl	800240c <HAL_GetTick>
 800ae34:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae3a:	9300      	str	r3, [sp, #0]
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f7fe ff16 	bl	8009c76 <UART_WaitOnFlagUntilTimeout>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800ae50:	2303      	movs	r3, #3
 800ae52:	75fb      	strb	r3, [r7, #23]
 800ae54:	e003      	b.n	800ae5e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2220      	movs	r2, #32
 800ae5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800ae66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3718      	adds	r7, #24
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b089      	sub	sp, #36	@ 0x24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d101      	bne.n	800ae86 <HAL_UARTEx_EnableStopMode+0x16>
 800ae82:	2302      	movs	r3, #2
 800ae84:	e021      	b.n	800aeca <HAL_UARTEx_EnableStopMode+0x5a>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	e853 3f00 	ldrex	r3, [r3]
 800ae9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	f043 0302 	orr.w	r3, r3, #2
 800aea2:	61fb      	str	r3, [r7, #28]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	461a      	mov	r2, r3
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	61bb      	str	r3, [r7, #24]
 800aeae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb0:	6979      	ldr	r1, [r7, #20]
 800aeb2:	69ba      	ldr	r2, [r7, #24]
 800aeb4:	e841 2300 	strex	r3, r2, [r1]
 800aeb8:	613b      	str	r3, [r7, #16]
   return(result);
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1e6      	bne.n	800ae8e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3724      	adds	r7, #36	@ 0x24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bc80      	pop	{r7}
 800aed2:	4770      	bx	lr

0800aed4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d101      	bne.n	800aeea <HAL_UARTEx_DisableFifoMode+0x16>
 800aee6:	2302      	movs	r3, #2
 800aee8:	e027      	b.n	800af3a <HAL_UARTEx_DisableFifoMode+0x66>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2224      	movs	r2, #36	@ 0x24
 800aef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f022 0201 	bic.w	r2, r2, #1
 800af10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800af18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2220      	movs	r2, #32
 800af2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3714      	adds	r7, #20
 800af3e:	46bd      	mov	sp, r7
 800af40:	bc80      	pop	{r7}
 800af42:	4770      	bx	lr

0800af44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af54:	2b01      	cmp	r3, #1
 800af56:	d101      	bne.n	800af5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af58:	2302      	movs	r3, #2
 800af5a:	e02d      	b.n	800afb8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2224      	movs	r2, #36	@ 0x24
 800af68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f022 0201 	bic.w	r2, r2, #1
 800af82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	430a      	orrs	r2, r1
 800af96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 f871 	bl	800b080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2220      	movs	r2, #32
 800afaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d101      	bne.n	800afd8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800afd4:	2302      	movs	r3, #2
 800afd6:	e02d      	b.n	800b034 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2224      	movs	r2, #36	@ 0x24
 800afe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f022 0201 	bic.w	r2, r2, #1
 800affe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	430a      	orrs	r2, r1
 800b012:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f833 	bl	800b080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2220      	movs	r2, #32
 800b026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	1d3b      	adds	r3, r7, #4
 800b046:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	f023 0210 	bic.w	r2, r3, #16
 800b054:	893b      	ldrh	r3, [r7, #8]
 800b056:	4619      	mov	r1, r3
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	430a      	orrs	r2, r1
 800b05e:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800b06a:	7abb      	ldrb	r3, [r7, #10]
 800b06c:	061a      	lsls	r2, r3, #24
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	430a      	orrs	r2, r1
 800b074:	605a      	str	r2, [r3, #4]
}
 800b076:	bf00      	nop
 800b078:	3714      	adds	r7, #20
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bc80      	pop	{r7}
 800b07e:	4770      	bx	lr

0800b080 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d108      	bne.n	800b0a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b0a0:	e031      	b.n	800b106 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b0a2:	2308      	movs	r3, #8
 800b0a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b0a6:	2308      	movs	r3, #8
 800b0a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	0e5b      	lsrs	r3, r3, #25
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	f003 0307 	and.w	r3, r3, #7
 800b0b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	0f5b      	lsrs	r3, r3, #29
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	f003 0307 	and.w	r3, r3, #7
 800b0c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
 800b0cc:	7b3a      	ldrb	r2, [r7, #12]
 800b0ce:	4910      	ldr	r1, [pc, #64]	@ (800b110 <UARTEx_SetNbDataToProcess+0x90>)
 800b0d0:	5c8a      	ldrb	r2, [r1, r2]
 800b0d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b0d6:	7b3a      	ldrb	r2, [r7, #12]
 800b0d8:	490e      	ldr	r1, [pc, #56]	@ (800b114 <UARTEx_SetNbDataToProcess+0x94>)
 800b0da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ea:	7b7a      	ldrb	r2, [r7, #13]
 800b0ec:	4908      	ldr	r1, [pc, #32]	@ (800b110 <UARTEx_SetNbDataToProcess+0x90>)
 800b0ee:	5c8a      	ldrb	r2, [r1, r2]
 800b0f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0f4:	7b7a      	ldrb	r2, [r7, #13]
 800b0f6:	4907      	ldr	r1, [pc, #28]	@ (800b114 <UARTEx_SetNbDataToProcess+0x94>)
 800b0f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b106:	bf00      	nop
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bc80      	pop	{r7}
 800b10e:	4770      	bx	lr
 800b110:	0801db18 	.word	0x0801db18
 800b114:	0801db20 	.word	0x0801db20

0800b118 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800b11c:	f7f6 fffe 	bl	800211c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800b120:	f000 f820 	bl	800b164 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800b124:	bf00      	nop
 800b126:	bd80      	pop	{r7, pc}

0800b128 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800b12c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b130:	f011 f93a 	bl	801c3a8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800b134:	bf00      	nop
 800b136:	bd80      	pop	{r7, pc}

0800b138 <__NVIC_SystemReset>:
{
 800b138:	b480      	push	{r7}
 800b13a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b13c:	f3bf 8f4f 	dsb	sy
}
 800b140:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b142:	4b06      	ldr	r3, [pc, #24]	@ (800b15c <__NVIC_SystemReset+0x24>)
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b14a:	4904      	ldr	r1, [pc, #16]	@ (800b15c <__NVIC_SystemReset+0x24>)
 800b14c:	4b04      	ldr	r3, [pc, #16]	@ (800b160 <__NVIC_SystemReset+0x28>)
 800b14e:	4313      	orrs	r3, r2
 800b150:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b152:	f3bf 8f4f 	dsb	sy
}
 800b156:	bf00      	nop
    __NOP();
 800b158:	bf00      	nop
 800b15a:	e7fd      	b.n	800b158 <__NVIC_SystemReset+0x20>
 800b15c:	e000ed00 	.word	0xe000ed00
 800b160:	05fa0004 	.word	0x05fa0004

0800b164 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */
	UTIL_TIMER_Create(&TxLedTimer, 200, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800b16a:	2300      	movs	r3, #0
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	4b3a      	ldr	r3, [pc, #232]	@ (800b258 <LoRaWAN_Init+0xf4>)
 800b170:	2200      	movs	r2, #0
 800b172:	21c8      	movs	r1, #200	@ 0xc8
 800b174:	4839      	ldr	r0, [pc, #228]	@ (800b25c <LoRaWAN_Init+0xf8>)
 800b176:	f011 fab5 	bl	801c6e4 <UTIL_TIMER_Create>
	UTIL_TIMER_Create(&JoinLedTimer, 200, UTIL_TIMER_ONESHOT, OnJoinTimerLedEvent, NULL);
 800b17a:	2300      	movs	r3, #0
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	4b38      	ldr	r3, [pc, #224]	@ (800b260 <LoRaWAN_Init+0xfc>)
 800b180:	2200      	movs	r2, #0
 800b182:	21c8      	movs	r1, #200	@ 0xc8
 800b184:	4837      	ldr	r0, [pc, #220]	@ (800b264 <LoRaWAN_Init+0x100>)
 800b186:	f011 faad 	bl	801c6e4 <UTIL_TIMER_Create>
	UTIL_TIMER_Create(&pulses_counter_timer, 30000, UTIL_TIMER_PERIODIC, on_pulses_counter_timer_event, NULL);
 800b18a:	2300      	movs	r3, #0
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	4b36      	ldr	r3, [pc, #216]	@ (800b268 <LoRaWAN_Init+0x104>)
 800b190:	2201      	movs	r2, #1
 800b192:	f247 5130 	movw	r1, #30000	@ 0x7530
 800b196:	4835      	ldr	r0, [pc, #212]	@ (800b26c <LoRaWAN_Init+0x108>)
 800b198:	f011 faa4 	bl	801c6e4 <UTIL_TIMER_Create>

  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 800b19c:	2000      	movs	r0, #0
 800b19e:	f7f5 ffa3 	bl	80010e8 <FLASH_IF_Init>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d001      	beq.n	800b1ac <LoRaWAN_Init+0x48>
  {
    Error_Handler();
 800b1a8:	f7f6 fcb6 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	9300      	str	r3, [sp, #0]
 800b1b0:	4b2f      	ldr	r3, [pc, #188]	@ (800b270 <LoRaWAN_Init+0x10c>)
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800b1b8:	482e      	ldr	r0, [pc, #184]	@ (800b274 <LoRaWAN_Init+0x110>)
 800b1ba:	f011 fa93 	bl	801c6e4 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800b1be:	4a2e      	ldr	r2, [pc, #184]	@ (800b278 <LoRaWAN_Init+0x114>)
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	2001      	movs	r0, #1
 800b1c4:	f011 f9ec 	bl	801c5a0 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800b1c8:	4a2c      	ldr	r2, [pc, #176]	@ (800b27c <LoRaWAN_Init+0x118>)
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	2002      	movs	r0, #2
 800b1ce:	f011 f9e7 	bl	801c5a0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800b1d2:	4a2b      	ldr	r2, [pc, #172]	@ (800b280 <LoRaWAN_Init+0x11c>)
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	2004      	movs	r0, #4
 800b1d8:	f011 f9e2 	bl	801c5a0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800b1dc:	4a29      	ldr	r2, [pc, #164]	@ (800b284 <LoRaWAN_Init+0x120>)
 800b1de:	2100      	movs	r1, #0
 800b1e0:	2008      	movs	r0, #8
 800b1e2:	f011 f9dd 	bl	801c5a0 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800b1e6:	f000 fd83 	bl	800bcf0 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800b1ea:	4927      	ldr	r1, [pc, #156]	@ (800b288 <LoRaWAN_Init+0x124>)
 800b1ec:	4827      	ldr	r0, [pc, #156]	@ (800b28c <LoRaWAN_Init+0x128>)
 800b1ee:	f002 fb33 	bl	800d858 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800b1f2:	4827      	ldr	r0, [pc, #156]	@ (800b290 <LoRaWAN_Init+0x12c>)
 800b1f4:	f002 fb8c 	bl	800d910 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&pulses_counter_timer);
 800b1f8:	481c      	ldr	r0, [pc, #112]	@ (800b26c <LoRaWAN_Init+0x108>)
 800b1fa:	f011 faa9 	bl	801c750 <UTIL_TIMER_Start>
  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800b1fe:	4b25      	ldr	r3, [pc, #148]	@ (800b294 <LoRaWAN_Init+0x130>)
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	4a25      	ldr	r2, [pc, #148]	@ (800b298 <LoRaWAN_Init+0x134>)
 800b204:	7812      	ldrb	r2, [r2, #0]
 800b206:	4611      	mov	r1, r2
 800b208:	4618      	mov	r0, r3
 800b20a:	f002 fce5 	bl	800dbd8 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800b20e:	4b23      	ldr	r3, [pc, #140]	@ (800b29c <LoRaWAN_Init+0x138>)
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d10b      	bne.n	800b22e <LoRaWAN_Init+0xca>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800b216:	4b22      	ldr	r3, [pc, #136]	@ (800b2a0 <LoRaWAN_Init+0x13c>)
 800b218:	6819      	ldr	r1, [r3, #0]
 800b21a:	2300      	movs	r3, #0
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	4b21      	ldr	r3, [pc, #132]	@ (800b2a4 <LoRaWAN_Init+0x140>)
 800b220:	2200      	movs	r2, #0
 800b222:	4821      	ldr	r0, [pc, #132]	@ (800b2a8 <LoRaWAN_Init+0x144>)
 800b224:	f011 fa5e 	bl	801c6e4 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800b228:	481f      	ldr	r0, [pc, #124]	@ (800b2a8 <LoRaWAN_Init+0x144>)
 800b22a:	f011 fa91 	bl	801c750 <UTIL_TIMER_Start>

    /* USER CODE END LoRaWAN_Init_3 */
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */
  UTIL_SEQ_RegTask(1 << CFG_SEQ_Task_JoinProcess, UTIL_SEQ_RFU, JoinProcess);
 800b22e:	4a1f      	ldr	r2, [pc, #124]	@ (800b2ac <LoRaWAN_Init+0x148>)
 800b230:	2100      	movs	r1, #0
 800b232:	2010      	movs	r0, #16
 800b234:	f011 f9b4 	bl	801c5a0 <UTIL_SEQ_RegTask>
  UTIL_TIMER_Create(&JoinProcessTimer, 10000, UTIL_TIMER_PERIODIC, OnJoinProcessTimerEvent, NULL);
 800b238:	2300      	movs	r3, #0
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	4b1c      	ldr	r3, [pc, #112]	@ (800b2b0 <LoRaWAN_Init+0x14c>)
 800b23e:	2201      	movs	r2, #1
 800b240:	f242 7110 	movw	r1, #10000	@ 0x2710
 800b244:	481b      	ldr	r0, [pc, #108]	@ (800b2b4 <LoRaWAN_Init+0x150>)
 800b246:	f011 fa4d 	bl	801c6e4 <UTIL_TIMER_Create>
	UTIL_TIMER_Start(&JoinProcessTimer);
 800b24a:	481a      	ldr	r0, [pc, #104]	@ (800b2b4 <LoRaWAN_Init+0x150>)
 800b24c:	f011 fa80 	bl	801c750 <UTIL_TIMER_Start>
  /* USER CODE END LoRaWAN_Init_Last */
}
 800b250:	bf00      	nop
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	0800b865 	.word	0x0800b865
 800b25c:	20000418 	.word	0x20000418
 800b260:	0800b885 	.word	0x0800b885
 800b264:	20000430 	.word	0x20000430
 800b268:	0800b851 	.word	0x0800b851
 800b26c:	20000400 	.word	0x20000400
 800b270:	0800bbf1 	.word	0x0800bbf1
 800b274:	200003d8 	.word	0x200003d8
 800b278:	0800dbad 	.word	0x0800dbad
 800b27c:	0800b36d 	.word	0x0800b36d
 800b280:	0800bc15 	.word	0x0800bc15
 800b284:	0800bb71 	.word	0x0800bb71
 800b288:	01030000 	.word	0x01030000
 800b28c:	2000000c 	.word	0x2000000c
 800b290:	20000058 	.word	0x20000058
 800b294:	20000009 	.word	0x20000009
 800b298:	2000000a 	.word	0x2000000a
 800b29c:	20000070 	.word	0x20000070
 800b2a0:	20000074 	.word	0x20000074
 800b2a4:	0800b761 	.word	0x0800b761
 800b2a8:	200003c0 	.word	0x200003c0
 800b2ac:	0800b8a5 	.word	0x0800b8a5
 800b2b0:	0800b8ed 	.word	0x0800b8ed
 800b2b4:	20000448 	.word	0x20000448

0800b2b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	4603      	mov	r3, r0
 800b2c0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800b2c2:	88fb      	ldrh	r3, [r7, #6]
 800b2c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2c8:	d108      	bne.n	800b2dc <HAL_GPIO_EXTI_Callback+0x24>
  {
    case  EWDT_WAKE_Pin:
      /* Note: when "EventType == TX_ON_TIMER" this GPIO is not initialized */
      if (EventType == TX_ON_EVENT)
 800b2ca:	4b08      	ldr	r3, [pc, #32]	@ (800b2ec <HAL_GPIO_EXTI_Callback+0x34>)
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d106      	bne.n	800b2e0 <HAL_GPIO_EXTI_Callback+0x28>
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	2002      	movs	r0, #2
 800b2d6:	f011 f985 	bl	801c5e4 <UTIL_SEQ_SetTask>
      }
      break;
 800b2da:	e001      	b.n	800b2e0 <HAL_GPIO_EXTI_Callback+0x28>
    default:
      break;
 800b2dc:	bf00      	nop
 800b2de:	e000      	b.n	800b2e2 <HAL_GPIO_EXTI_Callback+0x2a>
      break;
 800b2e0:	bf00      	nop
  }
}
 800b2e2:	bf00      	nop
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	20000070 	.word	0x20000070

0800b2f0 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
	switch (appData->Port) {
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	d127      	bne.n	800b352 <OnRxData+0x62>
		case LORAWAN_USER_APP_PORT:
			switch (appData->Buffer[0]) {
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	2b43      	cmp	r3, #67	@ 0x43
 800b30a:	d014      	beq.n	800b336 <OnRxData+0x46>
 800b30c:	2b43      	cmp	r3, #67	@ 0x43
 800b30e:	dc19      	bgt.n	800b344 <OnRxData+0x54>
 800b310:	2b41      	cmp	r3, #65	@ 0x41
 800b312:	d002      	beq.n	800b31a <OnRxData+0x2a>
 800b314:	2b42      	cmp	r3, #66	@ 0x42
 800b316:	d007      	beq.n	800b328 <OnRxData+0x38>
 800b318:	e014      	b.n	800b344 <OnRxData+0x54>
				case 'A':
					APP_LOG(TS_ON, VLEVEL_L, "First option\r\n");
 800b31a:	4b10      	ldr	r3, [pc, #64]	@ (800b35c <OnRxData+0x6c>)
 800b31c:	2201      	movs	r2, #1
 800b31e:	2100      	movs	r1, #0
 800b320:	2001      	movs	r0, #1
 800b322:	f011 fc8d 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
					break;
 800b326:	e014      	b.n	800b352 <OnRxData+0x62>
				case 'B':
					APP_LOG(TS_ON, VLEVEL_L, "Second option\r\n");
 800b328:	4b0d      	ldr	r3, [pc, #52]	@ (800b360 <OnRxData+0x70>)
 800b32a:	2201      	movs	r2, #1
 800b32c:	2100      	movs	r1, #0
 800b32e:	2001      	movs	r0, #1
 800b330:	f011 fc86 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
					break;
 800b334:	e00d      	b.n	800b352 <OnRxData+0x62>
				case 'C':
					APP_LOG(TS_ON, VLEVEL_L, "Third option\r\n");
 800b336:	4b0b      	ldr	r3, [pc, #44]	@ (800b364 <OnRxData+0x74>)
 800b338:	2201      	movs	r2, #1
 800b33a:	2100      	movs	r1, #0
 800b33c:	2001      	movs	r0, #1
 800b33e:	f011 fc7f 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
					break;
 800b342:	e006      	b.n	800b352 <OnRxData+0x62>
				default:
					APP_LOG(TS_ON, VLEVEL_L, "%Invalid data\r\n");
 800b344:	4b08      	ldr	r3, [pc, #32]	@ (800b368 <OnRxData+0x78>)
 800b346:	2201      	movs	r2, #1
 800b348:	2100      	movs	r1, #0
 800b34a:	2001      	movs	r0, #1
 800b34c:	f011 fc78 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
			}
		default:
			break;
 800b350:	e7ff      	b.n	800b352 <OnRxData+0x62>
 800b352:	bf00      	nop
	}
  /* USER CODE END OnRxData_1 */
}
 800b354:	bf00      	nop
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	0801d2e8 	.word	0x0801d2e8
 800b360:	0801d2f8 	.word	0x0801d2f8
 800b364:	0801d308 	.word	0x0801d308
 800b368:	0801d318 	.word	0x0801d318

0800b36c <SendTxData>:

static void SendTxData(void)
{
 800b36c:	b590      	push	{r4, r7, lr}
 800b36e:	b093      	sub	sp, #76	@ 0x4c
 800b370:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  /* Reset TPL5010 counter */
  HAL_GPIO_WritePin(EWDT_DONE_GPIO_Port, EWDT_DONE_Pin, GPIO_PIN_SET);
 800b372:	2201      	movs	r2, #1
 800b374:	2104      	movs	r1, #4
 800b376:	488c      	ldr	r0, [pc, #560]	@ (800b5a8 <SendTxData+0x23c>)
 800b378:	f7fa f822 	bl	80053c0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800b37c:	2064      	movs	r0, #100	@ 0x64
 800b37e:	f7f7 f859 	bl	8002434 <HAL_Delay>
  HAL_GPIO_WritePin(EWDT_DONE_GPIO_Port, EWDT_DONE_Pin, GPIO_PIN_RESET);
 800b382:	2200      	movs	r2, #0
 800b384:	2104      	movs	r1, #4
 800b386:	4888      	ldr	r0, [pc, #544]	@ (800b5a8 <SendTxData+0x23c>)
 800b388:	f7fa f81a 	bl	80053c0 <HAL_GPIO_WritePin>

	LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b38c:	23ff      	movs	r3, #255	@ 0xff
 800b38e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t battery = GetBatteryLevel();
 800b392:	f7f6 fef3 	bl	800217c <GetBatteryLevel>
 800b396:	4603      	mov	r3, r0
 800b398:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	sensor_t sensor_data;
	UTIL_TIMER_Time_t nextTxIn = 0;
 800b39c:	2300      	movs	r3, #0
 800b39e:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if (LmHandlerIsBusy() == false)
 800b3a0:	f002 fbd4 	bl	800db4c <LmHandlerIsBusy>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	f083 0301 	eor.w	r3, r3, #1
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f000 81a6 	beq.w	800b6fe <SendTxData+0x392>
	{
		pulses_calc();
 800b3b2:	f000 f9e7 	bl	800b784 <pulses_calc>

		/* Calculate kwh with the pulses not transmitted */
		uint32_t kwh = pulses_count_acum * PULSES_KWH_FACTOR * MULT_FACTOR;
 800b3b6:	4b7d      	ldr	r3, [pc, #500]	@ (800b5ac <SendTxData+0x240>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7f5 faba 	bl	8000934 <__aeabi_ui2f>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	497b      	ldr	r1, [pc, #492]	@ (800b5b0 <SendTxData+0x244>)
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7f4 fedf 	bl	8000188 <__aeabi_fmul>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	4979      	ldr	r1, [pc, #484]	@ (800b5b4 <SendTxData+0x248>)
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7f4 feda 	bl	8000188 <__aeabi_fmul>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7f5 fb2a 	bl	8000a30 <__aeabi_f2uiz>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	633b      	str	r3, [r7, #48]	@ 0x30
		int32_t temperature = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	60bb      	str	r3, [r7, #8]
    int32_t humidity = 0;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	607b      	str	r3, [r7, #4]
		uint32_t i = 0;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	63bb      	str	r3, [r7, #56]	@ 0x38
		int32_t latitude = 0;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
		int32_t longitude = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	62bb      	str	r3, [r7, #40]	@ 0x28
		uint16_t altitudeGps = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	84fb      	strh	r3, [r7, #38]	@ 0x26

		/* Read temperature and humidity values from SHTC3 */
	  MX_I2C2_Init();
 800b3f8:	f7f6 f9c0 	bl	800177c <MX_I2C2_Init>
	  HAL_I2C_MspInit(&hi2c2);
 800b3fc:	486e      	ldr	r0, [pc, #440]	@ (800b5b8 <SendTxData+0x24c>)
 800b3fe:	f7f6 f9fd 	bl	80017fc <HAL_I2C_MspInit>

	  if (shtc3_perform_measurements(&hi2c2, &temperature, &humidity)) {
 800b402:	1d3a      	adds	r2, r7, #4
 800b404:	f107 0308 	add.w	r3, r7, #8
 800b408:	4619      	mov	r1, r3
 800b40a:	486b      	ldr	r0, [pc, #428]	@ (800b5b8 <SendTxData+0x24c>)
 800b40c:	f7f6 fd59 	bl	8001ec2 <shtc3_perform_measurements>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d009      	beq.n	800b42a <SendTxData+0xbe>
	  	APP_LOG(TS_OFF, VLEVEL_M, "Temperature: %d\tHumidity: %d\r\n",
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	9201      	str	r2, [sp, #4]
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	4b67      	ldr	r3, [pc, #412]	@ (800b5bc <SendTxData+0x250>)
 800b420:	2200      	movs	r2, #0
 800b422:	2100      	movs	r1, #0
 800b424:	2002      	movs	r0, #2
 800b426:	f011 fc0b 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
	  			temperature, humidity);
	  }

	  shtc3_sleep(&hi2c2);
 800b42a:	4863      	ldr	r0, [pc, #396]	@ (800b5b8 <SendTxData+0x24c>)
 800b42c:	f7f6 fc32 	bl	8001c94 <shtc3_sleep>

	  /* Read internal temperature and battery values */
		EnvSensors_Read(&sensor_data);
 800b430:	f107 030c 	add.w	r3, r7, #12
 800b434:	4618      	mov	r0, r3
 800b436:	f7f7 f813 	bl	8002460 <EnvSensors_Read>
		APP_LOG(TS_OFF, VLEVEL_M, "VDDA: %d\tCPU temperature: %d\r\n",
 800b43a:	f897 4036 	ldrb.w	r4, [r7, #54]	@ 0x36
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	4618      	mov	r0, r3
 800b442:	f7f5 facf 	bl	80009e4 <__aeabi_f2iz>
 800b446:	4603      	mov	r3, r0
 800b448:	b21b      	sxth	r3, r3
 800b44a:	9301      	str	r3, [sp, #4]
 800b44c:	9400      	str	r4, [sp, #0]
 800b44e:	4b5c      	ldr	r3, [pc, #368]	@ (800b5c0 <SendTxData+0x254>)
 800b450:	2200      	movs	r2, #0
 800b452:	2100      	movs	r1, #0
 800b454:	2002      	movs	r0, #2
 800b456:	f011 fbf3 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
				battery, (int16_t)(sensor_data.temperature));

		AppData.Port = LORAWAN_USER_APP_PORT;
 800b45a:	4b5a      	ldr	r3, [pc, #360]	@ (800b5c4 <SendTxData+0x258>)
 800b45c:	2202      	movs	r2, #2
 800b45e:	701a      	strb	r2, [r3, #0]

		/* Set LoRaWAN payload buffer */
		AppData.Buffer[i++] = (uint8_t)((temperature >> 8) & 0xFF);
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	1218      	asrs	r0, r3, #8
 800b464:	4b57      	ldr	r3, [pc, #348]	@ (800b5c4 <SendTxData+0x258>)
 800b466:	685a      	ldr	r2, [r3, #4]
 800b468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46a:	1c59      	adds	r1, r3, #1
 800b46c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b46e:	4413      	add	r3, r2
 800b470:	b2c2      	uxtb	r2, r0
 800b472:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((temperature >> 0) & 0xFF);
 800b474:	68b8      	ldr	r0, [r7, #8]
 800b476:	4b53      	ldr	r3, [pc, #332]	@ (800b5c4 <SendTxData+0x258>)
 800b478:	685a      	ldr	r2, [r3, #4]
 800b47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b47c:	1c59      	adds	r1, r3, #1
 800b47e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b480:	4413      	add	r3, r2
 800b482:	b2c2      	uxtb	r2, r0
 800b484:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	1218      	asrs	r0, r3, #8
 800b48a:	4b4e      	ldr	r3, [pc, #312]	@ (800b5c4 <SendTxData+0x258>)
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b490:	1c59      	adds	r1, r3, #1
 800b492:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b494:	4413      	add	r3, r2
 800b496:	b2c2      	uxtb	r2, r0
 800b498:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((humidity >> 0) & 0xFF);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	4b49      	ldr	r3, [pc, #292]	@ (800b5c4 <SendTxData+0x258>)
 800b49e:	685a      	ldr	r2, [r3, #4]
 800b4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a2:	1c59      	adds	r1, r3, #1
 800b4a4:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b4a6:	4413      	add	r3, r2
 800b4a8:	b2c2      	uxtb	r2, r0
 800b4aa:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((kwh >> 24) & 0xFF);
 800b4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ae:	0e18      	lsrs	r0, r3, #24
 800b4b0:	4b44      	ldr	r3, [pc, #272]	@ (800b5c4 <SendTxData+0x258>)
 800b4b2:	685a      	ldr	r2, [r3, #4]
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b6:	1c59      	adds	r1, r3, #1
 800b4b8:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b4ba:	4413      	add	r3, r2
 800b4bc:	b2c2      	uxtb	r2, r0
 800b4be:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((kwh >> 16) & 0xFF);
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c2:	0c18      	lsrs	r0, r3, #16
 800b4c4:	4b3f      	ldr	r3, [pc, #252]	@ (800b5c4 <SendTxData+0x258>)
 800b4c6:	685a      	ldr	r2, [r3, #4]
 800b4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ca:	1c59      	adds	r1, r3, #1
 800b4cc:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b4ce:	4413      	add	r3, r2
 800b4d0:	b2c2      	uxtb	r2, r0
 800b4d2:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((kwh >> 8) & 0xFF);
 800b4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d6:	0a18      	lsrs	r0, r3, #8
 800b4d8:	4b3a      	ldr	r3, [pc, #232]	@ (800b5c4 <SendTxData+0x258>)
 800b4da:	685a      	ldr	r2, [r3, #4]
 800b4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4de:	1c59      	adds	r1, r3, #1
 800b4e0:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b4e2:	4413      	add	r3, r2
 800b4e4:	b2c2      	uxtb	r2, r0
 800b4e6:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((kwh >> 0) & 0xFF);
 800b4e8:	4b36      	ldr	r3, [pc, #216]	@ (800b5c4 <SendTxData+0x258>)
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ee:	1c59      	adds	r1, r3, #1
 800b4f0:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b4f2:	4413      	add	r3, r2
 800b4f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4f6:	b2d2      	uxtb	r2, r2
 800b4f8:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((MULT_FACTOR >> 24) & 0xFF);
 800b4fa:	4b32      	ldr	r3, [pc, #200]	@ (800b5c4 <SendTxData+0x258>)
 800b4fc:	685a      	ldr	r2, [r3, #4]
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b500:	1c59      	adds	r1, r3, #1
 800b502:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b504:	4413      	add	r3, r2
 800b506:	2200      	movs	r2, #0
 800b508:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((MULT_FACTOR >> 16) & 0xFF);
 800b50a:	4b2e      	ldr	r3, [pc, #184]	@ (800b5c4 <SendTxData+0x258>)
 800b50c:	685a      	ldr	r2, [r3, #4]
 800b50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b510:	1c59      	adds	r1, r3, #1
 800b512:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b514:	4413      	add	r3, r2
 800b516:	220f      	movs	r2, #15
 800b518:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((MULT_FACTOR >> 8) & 0xFF);
 800b51a:	4b2a      	ldr	r3, [pc, #168]	@ (800b5c4 <SendTxData+0x258>)
 800b51c:	685a      	ldr	r2, [r3, #4]
 800b51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b520:	1c59      	adds	r1, r3, #1
 800b522:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b524:	4413      	add	r3, r2
 800b526:	2242      	movs	r2, #66	@ 0x42
 800b528:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((MULT_FACTOR >> 0) & 0xFF);
 800b52a:	4b26      	ldr	r3, [pc, #152]	@ (800b5c4 <SendTxData+0x258>)
 800b52c:	685a      	ldr	r2, [r3, #4]
 800b52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b530:	1c59      	adds	r1, r3, #1
 800b532:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b534:	4413      	add	r3, r2
 800b536:	2240      	movs	r2, #64	@ 0x40
 800b538:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = battery;        /* 1 (very low) to 254 (fully charged) */
 800b53a:	4b22      	ldr	r3, [pc, #136]	@ (800b5c4 <SendTxData+0x258>)
 800b53c:	685a      	ldr	r2, [r3, #4]
 800b53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b540:	1c59      	adds	r1, r3, #1
 800b542:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b544:	4413      	add	r3, r2
 800b546:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800b54a:	701a      	strb	r2, [r3, #0]

		if((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) ||
 800b54c:	4b1e      	ldr	r3, [pc, #120]	@ (800b5c8 <SendTxData+0x25c>)
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	2b08      	cmp	r3, #8
 800b552:	d007      	beq.n	800b564 <SendTxData+0x1f8>
				(LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915) ||
 800b554:	4b1c      	ldr	r3, [pc, #112]	@ (800b5c8 <SendTxData+0x25c>)
 800b556:	781b      	ldrb	r3, [r3, #0]
		if((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) ||
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d003      	beq.n	800b564 <SendTxData+0x1f8>
				(LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923)) {
 800b55c:	4b1a      	ldr	r3, [pc, #104]	@ (800b5c8 <SendTxData+0x25c>)
 800b55e:	781b      	ldrb	r3, [r3, #0]
				(LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915) ||
 800b560:	2b00      	cmp	r3, #0
 800b562:	d133      	bne.n	800b5cc <SendTxData+0x260>
			AppData.Buffer[i++] = 0;
 800b564:	4b17      	ldr	r3, [pc, #92]	@ (800b5c4 <SendTxData+0x258>)
 800b566:	685a      	ldr	r2, [r3, #4]
 800b568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56a:	1c59      	adds	r1, r3, #1
 800b56c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b56e:	4413      	add	r3, r2
 800b570:	2200      	movs	r2, #0
 800b572:	701a      	strb	r2, [r3, #0]
			AppData.Buffer[i++] = 0;
 800b574:	4b13      	ldr	r3, [pc, #76]	@ (800b5c4 <SendTxData+0x258>)
 800b576:	685a      	ldr	r2, [r3, #4]
 800b578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b57a:	1c59      	adds	r1, r3, #1
 800b57c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b57e:	4413      	add	r3, r2
 800b580:	2200      	movs	r2, #0
 800b582:	701a      	strb	r2, [r3, #0]
			AppData.Buffer[i++] = 0;
 800b584:	4b0f      	ldr	r3, [pc, #60]	@ (800b5c4 <SendTxData+0x258>)
 800b586:	685a      	ldr	r2, [r3, #4]
 800b588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58a:	1c59      	adds	r1, r3, #1
 800b58c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b58e:	4413      	add	r3, r2
 800b590:	2200      	movs	r2, #0
 800b592:	701a      	strb	r2, [r3, #0]
			AppData.Buffer[i++] = 0;
 800b594:	4b0b      	ldr	r3, [pc, #44]	@ (800b5c4 <SendTxData+0x258>)
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b59a:	1c59      	adds	r1, r3, #1
 800b59c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b59e:	4413      	add	r3, r2
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	701a      	strb	r2, [r3, #0]
 800b5a4:	e064      	b.n	800b670 <SendTxData+0x304>
 800b5a6:	bf00      	nop
 800b5a8:	48000400 	.word	0x48000400
 800b5ac:	200003fc 	.word	0x200003fc
 800b5b0:	3a23d70a 	.word	0x3a23d70a
 800b5b4:	49742400 	.word	0x49742400
 800b5b8:	200001c8 	.word	0x200001c8
 800b5bc:	0801d328 	.word	0x0801d328
 800b5c0:	0801d348 	.word	0x0801d348
 800b5c4:	20000078 	.word	0x20000078
 800b5c8:	20000058 	.word	0x20000058
		}
		else {
			latitude = sensor_data.latitude;
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
			longitude = sensor_data.longitude;
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	62bb      	str	r3, [r7, #40]	@ 0x28

			AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800b5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5d6:	1418      	asrs	r0, r3, #16
 800b5d8:	4b55      	ldr	r3, [pc, #340]	@ (800b730 <SendTxData+0x3c4>)
 800b5da:	685a      	ldr	r2, [r3, #4]
 800b5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5de:	1c59      	adds	r1, r3, #1
 800b5e0:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b5e2:	4413      	add	r3, r2
 800b5e4:	b2c2      	uxtb	r2, r0
 800b5e6:	701a      	strb	r2, [r3, #0]
			AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800b5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ea:	1218      	asrs	r0, r3, #8
 800b5ec:	4b50      	ldr	r3, [pc, #320]	@ (800b730 <SendTxData+0x3c4>)
 800b5ee:	685a      	ldr	r2, [r3, #4]
 800b5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f2:	1c59      	adds	r1, r3, #1
 800b5f4:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b5f6:	4413      	add	r3, r2
 800b5f8:	b2c2      	uxtb	r2, r0
 800b5fa:	701a      	strb	r2, [r3, #0]
			AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800b5fc:	4b4c      	ldr	r3, [pc, #304]	@ (800b730 <SendTxData+0x3c4>)
 800b5fe:	685a      	ldr	r2, [r3, #4]
 800b600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b602:	1c59      	adds	r1, r3, #1
 800b604:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b606:	4413      	add	r3, r2
 800b608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b60a:	b2d2      	uxtb	r2, r2
 800b60c:	701a      	strb	r2, [r3, #0]
			AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800b60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b610:	1418      	asrs	r0, r3, #16
 800b612:	4b47      	ldr	r3, [pc, #284]	@ (800b730 <SendTxData+0x3c4>)
 800b614:	685a      	ldr	r2, [r3, #4]
 800b616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b618:	1c59      	adds	r1, r3, #1
 800b61a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b61c:	4413      	add	r3, r2
 800b61e:	b2c2      	uxtb	r2, r0
 800b620:	701a      	strb	r2, [r3, #0]
			AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800b622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b624:	1218      	asrs	r0, r3, #8
 800b626:	4b42      	ldr	r3, [pc, #264]	@ (800b730 <SendTxData+0x3c4>)
 800b628:	685a      	ldr	r2, [r3, #4]
 800b62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b62c:	1c59      	adds	r1, r3, #1
 800b62e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b630:	4413      	add	r3, r2
 800b632:	b2c2      	uxtb	r2, r0
 800b634:	701a      	strb	r2, [r3, #0]
			AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800b636:	4b3e      	ldr	r3, [pc, #248]	@ (800b730 <SendTxData+0x3c4>)
 800b638:	685a      	ldr	r2, [r3, #4]
 800b63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b63c:	1c59      	adds	r1, r3, #1
 800b63e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b640:	4413      	add	r3, r2
 800b642:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b644:	b2d2      	uxtb	r2, r2
 800b646:	701a      	strb	r2, [r3, #0]
			AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800b648:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b64a:	0a1b      	lsrs	r3, r3, #8
 800b64c:	b298      	uxth	r0, r3
 800b64e:	4b38      	ldr	r3, [pc, #224]	@ (800b730 <SendTxData+0x3c4>)
 800b650:	685a      	ldr	r2, [r3, #4]
 800b652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b654:	1c59      	adds	r1, r3, #1
 800b656:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b658:	4413      	add	r3, r2
 800b65a:	b2c2      	uxtb	r2, r0
 800b65c:	701a      	strb	r2, [r3, #0]
			AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800b65e:	4b34      	ldr	r3, [pc, #208]	@ (800b730 <SendTxData+0x3c4>)
 800b660:	685a      	ldr	r2, [r3, #4]
 800b662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b664:	1c59      	adds	r1, r3, #1
 800b666:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b668:	4413      	add	r3, r2
 800b66a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b66c:	b2d2      	uxtb	r2, r2
 800b66e:	701a      	strb	r2, [r3, #0]
		}

		AppData.BufferSize = i;
 800b670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b672:	b2da      	uxtb	r2, r3
 800b674:	4b2e      	ldr	r3, [pc, #184]	@ (800b730 <SendTxData+0x3c4>)
 800b676:	705a      	strb	r2, [r3, #1]

    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800b678:	4b2e      	ldr	r3, [pc, #184]	@ (800b734 <SendTxData+0x3c8>)
 800b67a:	7a5b      	ldrb	r3, [r3, #9]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00c      	beq.n	800b69a <SendTxData+0x32e>
 800b680:	f002 fb4e 	bl	800dd20 <LmHandlerJoinStatus>
 800b684:	4603      	mov	r3, r0
 800b686:	2b01      	cmp	r3, #1
 800b688:	d107      	bne.n	800b69a <SendTxData+0x32e>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800b68a:	482a      	ldr	r0, [pc, #168]	@ (800b734 <SendTxData+0x3c8>)
 800b68c:	f011 f8ce 	bl	801c82c <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(JOIN_LED_GPIO_Port, JOIN_LED_Pin, GPIO_PIN_RESET);
 800b690:	2200      	movs	r2, #0
 800b692:	2140      	movs	r1, #64	@ 0x40
 800b694:	4828      	ldr	r0, [pc, #160]	@ (800b738 <SendTxData+0x3cc>)
 800b696:	f7f9 fe93 	bl	80053c0 <HAL_GPIO_WritePin>
    }

		status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800b69a:	4b28      	ldr	r3, [pc, #160]	@ (800b73c <SendTxData+0x3d0>)
 800b69c:	78db      	ldrb	r3, [r3, #3]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	4823      	ldr	r0, [pc, #140]	@ (800b730 <SendTxData+0x3c4>)
 800b6a4:	f002 fb58 	bl	800dd58 <LmHandlerSend>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (LORAMAC_HANDLER_SUCCESS == status)
 800b6ae:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d10c      	bne.n	800b6d0 <SendTxData+0x364>
		{
			APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800b6b6:	4b22      	ldr	r3, [pc, #136]	@ (800b740 <SendTxData+0x3d4>)
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	2001      	movs	r0, #1
 800b6be:	f011 fabf 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>

			/* Clear the pulses counter variables */
			pulses_count_acum = 0;
 800b6c2:	4b20      	ldr	r3, [pc, #128]	@ (800b744 <SendTxData+0x3d8>)
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	601a      	str	r2, [r3, #0]
			pulses_count = 0;
 800b6c8:	4b1f      	ldr	r3, [pc, #124]	@ (800b748 <SendTxData+0x3dc>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	801a      	strh	r2, [r3, #0]
 800b6ce:	e016      	b.n	800b6fe <SendTxData+0x392>
		}
		else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800b6d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800b6d4:	f113 0f06 	cmn.w	r3, #6
 800b6d8:	d111      	bne.n	800b6fe <SendTxData+0x392>
		{
			nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800b6da:	f002 fa73 	bl	800dbc4 <LmHandlerGetDutyCycleWaitTime>
 800b6de:	63f8      	str	r0, [r7, #60]	@ 0x3c
			if (nextTxIn > 0)
 800b6e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00b      	beq.n	800b6fe <SendTxData+0x392>
			{
				APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800b6e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6e8:	4a18      	ldr	r2, [pc, #96]	@ (800b74c <SendTxData+0x3e0>)
 800b6ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ee:	099b      	lsrs	r3, r3, #6
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	4b17      	ldr	r3, [pc, #92]	@ (800b750 <SendTxData+0x3e4>)
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	2001      	movs	r0, #1
 800b6fa:	f011 faa1 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
			}
		}
	}

	if (EventType == TX_ON_TIMER)
 800b6fe:	4b15      	ldr	r3, [pc, #84]	@ (800b754 <SendTxData+0x3e8>)
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10f      	bne.n	800b726 <SendTxData+0x3ba>
	{
		UTIL_TIMER_Stop(&TxTimer);
 800b706:	4814      	ldr	r0, [pc, #80]	@ (800b758 <SendTxData+0x3ec>)
 800b708:	f011 f890 	bl	801c82c <UTIL_TIMER_Stop>
		UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800b70c:	4b13      	ldr	r3, [pc, #76]	@ (800b75c <SendTxData+0x3f0>)
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b712:	4293      	cmp	r3, r2
 800b714:	bf38      	it	cc
 800b716:	4613      	movcc	r3, r2
 800b718:	4619      	mov	r1, r3
 800b71a:	480f      	ldr	r0, [pc, #60]	@ (800b758 <SendTxData+0x3ec>)
 800b71c:	f011 f8f6 	bl	801c90c <UTIL_TIMER_SetPeriod>
		UTIL_TIMER_Start(&TxTimer);
 800b720:	480d      	ldr	r0, [pc, #52]	@ (800b758 <SendTxData+0x3ec>)
 800b722:	f011 f815 	bl	801c750 <UTIL_TIMER_Start>
	}
  /* USER CODE END SendTxData_1 */
}
 800b726:	bf00      	nop
 800b728:	3744      	adds	r7, #68	@ 0x44
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd90      	pop	{r4, r7, pc}
 800b72e:	bf00      	nop
 800b730:	20000078 	.word	0x20000078
 800b734:	20000430 	.word	0x20000430
 800b738:	48000400 	.word	0x48000400
 800b73c:	20000058 	.word	0x20000058
 800b740:	0801d368 	.word	0x0801d368
 800b744:	200003fc 	.word	0x200003fc
 800b748:	200003f0 	.word	0x200003f0
 800b74c:	10624dd3 	.word	0x10624dd3
 800b750:	0801d378 	.word	0x0801d378
 800b754:	20000070 	.word	0x20000070
 800b758:	200003c0 	.word	0x200003c0
 800b75c:	20000074 	.word	0x20000074

0800b760 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800b768:	2100      	movs	r1, #0
 800b76a:	2002      	movs	r0, #2
 800b76c:	f010 ff3a 	bl	801c5e4 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800b770:	4803      	ldr	r0, [pc, #12]	@ (800b780 <OnTxTimerEvent+0x20>)
 800b772:	f010 ffed 	bl	801c750 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800b776:	bf00      	nop
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	200003c0 	.word	0x200003c0

0800b784 <pulses_calc>:

/* USER CODE BEGIN PrFD_LedEvents */
static void pulses_calc(void) {
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af02      	add	r7, sp, #8
	pulses_count_curr = HAL_LPTIM_ReadCounter(&hlptim1);
 800b78a:	4828      	ldr	r0, [pc, #160]	@ (800b82c <pulses_calc+0xa8>)
 800b78c:	f7fa fd3e 	bl	800620c <HAL_LPTIM_ReadCounter>
 800b790:	4603      	mov	r3, r0
 800b792:	b29a      	uxth	r2, r3
 800b794:	4b26      	ldr	r3, [pc, #152]	@ (800b830 <pulses_calc+0xac>)
 800b796:	801a      	strh	r2, [r3, #0]

	/* Calculate the pulses counted between transmissions */
	if (pulses_count_curr < pulses_count_prev) {
 800b798:	4b25      	ldr	r3, [pc, #148]	@ (800b830 <pulses_calc+0xac>)
 800b79a:	881a      	ldrh	r2, [r3, #0]
 800b79c:	4b25      	ldr	r3, [pc, #148]	@ (800b834 <pulses_calc+0xb0>)
 800b79e:	881b      	ldrh	r3, [r3, #0]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d208      	bcs.n	800b7b6 <pulses_calc+0x32>
		pulses_count = 65536 - pulses_count_prev + pulses_count_curr;
 800b7a4:	4b22      	ldr	r3, [pc, #136]	@ (800b830 <pulses_calc+0xac>)
 800b7a6:	881a      	ldrh	r2, [r3, #0]
 800b7a8:	4b22      	ldr	r3, [pc, #136]	@ (800b834 <pulses_calc+0xb0>)
 800b7aa:	881b      	ldrh	r3, [r3, #0]
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	b29a      	uxth	r2, r3
 800b7b0:	4b21      	ldr	r3, [pc, #132]	@ (800b838 <pulses_calc+0xb4>)
 800b7b2:	801a      	strh	r2, [r3, #0]
 800b7b4:	e007      	b.n	800b7c6 <pulses_calc+0x42>
	}
	else {
		pulses_count = pulses_count_curr - pulses_count_prev;
 800b7b6:	4b1e      	ldr	r3, [pc, #120]	@ (800b830 <pulses_calc+0xac>)
 800b7b8:	881a      	ldrh	r2, [r3, #0]
 800b7ba:	4b1e      	ldr	r3, [pc, #120]	@ (800b834 <pulses_calc+0xb0>)
 800b7bc:	881b      	ldrh	r3, [r3, #0]
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b838 <pulses_calc+0xb4>)
 800b7c4:	801a      	strh	r2, [r3, #0]
	}

	/* Accumulate the pulses not transmitted */
	pulses_count_acum += pulses_count;
 800b7c6:	4b1c      	ldr	r3, [pc, #112]	@ (800b838 <pulses_calc+0xb4>)
 800b7c8:	881b      	ldrh	r3, [r3, #0]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	4b1b      	ldr	r3, [pc, #108]	@ (800b83c <pulses_calc+0xb8>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	4a1a      	ldr	r2, [pc, #104]	@ (800b83c <pulses_calc+0xb8>)
 800b7d4:	6013      	str	r3, [r2, #0]
	APP_LOG(TS_OFF, VLEVEL_M, "Pulses counter accumulate: %d\r\n", pulses_count_acum);
 800b7d6:	4b19      	ldr	r3, [pc, #100]	@ (800b83c <pulses_calc+0xb8>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	4b18      	ldr	r3, [pc, #96]	@ (800b840 <pulses_calc+0xbc>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	2002      	movs	r0, #2
 800b7e4:	f011 fa2c 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>

	/* Accumulate the pulses */
	pulses_count_total += pulses_count;
 800b7e8:	4b13      	ldr	r3, [pc, #76]	@ (800b838 <pulses_calc+0xb4>)
 800b7ea:	881b      	ldrh	r3, [r3, #0]
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	4b15      	ldr	r3, [pc, #84]	@ (800b844 <pulses_calc+0xc0>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	4a13      	ldr	r2, [pc, #76]	@ (800b844 <pulses_calc+0xc0>)
 800b7f6:	6013      	str	r3, [r2, #0]
	APP_LOG(TS_OFF, VLEVEL_M, "Pulses counter: %d\r\n", pulses_count);
 800b7f8:	4b0f      	ldr	r3, [pc, #60]	@ (800b838 <pulses_calc+0xb4>)
 800b7fa:	881b      	ldrh	r3, [r3, #0]
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	4b12      	ldr	r3, [pc, #72]	@ (800b848 <pulses_calc+0xc4>)
 800b800:	2200      	movs	r2, #0
 800b802:	2100      	movs	r1, #0
 800b804:	2002      	movs	r0, #2
 800b806:	f011 fa1b 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>

	/* Update the previous pulses counted */
	APP_LOG(TS_OFF, VLEVEL_M, "Pulses counter total: %d\r\n", pulses_count_total);
 800b80a:	4b0e      	ldr	r3, [pc, #56]	@ (800b844 <pulses_calc+0xc0>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	9300      	str	r3, [sp, #0]
 800b810:	4b0e      	ldr	r3, [pc, #56]	@ (800b84c <pulses_calc+0xc8>)
 800b812:	2200      	movs	r2, #0
 800b814:	2100      	movs	r1, #0
 800b816:	2002      	movs	r0, #2
 800b818:	f011 fa12 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
	pulses_count_prev = pulses_count_curr;
 800b81c:	4b04      	ldr	r3, [pc, #16]	@ (800b830 <pulses_calc+0xac>)
 800b81e:	881a      	ldrh	r2, [r3, #0]
 800b820:	4b04      	ldr	r3, [pc, #16]	@ (800b834 <pulses_calc+0xb0>)
 800b822:	801a      	strh	r2, [r3, #0]
}
 800b824:	bf00      	nop
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	2000021c 	.word	0x2000021c
 800b830:	200003f2 	.word	0x200003f2
 800b834:	200003f4 	.word	0x200003f4
 800b838:	200003f0 	.word	0x200003f0
 800b83c:	200003fc 	.word	0x200003fc
 800b840:	0801d398 	.word	0x0801d398
 800b844:	200003f8 	.word	0x200003f8
 800b848:	0801d3b8 	.word	0x0801d3b8
 800b84c:	0801d3d0 	.word	0x0801d3d0

0800b850 <on_pulses_counter_timer_event>:

static void on_pulses_counter_timer_event(void *context)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
	pulses_calc();
 800b858:	f7ff ff94 	bl	800b784 <pulses_calc>
}
 800b85c:	bf00      	nop
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <OnTxTimerLedEvent>:

static void OnTxTimerLedEvent(void *context)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PULSES_LED_GPIO_Port, PULSES_LED_Pin, GPIO_PIN_RESET);
 800b86c:	2200      	movs	r2, #0
 800b86e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b876:	f7f9 fda3 	bl	80053c0 <HAL_GPIO_WritePin>
}
 800b87a:	bf00      	nop
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
	...

0800b884 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(JOIN_LED_GPIO_Port, JOIN_LED_Pin, GPIO_PIN_RESET);
 800b88c:	2200      	movs	r2, #0
 800b88e:	2140      	movs	r1, #64	@ 0x40
 800b890:	4803      	ldr	r0, [pc, #12]	@ (800b8a0 <OnJoinTimerLedEvent+0x1c>)
 800b892:	f7f9 fd95 	bl	80053c0 <HAL_GPIO_WritePin>
}
 800b896:	bf00      	nop
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	48000400 	.word	0x48000400

0800b8a4 <JoinProcess>:

static void JoinProcess(void) {
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(JOIN_LED_GPIO_Port, JOIN_LED_Pin, GPIO_PIN_SET);
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	2140      	movs	r1, #64	@ 0x40
 800b8ac:	480a      	ldr	r0, [pc, #40]	@ (800b8d8 <JoinProcess+0x34>)
 800b8ae:	f7f9 fd87 	bl	80053c0 <HAL_GPIO_WritePin>
  UTIL_TIMER_Start(&JoinLedTimer);
 800b8b2:	480a      	ldr	r0, [pc, #40]	@ (800b8dc <JoinProcess+0x38>)
 800b8b4:	f010 ff4c 	bl	801c750 <UTIL_TIMER_Start>

  APP_LOG(TS_OFF, VLEVEL_M, "Restarting join process...\r\n");
 800b8b8:	4b09      	ldr	r3, [pc, #36]	@ (800b8e0 <JoinProcess+0x3c>)
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	2100      	movs	r1, #0
 800b8be:	2002      	movs	r0, #2
 800b8c0:	f011 f9be 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerJoin(ActivationType, ForceRejoin);
 800b8c4:	4b07      	ldr	r3, [pc, #28]	@ (800b8e4 <JoinProcess+0x40>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	4a07      	ldr	r2, [pc, #28]	@ (800b8e8 <JoinProcess+0x44>)
 800b8ca:	7812      	ldrb	r2, [r2, #0]
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f002 f982 	bl	800dbd8 <LmHandlerJoin>
}
 800b8d4:	bf00      	nop
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	48000400 	.word	0x48000400
 800b8dc:	20000430 	.word	0x20000430
 800b8e0:	0801d3ec 	.word	0x0801d3ec
 800b8e4:	20000009 	.word	0x20000009
 800b8e8:	2000000a 	.word	0x2000000a

0800b8ec <OnJoinProcessTimerEvent>:

static void OnJoinProcessTimerEvent(void *context) {
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_JoinProcess), CFG_SEQ_Prio_0);
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	2010      	movs	r0, #16
 800b8f8:	f010 fe74 	bl	801c5e4 <UTIL_SEQ_SetTask>
}
 800b8fc:	bf00      	nop
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <OnTxData>:
/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b086      	sub	sp, #24
 800b908:	af04      	add	r7, sp, #16
 800b90a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d048      	beq.n	800b9a4 <OnTxData+0xa0>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d044      	beq.n	800b9a4 <OnTxData+0xa0>
    {
    	HAL_GPIO_WritePin(PULSES_LED_GPIO_Port, PULSES_LED_Pin, GPIO_PIN_SET);
 800b91a:	2201      	movs	r2, #1
 800b91c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b920:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b924:	f7f9 fd4c 	bl	80053c0 <HAL_GPIO_WritePin>
    	UTIL_TIMER_Start(&TxLedTimer);
 800b928:	4820      	ldr	r0, [pc, #128]	@ (800b9ac <OnTxData+0xa8>)
 800b92a:	f010 ff11 	bl	801c750 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800b92e:	4b20      	ldr	r3, [pc, #128]	@ (800b9b0 <OnTxData+0xac>)
 800b930:	2200      	movs	r2, #0
 800b932:	2100      	movs	r1, #0
 800b934:	2002      	movs	r0, #2
 800b936:	f011 f983 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	7c12      	ldrb	r2, [r2, #16]
 800b942:	4611      	mov	r1, r2
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800b94a:	4610      	mov	r0, r2
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800b952:	9203      	str	r2, [sp, #12]
 800b954:	9002      	str	r0, [sp, #8]
 800b956:	9101      	str	r1, [sp, #4]
 800b958:	9300      	str	r3, [sp, #0]
 800b95a:	4b16      	ldr	r3, [pc, #88]	@ (800b9b4 <OnTxData+0xb0>)
 800b95c:	2200      	movs	r2, #0
 800b95e:	2100      	movs	r1, #0
 800b960:	2003      	movs	r0, #3
 800b962:	f011 f96d 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800b966:	4b14      	ldr	r3, [pc, #80]	@ (800b9b8 <OnTxData+0xb4>)
 800b968:	2200      	movs	r2, #0
 800b96a:	2100      	movs	r1, #0
 800b96c:	2003      	movs	r0, #3
 800b96e:	f011 f967 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	7a1b      	ldrb	r3, [r3, #8]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d10e      	bne.n	800b998 <OnTxData+0x94>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	7a5b      	ldrb	r3, [r3, #9]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <OnTxData+0x82>
 800b982:	4b0e      	ldr	r3, [pc, #56]	@ (800b9bc <OnTxData+0xb8>)
 800b984:	e000      	b.n	800b988 <OnTxData+0x84>
 800b986:	4b0e      	ldr	r3, [pc, #56]	@ (800b9c0 <OnTxData+0xbc>)
 800b988:	9300      	str	r3, [sp, #0]
 800b98a:	4b0e      	ldr	r3, [pc, #56]	@ (800b9c4 <OnTxData+0xc0>)
 800b98c:	2200      	movs	r2, #0
 800b98e:	2100      	movs	r1, #0
 800b990:	2003      	movs	r0, #3
 800b992:	f011 f955 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800b996:	e005      	b.n	800b9a4 <OnTxData+0xa0>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800b998:	4b0b      	ldr	r3, [pc, #44]	@ (800b9c8 <OnTxData+0xc4>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	2100      	movs	r1, #0
 800b99e:	2003      	movs	r0, #3
 800b9a0:	f011 f94e 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
}
 800b9a4:	bf00      	nop
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	20000418 	.word	0x20000418
 800b9b0:	0801d40c 	.word	0x0801d40c
 800b9b4:	0801d440 	.word	0x0801d440
 800b9b8:	0801d474 	.word	0x0801d474
 800b9bc:	0801d484 	.word	0x0801d484
 800b9c0:	0801d488 	.word	0x0801d488
 800b9c4:	0801d490 	.word	0x0801d490
 800b9c8:	0801d4a4 	.word	0x0801d4a4

0800b9cc <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af02      	add	r7, sp, #8
 800b9d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d040      	beq.n	800ba5c <OnJoinRequest+0x90>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d126      	bne.n	800ba32 <OnJoinRequest+0x66>
    {
    	UTIL_TIMER_Stop(&JoinProcessTimer);
 800b9e4:	481f      	ldr	r0, [pc, #124]	@ (800ba64 <OnJoinRequest+0x98>)
 800b9e6:	f010 ff21 	bl	801c82c <UTIL_TIMER_Stop>
      UTIL_TIMER_Stop(&JoinLedTimer);
 800b9ea:	481f      	ldr	r0, [pc, #124]	@ (800ba68 <OnJoinRequest+0x9c>)
 800b9ec:	f010 ff1e 	bl	801c82c <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(JOIN_LED_GPIO_Port, JOIN_LED_Pin, GPIO_PIN_RESET); /* LED_RED */
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	2140      	movs	r1, #64	@ 0x40
 800b9f4:	481d      	ldr	r0, [pc, #116]	@ (800ba6c <OnJoinRequest+0xa0>)
 800b9f6:	f7f9 fce3 	bl	80053c0 <HAL_GPIO_WritePin>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800b9fa:	4b1d      	ldr	r3, [pc, #116]	@ (800ba70 <OnJoinRequest+0xa4>)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	2100      	movs	r1, #0
 800ba00:	2002      	movs	r0, #2
 800ba02:	f011 f91d 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	79db      	ldrb	r3, [r3, #7]
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d106      	bne.n	800ba1c <OnJoinRequest+0x50>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800ba0e:	4b19      	ldr	r3, [pc, #100]	@ (800ba74 <OnJoinRequest+0xa8>)
 800ba10:	2200      	movs	r2, #0
 800ba12:	2100      	movs	r1, #0
 800ba14:	2002      	movs	r0, #2
 800ba16:	f011 f913 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
 800ba1a:	e005      	b.n	800ba28 <OnJoinRequest+0x5c>
      }
      else
      {
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800ba1c:	4b16      	ldr	r3, [pc, #88]	@ (800ba78 <OnJoinRequest+0xac>)
 800ba1e:	2200      	movs	r2, #0
 800ba20:	2100      	movs	r1, #0
 800ba22:	2002      	movs	r0, #2
 800ba24:	f011 f90c 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
      }

      /* Store context */
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800ba28:	2100      	movs	r1, #0
 800ba2a:	2004      	movs	r0, #4
 800ba2c:	f010 fdda 	bl	801c5e4 <UTIL_SEQ_SetTask>
 800ba30:	e005      	b.n	800ba3e <OnJoinRequest+0x72>
    }
    else
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800ba32:	4b12      	ldr	r3, [pc, #72]	@ (800ba7c <OnJoinRequest+0xb0>)
 800ba34:	2200      	movs	r2, #0
 800ba36:	2100      	movs	r1, #0
 800ba38:	2002      	movs	r0, #2
 800ba3a:	f011 f901 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
    }

    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ba44:	461a      	mov	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800ba4c:	9301      	str	r3, [sp, #4]
 800ba4e:	9200      	str	r2, [sp, #0]
 800ba50:	4b0b      	ldr	r3, [pc, #44]	@ (800ba80 <OnJoinRequest+0xb4>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	2100      	movs	r1, #0
 800ba56:	2003      	movs	r0, #3
 800ba58:	f011 f8f2 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800ba5c:	bf00      	nop
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	20000448 	.word	0x20000448
 800ba68:	20000430 	.word	0x20000430
 800ba6c:	48000400 	.word	0x48000400
 800ba70:	0801d4b4 	.word	0x0801d4b4
 800ba74:	0801d4cc 	.word	0x0801d4cc
 800ba78:	0801d4ec 	.word	0x0801d4ec
 800ba7c:	0801d50c 	.word	0x0801d50c
 800ba80:	0801d528 	.word	0x0801d528

0800ba84 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800ba8c:	bf00      	nop
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bc80      	pop	{r7}
 800ba94:	4770      	bx	lr

0800ba96 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800ba96:	b480      	push	{r7}
 800ba98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800ba9a:	bf00      	nop
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bc80      	pop	{r7}
 800baa0:	4770      	bx	lr

0800baa2 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800baa2:	b480      	push	{r7}
 800baa4:	b083      	sub	sp, #12
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	4603      	mov	r3, r0
 800baaa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  /* USER CODE END OnClassChange_1 */
}
 800baac:	bf00      	nop
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bc80      	pop	{r7}
 800bab4:	4770      	bx	lr

0800bab6 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800baba:	2100      	movs	r1, #0
 800babc:	2001      	movs	r0, #1
 800babe:	f010 fd91 	bl	801c5e4 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800bac2:	bf00      	nop
 800bac4:	bd80      	pop	{r7, pc}
	...

0800bac8 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800bad0:	4a0d      	ldr	r2, [pc, #52]	@ (800bb08 <OnTxPeriodicityChanged+0x40>)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800bad6:	4b0c      	ldr	r3, [pc, #48]	@ (800bb08 <OnTxPeriodicityChanged+0x40>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d103      	bne.n	800bae6 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800bade:	4b0a      	ldr	r3, [pc, #40]	@ (800bb08 <OnTxPeriodicityChanged+0x40>)
 800bae0:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bae4:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800bae6:	4809      	ldr	r0, [pc, #36]	@ (800bb0c <OnTxPeriodicityChanged+0x44>)
 800bae8:	f010 fea0 	bl	801c82c <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800baec:	4b06      	ldr	r3, [pc, #24]	@ (800bb08 <OnTxPeriodicityChanged+0x40>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4619      	mov	r1, r3
 800baf2:	4806      	ldr	r0, [pc, #24]	@ (800bb0c <OnTxPeriodicityChanged+0x44>)
 800baf4:	f010 ff0a 	bl	801c90c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800baf8:	4804      	ldr	r0, [pc, #16]	@ (800bb0c <OnTxPeriodicityChanged+0x44>)
 800bafa:	f010 fe29 	bl	801c750 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800bafe:	bf00      	nop
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	20000074 	.word	0x20000074
 800bb0c:	200003c0 	.word	0x200003c0

0800bb10 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	4603      	mov	r3, r0
 800bb18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800bb1a:	4a04      	ldr	r2, [pc, #16]	@ (800bb2c <OnTxFrameCtrlChanged+0x1c>)
 800bb1c:	79fb      	ldrb	r3, [r7, #7]
 800bb1e:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800bb20:	bf00      	nop
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bc80      	pop	{r7}
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	20000058 	.word	0x20000058

0800bb30 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	4603      	mov	r3, r0
 800bb38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800bb3a:	4a04      	ldr	r2, [pc, #16]	@ (800bb4c <OnPingSlotPeriodicityChanged+0x1c>)
 800bb3c:	79fb      	ldrb	r3, [r7, #7]
 800bb3e:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800bb40:	bf00      	nop
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bc80      	pop	{r7}
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	20000058 	.word	0x20000058

0800bb50 <OnSystemReset>:

static void OnSystemReset(void)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800bb54:	f002 fe0b 	bl	800e76e <LmHandlerHalt>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d106      	bne.n	800bb6c <OnSystemReset+0x1c>
 800bb5e:	f002 f8df 	bl	800dd20 <LmHandlerJoinStatus>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d101      	bne.n	800bb6c <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800bb68:	f7ff fae6 	bl	800b138 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800bb6c:	bf00      	nop
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <StopJoin>:

static void StopJoin(void)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800bb74:	4817      	ldr	r0, [pc, #92]	@ (800bbd4 <StopJoin+0x64>)
 800bb76:	f010 fe59 	bl	801c82c <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800bb7a:	f002 fdeb 	bl	800e754 <LmHandlerStop>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d006      	beq.n	800bb92 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800bb84:	4b14      	ldr	r3, [pc, #80]	@ (800bbd8 <StopJoin+0x68>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	2100      	movs	r1, #0
 800bb8a:	2002      	movs	r0, #2
 800bb8c:	f011 f858 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
 800bb90:	e01a      	b.n	800bbc8 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800bb92:	4b12      	ldr	r3, [pc, #72]	@ (800bbdc <StopJoin+0x6c>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	2100      	movs	r1, #0
 800bb98:	2002      	movs	r0, #2
 800bb9a:	f011 f851 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800bb9e:	4b10      	ldr	r3, [pc, #64]	@ (800bbe0 <StopJoin+0x70>)
 800bba0:	2201      	movs	r2, #1
 800bba2:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800bba4:	4b0f      	ldr	r3, [pc, #60]	@ (800bbe4 <StopJoin+0x74>)
 800bba6:	2200      	movs	r2, #0
 800bba8:	2100      	movs	r1, #0
 800bbaa:	2002      	movs	r0, #2
 800bbac:	f011 f848 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800bbb0:	480d      	ldr	r0, [pc, #52]	@ (800bbe8 <StopJoin+0x78>)
 800bbb2:	f001 fead 	bl	800d910 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800bbb6:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe0 <StopJoin+0x70>)
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	2101      	movs	r1, #1
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f002 f80b 	bl	800dbd8 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800bbc2:	4804      	ldr	r0, [pc, #16]	@ (800bbd4 <StopJoin+0x64>)
 800bbc4:	f010 fdc4 	bl	801c750 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800bbc8:	4808      	ldr	r0, [pc, #32]	@ (800bbec <StopJoin+0x7c>)
 800bbca:	f010 fdc1 	bl	801c750 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800bbce:	bf00      	nop
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	200003c0 	.word	0x200003c0
 800bbd8:	0801d554 	.word	0x0801d554
 800bbdc:	0801d574 	.word	0x0801d574
 800bbe0:	20000009 	.word	0x20000009
 800bbe4:	0801d588 	.word	0x0801d588
 800bbe8:	20000058 	.word	0x20000058
 800bbec:	200003d8 	.word	0x200003d8

0800bbf0 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800bbf8:	4b05      	ldr	r3, [pc, #20]	@ (800bc10 <OnStopJoinTimerEvent+0x20>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	2b02      	cmp	r3, #2
 800bbfe:	d103      	bne.n	800bc08 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800bc00:	2100      	movs	r1, #0
 800bc02:	2008      	movs	r0, #8
 800bc04:	f010 fcee 	bl	801c5e4 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800bc08:	bf00      	nop
 800bc0a:	3708      	adds	r7, #8
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20000009 	.word	0x20000009

0800bc14 <StoreContext>:

static void StoreContext(void)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800bc1a:	23ff      	movs	r3, #255	@ 0xff
 800bc1c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800bc1e:	f002 fddb 	bl	800e7d8 <LmHandlerNvmDataStore>
 800bc22:	4603      	mov	r3, r0
 800bc24:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800bc26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc2a:	f113 0f08 	cmn.w	r3, #8
 800bc2e:	d106      	bne.n	800bc3e <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800bc30:	4b0a      	ldr	r3, [pc, #40]	@ (800bc5c <StoreContext+0x48>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	2100      	movs	r1, #0
 800bc36:	2002      	movs	r0, #2
 800bc38:	f011 f802 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800bc3c:	e00a      	b.n	800bc54 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800bc3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc46:	d105      	bne.n	800bc54 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800bc48:	4b05      	ldr	r3, [pc, #20]	@ (800bc60 <StoreContext+0x4c>)
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	2002      	movs	r0, #2
 800bc50:	f010 fff6 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
}
 800bc54:	bf00      	nop
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	0801d5a8 	.word	0x0801d5a8
 800bc60:	0801d5c0 	.word	0x0801d5c0

0800bc64 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800bc6e:	79fb      	ldrb	r3, [r7, #7]
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d106      	bne.n	800bc82 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800bc74:	4b08      	ldr	r3, [pc, #32]	@ (800bc98 <OnNvmDataChange+0x34>)
 800bc76:	2200      	movs	r2, #0
 800bc78:	2100      	movs	r1, #0
 800bc7a:	2002      	movs	r0, #2
 800bc7c:	f010 ffe0 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800bc80:	e005      	b.n	800bc8e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800bc82:	4b06      	ldr	r3, [pc, #24]	@ (800bc9c <OnNvmDataChange+0x38>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	2100      	movs	r1, #0
 800bc88:	2002      	movs	r0, #2
 800bc8a:	f010 ffd9 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
}
 800bc8e:	bf00      	nop
 800bc90:	3708      	adds	r7, #8
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	0801d5d8 	.word	0x0801d5d8
 800bc9c:	0801d5ec 	.word	0x0801d5ec

0800bca0 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800bcaa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800bcae:	4807      	ldr	r0, [pc, #28]	@ (800bccc <OnStoreContextRequest+0x2c>)
 800bcb0:	f7f5 fa7c 	bl	80011ac <FLASH_IF_Erase>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d104      	bne.n	800bcc4 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800bcba:	683a      	ldr	r2, [r7, #0]
 800bcbc:	6879      	ldr	r1, [r7, #4]
 800bcbe:	4803      	ldr	r0, [pc, #12]	@ (800bccc <OnStoreContextRequest+0x2c>)
 800bcc0:	f7f5 fa24 	bl	800110c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800bcc4:	bf00      	nop
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	0803f000 	.word	0x0803f000

0800bcd0 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800bcda:	683a      	ldr	r2, [r7, #0]
 800bcdc:	4903      	ldr	r1, [pc, #12]	@ (800bcec <OnRestoreContextRequest+0x1c>)
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f7f5 fa3c 	bl	800115c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800bce4:	bf00      	nop
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	0803f000 	.word	0x0803f000

0800bcf0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800bcf4:	4b15      	ldr	r3, [pc, #84]	@ (800bd4c <LoraInfo_Init+0x5c>)
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800bcfa:	4b14      	ldr	r3, [pc, #80]	@ (800bd4c <LoraInfo_Init+0x5c>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800bd00:	4b12      	ldr	r3, [pc, #72]	@ (800bd4c <LoraInfo_Init+0x5c>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800bd06:	4b11      	ldr	r3, [pc, #68]	@ (800bd4c <LoraInfo_Init+0x5c>)
 800bd08:	2200      	movs	r2, #0
 800bd0a:	60da      	str	r2, [r3, #12]

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
#endif /* REGION_AS923 */
#ifdef  REGION_AU915
  loraInfo.Region |= (1 << LORAMAC_REGION_AU915);
 800bd0c:	4b0f      	ldr	r3, [pc, #60]	@ (800bd4c <LoraInfo_Init+0x5c>)
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	f043 0302 	orr.w	r3, r3, #2
 800bd14:	4a0d      	ldr	r2, [pc, #52]	@ (800bd4c <LoraInfo_Init+0x5c>)
 800bd16:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800bd18:	4b0c      	ldr	r3, [pc, #48]	@ (800bd4c <LoraInfo_Init+0x5c>)
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d10d      	bne.n	800bd3c <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800bd20:	4b0b      	ldr	r3, [pc, #44]	@ (800bd50 <LoraInfo_Init+0x60>)
 800bd22:	2200      	movs	r2, #0
 800bd24:	2100      	movs	r1, #0
 800bd26:	2000      	movs	r0, #0
 800bd28:	f010 ff8a 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800bd2c:	bf00      	nop
 800bd2e:	f010 ff75 	bl	801cc1c <UTIL_ADV_TRACE_IsBufferEmpty>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d1fa      	bne.n	800bd2e <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800bd38:	bf00      	nop
 800bd3a:	e7fd      	b.n	800bd38 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800bd3c:	4b03      	ldr	r3, [pc, #12]	@ (800bd4c <LoraInfo_Init+0x5c>)
 800bd3e:	2200      	movs	r2, #0
 800bd40:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800bd42:	4b02      	ldr	r3, [pc, #8]	@ (800bd4c <LoraInfo_Init+0x5c>)
 800bd44:	2201      	movs	r2, #1
 800bd46:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800bd48:	bf00      	nop
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	20000554 	.word	0x20000554
 800bd50:	0801d600 	.word	0x0801d600

0800bd54 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800bd54:	b480      	push	{r7}
 800bd56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800bd58:	4b02      	ldr	r3, [pc, #8]	@ (800bd64 <LoraInfo_GetPtr+0x10>)
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bc80      	pop	{r7}
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	20000554 	.word	0x20000554

0800bd68 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b086      	sub	sp, #24
 800bd6c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
	GPIO_InitTypeDef gpio_init_structure = {0};
 800bd72:	463b      	mov	r3, r7
 800bd74:	2200      	movs	r2, #0
 800bd76:	601a      	str	r2, [r3, #0]
 800bd78:	605a      	str	r2, [r3, #4]
 800bd7a:	609a      	str	r2, [r3, #8]
 800bd7c:	60da      	str	r2, [r3, #12]
 800bd7e:	611a      	str	r2, [r3, #16]

	/* Configure the Radio Switch pin 1 */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800bd80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd84:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800bd86:	2301      	movs	r3, #1
 800bd88:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd8e:	2303      	movs	r3, #3
 800bd90:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800bd92:	463b      	mov	r3, r7
 800bd94:	4619      	mov	r1, r3
 800bd96:	480e      	ldr	r0, [pc, #56]	@ (800bdd0 <RBI_Init+0x68>)
 800bd98:	f7f9 f8e4 	bl	8004f64 <HAL_GPIO_Init>

	/* Configure the Radio Switch pin 1 */
	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800bd9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bda0:	603b      	str	r3, [r7, #0]

	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800bda2:	463b      	mov	r3, r7
 800bda4:	4619      	mov	r1, r3
 800bda6:	480b      	ldr	r0, [pc, #44]	@ (800bdd4 <RBI_Init+0x6c>)
 800bda8:	f7f9 f8dc 	bl	8004f64 <HAL_GPIO_Init>

	/* Reset both pins */
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800bdac:	2200      	movs	r2, #0
 800bdae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bdb2:	4807      	ldr	r0, [pc, #28]	@ (800bdd0 <RBI_Init+0x68>)
 800bdb4:	f7f9 fb04 	bl	80053c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800bdbe:	4805      	ldr	r0, [pc, #20]	@ (800bdd4 <RBI_Init+0x6c>)
 800bdc0:	f7f9 fafe 	bl	80053c0 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800bdc4:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3718      	adds	r7, #24
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	48000400 	.word	0x48000400
 800bdd4:	48000800 	.word	0x48000800

0800bdd8 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	4603      	mov	r3, r0
 800bde0:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800bde2:	2300      	movs	r3, #0
 800bde4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
	switch (Config) {
 800bde6:	79fb      	ldrb	r3, [r7, #7]
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	d83f      	bhi.n	800be6c <RBI_ConfigRFSwitch+0x94>
 800bdec:	a201      	add	r2, pc, #4	@ (adr r2, 800bdf4 <RBI_ConfigRFSwitch+0x1c>)
 800bdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf2:	bf00      	nop
 800bdf4:	0800be05 	.word	0x0800be05
 800bdf8:	0800be1f 	.word	0x0800be1f
 800bdfc:	0800be39 	.word	0x0800be39
 800be00:	0800be53 	.word	0x0800be53
		case RBI_SWITCH_OFF: {
			/* Turn off the switch */
			//APP_LOGS (ITS_OFF, VLEVEL_M, "RF_SWITCH: OFF\r\n");
			HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800be04:	2200      	movs	r2, #0
 800be06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800be0a:	481b      	ldr	r0, [pc, #108]	@ (800be78 <RBI_ConfigRFSwitch+0xa0>)
 800be0c:	f7f9 fad8 	bl	80053c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800be10:	2200      	movs	r2, #0
 800be12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800be16:	4819      	ldr	r0, [pc, #100]	@ (800be7c <RBI_ConfigRFSwitch+0xa4>)
 800be18:	f7f9 fad2 	bl	80053c0 <HAL_GPIO_WritePin>
			break;
 800be1c:	e027      	b.n	800be6e <RBI_ConfigRFSwitch+0x96>
		}
		case RBI_SWITCH_RX: {
			/* Turns On in Rx Mode the RF Switch*/
			//APP_LOGS (ITS_OFF, VLEVEL_M, "RF_SWITCH: RX\r\n");
			HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800be1e:	2201      	movs	r2, #1
 800be20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800be24:	4814      	ldr	r0, [pc, #80]	@ (800be78 <RBI_ConfigRFSwitch+0xa0>)
 800be26:	f7f9 facb 	bl	80053c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800be2a:	2200      	movs	r2, #0
 800be2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800be30:	4812      	ldr	r0, [pc, #72]	@ (800be7c <RBI_ConfigRFSwitch+0xa4>)
 800be32:	f7f9 fac5 	bl	80053c0 <HAL_GPIO_WritePin>
			break;
 800be36:	e01a      	b.n	800be6e <RBI_ConfigRFSwitch+0x96>
		}
		case RBI_SWITCH_RFO_LP: {
			/* Turns On in Tx Low Power the RF Switch*/
			//APP_LOGS (ITS_OFF, VLEVEL_M, "RF_SWITCH: LP\r\n");
			HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800be38:	2201      	movs	r2, #1
 800be3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800be3e:	480e      	ldr	r0, [pc, #56]	@ (800be78 <RBI_ConfigRFSwitch+0xa0>)
 800be40:	f7f9 fabe 	bl	80053c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800be44:	2201      	movs	r2, #1
 800be46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800be4a:	480c      	ldr	r0, [pc, #48]	@ (800be7c <RBI_ConfigRFSwitch+0xa4>)
 800be4c:	f7f9 fab8 	bl	80053c0 <HAL_GPIO_WritePin>
			break;
 800be50:	e00d      	b.n	800be6e <RBI_ConfigRFSwitch+0x96>
		}
		case RBI_SWITCH_RFO_HP: {
			/* Turns On in Tx High Power the RF Switch*/
			//APP_LOGS (ITS_OFF, VLEVEL_M, "RF_SWITCH: HP\r\n");
			HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800be52:	2200      	movs	r2, #0
 800be54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800be58:	4807      	ldr	r0, [pc, #28]	@ (800be78 <RBI_ConfigRFSwitch+0xa0>)
 800be5a:	f7f9 fab1 	bl	80053c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800be5e:	2201      	movs	r2, #1
 800be60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800be64:	4805      	ldr	r0, [pc, #20]	@ (800be7c <RBI_ConfigRFSwitch+0xa4>)
 800be66:	f7f9 faab 	bl	80053c0 <HAL_GPIO_WritePin>
			break;
 800be6a:	e000      	b.n	800be6e <RBI_ConfigRFSwitch+0x96>
		}
		default:
			break;
 800be6c:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800be6e:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800be70:	4618      	mov	r0, r3
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	48000400 	.word	0x48000400
 800be7c:	48000800 	.word	0x48000800

0800be80 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800be80:	b480      	push	{r7}
 800be82:	b083      	sub	sp, #12
 800be84:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800be86:	2302      	movs	r3, #2
 800be88:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800be8a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	bc80      	pop	{r7}
 800be94:	4770      	bx	lr

0800be96 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800be96:	b480      	push	{r7}
 800be98:	b083      	sub	sp, #12
 800be9a:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800be9c:	2300      	movs	r3, #0
 800be9e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800bea0:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	370c      	adds	r7, #12
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bc80      	pop	{r7}
 800beaa:	4770      	bx	lr

0800beac <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800beb2:	2301      	movs	r3, #1
 800beb4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800beb6:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800beb8:	4618      	mov	r0, r3
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bc80      	pop	{r7}
 800bec0:	4770      	bx	lr

0800bec2 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800bec2:	b480      	push	{r7}
 800bec4:	b085      	sub	sp, #20
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	4603      	mov	r3, r0
 800beca:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800becc:	2300      	movs	r3, #0
 800bece:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 800bed0:	79fb      	ldrb	r3, [r7, #7]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d102      	bne.n	800bedc <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800bed6:	230f      	movs	r3, #15
 800bed8:	60fb      	str	r3, [r7, #12]
 800beda:	e001      	b.n	800bee0 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800bedc:	2316      	movs	r3, #22
 800bede:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800bee0:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bc80      	pop	{r7}
 800beea:	4770      	bx	lr

0800beec <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	33f1      	adds	r3, #241	@ 0xf1
 800bef8:	2210      	movs	r2, #16
 800befa:	2100      	movs	r1, #0
 800befc:	4618      	mov	r0, r3
 800befe:	f00c fb39 	bl	8018574 <memset1>
    ctx->M_n = 0;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	22f0      	movs	r2, #240	@ 0xf0
 800bf0e:	2100      	movs	r1, #0
 800bf10:	4618      	mov	r0, r3
 800bf12:	f00c fb2f 	bl	8018574 <memset1>
}
 800bf16:	bf00      	nop
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b082      	sub	sp, #8
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
 800bf26:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	2110      	movs	r1, #16
 800bf2e:	6838      	ldr	r0, [r7, #0]
 800bf30:	f000 fe5c 	bl	800cbec <lorawan_aes_set_key>
}
 800bf34:	bf00      	nop
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b08c      	sub	sp, #48	@ 0x30
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	f000 80a1 	beq.w	800c096 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bf5a:	f1c3 0310 	rsb	r3, r3, #16
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	4293      	cmp	r3, r2
 800bf62:	bf28      	it	cs
 800bf64:	4613      	movcs	r3, r2
 800bf66:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bf74:	4413      	add	r3, r2
 800bf76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf78:	b292      	uxth	r2, r2
 800bf7a:	68b9      	ldr	r1, [r7, #8]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f00c fabe 	bl	80184fe <memcpy1>
        ctx->M_n += mlen;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800bf88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf8a:	441a      	add	r2, r3
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bf98:	2b0f      	cmp	r3, #15
 800bf9a:	f240 808d 	bls.w	800c0b8 <AES_CMAC_Update+0x17c>
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	f000 8088 	beq.w	800c0b8 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bfac:	e015      	b.n	800bfda <AES_CMAC_Update+0x9e>
 800bfae:	68fa      	ldr	r2, [r7, #12]
 800bfb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb2:	4413      	add	r3, r2
 800bfb4:	33f1      	adds	r3, #241	@ 0xf1
 800bfb6:	781a      	ldrb	r2, [r3, #0]
 800bfb8:	68f9      	ldr	r1, [r7, #12]
 800bfba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfbc:	440b      	add	r3, r1
 800bfbe:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	4053      	eors	r3, r2
 800bfc6:	b2d9      	uxtb	r1, r3
 800bfc8:	68fa      	ldr	r2, [r7, #12]
 800bfca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfcc:	4413      	add	r3, r2
 800bfce:	33f1      	adds	r3, #241	@ 0xf1
 800bfd0:	460a      	mov	r2, r1
 800bfd2:	701a      	strb	r2, [r3, #0]
 800bfd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bfda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfdc:	2b0f      	cmp	r3, #15
 800bfde:	dde6      	ble.n	800bfae <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800bfe6:	f107 0314 	add.w	r3, r7, #20
 800bfea:	2210      	movs	r2, #16
 800bfec:	4618      	mov	r0, r3
 800bfee:	f00c fa86 	bl	80184fe <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800bff2:	68fa      	ldr	r2, [r7, #12]
 800bff4:	f107 0114 	add.w	r1, r7, #20
 800bff8:	f107 0314 	add.w	r3, r7, #20
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 fed3 	bl	800cda8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	33f1      	adds	r3, #241	@ 0xf1
 800c006:	f107 0114 	add.w	r1, r7, #20
 800c00a:	2210      	movs	r2, #16
 800c00c:	4618      	mov	r0, r3
 800c00e:	f00c fa76 	bl	80184fe <memcpy1>

        data += mlen;
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c016:	4413      	add	r3, r2
 800c018:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c01e:	1ad3      	subs	r3, r2, r3
 800c020:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c022:	e038      	b.n	800c096 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800c024:	2300      	movs	r3, #0
 800c026:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c028:	e013      	b.n	800c052 <AES_CMAC_Update+0x116>
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02e:	4413      	add	r3, r2
 800c030:	33f1      	adds	r3, #241	@ 0xf1
 800c032:	781a      	ldrb	r2, [r3, #0]
 800c034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c036:	68b9      	ldr	r1, [r7, #8]
 800c038:	440b      	add	r3, r1
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	4053      	eors	r3, r2
 800c03e:	b2d9      	uxtb	r1, r3
 800c040:	68fa      	ldr	r2, [r7, #12]
 800c042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c044:	4413      	add	r3, r2
 800c046:	33f1      	adds	r3, #241	@ 0xf1
 800c048:	460a      	mov	r2, r1
 800c04a:	701a      	strb	r2, [r3, #0]
 800c04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c04e:	3301      	adds	r3, #1
 800c050:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c054:	2b0f      	cmp	r3, #15
 800c056:	dde8      	ble.n	800c02a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c05e:	f107 0314 	add.w	r3, r7, #20
 800c062:	2210      	movs	r2, #16
 800c064:	4618      	mov	r0, r3
 800c066:	f00c fa4a 	bl	80184fe <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	f107 0114 	add.w	r1, r7, #20
 800c070:	f107 0314 	add.w	r3, r7, #20
 800c074:	4618      	mov	r0, r3
 800c076:	f000 fe97 	bl	800cda8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	33f1      	adds	r3, #241	@ 0xf1
 800c07e:	f107 0114 	add.w	r1, r7, #20
 800c082:	2210      	movs	r2, #16
 800c084:	4618      	mov	r0, r3
 800c086:	f00c fa3a 	bl	80184fe <memcpy1>

        data += 16;
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	3310      	adds	r3, #16
 800c08e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	3b10      	subs	r3, #16
 800c094:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2b10      	cmp	r3, #16
 800c09a:	d8c3      	bhi.n	800c024 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	b292      	uxth	r2, r2
 800c0a6:	68b9      	ldr	r1, [r7, #8]
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f00c fa28 	bl	80184fe <memcpy1>
    ctx->M_n = len;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800c0b6:	e000      	b.n	800c0ba <AES_CMAC_Update+0x17e>
            return;
 800c0b8:	bf00      	nop
}
 800c0ba:	3730      	adds	r7, #48	@ 0x30
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b092      	sub	sp, #72	@ 0x48
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800c0ca:	f107 031c 	add.w	r3, r7, #28
 800c0ce:	2210      	movs	r2, #16
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f00c fa4e 	bl	8018574 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800c0d8:	683a      	ldr	r2, [r7, #0]
 800c0da:	f107 011c 	add.w	r1, r7, #28
 800c0de:	f107 031c 	add.w	r3, r7, #28
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f000 fe60 	bl	800cda8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c0e8:	7f3b      	ldrb	r3, [r7, #28]
 800c0ea:	b25b      	sxtb	r3, r3
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	da30      	bge.n	800c152 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0f4:	e01b      	b.n	800c12e <AES_CMAC_Final+0x6e>
 800c0f6:	f107 021c 	add.w	r2, r7, #28
 800c0fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0fc:	4413      	add	r3, r2
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	005b      	lsls	r3, r3, #1
 800c102:	b25a      	sxtb	r2, r3
 800c104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c106:	3301      	adds	r3, #1
 800c108:	3348      	adds	r3, #72	@ 0x48
 800c10a:	443b      	add	r3, r7
 800c10c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c110:	09db      	lsrs	r3, r3, #7
 800c112:	b2db      	uxtb	r3, r3
 800c114:	b25b      	sxtb	r3, r3
 800c116:	4313      	orrs	r3, r2
 800c118:	b25b      	sxtb	r3, r3
 800c11a:	b2d9      	uxtb	r1, r3
 800c11c:	f107 021c 	add.w	r2, r7, #28
 800c120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c122:	4413      	add	r3, r2
 800c124:	460a      	mov	r2, r1
 800c126:	701a      	strb	r2, [r3, #0]
 800c128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c12a:	3301      	adds	r3, #1
 800c12c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c12e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c130:	2b0e      	cmp	r3, #14
 800c132:	dde0      	ble.n	800c0f6 <AES_CMAC_Final+0x36>
 800c134:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c138:	005b      	lsls	r3, r3, #1
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800c140:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c144:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800c148:	43db      	mvns	r3, r3
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c150:	e027      	b.n	800c1a2 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800c152:	2300      	movs	r3, #0
 800c154:	643b      	str	r3, [r7, #64]	@ 0x40
 800c156:	e01b      	b.n	800c190 <AES_CMAC_Final+0xd0>
 800c158:	f107 021c 	add.w	r2, r7, #28
 800c15c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c15e:	4413      	add	r3, r2
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	005b      	lsls	r3, r3, #1
 800c164:	b25a      	sxtb	r2, r3
 800c166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c168:	3301      	adds	r3, #1
 800c16a:	3348      	adds	r3, #72	@ 0x48
 800c16c:	443b      	add	r3, r7
 800c16e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c172:	09db      	lsrs	r3, r3, #7
 800c174:	b2db      	uxtb	r3, r3
 800c176:	b25b      	sxtb	r3, r3
 800c178:	4313      	orrs	r3, r2
 800c17a:	b25b      	sxtb	r3, r3
 800c17c:	b2d9      	uxtb	r1, r3
 800c17e:	f107 021c 	add.w	r2, r7, #28
 800c182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c184:	4413      	add	r3, r2
 800c186:	460a      	mov	r2, r1
 800c188:	701a      	strb	r2, [r3, #0]
 800c18a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c18c:	3301      	adds	r3, #1
 800c18e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c192:	2b0e      	cmp	r3, #14
 800c194:	dde0      	ble.n	800c158 <AES_CMAC_Final+0x98>
 800c196:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c19a:	005b      	lsls	r3, r3, #1
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c1a8:	2b10      	cmp	r3, #16
 800c1aa:	d11d      	bne.n	800c1e8 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1b0:	e016      	b.n	800c1e0 <AES_CMAC_Final+0x120>
 800c1b2:	683a      	ldr	r2, [r7, #0]
 800c1b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1b6:	4413      	add	r3, r2
 800c1b8:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c1bc:	781a      	ldrb	r2, [r3, #0]
 800c1be:	f107 011c 	add.w	r1, r7, #28
 800c1c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1c4:	440b      	add	r3, r1
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	4053      	eors	r3, r2
 800c1ca:	b2d9      	uxtb	r1, r3
 800c1cc:	683a      	ldr	r2, [r7, #0]
 800c1ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1d0:	4413      	add	r3, r2
 800c1d2:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c1d6:	460a      	mov	r2, r1
 800c1d8:	701a      	strb	r2, [r3, #0]
 800c1da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1dc:	3301      	adds	r3, #1
 800c1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1e2:	2b0f      	cmp	r3, #15
 800c1e4:	dde5      	ble.n	800c1b2 <AES_CMAC_Final+0xf2>
 800c1e6:	e096      	b.n	800c316 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c1e8:	7f3b      	ldrb	r3, [r7, #28]
 800c1ea:	b25b      	sxtb	r3, r3
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	da30      	bge.n	800c252 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c1f4:	e01b      	b.n	800c22e <AES_CMAC_Final+0x16e>
 800c1f6:	f107 021c 	add.w	r2, r7, #28
 800c1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1fc:	4413      	add	r3, r2
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	005b      	lsls	r3, r3, #1
 800c202:	b25a      	sxtb	r2, r3
 800c204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c206:	3301      	adds	r3, #1
 800c208:	3348      	adds	r3, #72	@ 0x48
 800c20a:	443b      	add	r3, r7
 800c20c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c210:	09db      	lsrs	r3, r3, #7
 800c212:	b2db      	uxtb	r3, r3
 800c214:	b25b      	sxtb	r3, r3
 800c216:	4313      	orrs	r3, r2
 800c218:	b25b      	sxtb	r3, r3
 800c21a:	b2d9      	uxtb	r1, r3
 800c21c:	f107 021c 	add.w	r2, r7, #28
 800c220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c222:	4413      	add	r3, r2
 800c224:	460a      	mov	r2, r1
 800c226:	701a      	strb	r2, [r3, #0]
 800c228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c22a:	3301      	adds	r3, #1
 800c22c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c230:	2b0e      	cmp	r3, #14
 800c232:	dde0      	ble.n	800c1f6 <AES_CMAC_Final+0x136>
 800c234:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c238:	005b      	lsls	r3, r3, #1
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800c240:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c244:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800c248:	43db      	mvns	r3, r3
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c250:	e027      	b.n	800c2a2 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800c252:	2300      	movs	r3, #0
 800c254:	637b      	str	r3, [r7, #52]	@ 0x34
 800c256:	e01b      	b.n	800c290 <AES_CMAC_Final+0x1d0>
 800c258:	f107 021c 	add.w	r2, r7, #28
 800c25c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c25e:	4413      	add	r3, r2
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	b25a      	sxtb	r2, r3
 800c266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c268:	3301      	adds	r3, #1
 800c26a:	3348      	adds	r3, #72	@ 0x48
 800c26c:	443b      	add	r3, r7
 800c26e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c272:	09db      	lsrs	r3, r3, #7
 800c274:	b2db      	uxtb	r3, r3
 800c276:	b25b      	sxtb	r3, r3
 800c278:	4313      	orrs	r3, r2
 800c27a:	b25b      	sxtb	r3, r3
 800c27c:	b2d9      	uxtb	r1, r3
 800c27e:	f107 021c 	add.w	r2, r7, #28
 800c282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c284:	4413      	add	r3, r2
 800c286:	460a      	mov	r2, r1
 800c288:	701a      	strb	r2, [r3, #0]
 800c28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c28c:	3301      	adds	r3, #1
 800c28e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c292:	2b0e      	cmp	r3, #14
 800c294:	dde0      	ble.n	800c258 <AES_CMAC_Final+0x198>
 800c296:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c29a:	005b      	lsls	r3, r3, #1
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c2a8:	683a      	ldr	r2, [r7, #0]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	2280      	movs	r2, #128	@ 0x80
 800c2ae:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800c2b2:	e007      	b.n	800c2c4 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c2ba:	683a      	ldr	r2, [r7, #0]
 800c2bc:	4413      	add	r3, r2
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c2ca:	1c5a      	adds	r2, r3, #1
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c2d8:	2b0f      	cmp	r3, #15
 800c2da:	d9eb      	bls.n	800c2b4 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800c2dc:	2300      	movs	r3, #0
 800c2de:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2e0:	e016      	b.n	800c310 <AES_CMAC_Final+0x250>
 800c2e2:	683a      	ldr	r2, [r7, #0]
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e6:	4413      	add	r3, r2
 800c2e8:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c2ec:	781a      	ldrb	r2, [r3, #0]
 800c2ee:	f107 011c 	add.w	r1, r7, #28
 800c2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f4:	440b      	add	r3, r1
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	4053      	eors	r3, r2
 800c2fa:	b2d9      	uxtb	r1, r3
 800c2fc:	683a      	ldr	r2, [r7, #0]
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c300:	4413      	add	r3, r2
 800c302:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c306:	460a      	mov	r2, r1
 800c308:	701a      	strb	r2, [r3, #0]
 800c30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30c:	3301      	adds	r3, #1
 800c30e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c312:	2b0f      	cmp	r3, #15
 800c314:	dde5      	ble.n	800c2e2 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800c316:	2300      	movs	r3, #0
 800c318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c31a:	e015      	b.n	800c348 <AES_CMAC_Final+0x288>
 800c31c:	683a      	ldr	r2, [r7, #0]
 800c31e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c320:	4413      	add	r3, r2
 800c322:	33f1      	adds	r3, #241	@ 0xf1
 800c324:	781a      	ldrb	r2, [r3, #0]
 800c326:	6839      	ldr	r1, [r7, #0]
 800c328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c32a:	440b      	add	r3, r1
 800c32c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	4053      	eors	r3, r2
 800c334:	b2d9      	uxtb	r1, r3
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c33a:	4413      	add	r3, r2
 800c33c:	33f1      	adds	r3, #241	@ 0xf1
 800c33e:	460a      	mov	r2, r1
 800c340:	701a      	strb	r2, [r3, #0]
 800c342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c344:	3301      	adds	r3, #1
 800c346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c34a:	2b0f      	cmp	r3, #15
 800c34c:	dde6      	ble.n	800c31c <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c354:	f107 030c 	add.w	r3, r7, #12
 800c358:	2210      	movs	r2, #16
 800c35a:	4618      	mov	r0, r3
 800c35c:	f00c f8cf 	bl	80184fe <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c360:	683a      	ldr	r2, [r7, #0]
 800c362:	f107 030c 	add.w	r3, r7, #12
 800c366:	6879      	ldr	r1, [r7, #4]
 800c368:	4618      	mov	r0, r3
 800c36a:	f000 fd1d 	bl	800cda8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c36e:	f107 031c 	add.w	r3, r7, #28
 800c372:	2210      	movs	r2, #16
 800c374:	2100      	movs	r1, #0
 800c376:	4618      	mov	r0, r3
 800c378:	f00c f8fc 	bl	8018574 <memset1>
}
 800c37c:	bf00      	nop
 800c37e:	3748      	adds	r7, #72	@ 0x48
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	781a      	ldrb	r2, [r3, #0]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	3301      	adds	r3, #1
 800c39a:	683a      	ldr	r2, [r7, #0]
 800c39c:	7852      	ldrb	r2, [r2, #1]
 800c39e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	3302      	adds	r3, #2
 800c3a4:	683a      	ldr	r2, [r7, #0]
 800c3a6:	7892      	ldrb	r2, [r2, #2]
 800c3a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	3303      	adds	r3, #3
 800c3ae:	683a      	ldr	r2, [r7, #0]
 800c3b0:	78d2      	ldrb	r2, [r2, #3]
 800c3b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	3304      	adds	r3, #4
 800c3b8:	683a      	ldr	r2, [r7, #0]
 800c3ba:	7912      	ldrb	r2, [r2, #4]
 800c3bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	3305      	adds	r3, #5
 800c3c2:	683a      	ldr	r2, [r7, #0]
 800c3c4:	7952      	ldrb	r2, [r2, #5]
 800c3c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	3306      	adds	r3, #6
 800c3cc:	683a      	ldr	r2, [r7, #0]
 800c3ce:	7992      	ldrb	r2, [r2, #6]
 800c3d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	3307      	adds	r3, #7
 800c3d6:	683a      	ldr	r2, [r7, #0]
 800c3d8:	79d2      	ldrb	r2, [r2, #7]
 800c3da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	3308      	adds	r3, #8
 800c3e0:	683a      	ldr	r2, [r7, #0]
 800c3e2:	7a12      	ldrb	r2, [r2, #8]
 800c3e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	3309      	adds	r3, #9
 800c3ea:	683a      	ldr	r2, [r7, #0]
 800c3ec:	7a52      	ldrb	r2, [r2, #9]
 800c3ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	330a      	adds	r3, #10
 800c3f4:	683a      	ldr	r2, [r7, #0]
 800c3f6:	7a92      	ldrb	r2, [r2, #10]
 800c3f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	330b      	adds	r3, #11
 800c3fe:	683a      	ldr	r2, [r7, #0]
 800c400:	7ad2      	ldrb	r2, [r2, #11]
 800c402:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	330c      	adds	r3, #12
 800c408:	683a      	ldr	r2, [r7, #0]
 800c40a:	7b12      	ldrb	r2, [r2, #12]
 800c40c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	330d      	adds	r3, #13
 800c412:	683a      	ldr	r2, [r7, #0]
 800c414:	7b52      	ldrb	r2, [r2, #13]
 800c416:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	330e      	adds	r3, #14
 800c41c:	683a      	ldr	r2, [r7, #0]
 800c41e:	7b92      	ldrb	r2, [r2, #14]
 800c420:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	330f      	adds	r3, #15
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	7bd2      	ldrb	r2, [r2, #15]
 800c42a:	701a      	strb	r2, [r3, #0]
#endif
}
 800c42c:	bf00      	nop
 800c42e:	370c      	adds	r7, #12
 800c430:	46bd      	mov	sp, r7
 800c432:	bc80      	pop	{r7}
 800c434:	4770      	bx	lr

0800c436 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c436:	b480      	push	{r7}
 800c438:	b085      	sub	sp, #20
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	60f8      	str	r0, [r7, #12]
 800c43e:	60b9      	str	r1, [r7, #8]
 800c440:	4613      	mov	r3, r2
 800c442:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800c444:	e007      	b.n	800c456 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c446:	68ba      	ldr	r2, [r7, #8]
 800c448:	1c53      	adds	r3, r2, #1
 800c44a:	60bb      	str	r3, [r7, #8]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	1c59      	adds	r1, r3, #1
 800c450:	60f9      	str	r1, [r7, #12]
 800c452:	7812      	ldrb	r2, [r2, #0]
 800c454:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c456:	79fb      	ldrb	r3, [r7, #7]
 800c458:	1e5a      	subs	r2, r3, #1
 800c45a:	71fa      	strb	r2, [r7, #7]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d1f2      	bne.n	800c446 <copy_block_nn+0x10>
}
 800c460:	bf00      	nop
 800c462:	bf00      	nop
 800c464:	3714      	adds	r7, #20
 800c466:	46bd      	mov	sp, r7
 800c468:	bc80      	pop	{r7}
 800c46a:	4770      	bx	lr

0800c46c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	781a      	ldrb	r2, [r3, #0]
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	4053      	eors	r3, r2
 800c480:	b2da      	uxtb	r2, r3
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	3301      	adds	r3, #1
 800c48a:	7819      	ldrb	r1, [r3, #0]
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	3301      	adds	r3, #1
 800c490:	781a      	ldrb	r2, [r3, #0]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	3301      	adds	r3, #1
 800c496:	404a      	eors	r2, r1
 800c498:	b2d2      	uxtb	r2, r2
 800c49a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	3302      	adds	r3, #2
 800c4a0:	7819      	ldrb	r1, [r3, #0]
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	3302      	adds	r3, #2
 800c4a6:	781a      	ldrb	r2, [r3, #0]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	3302      	adds	r3, #2
 800c4ac:	404a      	eors	r2, r1
 800c4ae:	b2d2      	uxtb	r2, r2
 800c4b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	3303      	adds	r3, #3
 800c4b6:	7819      	ldrb	r1, [r3, #0]
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	3303      	adds	r3, #3
 800c4bc:	781a      	ldrb	r2, [r3, #0]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	3303      	adds	r3, #3
 800c4c2:	404a      	eors	r2, r1
 800c4c4:	b2d2      	uxtb	r2, r2
 800c4c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	3304      	adds	r3, #4
 800c4cc:	7819      	ldrb	r1, [r3, #0]
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	3304      	adds	r3, #4
 800c4d2:	781a      	ldrb	r2, [r3, #0]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	3304      	adds	r3, #4
 800c4d8:	404a      	eors	r2, r1
 800c4da:	b2d2      	uxtb	r2, r2
 800c4dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	3305      	adds	r3, #5
 800c4e2:	7819      	ldrb	r1, [r3, #0]
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	3305      	adds	r3, #5
 800c4e8:	781a      	ldrb	r2, [r3, #0]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	3305      	adds	r3, #5
 800c4ee:	404a      	eors	r2, r1
 800c4f0:	b2d2      	uxtb	r2, r2
 800c4f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	3306      	adds	r3, #6
 800c4f8:	7819      	ldrb	r1, [r3, #0]
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	3306      	adds	r3, #6
 800c4fe:	781a      	ldrb	r2, [r3, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	3306      	adds	r3, #6
 800c504:	404a      	eors	r2, r1
 800c506:	b2d2      	uxtb	r2, r2
 800c508:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	3307      	adds	r3, #7
 800c50e:	7819      	ldrb	r1, [r3, #0]
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	3307      	adds	r3, #7
 800c514:	781a      	ldrb	r2, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	3307      	adds	r3, #7
 800c51a:	404a      	eors	r2, r1
 800c51c:	b2d2      	uxtb	r2, r2
 800c51e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	3308      	adds	r3, #8
 800c524:	7819      	ldrb	r1, [r3, #0]
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	3308      	adds	r3, #8
 800c52a:	781a      	ldrb	r2, [r3, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	3308      	adds	r3, #8
 800c530:	404a      	eors	r2, r1
 800c532:	b2d2      	uxtb	r2, r2
 800c534:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	3309      	adds	r3, #9
 800c53a:	7819      	ldrb	r1, [r3, #0]
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	3309      	adds	r3, #9
 800c540:	781a      	ldrb	r2, [r3, #0]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	3309      	adds	r3, #9
 800c546:	404a      	eors	r2, r1
 800c548:	b2d2      	uxtb	r2, r2
 800c54a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	330a      	adds	r3, #10
 800c550:	7819      	ldrb	r1, [r3, #0]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	330a      	adds	r3, #10
 800c556:	781a      	ldrb	r2, [r3, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	330a      	adds	r3, #10
 800c55c:	404a      	eors	r2, r1
 800c55e:	b2d2      	uxtb	r2, r2
 800c560:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	330b      	adds	r3, #11
 800c566:	7819      	ldrb	r1, [r3, #0]
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	330b      	adds	r3, #11
 800c56c:	781a      	ldrb	r2, [r3, #0]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	330b      	adds	r3, #11
 800c572:	404a      	eors	r2, r1
 800c574:	b2d2      	uxtb	r2, r2
 800c576:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	330c      	adds	r3, #12
 800c57c:	7819      	ldrb	r1, [r3, #0]
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	330c      	adds	r3, #12
 800c582:	781a      	ldrb	r2, [r3, #0]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	330c      	adds	r3, #12
 800c588:	404a      	eors	r2, r1
 800c58a:	b2d2      	uxtb	r2, r2
 800c58c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	330d      	adds	r3, #13
 800c592:	7819      	ldrb	r1, [r3, #0]
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	330d      	adds	r3, #13
 800c598:	781a      	ldrb	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	330d      	adds	r3, #13
 800c59e:	404a      	eors	r2, r1
 800c5a0:	b2d2      	uxtb	r2, r2
 800c5a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	330e      	adds	r3, #14
 800c5a8:	7819      	ldrb	r1, [r3, #0]
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	330e      	adds	r3, #14
 800c5ae:	781a      	ldrb	r2, [r3, #0]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	330e      	adds	r3, #14
 800c5b4:	404a      	eors	r2, r1
 800c5b6:	b2d2      	uxtb	r2, r2
 800c5b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	330f      	adds	r3, #15
 800c5be:	7819      	ldrb	r1, [r3, #0]
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	330f      	adds	r3, #15
 800c5c4:	781a      	ldrb	r2, [r3, #0]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	330f      	adds	r3, #15
 800c5ca:	404a      	eors	r2, r1
 800c5cc:	b2d2      	uxtb	r2, r2
 800c5ce:	701a      	strb	r2, [r3, #0]
#endif
}
 800c5d0:	bf00      	nop
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bc80      	pop	{r7}
 800c5d8:	4770      	bx	lr

0800c5da <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c5da:	b480      	push	{r7}
 800c5dc:	b085      	sub	sp, #20
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	60f8      	str	r0, [r7, #12]
 800c5e2:	60b9      	str	r1, [r7, #8]
 800c5e4:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	781a      	ldrb	r2, [r3, #0]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	4053      	eors	r3, r2
 800c5f0:	b2da      	uxtb	r2, r3
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	7819      	ldrb	r1, [r3, #0]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	3301      	adds	r3, #1
 800c600:	781a      	ldrb	r2, [r3, #0]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	3301      	adds	r3, #1
 800c606:	404a      	eors	r2, r1
 800c608:	b2d2      	uxtb	r2, r2
 800c60a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	3302      	adds	r3, #2
 800c610:	7819      	ldrb	r1, [r3, #0]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	3302      	adds	r3, #2
 800c616:	781a      	ldrb	r2, [r3, #0]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	3302      	adds	r3, #2
 800c61c:	404a      	eors	r2, r1
 800c61e:	b2d2      	uxtb	r2, r2
 800c620:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	3303      	adds	r3, #3
 800c626:	7819      	ldrb	r1, [r3, #0]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	3303      	adds	r3, #3
 800c62c:	781a      	ldrb	r2, [r3, #0]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	3303      	adds	r3, #3
 800c632:	404a      	eors	r2, r1
 800c634:	b2d2      	uxtb	r2, r2
 800c636:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	3304      	adds	r3, #4
 800c63c:	7819      	ldrb	r1, [r3, #0]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	3304      	adds	r3, #4
 800c642:	781a      	ldrb	r2, [r3, #0]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	3304      	adds	r3, #4
 800c648:	404a      	eors	r2, r1
 800c64a:	b2d2      	uxtb	r2, r2
 800c64c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	3305      	adds	r3, #5
 800c652:	7819      	ldrb	r1, [r3, #0]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	3305      	adds	r3, #5
 800c658:	781a      	ldrb	r2, [r3, #0]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	3305      	adds	r3, #5
 800c65e:	404a      	eors	r2, r1
 800c660:	b2d2      	uxtb	r2, r2
 800c662:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	3306      	adds	r3, #6
 800c668:	7819      	ldrb	r1, [r3, #0]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	3306      	adds	r3, #6
 800c66e:	781a      	ldrb	r2, [r3, #0]
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	3306      	adds	r3, #6
 800c674:	404a      	eors	r2, r1
 800c676:	b2d2      	uxtb	r2, r2
 800c678:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	3307      	adds	r3, #7
 800c67e:	7819      	ldrb	r1, [r3, #0]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	3307      	adds	r3, #7
 800c684:	781a      	ldrb	r2, [r3, #0]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	3307      	adds	r3, #7
 800c68a:	404a      	eors	r2, r1
 800c68c:	b2d2      	uxtb	r2, r2
 800c68e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	3308      	adds	r3, #8
 800c694:	7819      	ldrb	r1, [r3, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	3308      	adds	r3, #8
 800c69a:	781a      	ldrb	r2, [r3, #0]
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	3308      	adds	r3, #8
 800c6a0:	404a      	eors	r2, r1
 800c6a2:	b2d2      	uxtb	r2, r2
 800c6a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	3309      	adds	r3, #9
 800c6aa:	7819      	ldrb	r1, [r3, #0]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	3309      	adds	r3, #9
 800c6b0:	781a      	ldrb	r2, [r3, #0]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	3309      	adds	r3, #9
 800c6b6:	404a      	eors	r2, r1
 800c6b8:	b2d2      	uxtb	r2, r2
 800c6ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	330a      	adds	r3, #10
 800c6c0:	7819      	ldrb	r1, [r3, #0]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	330a      	adds	r3, #10
 800c6c6:	781a      	ldrb	r2, [r3, #0]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	330a      	adds	r3, #10
 800c6cc:	404a      	eors	r2, r1
 800c6ce:	b2d2      	uxtb	r2, r2
 800c6d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	330b      	adds	r3, #11
 800c6d6:	7819      	ldrb	r1, [r3, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	330b      	adds	r3, #11
 800c6dc:	781a      	ldrb	r2, [r3, #0]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	330b      	adds	r3, #11
 800c6e2:	404a      	eors	r2, r1
 800c6e4:	b2d2      	uxtb	r2, r2
 800c6e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	330c      	adds	r3, #12
 800c6ec:	7819      	ldrb	r1, [r3, #0]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	330c      	adds	r3, #12
 800c6f2:	781a      	ldrb	r2, [r3, #0]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	330c      	adds	r3, #12
 800c6f8:	404a      	eors	r2, r1
 800c6fa:	b2d2      	uxtb	r2, r2
 800c6fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	330d      	adds	r3, #13
 800c702:	7819      	ldrb	r1, [r3, #0]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	330d      	adds	r3, #13
 800c708:	781a      	ldrb	r2, [r3, #0]
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	330d      	adds	r3, #13
 800c70e:	404a      	eors	r2, r1
 800c710:	b2d2      	uxtb	r2, r2
 800c712:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	330e      	adds	r3, #14
 800c718:	7819      	ldrb	r1, [r3, #0]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	330e      	adds	r3, #14
 800c71e:	781a      	ldrb	r2, [r3, #0]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	330e      	adds	r3, #14
 800c724:	404a      	eors	r2, r1
 800c726:	b2d2      	uxtb	r2, r2
 800c728:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	330f      	adds	r3, #15
 800c72e:	7819      	ldrb	r1, [r3, #0]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	330f      	adds	r3, #15
 800c734:	781a      	ldrb	r2, [r3, #0]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	330f      	adds	r3, #15
 800c73a:	404a      	eors	r2, r1
 800c73c:	b2d2      	uxtb	r2, r2
 800c73e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c740:	bf00      	nop
 800c742:	3714      	adds	r7, #20
 800c744:	46bd      	mov	sp, r7
 800c746:	bc80      	pop	{r7}
 800c748:	4770      	bx	lr

0800c74a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b082      	sub	sp, #8
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
 800c752:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c754:	6839      	ldr	r1, [r7, #0]
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f7ff fe88 	bl	800c46c <xor_block>
}
 800c75c:	bf00      	nop
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c764:	b480      	push	{r7}
 800c766:	b085      	sub	sp, #20
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	461a      	mov	r2, r3
 800c772:	4b48      	ldr	r3, [pc, #288]	@ (800c894 <shift_sub_rows+0x130>)
 800c774:	5c9a      	ldrb	r2, [r3, r2]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	701a      	strb	r2, [r3, #0]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	3304      	adds	r3, #4
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	4619      	mov	r1, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	3304      	adds	r3, #4
 800c786:	4a43      	ldr	r2, [pc, #268]	@ (800c894 <shift_sub_rows+0x130>)
 800c788:	5c52      	ldrb	r2, [r2, r1]
 800c78a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	3308      	adds	r3, #8
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	4619      	mov	r1, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	3308      	adds	r3, #8
 800c798:	4a3e      	ldr	r2, [pc, #248]	@ (800c894 <shift_sub_rows+0x130>)
 800c79a:	5c52      	ldrb	r2, [r2, r1]
 800c79c:	701a      	strb	r2, [r3, #0]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	330c      	adds	r3, #12
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	330c      	adds	r3, #12
 800c7aa:	4a3a      	ldr	r2, [pc, #232]	@ (800c894 <shift_sub_rows+0x130>)
 800c7ac:	5c52      	ldrb	r2, [r2, r1]
 800c7ae:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	785b      	ldrb	r3, [r3, #1]
 800c7b4:	73fb      	strb	r3, [r7, #15]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	3305      	adds	r3, #5
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	4619      	mov	r1, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	4a34      	ldr	r2, [pc, #208]	@ (800c894 <shift_sub_rows+0x130>)
 800c7c4:	5c52      	ldrb	r2, [r2, r1]
 800c7c6:	701a      	strb	r2, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	3309      	adds	r3, #9
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	3305      	adds	r3, #5
 800c7d4:	4a2f      	ldr	r2, [pc, #188]	@ (800c894 <shift_sub_rows+0x130>)
 800c7d6:	5c52      	ldrb	r2, [r2, r1]
 800c7d8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	330d      	adds	r3, #13
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	3309      	adds	r3, #9
 800c7e6:	4a2b      	ldr	r2, [pc, #172]	@ (800c894 <shift_sub_rows+0x130>)
 800c7e8:	5c52      	ldrb	r2, [r2, r1]
 800c7ea:	701a      	strb	r2, [r3, #0]
 800c7ec:	7bfa      	ldrb	r2, [r7, #15]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	330d      	adds	r3, #13
 800c7f2:	4928      	ldr	r1, [pc, #160]	@ (800c894 <shift_sub_rows+0x130>)
 800c7f4:	5c8a      	ldrb	r2, [r1, r2]
 800c7f6:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	789b      	ldrb	r3, [r3, #2]
 800c7fc:	73fb      	strb	r3, [r7, #15]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	330a      	adds	r3, #10
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	4619      	mov	r1, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	3302      	adds	r3, #2
 800c80a:	4a22      	ldr	r2, [pc, #136]	@ (800c894 <shift_sub_rows+0x130>)
 800c80c:	5c52      	ldrb	r2, [r2, r1]
 800c80e:	701a      	strb	r2, [r3, #0]
 800c810:	7bfa      	ldrb	r2, [r7, #15]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	330a      	adds	r3, #10
 800c816:	491f      	ldr	r1, [pc, #124]	@ (800c894 <shift_sub_rows+0x130>)
 800c818:	5c8a      	ldrb	r2, [r1, r2]
 800c81a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	799b      	ldrb	r3, [r3, #6]
 800c820:	73fb      	strb	r3, [r7, #15]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	330e      	adds	r3, #14
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	4619      	mov	r1, r3
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	3306      	adds	r3, #6
 800c82e:	4a19      	ldr	r2, [pc, #100]	@ (800c894 <shift_sub_rows+0x130>)
 800c830:	5c52      	ldrb	r2, [r2, r1]
 800c832:	701a      	strb	r2, [r3, #0]
 800c834:	7bfa      	ldrb	r2, [r7, #15]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	330e      	adds	r3, #14
 800c83a:	4916      	ldr	r1, [pc, #88]	@ (800c894 <shift_sub_rows+0x130>)
 800c83c:	5c8a      	ldrb	r2, [r1, r2]
 800c83e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	7bdb      	ldrb	r3, [r3, #15]
 800c844:	73fb      	strb	r3, [r7, #15]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	330b      	adds	r3, #11
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	4619      	mov	r1, r3
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	330f      	adds	r3, #15
 800c852:	4a10      	ldr	r2, [pc, #64]	@ (800c894 <shift_sub_rows+0x130>)
 800c854:	5c52      	ldrb	r2, [r2, r1]
 800c856:	701a      	strb	r2, [r3, #0]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	3307      	adds	r3, #7
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	4619      	mov	r1, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	330b      	adds	r3, #11
 800c864:	4a0b      	ldr	r2, [pc, #44]	@ (800c894 <shift_sub_rows+0x130>)
 800c866:	5c52      	ldrb	r2, [r2, r1]
 800c868:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	3303      	adds	r3, #3
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	4619      	mov	r1, r3
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	3307      	adds	r3, #7
 800c876:	4a07      	ldr	r2, [pc, #28]	@ (800c894 <shift_sub_rows+0x130>)
 800c878:	5c52      	ldrb	r2, [r2, r1]
 800c87a:	701a      	strb	r2, [r3, #0]
 800c87c:	7bfa      	ldrb	r2, [r7, #15]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	3303      	adds	r3, #3
 800c882:	4904      	ldr	r1, [pc, #16]	@ (800c894 <shift_sub_rows+0x130>)
 800c884:	5c8a      	ldrb	r2, [r1, r2]
 800c886:	701a      	strb	r2, [r3, #0]
}
 800c888:	bf00      	nop
 800c88a:	3714      	adds	r7, #20
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bc80      	pop	{r7}
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	0801db28 	.word	0x0801db28

0800c898 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c898:	b580      	push	{r7, lr}
 800c89a:	b086      	sub	sp, #24
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c8a0:	f107 0308 	add.w	r3, r7, #8
 800c8a4:	6879      	ldr	r1, [r7, #4]
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7ff fd6c 	bl	800c384 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c8ac:	7a3b      	ldrb	r3, [r7, #8]
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	4b9a      	ldr	r3, [pc, #616]	@ (800cb1c <mix_sub_columns+0x284>)
 800c8b2:	5c9a      	ldrb	r2, [r3, r2]
 800c8b4:	7b7b      	ldrb	r3, [r7, #13]
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	4b99      	ldr	r3, [pc, #612]	@ (800cb20 <mix_sub_columns+0x288>)
 800c8ba:	5c5b      	ldrb	r3, [r3, r1]
 800c8bc:	4053      	eors	r3, r2
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	7cbb      	ldrb	r3, [r7, #18]
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	4b97      	ldr	r3, [pc, #604]	@ (800cb24 <mix_sub_columns+0x28c>)
 800c8c6:	5c5b      	ldrb	r3, [r3, r1]
 800c8c8:	4053      	eors	r3, r2
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	7dfb      	ldrb	r3, [r7, #23]
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	4b94      	ldr	r3, [pc, #592]	@ (800cb24 <mix_sub_columns+0x28c>)
 800c8d2:	5c5b      	ldrb	r3, [r3, r1]
 800c8d4:	4053      	eors	r3, r2
 800c8d6:	b2da      	uxtb	r2, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c8dc:	7a3b      	ldrb	r3, [r7, #8]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	4b90      	ldr	r3, [pc, #576]	@ (800cb24 <mix_sub_columns+0x28c>)
 800c8e2:	5c9a      	ldrb	r2, [r3, r2]
 800c8e4:	7b7b      	ldrb	r3, [r7, #13]
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	4b8c      	ldr	r3, [pc, #560]	@ (800cb1c <mix_sub_columns+0x284>)
 800c8ea:	5c5b      	ldrb	r3, [r3, r1]
 800c8ec:	4053      	eors	r3, r2
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	7cbb      	ldrb	r3, [r7, #18]
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	4b8a      	ldr	r3, [pc, #552]	@ (800cb20 <mix_sub_columns+0x288>)
 800c8f6:	5c5b      	ldrb	r3, [r3, r1]
 800c8f8:	4053      	eors	r3, r2
 800c8fa:	b2d9      	uxtb	r1, r3
 800c8fc:	7dfb      	ldrb	r3, [r7, #23]
 800c8fe:	461a      	mov	r2, r3
 800c900:	4b88      	ldr	r3, [pc, #544]	@ (800cb24 <mix_sub_columns+0x28c>)
 800c902:	5c9a      	ldrb	r2, [r3, r2]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	3301      	adds	r3, #1
 800c908:	404a      	eors	r2, r1
 800c90a:	b2d2      	uxtb	r2, r2
 800c90c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c90e:	7a3b      	ldrb	r3, [r7, #8]
 800c910:	461a      	mov	r2, r3
 800c912:	4b84      	ldr	r3, [pc, #528]	@ (800cb24 <mix_sub_columns+0x28c>)
 800c914:	5c9a      	ldrb	r2, [r3, r2]
 800c916:	7b7b      	ldrb	r3, [r7, #13]
 800c918:	4619      	mov	r1, r3
 800c91a:	4b82      	ldr	r3, [pc, #520]	@ (800cb24 <mix_sub_columns+0x28c>)
 800c91c:	5c5b      	ldrb	r3, [r3, r1]
 800c91e:	4053      	eors	r3, r2
 800c920:	b2da      	uxtb	r2, r3
 800c922:	7cbb      	ldrb	r3, [r7, #18]
 800c924:	4619      	mov	r1, r3
 800c926:	4b7d      	ldr	r3, [pc, #500]	@ (800cb1c <mix_sub_columns+0x284>)
 800c928:	5c5b      	ldrb	r3, [r3, r1]
 800c92a:	4053      	eors	r3, r2
 800c92c:	b2d9      	uxtb	r1, r3
 800c92e:	7dfb      	ldrb	r3, [r7, #23]
 800c930:	461a      	mov	r2, r3
 800c932:	4b7b      	ldr	r3, [pc, #492]	@ (800cb20 <mix_sub_columns+0x288>)
 800c934:	5c9a      	ldrb	r2, [r3, r2]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	3302      	adds	r3, #2
 800c93a:	404a      	eors	r2, r1
 800c93c:	b2d2      	uxtb	r2, r2
 800c93e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c940:	7a3b      	ldrb	r3, [r7, #8]
 800c942:	461a      	mov	r2, r3
 800c944:	4b76      	ldr	r3, [pc, #472]	@ (800cb20 <mix_sub_columns+0x288>)
 800c946:	5c9a      	ldrb	r2, [r3, r2]
 800c948:	7b7b      	ldrb	r3, [r7, #13]
 800c94a:	4619      	mov	r1, r3
 800c94c:	4b75      	ldr	r3, [pc, #468]	@ (800cb24 <mix_sub_columns+0x28c>)
 800c94e:	5c5b      	ldrb	r3, [r3, r1]
 800c950:	4053      	eors	r3, r2
 800c952:	b2da      	uxtb	r2, r3
 800c954:	7cbb      	ldrb	r3, [r7, #18]
 800c956:	4619      	mov	r1, r3
 800c958:	4b72      	ldr	r3, [pc, #456]	@ (800cb24 <mix_sub_columns+0x28c>)
 800c95a:	5c5b      	ldrb	r3, [r3, r1]
 800c95c:	4053      	eors	r3, r2
 800c95e:	b2d9      	uxtb	r1, r3
 800c960:	7dfb      	ldrb	r3, [r7, #23]
 800c962:	461a      	mov	r2, r3
 800c964:	4b6d      	ldr	r3, [pc, #436]	@ (800cb1c <mix_sub_columns+0x284>)
 800c966:	5c9a      	ldrb	r2, [r3, r2]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	3303      	adds	r3, #3
 800c96c:	404a      	eors	r2, r1
 800c96e:	b2d2      	uxtb	r2, r2
 800c970:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c972:	7b3b      	ldrb	r3, [r7, #12]
 800c974:	461a      	mov	r2, r3
 800c976:	4b69      	ldr	r3, [pc, #420]	@ (800cb1c <mix_sub_columns+0x284>)
 800c978:	5c9a      	ldrb	r2, [r3, r2]
 800c97a:	7c7b      	ldrb	r3, [r7, #17]
 800c97c:	4619      	mov	r1, r3
 800c97e:	4b68      	ldr	r3, [pc, #416]	@ (800cb20 <mix_sub_columns+0x288>)
 800c980:	5c5b      	ldrb	r3, [r3, r1]
 800c982:	4053      	eors	r3, r2
 800c984:	b2da      	uxtb	r2, r3
 800c986:	7dbb      	ldrb	r3, [r7, #22]
 800c988:	4619      	mov	r1, r3
 800c98a:	4b66      	ldr	r3, [pc, #408]	@ (800cb24 <mix_sub_columns+0x28c>)
 800c98c:	5c5b      	ldrb	r3, [r3, r1]
 800c98e:	4053      	eors	r3, r2
 800c990:	b2d9      	uxtb	r1, r3
 800c992:	7afb      	ldrb	r3, [r7, #11]
 800c994:	461a      	mov	r2, r3
 800c996:	4b63      	ldr	r3, [pc, #396]	@ (800cb24 <mix_sub_columns+0x28c>)
 800c998:	5c9a      	ldrb	r2, [r3, r2]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	3304      	adds	r3, #4
 800c99e:	404a      	eors	r2, r1
 800c9a0:	b2d2      	uxtb	r2, r2
 800c9a2:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c9a4:	7b3b      	ldrb	r3, [r7, #12]
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	4b5e      	ldr	r3, [pc, #376]	@ (800cb24 <mix_sub_columns+0x28c>)
 800c9aa:	5c9a      	ldrb	r2, [r3, r2]
 800c9ac:	7c7b      	ldrb	r3, [r7, #17]
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	4b5a      	ldr	r3, [pc, #360]	@ (800cb1c <mix_sub_columns+0x284>)
 800c9b2:	5c5b      	ldrb	r3, [r3, r1]
 800c9b4:	4053      	eors	r3, r2
 800c9b6:	b2da      	uxtb	r2, r3
 800c9b8:	7dbb      	ldrb	r3, [r7, #22]
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	4b58      	ldr	r3, [pc, #352]	@ (800cb20 <mix_sub_columns+0x288>)
 800c9be:	5c5b      	ldrb	r3, [r3, r1]
 800c9c0:	4053      	eors	r3, r2
 800c9c2:	b2d9      	uxtb	r1, r3
 800c9c4:	7afb      	ldrb	r3, [r7, #11]
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	4b56      	ldr	r3, [pc, #344]	@ (800cb24 <mix_sub_columns+0x28c>)
 800c9ca:	5c9a      	ldrb	r2, [r3, r2]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	3305      	adds	r3, #5
 800c9d0:	404a      	eors	r2, r1
 800c9d2:	b2d2      	uxtb	r2, r2
 800c9d4:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c9d6:	7b3b      	ldrb	r3, [r7, #12]
 800c9d8:	461a      	mov	r2, r3
 800c9da:	4b52      	ldr	r3, [pc, #328]	@ (800cb24 <mix_sub_columns+0x28c>)
 800c9dc:	5c9a      	ldrb	r2, [r3, r2]
 800c9de:	7c7b      	ldrb	r3, [r7, #17]
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	4b50      	ldr	r3, [pc, #320]	@ (800cb24 <mix_sub_columns+0x28c>)
 800c9e4:	5c5b      	ldrb	r3, [r3, r1]
 800c9e6:	4053      	eors	r3, r2
 800c9e8:	b2da      	uxtb	r2, r3
 800c9ea:	7dbb      	ldrb	r3, [r7, #22]
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	4b4b      	ldr	r3, [pc, #300]	@ (800cb1c <mix_sub_columns+0x284>)
 800c9f0:	5c5b      	ldrb	r3, [r3, r1]
 800c9f2:	4053      	eors	r3, r2
 800c9f4:	b2d9      	uxtb	r1, r3
 800c9f6:	7afb      	ldrb	r3, [r7, #11]
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	4b49      	ldr	r3, [pc, #292]	@ (800cb20 <mix_sub_columns+0x288>)
 800c9fc:	5c9a      	ldrb	r2, [r3, r2]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	3306      	adds	r3, #6
 800ca02:	404a      	eors	r2, r1
 800ca04:	b2d2      	uxtb	r2, r2
 800ca06:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800ca08:	7b3b      	ldrb	r3, [r7, #12]
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	4b44      	ldr	r3, [pc, #272]	@ (800cb20 <mix_sub_columns+0x288>)
 800ca0e:	5c9a      	ldrb	r2, [r3, r2]
 800ca10:	7c7b      	ldrb	r3, [r7, #17]
 800ca12:	4619      	mov	r1, r3
 800ca14:	4b43      	ldr	r3, [pc, #268]	@ (800cb24 <mix_sub_columns+0x28c>)
 800ca16:	5c5b      	ldrb	r3, [r3, r1]
 800ca18:	4053      	eors	r3, r2
 800ca1a:	b2da      	uxtb	r2, r3
 800ca1c:	7dbb      	ldrb	r3, [r7, #22]
 800ca1e:	4619      	mov	r1, r3
 800ca20:	4b40      	ldr	r3, [pc, #256]	@ (800cb24 <mix_sub_columns+0x28c>)
 800ca22:	5c5b      	ldrb	r3, [r3, r1]
 800ca24:	4053      	eors	r3, r2
 800ca26:	b2d9      	uxtb	r1, r3
 800ca28:	7afb      	ldrb	r3, [r7, #11]
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	4b3b      	ldr	r3, [pc, #236]	@ (800cb1c <mix_sub_columns+0x284>)
 800ca2e:	5c9a      	ldrb	r2, [r3, r2]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	3307      	adds	r3, #7
 800ca34:	404a      	eors	r2, r1
 800ca36:	b2d2      	uxtb	r2, r2
 800ca38:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ca3a:	7c3b      	ldrb	r3, [r7, #16]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	4b37      	ldr	r3, [pc, #220]	@ (800cb1c <mix_sub_columns+0x284>)
 800ca40:	5c9a      	ldrb	r2, [r3, r2]
 800ca42:	7d7b      	ldrb	r3, [r7, #21]
 800ca44:	4619      	mov	r1, r3
 800ca46:	4b36      	ldr	r3, [pc, #216]	@ (800cb20 <mix_sub_columns+0x288>)
 800ca48:	5c5b      	ldrb	r3, [r3, r1]
 800ca4a:	4053      	eors	r3, r2
 800ca4c:	b2da      	uxtb	r2, r3
 800ca4e:	7abb      	ldrb	r3, [r7, #10]
 800ca50:	4619      	mov	r1, r3
 800ca52:	4b34      	ldr	r3, [pc, #208]	@ (800cb24 <mix_sub_columns+0x28c>)
 800ca54:	5c5b      	ldrb	r3, [r3, r1]
 800ca56:	4053      	eors	r3, r2
 800ca58:	b2d9      	uxtb	r1, r3
 800ca5a:	7bfb      	ldrb	r3, [r7, #15]
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	4b31      	ldr	r3, [pc, #196]	@ (800cb24 <mix_sub_columns+0x28c>)
 800ca60:	5c9a      	ldrb	r2, [r3, r2]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	3308      	adds	r3, #8
 800ca66:	404a      	eors	r2, r1
 800ca68:	b2d2      	uxtb	r2, r2
 800ca6a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ca6c:	7c3b      	ldrb	r3, [r7, #16]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	4b2c      	ldr	r3, [pc, #176]	@ (800cb24 <mix_sub_columns+0x28c>)
 800ca72:	5c9a      	ldrb	r2, [r3, r2]
 800ca74:	7d7b      	ldrb	r3, [r7, #21]
 800ca76:	4619      	mov	r1, r3
 800ca78:	4b28      	ldr	r3, [pc, #160]	@ (800cb1c <mix_sub_columns+0x284>)
 800ca7a:	5c5b      	ldrb	r3, [r3, r1]
 800ca7c:	4053      	eors	r3, r2
 800ca7e:	b2da      	uxtb	r2, r3
 800ca80:	7abb      	ldrb	r3, [r7, #10]
 800ca82:	4619      	mov	r1, r3
 800ca84:	4b26      	ldr	r3, [pc, #152]	@ (800cb20 <mix_sub_columns+0x288>)
 800ca86:	5c5b      	ldrb	r3, [r3, r1]
 800ca88:	4053      	eors	r3, r2
 800ca8a:	b2d9      	uxtb	r1, r3
 800ca8c:	7bfb      	ldrb	r3, [r7, #15]
 800ca8e:	461a      	mov	r2, r3
 800ca90:	4b24      	ldr	r3, [pc, #144]	@ (800cb24 <mix_sub_columns+0x28c>)
 800ca92:	5c9a      	ldrb	r2, [r3, r2]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	3309      	adds	r3, #9
 800ca98:	404a      	eors	r2, r1
 800ca9a:	b2d2      	uxtb	r2, r2
 800ca9c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800ca9e:	7c3b      	ldrb	r3, [r7, #16]
 800caa0:	461a      	mov	r2, r3
 800caa2:	4b20      	ldr	r3, [pc, #128]	@ (800cb24 <mix_sub_columns+0x28c>)
 800caa4:	5c9a      	ldrb	r2, [r3, r2]
 800caa6:	7d7b      	ldrb	r3, [r7, #21]
 800caa8:	4619      	mov	r1, r3
 800caaa:	4b1e      	ldr	r3, [pc, #120]	@ (800cb24 <mix_sub_columns+0x28c>)
 800caac:	5c5b      	ldrb	r3, [r3, r1]
 800caae:	4053      	eors	r3, r2
 800cab0:	b2da      	uxtb	r2, r3
 800cab2:	7abb      	ldrb	r3, [r7, #10]
 800cab4:	4619      	mov	r1, r3
 800cab6:	4b19      	ldr	r3, [pc, #100]	@ (800cb1c <mix_sub_columns+0x284>)
 800cab8:	5c5b      	ldrb	r3, [r3, r1]
 800caba:	4053      	eors	r3, r2
 800cabc:	b2d9      	uxtb	r1, r3
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
 800cac0:	461a      	mov	r2, r3
 800cac2:	4b17      	ldr	r3, [pc, #92]	@ (800cb20 <mix_sub_columns+0x288>)
 800cac4:	5c9a      	ldrb	r2, [r3, r2]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	330a      	adds	r3, #10
 800caca:	404a      	eors	r2, r1
 800cacc:	b2d2      	uxtb	r2, r2
 800cace:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800cad0:	7c3b      	ldrb	r3, [r7, #16]
 800cad2:	461a      	mov	r2, r3
 800cad4:	4b12      	ldr	r3, [pc, #72]	@ (800cb20 <mix_sub_columns+0x288>)
 800cad6:	5c9a      	ldrb	r2, [r3, r2]
 800cad8:	7d7b      	ldrb	r3, [r7, #21]
 800cada:	4619      	mov	r1, r3
 800cadc:	4b11      	ldr	r3, [pc, #68]	@ (800cb24 <mix_sub_columns+0x28c>)
 800cade:	5c5b      	ldrb	r3, [r3, r1]
 800cae0:	4053      	eors	r3, r2
 800cae2:	b2da      	uxtb	r2, r3
 800cae4:	7abb      	ldrb	r3, [r7, #10]
 800cae6:	4619      	mov	r1, r3
 800cae8:	4b0e      	ldr	r3, [pc, #56]	@ (800cb24 <mix_sub_columns+0x28c>)
 800caea:	5c5b      	ldrb	r3, [r3, r1]
 800caec:	4053      	eors	r3, r2
 800caee:	b2d9      	uxtb	r1, r3
 800caf0:	7bfb      	ldrb	r3, [r7, #15]
 800caf2:	461a      	mov	r2, r3
 800caf4:	4b09      	ldr	r3, [pc, #36]	@ (800cb1c <mix_sub_columns+0x284>)
 800caf6:	5c9a      	ldrb	r2, [r3, r2]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	330b      	adds	r3, #11
 800cafc:	404a      	eors	r2, r1
 800cafe:	b2d2      	uxtb	r2, r2
 800cb00:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800cb02:	7d3b      	ldrb	r3, [r7, #20]
 800cb04:	461a      	mov	r2, r3
 800cb06:	4b05      	ldr	r3, [pc, #20]	@ (800cb1c <mix_sub_columns+0x284>)
 800cb08:	5c9a      	ldrb	r2, [r3, r2]
 800cb0a:	7a7b      	ldrb	r3, [r7, #9]
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	4b04      	ldr	r3, [pc, #16]	@ (800cb20 <mix_sub_columns+0x288>)
 800cb10:	5c5b      	ldrb	r3, [r3, r1]
 800cb12:	4053      	eors	r3, r2
 800cb14:	b2da      	uxtb	r2, r3
 800cb16:	7bbb      	ldrb	r3, [r7, #14]
 800cb18:	4619      	mov	r1, r3
 800cb1a:	e005      	b.n	800cb28 <mix_sub_columns+0x290>
 800cb1c:	0801dc28 	.word	0x0801dc28
 800cb20:	0801dd28 	.word	0x0801dd28
 800cb24:	0801db28 	.word	0x0801db28
 800cb28:	4b2d      	ldr	r3, [pc, #180]	@ (800cbe0 <mix_sub_columns+0x348>)
 800cb2a:	5c5b      	ldrb	r3, [r3, r1]
 800cb2c:	4053      	eors	r3, r2
 800cb2e:	b2d9      	uxtb	r1, r3
 800cb30:	7cfb      	ldrb	r3, [r7, #19]
 800cb32:	461a      	mov	r2, r3
 800cb34:	4b2a      	ldr	r3, [pc, #168]	@ (800cbe0 <mix_sub_columns+0x348>)
 800cb36:	5c9a      	ldrb	r2, [r3, r2]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	330c      	adds	r3, #12
 800cb3c:	404a      	eors	r2, r1
 800cb3e:	b2d2      	uxtb	r2, r2
 800cb40:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800cb42:	7d3b      	ldrb	r3, [r7, #20]
 800cb44:	461a      	mov	r2, r3
 800cb46:	4b26      	ldr	r3, [pc, #152]	@ (800cbe0 <mix_sub_columns+0x348>)
 800cb48:	5c9a      	ldrb	r2, [r3, r2]
 800cb4a:	7a7b      	ldrb	r3, [r7, #9]
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	4b25      	ldr	r3, [pc, #148]	@ (800cbe4 <mix_sub_columns+0x34c>)
 800cb50:	5c5b      	ldrb	r3, [r3, r1]
 800cb52:	4053      	eors	r3, r2
 800cb54:	b2da      	uxtb	r2, r3
 800cb56:	7bbb      	ldrb	r3, [r7, #14]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	4b23      	ldr	r3, [pc, #140]	@ (800cbe8 <mix_sub_columns+0x350>)
 800cb5c:	5c5b      	ldrb	r3, [r3, r1]
 800cb5e:	4053      	eors	r3, r2
 800cb60:	b2d9      	uxtb	r1, r3
 800cb62:	7cfb      	ldrb	r3, [r7, #19]
 800cb64:	461a      	mov	r2, r3
 800cb66:	4b1e      	ldr	r3, [pc, #120]	@ (800cbe0 <mix_sub_columns+0x348>)
 800cb68:	5c9a      	ldrb	r2, [r3, r2]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	330d      	adds	r3, #13
 800cb6e:	404a      	eors	r2, r1
 800cb70:	b2d2      	uxtb	r2, r2
 800cb72:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800cb74:	7d3b      	ldrb	r3, [r7, #20]
 800cb76:	461a      	mov	r2, r3
 800cb78:	4b19      	ldr	r3, [pc, #100]	@ (800cbe0 <mix_sub_columns+0x348>)
 800cb7a:	5c9a      	ldrb	r2, [r3, r2]
 800cb7c:	7a7b      	ldrb	r3, [r7, #9]
 800cb7e:	4619      	mov	r1, r3
 800cb80:	4b17      	ldr	r3, [pc, #92]	@ (800cbe0 <mix_sub_columns+0x348>)
 800cb82:	5c5b      	ldrb	r3, [r3, r1]
 800cb84:	4053      	eors	r3, r2
 800cb86:	b2da      	uxtb	r2, r3
 800cb88:	7bbb      	ldrb	r3, [r7, #14]
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	4b15      	ldr	r3, [pc, #84]	@ (800cbe4 <mix_sub_columns+0x34c>)
 800cb8e:	5c5b      	ldrb	r3, [r3, r1]
 800cb90:	4053      	eors	r3, r2
 800cb92:	b2d9      	uxtb	r1, r3
 800cb94:	7cfb      	ldrb	r3, [r7, #19]
 800cb96:	461a      	mov	r2, r3
 800cb98:	4b13      	ldr	r3, [pc, #76]	@ (800cbe8 <mix_sub_columns+0x350>)
 800cb9a:	5c9a      	ldrb	r2, [r3, r2]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	330e      	adds	r3, #14
 800cba0:	404a      	eors	r2, r1
 800cba2:	b2d2      	uxtb	r2, r2
 800cba4:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800cba6:	7d3b      	ldrb	r3, [r7, #20]
 800cba8:	461a      	mov	r2, r3
 800cbaa:	4b0f      	ldr	r3, [pc, #60]	@ (800cbe8 <mix_sub_columns+0x350>)
 800cbac:	5c9a      	ldrb	r2, [r3, r2]
 800cbae:	7a7b      	ldrb	r3, [r7, #9]
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	4b0b      	ldr	r3, [pc, #44]	@ (800cbe0 <mix_sub_columns+0x348>)
 800cbb4:	5c5b      	ldrb	r3, [r3, r1]
 800cbb6:	4053      	eors	r3, r2
 800cbb8:	b2da      	uxtb	r2, r3
 800cbba:	7bbb      	ldrb	r3, [r7, #14]
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	4b08      	ldr	r3, [pc, #32]	@ (800cbe0 <mix_sub_columns+0x348>)
 800cbc0:	5c5b      	ldrb	r3, [r3, r1]
 800cbc2:	4053      	eors	r3, r2
 800cbc4:	b2d9      	uxtb	r1, r3
 800cbc6:	7cfb      	ldrb	r3, [r7, #19]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	4b06      	ldr	r3, [pc, #24]	@ (800cbe4 <mix_sub_columns+0x34c>)
 800cbcc:	5c9a      	ldrb	r2, [r3, r2]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	330f      	adds	r3, #15
 800cbd2:	404a      	eors	r2, r1
 800cbd4:	b2d2      	uxtb	r2, r2
 800cbd6:	701a      	strb	r2, [r3, #0]
  }
 800cbd8:	bf00      	nop
 800cbda:	3718      	adds	r7, #24
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	0801db28 	.word	0x0801db28
 800cbe4:	0801dc28 	.word	0x0801dc28
 800cbe8:	0801dd28 	.word	0x0801dd28

0800cbec <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b086      	sub	sp, #24
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	607a      	str	r2, [r7, #4]
 800cbf8:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800cbfa:	7afb      	ldrb	r3, [r7, #11]
 800cbfc:	3b10      	subs	r3, #16
 800cbfe:	2b10      	cmp	r3, #16
 800cc00:	bf8c      	ite	hi
 800cc02:	2201      	movhi	r2, #1
 800cc04:	2200      	movls	r2, #0
 800cc06:	b2d2      	uxtb	r2, r2
 800cc08:	2a00      	cmp	r2, #0
 800cc0a:	d10b      	bne.n	800cc24 <lorawan_aes_set_key+0x38>
 800cc0c:	4a64      	ldr	r2, [pc, #400]	@ (800cda0 <lorawan_aes_set_key+0x1b4>)
 800cc0e:	fa22 f303 	lsr.w	r3, r2, r3
 800cc12:	f003 0301 	and.w	r3, r3, #1
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	bf14      	ite	ne
 800cc1a:	2301      	movne	r3, #1
 800cc1c:	2300      	moveq	r3, #0
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d105      	bne.n	800cc30 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800cc2c:	23ff      	movs	r3, #255	@ 0xff
 800cc2e:	e0b2      	b.n	800cd96 <lorawan_aes_set_key+0x1aa>
        break;
 800cc30:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	7afa      	ldrb	r2, [r7, #11]
 800cc36:	68f9      	ldr	r1, [r7, #12]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7ff fbfc 	bl	800c436 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800cc3e:	7afb      	ldrb	r3, [r7, #11]
 800cc40:	331c      	adds	r3, #28
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800cc48:	7c7b      	ldrb	r3, [r7, #17]
 800cc4a:	091b      	lsrs	r3, r3, #4
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	b2da      	uxtb	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800cc58:	7afb      	ldrb	r3, [r7, #11]
 800cc5a:	75fb      	strb	r3, [r7, #23]
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	75bb      	strb	r3, [r7, #22]
 800cc60:	e093      	b.n	800cd8a <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800cc62:	7dfb      	ldrb	r3, [r7, #23]
 800cc64:	3b04      	subs	r3, #4
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	5cd3      	ldrb	r3, [r2, r3]
 800cc6a:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800cc6c:	7dfb      	ldrb	r3, [r7, #23]
 800cc6e:	3b03      	subs	r3, #3
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	5cd3      	ldrb	r3, [r2, r3]
 800cc74:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800cc76:	7dfb      	ldrb	r3, [r7, #23]
 800cc78:	3b02      	subs	r3, #2
 800cc7a:	687a      	ldr	r2, [r7, #4]
 800cc7c:	5cd3      	ldrb	r3, [r2, r3]
 800cc7e:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
 800cc82:	3b01      	subs	r3, #1
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	5cd3      	ldrb	r3, [r2, r3]
 800cc88:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800cc8a:	7dfb      	ldrb	r3, [r7, #23]
 800cc8c:	7afa      	ldrb	r2, [r7, #11]
 800cc8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc92:	fb01 f202 	mul.w	r2, r1, r2
 800cc96:	1a9b      	subs	r3, r3, r2
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d127      	bne.n	800ccee <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800cc9e:	7d7b      	ldrb	r3, [r7, #21]
 800cca0:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800cca2:	7d3b      	ldrb	r3, [r7, #20]
 800cca4:	4a3f      	ldr	r2, [pc, #252]	@ (800cda4 <lorawan_aes_set_key+0x1b8>)
 800cca6:	5cd2      	ldrb	r2, [r2, r3]
 800cca8:	7dbb      	ldrb	r3, [r7, #22]
 800ccaa:	4053      	eors	r3, r2
 800ccac:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800ccae:	7cfb      	ldrb	r3, [r7, #19]
 800ccb0:	4a3c      	ldr	r2, [pc, #240]	@ (800cda4 <lorawan_aes_set_key+0x1b8>)
 800ccb2:	5cd3      	ldrb	r3, [r2, r3]
 800ccb4:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ccb6:	7cbb      	ldrb	r3, [r7, #18]
 800ccb8:	4a3a      	ldr	r2, [pc, #232]	@ (800cda4 <lorawan_aes_set_key+0x1b8>)
 800ccba:	5cd3      	ldrb	r3, [r2, r3]
 800ccbc:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800ccbe:	7c3b      	ldrb	r3, [r7, #16]
 800ccc0:	4a38      	ldr	r2, [pc, #224]	@ (800cda4 <lorawan_aes_set_key+0x1b8>)
 800ccc2:	5cd3      	ldrb	r3, [r2, r3]
 800ccc4:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800ccc6:	7dbb      	ldrb	r3, [r7, #22]
 800ccc8:	005b      	lsls	r3, r3, #1
 800ccca:	b25a      	sxtb	r2, r3
 800cccc:	7dbb      	ldrb	r3, [r7, #22]
 800ccce:	09db      	lsrs	r3, r3, #7
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	0049      	lsls	r1, r1, #1
 800ccd6:	440b      	add	r3, r1
 800ccd8:	4619      	mov	r1, r3
 800ccda:	00c8      	lsls	r0, r1, #3
 800ccdc:	4619      	mov	r1, r3
 800ccde:	4603      	mov	r3, r0
 800cce0:	440b      	add	r3, r1
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	b25b      	sxtb	r3, r3
 800cce6:	4053      	eors	r3, r2
 800cce8:	b25b      	sxtb	r3, r3
 800ccea:	75bb      	strb	r3, [r7, #22]
 800ccec:	e01c      	b.n	800cd28 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800ccee:	7afb      	ldrb	r3, [r7, #11]
 800ccf0:	2b18      	cmp	r3, #24
 800ccf2:	d919      	bls.n	800cd28 <lorawan_aes_set_key+0x13c>
 800ccf4:	7dfb      	ldrb	r3, [r7, #23]
 800ccf6:	7afa      	ldrb	r2, [r7, #11]
 800ccf8:	fbb3 f1f2 	udiv	r1, r3, r2
 800ccfc:	fb01 f202 	mul.w	r2, r1, r2
 800cd00:	1a9b      	subs	r3, r3, r2
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	2b10      	cmp	r3, #16
 800cd06:	d10f      	bne.n	800cd28 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800cd08:	7d7b      	ldrb	r3, [r7, #21]
 800cd0a:	4a26      	ldr	r2, [pc, #152]	@ (800cda4 <lorawan_aes_set_key+0x1b8>)
 800cd0c:	5cd3      	ldrb	r3, [r2, r3]
 800cd0e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800cd10:	7d3b      	ldrb	r3, [r7, #20]
 800cd12:	4a24      	ldr	r2, [pc, #144]	@ (800cda4 <lorawan_aes_set_key+0x1b8>)
 800cd14:	5cd3      	ldrb	r3, [r2, r3]
 800cd16:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800cd18:	7cfb      	ldrb	r3, [r7, #19]
 800cd1a:	4a22      	ldr	r2, [pc, #136]	@ (800cda4 <lorawan_aes_set_key+0x1b8>)
 800cd1c:	5cd3      	ldrb	r3, [r2, r3]
 800cd1e:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800cd20:	7cbb      	ldrb	r3, [r7, #18]
 800cd22:	4a20      	ldr	r2, [pc, #128]	@ (800cda4 <lorawan_aes_set_key+0x1b8>)
 800cd24:	5cd3      	ldrb	r3, [r2, r3]
 800cd26:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800cd28:	7dfa      	ldrb	r2, [r7, #23]
 800cd2a:	7afb      	ldrb	r3, [r7, #11]
 800cd2c:	1ad3      	subs	r3, r2, r3
 800cd2e:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800cd30:	7c3b      	ldrb	r3, [r7, #16]
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	5cd1      	ldrb	r1, [r2, r3]
 800cd36:	7dfb      	ldrb	r3, [r7, #23]
 800cd38:	7d7a      	ldrb	r2, [r7, #21]
 800cd3a:	404a      	eors	r2, r1
 800cd3c:	b2d1      	uxtb	r1, r2
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800cd42:	7c3b      	ldrb	r3, [r7, #16]
 800cd44:	3301      	adds	r3, #1
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	5cd1      	ldrb	r1, [r2, r3]
 800cd4a:	7dfb      	ldrb	r3, [r7, #23]
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	7d3a      	ldrb	r2, [r7, #20]
 800cd50:	404a      	eors	r2, r1
 800cd52:	b2d1      	uxtb	r1, r2
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800cd58:	7c3b      	ldrb	r3, [r7, #16]
 800cd5a:	3302      	adds	r3, #2
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	5cd1      	ldrb	r1, [r2, r3]
 800cd60:	7dfb      	ldrb	r3, [r7, #23]
 800cd62:	3302      	adds	r3, #2
 800cd64:	7cfa      	ldrb	r2, [r7, #19]
 800cd66:	404a      	eors	r2, r1
 800cd68:	b2d1      	uxtb	r1, r2
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800cd6e:	7c3b      	ldrb	r3, [r7, #16]
 800cd70:	3303      	adds	r3, #3
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	5cd1      	ldrb	r1, [r2, r3]
 800cd76:	7dfb      	ldrb	r3, [r7, #23]
 800cd78:	3303      	adds	r3, #3
 800cd7a:	7cba      	ldrb	r2, [r7, #18]
 800cd7c:	404a      	eors	r2, r1
 800cd7e:	b2d1      	uxtb	r1, r2
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800cd84:	7dfb      	ldrb	r3, [r7, #23]
 800cd86:	3304      	adds	r3, #4
 800cd88:	75fb      	strb	r3, [r7, #23]
 800cd8a:	7dfa      	ldrb	r2, [r7, #23]
 800cd8c:	7c7b      	ldrb	r3, [r7, #17]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	f4ff af67 	bcc.w	800cc62 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800cd94:	2300      	movs	r3, #0
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3718      	adds	r7, #24
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	00010101 	.word	0x00010101
 800cda4:	0801db28 	.word	0x0801db28

0800cda8 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b08a      	sub	sp, #40	@ 0x28
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	60b9      	str	r1, [r7, #8]
 800cdb2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d038      	beq.n	800ce30 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	f107 0314 	add.w	r3, r7, #20
 800cdc4:	68f9      	ldr	r1, [r7, #12]
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7ff fc07 	bl	800c5da <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800cdcc:	2301      	movs	r3, #1
 800cdce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cdd2:	e014      	b.n	800cdfe <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800cdd4:	f107 0314 	add.w	r3, r7, #20
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7ff fd5d 	bl	800c898 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cde4:	0112      	lsls	r2, r2, #4
 800cde6:	441a      	add	r2, r3
 800cde8:	f107 0314 	add.w	r3, r7, #20
 800cdec:	4611      	mov	r1, r2
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7ff fcab 	bl	800c74a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800cdf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ce04:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d3e3      	bcc.n	800cdd4 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800ce0c:	f107 0314 	add.w	r3, r7, #20
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7ff fca7 	bl	800c764 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ce1c:	0112      	lsls	r2, r2, #4
 800ce1e:	441a      	add	r2, r3
 800ce20:	f107 0314 	add.w	r3, r7, #20
 800ce24:	4619      	mov	r1, r3
 800ce26:	68b8      	ldr	r0, [r7, #8]
 800ce28:	f7ff fbd7 	bl	800c5da <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	e000      	b.n	800ce32 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800ce30:	23ff      	movs	r3, #255	@ 0xff
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3728      	adds	r7, #40	@ 0x28
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
	...

0800ce3c <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800ce3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce3e:	b0a1      	sub	sp, #132	@ 0x84
 800ce40:	af12      	add	r7, sp, #72	@ 0x48
 800ce42:	4603      	mov	r3, r0
 800ce44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800ce48:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ce4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ce50:	4611      	mov	r1, r2
 800ce52:	4618      	mov	r0, r3
 800ce54:	f000 fa12 	bl	800d27c <SecureElementGetKeyByID>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d174      	bne.n	800cf48 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ce5e:	2300      	movs	r3, #0
 800ce60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ce64:	e06c      	b.n	800cf40 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800ce66:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800ce6a:	4939      	ldr	r1, [pc, #228]	@ (800cf50 <PrintKey+0x114>)
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	005b      	lsls	r3, r3, #1
 800ce70:	4413      	add	r3, r2
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	440b      	add	r3, r1
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d15a      	bne.n	800cf36 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800ce80:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800ce84:	4932      	ldr	r1, [pc, #200]	@ (800cf50 <PrintKey+0x114>)
 800ce86:	4613      	mov	r3, r2
 800ce88:	005b      	lsls	r3, r3, #1
 800ce8a:	4413      	add	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	440b      	add	r3, r1
 800ce90:	3308      	adds	r3, #8
 800ce92:	6819      	ldr	r1, [r3, #0]
 800ce94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce96:	785b      	ldrb	r3, [r3, #1]
 800ce98:	461d      	mov	r5, r3
 800ce9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9c:	789b      	ldrb	r3, [r3, #2]
 800ce9e:	461e      	mov	r6, r3
 800cea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea2:	78db      	ldrb	r3, [r3, #3]
 800cea4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea8:	791b      	ldrb	r3, [r3, #4]
 800ceaa:	627b      	str	r3, [r7, #36]	@ 0x24
 800ceac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceae:	795b      	ldrb	r3, [r3, #5]
 800ceb0:	623b      	str	r3, [r7, #32]
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb4:	799b      	ldrb	r3, [r3, #6]
 800ceb6:	61fb      	str	r3, [r7, #28]
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceba:	79db      	ldrb	r3, [r3, #7]
 800cebc:	61bb      	str	r3, [r7, #24]
 800cebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec0:	7a1b      	ldrb	r3, [r3, #8]
 800cec2:	617b      	str	r3, [r7, #20]
 800cec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec6:	7a5b      	ldrb	r3, [r3, #9]
 800cec8:	613b      	str	r3, [r7, #16]
 800ceca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cecc:	7a9b      	ldrb	r3, [r3, #10]
 800cece:	60fb      	str	r3, [r7, #12]
 800ced0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced2:	7adb      	ldrb	r3, [r3, #11]
 800ced4:	60bb      	str	r3, [r7, #8]
 800ced6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced8:	7b1b      	ldrb	r3, [r3, #12]
 800ceda:	607b      	str	r3, [r7, #4]
 800cedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cede:	7b5b      	ldrb	r3, [r3, #13]
 800cee0:	461c      	mov	r4, r3
 800cee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee4:	7b9b      	ldrb	r3, [r3, #14]
 800cee6:	4618      	mov	r0, r3
 800cee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceea:	7bdb      	ldrb	r3, [r3, #15]
 800ceec:	461a      	mov	r2, r3
 800ceee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef0:	7c1b      	ldrb	r3, [r3, #16]
 800cef2:	9310      	str	r3, [sp, #64]	@ 0x40
 800cef4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cef6:	900e      	str	r0, [sp, #56]	@ 0x38
 800cef8:	940d      	str	r4, [sp, #52]	@ 0x34
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	920c      	str	r2, [sp, #48]	@ 0x30
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	920a      	str	r2, [sp, #40]	@ 0x28
 800cf06:	693a      	ldr	r2, [r7, #16]
 800cf08:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf0a:	697a      	ldr	r2, [r7, #20]
 800cf0c:	9208      	str	r2, [sp, #32]
 800cf0e:	69ba      	ldr	r2, [r7, #24]
 800cf10:	9207      	str	r2, [sp, #28]
 800cf12:	69fa      	ldr	r2, [r7, #28]
 800cf14:	9206      	str	r2, [sp, #24]
 800cf16:	6a3a      	ldr	r2, [r7, #32]
 800cf18:	9205      	str	r2, [sp, #20]
 800cf1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf1c:	9204      	str	r2, [sp, #16]
 800cf1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf20:	9303      	str	r3, [sp, #12]
 800cf22:	9602      	str	r6, [sp, #8]
 800cf24:	9501      	str	r5, [sp, #4]
 800cf26:	9100      	str	r1, [sp, #0]
 800cf28:	4b0a      	ldr	r3, [pc, #40]	@ (800cf54 <PrintKey+0x118>)
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	2100      	movs	r1, #0
 800cf2e:	2002      	movs	r0, #2
 800cf30:	f00f fe86 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
 800cf34:	e008      	b.n	800cf48 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cf36:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cf40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf44:	2b0a      	cmp	r3, #10
 800cf46:	d98e      	bls.n	800ce66 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800cf48:	373c      	adds	r7, #60	@ 0x3c
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	0801de28 	.word	0x0801de28
 800cf54:	0801d6e4 	.word	0x0801d6e4

0800cf58 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800cf58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf5a:	b091      	sub	sp, #68	@ 0x44
 800cf5c:	af08      	add	r7, sp, #32
 800cf5e:	4603      	mov	r3, r0
 800cf60:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800cf62:	2300      	movs	r3, #0
 800cf64:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800cf66:	f107 0310 	add.w	r3, r7, #16
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f000 fbf0 	bl	800d750 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800cf70:	7c3b      	ldrb	r3, [r7, #16]
 800cf72:	7c7a      	ldrb	r2, [r7, #17]
 800cf74:	7cb9      	ldrb	r1, [r7, #18]
 800cf76:	7cf8      	ldrb	r0, [r7, #19]
 800cf78:	7d3c      	ldrb	r4, [r7, #20]
 800cf7a:	7d7d      	ldrb	r5, [r7, #21]
 800cf7c:	7dbe      	ldrb	r6, [r7, #22]
 800cf7e:	f897 c017 	ldrb.w	ip, [r7, #23]
 800cf82:	f8cd c01c 	str.w	ip, [sp, #28]
 800cf86:	9606      	str	r6, [sp, #24]
 800cf88:	9505      	str	r5, [sp, #20]
 800cf8a:	9404      	str	r4, [sp, #16]
 800cf8c:	9003      	str	r0, [sp, #12]
 800cf8e:	9102      	str	r1, [sp, #8]
 800cf90:	9201      	str	r2, [sp, #4]
 800cf92:	9300      	str	r3, [sp, #0]
 800cf94:	4b24      	ldr	r3, [pc, #144]	@ (800d028 <PrintIds+0xd0>)
 800cf96:	2200      	movs	r2, #0
 800cf98:	2100      	movs	r1, #0
 800cf9a:	2002      	movs	r0, #2
 800cf9c:	f00f fe50 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800cfa0:	f107 0318 	add.w	r3, r7, #24
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f000 fc03 	bl	800d7b0 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800cfaa:	7e3b      	ldrb	r3, [r7, #24]
 800cfac:	7e7a      	ldrb	r2, [r7, #25]
 800cfae:	7eb9      	ldrb	r1, [r7, #26]
 800cfb0:	7ef8      	ldrb	r0, [r7, #27]
 800cfb2:	7f3c      	ldrb	r4, [r7, #28]
 800cfb4:	7f7d      	ldrb	r5, [r7, #29]
 800cfb6:	7fbe      	ldrb	r6, [r7, #30]
 800cfb8:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800cfbc:	f8cd c01c 	str.w	ip, [sp, #28]
 800cfc0:	9606      	str	r6, [sp, #24]
 800cfc2:	9505      	str	r5, [sp, #20]
 800cfc4:	9404      	str	r4, [sp, #16]
 800cfc6:	9003      	str	r0, [sp, #12]
 800cfc8:	9102      	str	r1, [sp, #8]
 800cfca:	9201      	str	r2, [sp, #4]
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	4b17      	ldr	r3, [pc, #92]	@ (800d02c <PrintIds+0xd4>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	2002      	movs	r0, #2
 800cfd6:	f00f fe33 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800cfda:	f107 020c 	add.w	r2, r7, #12
 800cfde:	79fb      	ldrb	r3, [r7, #7]
 800cfe0:	4611      	mov	r1, r2
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f000 fc16 	bl	800d814 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800cfe8:	f107 030c 	add.w	r3, r7, #12
 800cfec:	3303      	adds	r3, #3
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	461a      	mov	r2, r3
 800cff2:	f107 030c 	add.w	r3, r7, #12
 800cff6:	3302      	adds	r3, #2
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	4619      	mov	r1, r3
 800cffc:	f107 030c 	add.w	r3, r7, #12
 800d000:	3301      	adds	r3, #1
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	4618      	mov	r0, r3
 800d006:	f107 030c 	add.w	r3, r7, #12
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	9303      	str	r3, [sp, #12]
 800d00e:	9002      	str	r0, [sp, #8]
 800d010:	9101      	str	r1, [sp, #4]
 800d012:	9200      	str	r2, [sp, #0]
 800d014:	4b06      	ldr	r3, [pc, #24]	@ (800d030 <PrintIds+0xd8>)
 800d016:	2200      	movs	r2, #0
 800d018:	2100      	movs	r1, #0
 800d01a:	2002      	movs	r0, #2
 800d01c:	f00f fe10 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800d020:	bf00      	nop
 800d022:	3724      	adds	r7, #36	@ 0x24
 800d024:	46bd      	mov	sp, r7
 800d026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d028:	0801d740 	.word	0x0801d740
 800d02c:	0801d780 	.word	0x0801d780
 800d030:	0801d7c0 	.word	0x0801d7c0

0800d034 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	4603      	mov	r3, r0
 800d03c:	6039      	str	r1, [r7, #0]
 800d03e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d040:	2300      	movs	r3, #0
 800d042:	73fb      	strb	r3, [r7, #15]
 800d044:	e01a      	b.n	800d07c <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d046:	4b12      	ldr	r3, [pc, #72]	@ (800d090 <GetKeyByID+0x5c>)
 800d048:	6819      	ldr	r1, [r3, #0]
 800d04a:	7bfa      	ldrb	r2, [r7, #15]
 800d04c:	4613      	mov	r3, r2
 800d04e:	011b      	lsls	r3, r3, #4
 800d050:	4413      	add	r3, r2
 800d052:	440b      	add	r3, r1
 800d054:	3318      	adds	r3, #24
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	79fa      	ldrb	r2, [r7, #7]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d10b      	bne.n	800d076 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800d05e:	4b0c      	ldr	r3, [pc, #48]	@ (800d090 <GetKeyByID+0x5c>)
 800d060:	6819      	ldr	r1, [r3, #0]
 800d062:	7bfa      	ldrb	r2, [r7, #15]
 800d064:	4613      	mov	r3, r2
 800d066:	011b      	lsls	r3, r3, #4
 800d068:	4413      	add	r3, r2
 800d06a:	3318      	adds	r3, #24
 800d06c:	18ca      	adds	r2, r1, r3
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d072:	2300      	movs	r3, #0
 800d074:	e006      	b.n	800d084 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d076:	7bfb      	ldrb	r3, [r7, #15]
 800d078:	3301      	adds	r3, #1
 800d07a:	73fb      	strb	r3, [r7, #15]
 800d07c:	7bfb      	ldrb	r3, [r7, #15]
 800d07e:	2b0a      	cmp	r3, #10
 800d080:	d9e1      	bls.n	800d046 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d082:	2303      	movs	r3, #3
}
 800d084:	4618      	mov	r0, r3
 800d086:	3714      	adds	r7, #20
 800d088:	46bd      	mov	sp, r7
 800d08a:	bc80      	pop	{r7}
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	20000564 	.word	0x20000564

0800d094 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800d094:	b590      	push	{r4, r7, lr}
 800d096:	b0d1      	sub	sp, #324	@ 0x144
 800d098:	af00      	add	r7, sp, #0
 800d09a:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800d09e:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800d0a2:	6020      	str	r0, [r4, #0]
 800d0a4:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800d0a8:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800d0ac:	6001      	str	r1, [r0, #0]
 800d0ae:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800d0b2:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800d0b6:	600a      	str	r2, [r1, #0]
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d0be:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800d0c2:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800d0c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d0c8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d003      	beq.n	800d0da <ComputeCmac+0x46>
 800d0d2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d101      	bne.n	800d0de <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d0da:	2302      	movs	r3, #2
 800d0dc:	e05d      	b.n	800d19a <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800d0de:	f107 0314 	add.w	r3, r7, #20
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fe ff02 	bl	800beec <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800d0e8:	f107 0210 	add.w	r2, r7, #16
 800d0ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d0f0:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	4611      	mov	r1, r2
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7ff ff9b 	bl	800d034 <GetKeyByID>
 800d0fe:	4603      	mov	r3, r0
 800d100:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d104:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d144      	bne.n	800d196 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800d10c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d110:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	1c5a      	adds	r2, r3, #1
 800d118:	f107 0314 	add.w	r3, r7, #20
 800d11c:	4611      	mov	r1, r2
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fe fefd 	bl	800bf1e <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800d124:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d128:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d009      	beq.n	800d146 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800d132:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d136:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d13a:	f107 0014 	add.w	r0, r7, #20
 800d13e:	2210      	movs	r2, #16
 800d140:	6819      	ldr	r1, [r3, #0]
 800d142:	f7fe fefb 	bl	800bf3c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800d146:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d14a:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800d14e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d152:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d156:	f107 0014 	add.w	r0, r7, #20
 800d15a:	6812      	ldr	r2, [r2, #0]
 800d15c:	6819      	ldr	r1, [r3, #0]
 800d15e:	f7fe feed 	bl	800bf3c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800d162:	f107 0214 	add.w	r2, r7, #20
 800d166:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800d16a:	4611      	mov	r1, r2
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7fe ffa7 	bl	800c0c0 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800d172:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800d176:	461a      	mov	r2, r3
 800d178:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800d17c:	021b      	lsls	r3, r3, #8
 800d17e:	431a      	orrs	r2, r3
 800d180:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800d184:	041b      	lsls	r3, r3, #16
 800d186:	431a      	orrs	r2, r3
 800d188:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d18c:	061b      	lsls	r3, r3, #24
 800d18e:	431a      	orrs	r2, r3
 800d190:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800d194:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800d196:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd90      	pop	{r4, r7, pc}

0800d1a4 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d101      	bne.n	800d1b6 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d1b2:	2302      	movs	r3, #2
 800d1b4:	e00a      	b.n	800d1cc <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800d1b6:	4a07      	ldr	r2, [pc, #28]	@ (800d1d4 <SecureElementInit+0x30>)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800d1bc:	4b05      	ldr	r3, [pc, #20]	@ (800d1d4 <SecureElementInit+0x30>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	22d8      	movs	r2, #216	@ 0xd8
 800d1c2:	4905      	ldr	r1, [pc, #20]	@ (800d1d8 <SecureElementInit+0x34>)
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f00b f99a 	bl	80184fe <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800d1ca:	2300      	movs	r3, #0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}
 800d1d4:	20000564 	.word	0x20000564
 800d1d8:	0801e0c8 	.word	0x0801e0c8

0800d1dc <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b086      	sub	sp, #24
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800d1ea:	f107 030c 	add.w	r3, r7, #12
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f000 faae 	bl	800d750 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800d1f4:	f107 0308 	add.w	r3, r7, #8
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	2001      	movs	r0, #1
 800d1fc:	f000 fb0a 	bl	800d814 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d024      	beq.n	800d250 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800d206:	2300      	movs	r3, #0
 800d208:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800d20a:	2300      	movs	r3, #0
 800d20c:	75bb      	strb	r3, [r7, #22]
 800d20e:	e00c      	b.n	800d22a <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800d210:	7dbb      	ldrb	r3, [r7, #22]
 800d212:	3318      	adds	r3, #24
 800d214:	443b      	add	r3, r7
 800d216:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d002      	beq.n	800d224 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800d21e:	2301      	movs	r3, #1
 800d220:	75fb      	strb	r3, [r7, #23]
                break;
 800d222:	e005      	b.n	800d230 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800d224:	7dbb      	ldrb	r3, [r7, #22]
 800d226:	3301      	adds	r3, #1
 800d228:	75bb      	strb	r3, [r7, #22]
 800d22a:	7dbb      	ldrb	r3, [r7, #22]
 800d22c:	2b07      	cmp	r3, #7
 800d22e:	d9ef      	bls.n	800d210 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800d230:	7dfb      	ldrb	r3, [r7, #23]
 800d232:	f083 0301 	eor.w	r3, r3, #1
 800d236:	b2db      	uxtb	r3, r3
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d009      	beq.n	800d250 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800d23c:	f107 020c 	add.w	r2, r7, #12
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	4610      	mov	r0, r2
 800d244:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800d246:	f107 030c 	add.w	r3, r7, #12
 800d24a:	4618      	mov	r0, r3
 800d24c:	f000 fa68 	bl	800d720 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d00c      	beq.n	800d270 <SecureElementInitMcuID+0x94>
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d109      	bne.n	800d270 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800d25c:	f107 0208 	add.w	r2, r7, #8
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	4610      	mov	r0, r2
 800d264:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	4619      	mov	r1, r3
 800d26a:	2001      	movs	r0, #1
 800d26c:	f000 fab8 	bl	800d7e0 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d270:	2300      	movs	r3, #0
}
 800d272:	4618      	mov	r0, r3
 800d274:	3718      	adds	r7, #24
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
	...

0800d27c <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800d27c:	b480      	push	{r7}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	4603      	mov	r3, r0
 800d284:	6039      	str	r1, [r7, #0]
 800d286:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d288:	2300      	movs	r3, #0
 800d28a:	73fb      	strb	r3, [r7, #15]
 800d28c:	e01a      	b.n	800d2c4 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d28e:	4b12      	ldr	r3, [pc, #72]	@ (800d2d8 <SecureElementGetKeyByID+0x5c>)
 800d290:	6819      	ldr	r1, [r3, #0]
 800d292:	7bfa      	ldrb	r2, [r7, #15]
 800d294:	4613      	mov	r3, r2
 800d296:	011b      	lsls	r3, r3, #4
 800d298:	4413      	add	r3, r2
 800d29a:	440b      	add	r3, r1
 800d29c:	3318      	adds	r3, #24
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	79fa      	ldrb	r2, [r7, #7]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d10b      	bne.n	800d2be <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800d2a6:	4b0c      	ldr	r3, [pc, #48]	@ (800d2d8 <SecureElementGetKeyByID+0x5c>)
 800d2a8:	6819      	ldr	r1, [r3, #0]
 800d2aa:	7bfa      	ldrb	r2, [r7, #15]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	011b      	lsls	r3, r3, #4
 800d2b0:	4413      	add	r3, r2
 800d2b2:	3318      	adds	r3, #24
 800d2b4:	18ca      	adds	r2, r1, r3
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	e006      	b.n	800d2cc <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d2be:	7bfb      	ldrb	r3, [r7, #15]
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	73fb      	strb	r3, [r7, #15]
 800d2c4:	7bfb      	ldrb	r3, [r7, #15]
 800d2c6:	2b0a      	cmp	r3, #10
 800d2c8:	d9e1      	bls.n	800d28e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d2ca:	2303      	movs	r3, #3
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3714      	adds	r7, #20
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bc80      	pop	{r7}
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop
 800d2d8:	20000564 	.word	0x20000564

0800d2dc <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	f7ff fdab 	bl	800ce3c <PrintKey>
    PrintKey( NWK_KEY );
 800d2e6:	2001      	movs	r0, #1
 800d2e8:	f7ff fda8 	bl	800ce3c <PrintKey>
    PrintKey( APP_S_KEY );
 800d2ec:	2009      	movs	r0, #9
 800d2ee:	f7ff fda5 	bl	800ce3c <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800d2f2:	2008      	movs	r0, #8
 800d2f4:	f7ff fda2 	bl	800ce3c <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	f7ff fe2d 	bl	800cf58 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	bd80      	pop	{r7, pc}

0800d304 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	4603      	mov	r3, r0
 800d30c:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800d30e:	200b      	movs	r0, #11
 800d310:	f7ff fd94 	bl	800ce3c <PrintKey>
    PrintKey( MC_KE_KEY );
 800d314:	200c      	movs	r0, #12
 800d316:	f7ff fd91 	bl	800ce3c <PrintKey>
    PrintKey( APP_S_KEY );
 800d31a:	2009      	movs	r0, #9
 800d31c:	f7ff fd8e 	bl	800ce3c <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800d320:	2008      	movs	r0, #8
 800d322:	f7ff fd8b 	bl	800ce3c <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800d326:	200a      	movs	r0, #10
 800d328:	f7ff fd88 	bl	800ce3c <PrintKey>
    PrintIds( mode );
 800d32c:	79fb      	ldrb	r3, [r7, #7]
 800d32e:	4618      	mov	r0, r3
 800d330:	f7ff fe12 	bl	800cf58 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800d334:	2300      	movs	r3, #0
}
 800d336:	4618      	mov	r0, r3
 800d338:	3708      	adds	r7, #8
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
	...

0800d340 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b088      	sub	sp, #32
 800d344:	af00      	add	r7, sp, #0
 800d346:	4603      	mov	r3, r0
 800d348:	6039      	str	r1, [r7, #0]
 800d34a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d101      	bne.n	800d356 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d352:	2302      	movs	r3, #2
 800d354:	e04c      	b.n	800d3f0 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d356:	2300      	movs	r3, #0
 800d358:	77fb      	strb	r3, [r7, #31]
 800d35a:	e045      	b.n	800d3e8 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d35c:	4b26      	ldr	r3, [pc, #152]	@ (800d3f8 <SecureElementSetKey+0xb8>)
 800d35e:	6819      	ldr	r1, [r3, #0]
 800d360:	7ffa      	ldrb	r2, [r7, #31]
 800d362:	4613      	mov	r3, r2
 800d364:	011b      	lsls	r3, r3, #4
 800d366:	4413      	add	r3, r2
 800d368:	440b      	add	r3, r1
 800d36a:	3318      	adds	r3, #24
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	79fa      	ldrb	r2, [r7, #7]
 800d370:	429a      	cmp	r2, r3
 800d372:	d136      	bne.n	800d3e2 <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800d374:	79fb      	ldrb	r3, [r7, #7]
 800d376:	2b0d      	cmp	r3, #13
 800d378:	d123      	bne.n	800d3c2 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d37a:	2306      	movs	r3, #6
 800d37c:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800d37e:	2300      	movs	r3, #0
 800d380:	60fb      	str	r3, [r7, #12]
 800d382:	f107 0310 	add.w	r3, r7, #16
 800d386:	2200      	movs	r2, #0
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	605a      	str	r2, [r3, #4]
 800d38c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800d38e:	f107 030c 	add.w	r3, r7, #12
 800d392:	220c      	movs	r2, #12
 800d394:	2110      	movs	r1, #16
 800d396:	6838      	ldr	r0, [r7, #0]
 800d398:	f000 f876 	bl	800d488 <SecureElementAesEncrypt>
 800d39c:	4603      	mov	r3, r0
 800d39e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800d3a0:	4b15      	ldr	r3, [pc, #84]	@ (800d3f8 <SecureElementSetKey+0xb8>)
 800d3a2:	6819      	ldr	r1, [r3, #0]
 800d3a4:	7ffa      	ldrb	r2, [r7, #31]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	011b      	lsls	r3, r3, #4
 800d3aa:	4413      	add	r3, r2
 800d3ac:	3318      	adds	r3, #24
 800d3ae:	440b      	add	r3, r1
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	f107 010c 	add.w	r1, r7, #12
 800d3b6:	2210      	movs	r2, #16
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f00b f8a0 	bl	80184fe <memcpy1>
                return retval;
 800d3be:	7fbb      	ldrb	r3, [r7, #30]
 800d3c0:	e016      	b.n	800d3f0 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800d3c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d3f8 <SecureElementSetKey+0xb8>)
 800d3c4:	6819      	ldr	r1, [r3, #0]
 800d3c6:	7ffa      	ldrb	r2, [r7, #31]
 800d3c8:	4613      	mov	r3, r2
 800d3ca:	011b      	lsls	r3, r3, #4
 800d3cc:	4413      	add	r3, r2
 800d3ce:	3318      	adds	r3, #24
 800d3d0:	440b      	add	r3, r1
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	2210      	movs	r2, #16
 800d3d6:	6839      	ldr	r1, [r7, #0]
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f00b f890 	bl	80184fe <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	e006      	b.n	800d3f0 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d3e2:	7ffb      	ldrb	r3, [r7, #31]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	77fb      	strb	r3, [r7, #31]
 800d3e8:	7ffb      	ldrb	r3, [r7, #31]
 800d3ea:	2b0a      	cmp	r3, #10
 800d3ec:	d9b6      	bls.n	800d35c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d3ee:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3720      	adds	r7, #32
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	20000564 	.word	0x20000564

0800d3fc <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b086      	sub	sp, #24
 800d400:	af02      	add	r7, sp, #8
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
 800d408:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800d40a:	78fb      	ldrb	r3, [r7, #3]
 800d40c:	2b0b      	cmp	r3, #11
 800d40e:	d901      	bls.n	800d414 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d410:	2303      	movs	r3, #3
 800d412:	e009      	b.n	800d428 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800d414:	78fa      	ldrb	r2, [r7, #3]
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	9300      	str	r3, [sp, #0]
 800d41a:	4613      	mov	r3, r2
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	68b9      	ldr	r1, [r7, #8]
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	f7ff fe37 	bl	800d094 <ComputeCmac>
 800d426:	4603      	mov	r3, r0
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b088      	sub	sp, #32
 800d434:	af02      	add	r7, sp, #8
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	607a      	str	r2, [r7, #4]
 800d43c:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d101      	bne.n	800d448 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d444:	2302      	movs	r3, #2
 800d446:	e01b      	b.n	800d480 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800d448:	2306      	movs	r3, #6
 800d44a:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800d44c:	2300      	movs	r3, #0
 800d44e:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800d450:	78fa      	ldrb	r2, [r7, #3]
 800d452:	f107 0310 	add.w	r3, r7, #16
 800d456:	9300      	str	r3, [sp, #0]
 800d458:	4613      	mov	r3, r2
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	68f9      	ldr	r1, [r7, #12]
 800d45e:	2000      	movs	r0, #0
 800d460:	f7ff fe18 	bl	800d094 <ComputeCmac>
 800d464:	4603      	mov	r3, r0
 800d466:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d468:	7dfb      	ldrb	r3, [r7, #23]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800d46e:	7dfb      	ldrb	r3, [r7, #23]
 800d470:	e006      	b.n	800d480 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	429a      	cmp	r2, r3
 800d478:	d001      	beq.n	800d47e <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800d47a:	2301      	movs	r3, #1
 800d47c:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800d47e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d480:	4618      	mov	r0, r3
 800d482:	3718      	adds	r7, #24
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b0c2      	sub	sp, #264	@ 0x108
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d494:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800d498:	6001      	str	r1, [r0, #0]
 800d49a:	4611      	mov	r1, r2
 800d49c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d4a0:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800d4a4:	6013      	str	r3, [r2, #0]
 800d4a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4aa:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800d4ae:	460a      	mov	r2, r1
 800d4b0:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d006      	beq.n	800d4c6 <SecureElementAesEncrypt+0x3e>
 800d4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d101      	bne.n	800d4ca <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d4c6:	2302      	movs	r3, #2
 800d4c8:	e059      	b.n	800d57e <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800d4ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4ce:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f003 030f 	and.w	r3, r3, #15
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d001      	beq.n	800d4e0 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d4dc:	2305      	movs	r3, #5
 800d4de:	e04e      	b.n	800d57e <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800d4e0:	f107 0314 	add.w	r3, r7, #20
 800d4e4:	22f0      	movs	r2, #240	@ 0xf0
 800d4e6:	2100      	movs	r1, #0
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f00b f843 	bl	8018574 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d4ee:	f107 0210 	add.w	r2, r7, #16
 800d4f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4f6:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	4611      	mov	r1, r2
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7ff fd98 	bl	800d034 <GetKeyByID>
 800d504:	4603      	mov	r3, r0
 800d506:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d50a:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d133      	bne.n	800d57a <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	3301      	adds	r3, #1
 800d516:	f107 0214 	add.w	r2, r7, #20
 800d51a:	2110      	movs	r1, #16
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7ff fb65 	bl	800cbec <lorawan_aes_set_key>

        uint8_t block = 0;
 800d522:	2300      	movs	r3, #0
 800d524:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800d528:	e020      	b.n	800d56c <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800d52a:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	18d0      	adds	r0, r2, r3
 800d532:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d536:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d53a:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800d53e:	6812      	ldr	r2, [r2, #0]
 800d540:	4413      	add	r3, r2
 800d542:	f107 0214 	add.w	r2, r7, #20
 800d546:	4619      	mov	r1, r3
 800d548:	f7ff fc2e 	bl	800cda8 <lorawan_aes_encrypt>
            block = block + 16;
 800d54c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d550:	3310      	adds	r3, #16
 800d552:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800d556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d55a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d55e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d562:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800d566:	6812      	ldr	r2, [r2, #0]
 800d568:	3a10      	subs	r2, #16
 800d56a:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800d56c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d570:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d1d7      	bne.n	800d52a <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800d57a:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800d57e:	4618      	mov	r0, r3
 800d580:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b088      	sub	sp, #32
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	70fb      	strb	r3, [r7, #3]
 800d594:	4613      	mov	r3, r2
 800d596:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d101      	bne.n	800d5a2 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d59e:	2302      	movs	r3, #2
 800d5a0:	e02e      	b.n	800d600 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800d5a2:	2306      	movs	r3, #6
 800d5a4:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800d5a6:	78bb      	ldrb	r3, [r7, #2]
 800d5a8:	2b0c      	cmp	r3, #12
 800d5aa:	d104      	bne.n	800d5b6 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800d5ac:	78fb      	ldrb	r3, [r7, #3]
 800d5ae:	2b0b      	cmp	r3, #11
 800d5b0:	d001      	beq.n	800d5b6 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d5b2:	2303      	movs	r3, #3
 800d5b4:	e024      	b.n	800d600 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	60fb      	str	r3, [r7, #12]
 800d5ba:	f107 0310 	add.w	r3, r7, #16
 800d5be:	2200      	movs	r2, #0
 800d5c0:	601a      	str	r2, [r3, #0]
 800d5c2:	605a      	str	r2, [r3, #4]
 800d5c4:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800d5c6:	f107 030c 	add.w	r3, r7, #12
 800d5ca:	78fa      	ldrb	r2, [r7, #3]
 800d5cc:	2110      	movs	r1, #16
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f7ff ff5a 	bl	800d488 <SecureElementAesEncrypt>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d5d8:	7ffb      	ldrb	r3, [r7, #31]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d001      	beq.n	800d5e2 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800d5de:	7ffb      	ldrb	r3, [r7, #31]
 800d5e0:	e00e      	b.n	800d600 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800d5e2:	f107 020c 	add.w	r2, r7, #12
 800d5e6:	78bb      	ldrb	r3, [r7, #2]
 800d5e8:	4611      	mov	r1, r2
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7ff fea8 	bl	800d340 <SecureElementSetKey>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d5f4:	7ffb      	ldrb	r3, [r7, #31]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d001      	beq.n	800d5fe <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800d5fa:	7ffb      	ldrb	r3, [r7, #31]
 800d5fc:	e000      	b.n	800d600 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d5fe:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d600:	4618      	mov	r0, r3
 800d602:	3720      	adds	r7, #32
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b086      	sub	sp, #24
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60b9      	str	r1, [r7, #8]
 800d610:	607b      	str	r3, [r7, #4]
 800d612:	4603      	mov	r3, r0
 800d614:	73fb      	strb	r3, [r7, #15]
 800d616:	4613      	mov	r3, r2
 800d618:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d005      	beq.n	800d62c <SecureElementProcessJoinAccept+0x24>
 800d620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d622:	2b00      	cmp	r3, #0
 800d624:	d002      	beq.n	800d62c <SecureElementProcessJoinAccept+0x24>
 800d626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d101      	bne.n	800d630 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d62c:	2302      	movs	r3, #2
 800d62e:	e05c      	b.n	800d6ea <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800d630:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d634:	2b21      	cmp	r3, #33	@ 0x21
 800d636:	d901      	bls.n	800d63c <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d638:	2305      	movs	r3, #5
 800d63a:	e056      	b.n	800d6ea <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800d63c:	2301      	movs	r3, #1
 800d63e:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800d640:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d644:	b29b      	uxth	r3, r3
 800d646:	461a      	mov	r2, r3
 800d648:	6879      	ldr	r1, [r7, #4]
 800d64a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d64c:	f00a ff57 	bl	80184fe <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	1c58      	adds	r0, r3, #1
 800d654:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d658:	3b01      	subs	r3, #1
 800d65a:	4619      	mov	r1, r3
 800d65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d65e:	3301      	adds	r3, #1
 800d660:	7dfa      	ldrb	r2, [r7, #23]
 800d662:	f7ff ff11 	bl	800d488 <SecureElementAesEncrypt>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d001      	beq.n	800d670 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d66c:	2307      	movs	r3, #7
 800d66e:	e03c      	b.n	800d6ea <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800d670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d672:	330b      	adds	r3, #11
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	09db      	lsrs	r3, r3, #7
 800d678:	b2da      	uxtb	r2, r3
 800d67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d67c:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800d67e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d682:	3b04      	subs	r3, #4
 800d684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d686:	4413      	add	r3, r2
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	4619      	mov	r1, r3
 800d68c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d690:	3b03      	subs	r3, #3
 800d692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d694:	4413      	add	r3, r2
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	021b      	lsls	r3, r3, #8
 800d69a:	ea41 0203 	orr.w	r2, r1, r3
 800d69e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d6a2:	3b02      	subs	r3, #2
 800d6a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d6a6:	440b      	add	r3, r1
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	041b      	lsls	r3, r3, #16
 800d6ac:	431a      	orrs	r2, r3
 800d6ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d6b2:	3b01      	subs	r3, #1
 800d6b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d6b6:	440b      	add	r3, r1
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	061b      	lsls	r3, r3, #24
 800d6bc:	4313      	orrs	r3, r2
 800d6be:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800d6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d10d      	bne.n	800d6e4 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800d6c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d6cc:	3b04      	subs	r3, #4
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	693a      	ldr	r2, [r7, #16]
 800d6d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d6d6:	f7ff feab 	bl	800d430 <SecureElementVerifyAesCmac>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d003      	beq.n	800d6e8 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	e002      	b.n	800d6ea <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d6e4:	2304      	movs	r3, #4
 800d6e6:	e000      	b.n	800d6ea <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d6e8:	2300      	movs	r3, #0
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3718      	adds	r7, #24
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
	...

0800d6f4 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d101      	bne.n	800d706 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d702:	2302      	movs	r3, #2
 800d704:	e006      	b.n	800d714 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800d706:	4b05      	ldr	r3, [pc, #20]	@ (800d71c <SecureElementRandomNumber+0x28>)
 800d708:	695b      	ldr	r3, [r3, #20]
 800d70a:	4798      	blx	r3
 800d70c:	4602      	mov	r2, r0
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800d712:	2300      	movs	r3, #0
}
 800d714:	4618      	mov	r0, r3
 800d716:	3708      	adds	r7, #8
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	0801df78 	.word	0x0801df78

0800d720 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d101      	bne.n	800d732 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d72e:	2302      	movs	r3, #2
 800d730:	e007      	b.n	800d742 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800d732:	4b06      	ldr	r3, [pc, #24]	@ (800d74c <SecureElementSetDevEui+0x2c>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2208      	movs	r2, #8
 800d738:	6879      	ldr	r1, [r7, #4]
 800d73a:	4618      	mov	r0, r3
 800d73c:	f00a fedf 	bl	80184fe <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d740:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d742:	4618      	mov	r0, r3
 800d744:	3708      	adds	r7, #8
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	20000564 	.word	0x20000564

0800d750 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d101      	bne.n	800d762 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d75e:	2302      	movs	r3, #2
 800d760:	e007      	b.n	800d772 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800d762:	4b06      	ldr	r3, [pc, #24]	@ (800d77c <SecureElementGetDevEui+0x2c>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	2208      	movs	r2, #8
 800d768:	4619      	mov	r1, r3
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f00a fec7 	bl	80184fe <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d770:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d772:	4618      	mov	r0, r3
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	20000564 	.word	0x20000564

0800d780 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d101      	bne.n	800d792 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d78e:	2302      	movs	r3, #2
 800d790:	e008      	b.n	800d7a4 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800d792:	4b06      	ldr	r3, [pc, #24]	@ (800d7ac <SecureElementSetJoinEui+0x2c>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	3308      	adds	r3, #8
 800d798:	2208      	movs	r2, #8
 800d79a:	6879      	ldr	r1, [r7, #4]
 800d79c:	4618      	mov	r0, r3
 800d79e:	f00a feae 	bl	80184fe <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d7a2:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3708      	adds	r7, #8
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	20000564 	.word	0x20000564

0800d7b0 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d101      	bne.n	800d7c2 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d7be:	2302      	movs	r3, #2
 800d7c0:	e008      	b.n	800d7d4 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800d7c2:	4b06      	ldr	r3, [pc, #24]	@ (800d7dc <SecureElementGetJoinEui+0x2c>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	3308      	adds	r3, #8
 800d7c8:	2208      	movs	r2, #8
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f00a fe96 	bl	80184fe <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d7d2:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	20000564 	.word	0x20000564

0800d7e0 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	6039      	str	r1, [r7, #0]
 800d7ea:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800d7ec:	79fb      	ldrb	r3, [r7, #7]
 800d7ee:	2b02      	cmp	r3, #2
 800d7f0:	d104      	bne.n	800d7fc <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800d7f2:	4b07      	ldr	r3, [pc, #28]	@ (800d810 <SecureElementSetDevAddr+0x30>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	683a      	ldr	r2, [r7, #0]
 800d7f8:	611a      	str	r2, [r3, #16]
 800d7fa:	e003      	b.n	800d804 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800d7fc:	4b04      	ldr	r3, [pc, #16]	@ (800d810 <SecureElementSetDevAddr+0x30>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	683a      	ldr	r2, [r7, #0]
 800d802:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800d804:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800d806:	4618      	mov	r0, r3
 800d808:	370c      	adds	r7, #12
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bc80      	pop	{r7}
 800d80e:	4770      	bx	lr
 800d810:	20000564 	.word	0x20000564

0800d814 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800d814:	b480      	push	{r7}
 800d816:	b083      	sub	sp, #12
 800d818:	af00      	add	r7, sp, #0
 800d81a:	4603      	mov	r3, r0
 800d81c:	6039      	str	r1, [r7, #0]
 800d81e:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d101      	bne.n	800d82a <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d826:	2302      	movs	r3, #2
 800d828:	e00e      	b.n	800d848 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800d82a:	79fb      	ldrb	r3, [r7, #7]
 800d82c:	2b02      	cmp	r3, #2
 800d82e:	d105      	bne.n	800d83c <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800d830:	4b08      	ldr	r3, [pc, #32]	@ (800d854 <SecureElementGetDevAddr+0x40>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	691a      	ldr	r2, [r3, #16]
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	601a      	str	r2, [r3, #0]
 800d83a:	e004      	b.n	800d846 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800d83c:	4b05      	ldr	r3, [pc, #20]	@ (800d854 <SecureElementGetDevAddr+0x40>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	695a      	ldr	r2, [r3, #20]
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800d846:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800d848:	4618      	mov	r0, r3
 800d84a:	370c      	adds	r7, #12
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bc80      	pop	{r7}
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	20000564 	.word	0x20000564

0800d858 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800d862:	4a22      	ldr	r2, [pc, #136]	@ (800d8ec <LmHandlerInit+0x94>)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d868:	4b21      	ldr	r3, [pc, #132]	@ (800d8f0 <LmHandlerInit+0x98>)
 800d86a:	4a22      	ldr	r2, [pc, #136]	@ (800d8f4 <LmHandlerInit+0x9c>)
 800d86c:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d86e:	4b20      	ldr	r3, [pc, #128]	@ (800d8f0 <LmHandlerInit+0x98>)
 800d870:	4a21      	ldr	r2, [pc, #132]	@ (800d8f8 <LmHandlerInit+0xa0>)
 800d872:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d874:	4b1e      	ldr	r3, [pc, #120]	@ (800d8f0 <LmHandlerInit+0x98>)
 800d876:	4a21      	ldr	r2, [pc, #132]	@ (800d8fc <LmHandlerInit+0xa4>)
 800d878:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d87a:	4b1d      	ldr	r3, [pc, #116]	@ (800d8f0 <LmHandlerInit+0x98>)
 800d87c:	4a20      	ldr	r2, [pc, #128]	@ (800d900 <LmHandlerInit+0xa8>)
 800d87e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800d880:	4b1a      	ldr	r3, [pc, #104]	@ (800d8ec <LmHandlerInit+0x94>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4a1f      	ldr	r2, [pc, #124]	@ (800d904 <LmHandlerInit+0xac>)
 800d888:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800d88a:	4b18      	ldr	r3, [pc, #96]	@ (800d8ec <LmHandlerInit+0x94>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	685b      	ldr	r3, [r3, #4]
 800d890:	4a1c      	ldr	r2, [pc, #112]	@ (800d904 <LmHandlerInit+0xac>)
 800d892:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800d894:	4b15      	ldr	r3, [pc, #84]	@ (800d8ec <LmHandlerInit+0x94>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	4a1a      	ldr	r2, [pc, #104]	@ (800d904 <LmHandlerInit+0xac>)
 800d89c:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800d89e:	4b13      	ldr	r3, [pc, #76]	@ (800d8ec <LmHandlerInit+0x94>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	68db      	ldr	r3, [r3, #12]
 800d8a4:	4a17      	ldr	r2, [pc, #92]	@ (800d904 <LmHandlerInit+0xac>)
 800d8a6:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800d8a8:	4b16      	ldr	r3, [pc, #88]	@ (800d904 <LmHandlerInit+0xac>)
 800d8aa:	4a17      	ldr	r2, [pc, #92]	@ (800d908 <LmHandlerInit+0xb0>)
 800d8ac:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800d8ae:	4b0f      	ldr	r3, [pc, #60]	@ (800d8ec <LmHandlerInit+0x94>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	699b      	ldr	r3, [r3, #24]
 800d8b4:	4a13      	ldr	r2, [pc, #76]	@ (800d904 <LmHandlerInit+0xac>)
 800d8b6:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800d8b8:	4914      	ldr	r1, [pc, #80]	@ (800d90c <LmHandlerInit+0xb4>)
 800d8ba:	2000      	movs	r0, #0
 800d8bc:	f000 fdd8 	bl	800e470 <LmHandlerPackageRegister>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d002      	beq.n	800d8cc <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800d8c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d8ca:	e00a      	b.n	800d8e2 <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800d8cc:	463b      	mov	r3, r7
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f001 fb1c 	bl	800ef0c <LmhpPackagesRegistrationInit>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d002      	beq.n	800d8e0 <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800d8da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d8de:	e000      	b.n	800d8e2 <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d8e0:	2300      	movs	r3, #0
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3708      	adds	r7, #8
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	200005ac 	.word	0x200005ac
 800d8f0:	200005b0 	.word	0x200005b0
 800d8f4:	0800e135 	.word	0x0800e135
 800d8f8:	0800e1a9 	.word	0x0800e1a9
 800d8fc:	0800e289 	.word	0x0800e289
 800d900:	0800e3dd 	.word	0x0800e3dd
 800d904:	200005c0 	.word	0x200005c0
 800d908:	0800e889 	.word	0x0800e889
 800d90c:	20000080 	.word	0x20000080

0800d910 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b092      	sub	sp, #72	@ 0x48
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800d918:	2218      	movs	r2, #24
 800d91a:	6879      	ldr	r1, [r7, #4]
 800d91c:	4883      	ldr	r0, [pc, #524]	@ (800db2c <LmHandlerConfigure+0x21c>)
 800d91e:	f00a fdee 	bl	80184fe <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800d922:	f7fe fa17 	bl	800bd54 <LoraInfo_GetPtr>
 800d926:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800d928:	4b80      	ldr	r3, [pc, #512]	@ (800db2c <LmHandlerConfigure+0x21c>)
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	461a      	mov	r2, r3
 800d92e:	2301      	movs	r3, #1
 800d930:	4093      	lsls	r3, r2
 800d932:	461a      	mov	r2, r3
 800d934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	4013      	ands	r3, r2
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d107      	bne.n	800d94e <LmHandlerConfigure+0x3e>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800d93e:	4b7c      	ldr	r3, [pc, #496]	@ (800db30 <LmHandlerConfigure+0x220>)
 800d940:	2201      	movs	r2, #1
 800d942:	2100      	movs	r1, #0
 800d944:	2000      	movs	r0, #0
 800d946:	f00f f97b 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800d94a:	bf00      	nop
 800d94c:	e7fd      	b.n	800d94a <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800d94e:	4b77      	ldr	r3, [pc, #476]	@ (800db2c <LmHandlerConfigure+0x21c>)
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	461a      	mov	r2, r3
 800d954:	4977      	ldr	r1, [pc, #476]	@ (800db34 <LmHandlerConfigure+0x224>)
 800d956:	4878      	ldr	r0, [pc, #480]	@ (800db38 <LmHandlerConfigure+0x228>)
 800d958:	f004 fd60 	bl	801241c <LoRaMacInitialization>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d002      	beq.n	800d968 <LmHandlerConfigure+0x58>
    {
        return LORAMAC_HANDLER_ERROR;
 800d962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d966:	e0dc      	b.n	800db22 <LmHandlerConfigure+0x212>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800d968:	2326      	movs	r3, #38	@ 0x26
 800d96a:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d96c:	f107 0318 	add.w	r3, r7, #24
 800d970:	4618      	mov	r0, r3
 800d972:	f005 fab1 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d103      	bne.n	800d984 <LmHandlerConfigure+0x74>
    {
        CtxRestoreDone = true;
 800d97c:	4b6f      	ldr	r3, [pc, #444]	@ (800db3c <LmHandlerConfigure+0x22c>)
 800d97e:	2201      	movs	r2, #1
 800d980:	701a      	strb	r2, [r3, #0]
 800d982:	e02a      	b.n	800d9da <LmHandlerConfigure+0xca>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800d984:	2327      	movs	r3, #39	@ 0x27
 800d986:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800d988:	4b6d      	ldr	r3, [pc, #436]	@ (800db40 <LmHandlerConfigure+0x230>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	691b      	ldr	r3, [r3, #16]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d00c      	beq.n	800d9ac <LmHandlerConfigure+0x9c>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d992:	f107 0318 	add.w	r3, r7, #24
 800d996:	4618      	mov	r0, r3
 800d998:	f005 f8e6 	bl	8012b68 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800d99c:	4b68      	ldr	r3, [pc, #416]	@ (800db40 <LmHandlerConfigure+0x230>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	691b      	ldr	r3, [r3, #16]
 800d9a2:	69fa      	ldr	r2, [r7, #28]
 800d9a4:	f44f 61ef 	mov.w	r1, #1912	@ 0x778
 800d9a8:	4610      	mov	r0, r2
 800d9aa:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800d9ac:	2326      	movs	r3, #38	@ 0x26
 800d9ae:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d9b0:	f107 0318 	add.w	r3, r7, #24
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f005 fa8f 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d10c      	bne.n	800d9da <LmHandlerConfigure+0xca>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d9c4:	f107 0318 	add.w	r3, r7, #24
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f005 f8cd 	bl	8012b68 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d9ce:	7f3b      	ldrb	r3, [r7, #28]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d002      	beq.n	800d9da <LmHandlerConfigure+0xca>
            {
                CtxRestoreDone = true;
 800d9d4:	4b59      	ldr	r3, [pc, #356]	@ (800db3c <LmHandlerConfigure+0x22c>)
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800d9da:	4b58      	ldr	r3, [pc, #352]	@ (800db3c <LmHandlerConfigure+0x22c>)
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d022      	beq.n	800da28 <LmHandlerConfigure+0x118>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800d9e2:	4b57      	ldr	r3, [pc, #348]	@ (800db40 <LmHandlerConfigure+0x230>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	69db      	ldr	r3, [r3, #28]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d004      	beq.n	800d9f6 <LmHandlerConfigure+0xe6>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800d9ec:	4b54      	ldr	r3, [pc, #336]	@ (800db40 <LmHandlerConfigure+0x230>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	69db      	ldr	r3, [r3, #28]
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800d9f6:	2326      	movs	r3, #38	@ 0x26
 800d9f8:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800d9fa:	f107 0318 	add.w	r3, r7, #24
 800d9fe:	4618      	mov	r0, r3
 800da00:	f005 f8b2 	bl	8012b68 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800da08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da0a:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800da0e:	4b47      	ldr	r3, [pc, #284]	@ (800db2c <LmHandlerConfigure+0x21c>)
 800da10:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800da12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da14:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800da18:	4b44      	ldr	r3, [pc, #272]	@ (800db2c <LmHandlerConfigure+0x21c>)
 800da1a:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800da1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da1e:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800da22:	4b42      	ldr	r3, [pc, #264]	@ (800db2c <LmHandlerConfigure+0x21c>)
 800da24:	709a      	strb	r2, [r3, #2]
 800da26:	e008      	b.n	800da3a <LmHandlerConfigure+0x12a>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800da28:	2305      	movs	r3, #5
 800da2a:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800da2c:	2300      	movs	r3, #0
 800da2e:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800da30:	f107 0318 	add.w	r3, r7, #24
 800da34:	4618      	mov	r0, r3
 800da36:	f005 fa4f 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800da3a:	4b3e      	ldr	r3, [pc, #248]	@ (800db34 <LmHandlerConfigure+0x224>)
 800da3c:	689b      	ldr	r3, [r3, #8]
 800da3e:	4a3d      	ldr	r2, [pc, #244]	@ (800db34 <LmHandlerConfigure+0x224>)
 800da40:	68d2      	ldr	r2, [r2, #12]
 800da42:	4611      	mov	r1, r2
 800da44:	4618      	mov	r0, r3
 800da46:	f7ff fbc9 	bl	800d1dc <SecureElementInitMcuID>
 800da4a:	4603      	mov	r3, r0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <LmHandlerConfigure+0x146>
    {
        return LORAMAC_HANDLER_ERROR;
 800da50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800da54:	e065      	b.n	800db22 <LmHandlerConfigure+0x212>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800da56:	2306      	movs	r3, #6
 800da58:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800da5a:	f107 0318 	add.w	r3, r7, #24
 800da5e:	4618      	mov	r0, r3
 800da60:	f005 f882 	bl	8012b68 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	4a37      	ldr	r2, [pc, #220]	@ (800db44 <LmHandlerConfigure+0x234>)
 800da68:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800da6a:	f107 0318 	add.w	r3, r7, #24
 800da6e:	4618      	mov	r0, r3
 800da70:	f005 fa32 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800da74:	2302      	movs	r3, #2
 800da76:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800da78:	4b32      	ldr	r3, [pc, #200]	@ (800db44 <LmHandlerConfigure+0x234>)
 800da7a:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800da7c:	f107 0318 	add.w	r3, r7, #24
 800da80:	4618      	mov	r0, r3
 800da82:	f005 f871 	bl	8012b68 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800da86:	2303      	movs	r3, #3
 800da88:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800da8a:	4b2f      	ldr	r3, [pc, #188]	@ (800db48 <LmHandlerConfigure+0x238>)
 800da8c:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800da8e:	f107 0318 	add.w	r3, r7, #24
 800da92:	4618      	mov	r0, r3
 800da94:	f005 f868 	bl	8012b68 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800da98:	f7ff fc20 	bl	800d2dc <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800da9c:	230f      	movs	r3, #15
 800da9e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800daa0:	2301      	movs	r3, #1
 800daa2:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800daa4:	f107 0318 	add.w	r3, r7, #24
 800daa8:	4618      	mov	r0, r3
 800daaa:	f005 fa15 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800daae:	2310      	movs	r3, #16
 800dab0:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800dab2:	2300      	movs	r3, #0
 800dab4:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dab6:	f107 0318 	add.w	r3, r7, #24
 800daba:	4618      	mov	r0, r3
 800dabc:	f005 fa0c 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800dac0:	2304      	movs	r3, #4
 800dac2:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800dac4:	4b19      	ldr	r3, [pc, #100]	@ (800db2c <LmHandlerConfigure+0x21c>)
 800dac6:	789b      	ldrb	r3, [r3, #2]
 800dac8:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800daca:	f107 0318 	add.w	r3, r7, #24
 800dace:	4618      	mov	r0, r3
 800dad0:	f005 fa02 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800dad4:	2339      	movs	r3, #57	@ 0x39
 800dad6:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800dad8:	4b14      	ldr	r3, [pc, #80]	@ (800db2c <LmHandlerConfigure+0x21c>)
 800dada:	695b      	ldr	r3, [r3, #20]
 800dadc:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dade:	f107 0318 	add.w	r3, r7, #24
 800dae2:	4618      	mov	r0, r3
 800dae4:	f005 f9f8 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800dae8:	230f      	movs	r3, #15
 800daea:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800daec:	4b0f      	ldr	r3, [pc, #60]	@ (800db2c <LmHandlerConfigure+0x21c>)
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	f107 0210 	add.w	r2, r7, #16
 800daf4:	4611      	mov	r1, r2
 800daf6:	4618      	mov	r0, r3
 800daf8:	f008 f8cb 	bl	8015c92 <RegionGetPhyParam>
 800dafc:	4603      	mov	r3, r0
 800dafe:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2b00      	cmp	r3, #0
 800db04:	bf14      	ite	ne
 800db06:	2301      	movne	r3, #1
 800db08:	2300      	moveq	r3, #0
 800db0a:	b2da      	uxtb	r2, r3
 800db0c:	4b07      	ldr	r3, [pc, #28]	@ (800db2c <LmHandlerConfigure+0x21c>)
 800db0e:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800db10:	2014      	movs	r0, #20
 800db12:	f000 faf7 	bl	800e104 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800db16:	4b05      	ldr	r3, [pc, #20]	@ (800db2c <LmHandlerConfigure+0x21c>)
 800db18:	79db      	ldrb	r3, [r3, #7]
 800db1a:	4618      	mov	r0, r3
 800db1c:	f005 ffb8 	bl	8013a90 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800db20:	2300      	movs	r3, #0
}
 800db22:	4618      	mov	r0, r3
 800db24:	3748      	adds	r7, #72	@ 0x48
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	20000594 	.word	0x20000594
 800db30:	0801d7ec 	.word	0x0801d7ec
 800db34:	200005c0 	.word	0x200005c0
 800db38:	200005b0 	.word	0x200005b0
 800db3c:	200006ce 	.word	0x200006ce
 800db40:	200005ac 	.word	0x200005ac
 800db44:	20000568 	.word	0x20000568
 800db48:	20000570 	.word	0x20000570

0800db4c <LmHandlerIsBusy>:

bool LmHandlerIsBusy( void )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == true )
 800db50:	f002 f948 	bl	800fde4 <LoRaMacIsBusy>
 800db54:	4603      	mov	r3, r0
 800db56:	2b00      	cmp	r3, #0
 800db58:	d001      	beq.n	800db5e <LmHandlerIsBusy+0x12>
    {
        return true;
 800db5a:	2301      	movs	r3, #1
 800db5c:	e01f      	b.n	800db9e <LmHandlerIsBusy+0x52>
    }
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800db5e:	f000 f8df 	bl	800dd20 <LmHandlerJoinStatus>
 800db62:	4603      	mov	r3, r0
 800db64:	2b01      	cmp	r3, #1
 800db66:	d009      	beq.n	800db7c <LmHandlerIsBusy+0x30>
    {
        /* The network isn't yet joined, try again later. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800db68:	4b0e      	ldr	r3, [pc, #56]	@ (800dba4 <LmHandlerIsBusy+0x58>)
 800db6a:	79db      	ldrb	r3, [r3, #7]
 800db6c:	4a0d      	ldr	r2, [pc, #52]	@ (800dba4 <LmHandlerIsBusy+0x58>)
 800db6e:	7a12      	ldrb	r2, [r2, #8]
 800db70:	4611      	mov	r1, r2
 800db72:	4618      	mov	r0, r3
 800db74:	f000 f830 	bl	800dbd8 <LmHandlerJoin>
        return true;
 800db78:	2301      	movs	r3, #1
 800db7a:	e010      	b.n	800db9e <LmHandlerIsBusy+0x52>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800db7c:	4b0a      	ldr	r3, [pc, #40]	@ (800dba8 <LmHandlerIsBusy+0x5c>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	68db      	ldr	r3, [r3, #12]
 800db82:	4798      	blx	r3
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d001      	beq.n	800db8e <LmHandlerIsBusy+0x42>
    {
        return true;
 800db8a:	2301      	movs	r3, #1
 800db8c:	e007      	b.n	800db9e <LmHandlerIsBusy+0x52>
    }
#endif /* LORAMAC_VERSION */

    if( LmHandlerPackageIsTxPending( ) == true )
 800db8e:	f000 fd7f 	bl	800e690 <LmHandlerPackageIsTxPending>
 800db92:	4603      	mov	r3, r0
 800db94:	2b00      	cmp	r3, #0
 800db96:	d001      	beq.n	800db9c <LmHandlerIsBusy+0x50>
    {
        return true;
 800db98:	2301      	movs	r3, #1
 800db9a:	e000      	b.n	800db9e <LmHandlerIsBusy+0x52>
    }

    return false;
 800db9c:	2300      	movs	r3, #0
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	2000008c 	.word	0x2000008c
 800dba8:	20000580 	.word	0x20000580

0800dbac <LmHandlerProcess>:

void LmHandlerProcess( void )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800dbb0:	f002 fb8c 	bl	80102cc <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800dbb4:	f000 fd9a 	bl	800e6ec <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800dbb8:	f000 fd6a 	bl	800e690 <LmHandlerPackageIsTxPending>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800dbc0:	bd80      	pop	{r7, pc}
	...

0800dbc4 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800dbc8:	4b02      	ldr	r3, [pc, #8]	@ (800dbd4 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800dbca:	681b      	ldr	r3, [r3, #0]
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bc80      	pop	{r7}
 800dbd2:	4770      	bx	lr
 800dbd4:	200005d8 	.word	0x200005d8

0800dbd8 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b092      	sub	sp, #72	@ 0x48
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	4603      	mov	r3, r0
 800dbe0:	460a      	mov	r2, r1
 800dbe2:	71fb      	strb	r3, [r7, #7]
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800dbee:	4b47      	ldr	r3, [pc, #284]	@ (800dd0c <LmHandlerJoin+0x134>)
 800dbf0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800dbfa:	4b44      	ldr	r3, [pc, #272]	@ (800dd0c <LmHandlerJoin+0x134>)
 800dbfc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800dc00:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800dc04:	79fb      	ldrb	r3, [r7, #7]
 800dc06:	2b02      	cmp	r3, #2
 800dc08:	d110      	bne.n	800dc2c <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800dc0a:	2302      	movs	r3, #2
 800dc0c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800dc10:	4b3f      	ldr	r3, [pc, #252]	@ (800dd10 <LmHandlerJoin+0x138>)
 800dc12:	2202      	movs	r2, #2
 800dc14:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800dc16:	4a3e      	ldr	r2, [pc, #248]	@ (800dd10 <LmHandlerJoin+0x138>)
 800dc18:	79bb      	ldrb	r3, [r7, #6]
 800dc1a:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800dc1c:	f004 feb0 	bl	8012980 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800dc20:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dc24:	4618      	mov	r0, r3
 800dc26:	f005 fceb 	bl	8013600 <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800dc2a:	e06b      	b.n	800dd04 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800dc32:	4b37      	ldr	r3, [pc, #220]	@ (800dd10 <LmHandlerJoin+0x138>)
 800dc34:	2201      	movs	r2, #1
 800dc36:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800dc38:	4b34      	ldr	r3, [pc, #208]	@ (800dd0c <LmHandlerJoin+0x134>)
 800dc3a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800dc3e:	4b34      	ldr	r3, [pc, #208]	@ (800dd10 <LmHandlerJoin+0x138>)
 800dc40:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800dc42:	4b32      	ldr	r3, [pc, #200]	@ (800dd0c <LmHandlerJoin+0x134>)
 800dc44:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800dc48:	4b31      	ldr	r3, [pc, #196]	@ (800dd10 <LmHandlerJoin+0x138>)
 800dc4a:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800dc4c:	4b30      	ldr	r3, [pc, #192]	@ (800dd10 <LmHandlerJoin+0x138>)
 800dc4e:	2200      	movs	r2, #0
 800dc50:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800dc52:	4a2f      	ldr	r2, [pc, #188]	@ (800dd10 <LmHandlerJoin+0x138>)
 800dc54:	79bb      	ldrb	r3, [r7, #6]
 800dc56:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800dc58:	4b2e      	ldr	r3, [pc, #184]	@ (800dd14 <LmHandlerJoin+0x13c>)
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	f083 0301 	eor.w	r3, r3, #1
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d034      	beq.n	800dcd0 <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800dc66:	231e      	movs	r3, #30
 800dc68:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800dc6a:	4b28      	ldr	r3, [pc, #160]	@ (800dd0c <LmHandlerJoin+0x134>)
 800dc6c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800dc70:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800dc72:	f107 030c 	add.w	r3, r7, #12
 800dc76:	4618      	mov	r0, r3
 800dc78:	f005 f92e 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800dc7c:	231f      	movs	r3, #31
 800dc7e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800dc80:	4b22      	ldr	r3, [pc, #136]	@ (800dd0c <LmHandlerJoin+0x134>)
 800dc82:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800dc86:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800dc88:	f107 030c 	add.w	r3, r7, #12
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f005 f923 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800dc92:	2321      	movs	r3, #33	@ 0x21
 800dc94:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800dc96:	4b1d      	ldr	r3, [pc, #116]	@ (800dd0c <LmHandlerJoin+0x134>)
 800dc98:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800dc9c:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800dc9e:	f107 030c 	add.w	r3, r7, #12
 800dca2:	4618      	mov	r0, r3
 800dca4:	f005 f918 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800dca8:	2320      	movs	r3, #32
 800dcaa:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800dcac:	4b17      	ldr	r3, [pc, #92]	@ (800dd0c <LmHandlerJoin+0x134>)
 800dcae:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800dcb2:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800dcb4:	f107 030c 	add.w	r3, r7, #12
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f005 f90d 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800dcbe:	2328      	movs	r3, #40	@ 0x28
 800dcc0:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800dcc2:	4b15      	ldr	r3, [pc, #84]	@ (800dd18 <LmHandlerJoin+0x140>)
 800dcc4:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800dcc6:	f107 030c 	add.w	r3, r7, #12
 800dcca:	4618      	mov	r0, r3
 800dccc:	f005 f904 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800dcd0:	f004 fe56 	bl	8012980 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800dcdc:	f107 030c 	add.w	r3, r7, #12
 800dce0:	4618      	mov	r0, r3
 800dce2:	f005 f8f9 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800dce6:	4b0d      	ldr	r3, [pc, #52]	@ (800dd1c <LmHandlerJoin+0x144>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d004      	beq.n	800dcfa <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800dcf0:	4b0a      	ldr	r3, [pc, #40]	@ (800dd1c <LmHandlerJoin+0x144>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcf6:	4806      	ldr	r0, [pc, #24]	@ (800dd10 <LmHandlerJoin+0x138>)
 800dcf8:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800dcfa:	4b04      	ldr	r3, [pc, #16]	@ (800dd0c <LmHandlerJoin+0x134>)
 800dcfc:	785b      	ldrb	r3, [r3, #1]
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f000 f930 	bl	800df64 <LmHandlerRequestClass>
}
 800dd04:	bf00      	nop
 800dd06:	3748      	adds	r7, #72	@ 0x48
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	20000594 	.word	0x20000594
 800dd10:	2000008c 	.word	0x2000008c
 800dd14:	200006ce 	.word	0x200006ce
 800dd18:	01000300 	.word	0x01000300
 800dd1c:	200005ac 	.word	0x200005ac

0800dd20 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b08c      	sub	sp, #48	@ 0x30
 800dd24:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800dd26:	2301      	movs	r3, #1
 800dd28:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800dd2a:	1d3b      	adds	r3, r7, #4
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f004 ff1b 	bl	8012b68 <LoRaMacMibGetRequestConfirm>
 800dd32:	4603      	mov	r3, r0
 800dd34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800dd38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d106      	bne.n	800dd4e <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800dd40:	7a3b      	ldrb	r3, [r7, #8]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d101      	bne.n	800dd4a <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800dd46:	2300      	movs	r3, #0
 800dd48:	e002      	b.n	800dd50 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	e000      	b.n	800dd50 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800dd4e:	2300      	movs	r3, #0
    }
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3730      	adds	r7, #48	@ 0x30
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b08a      	sub	sp, #40	@ 0x28
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	460b      	mov	r3, r1
 800dd62:	70fb      	strb	r3, [r7, #3]
 800dd64:	4613      	mov	r3, r2
 800dd66:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800dd68:	23ff      	movs	r3, #255	@ 0xff
 800dd6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800dd6e:	f002 f839 	bl	800fde4 <LoRaMacIsBusy>
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d002      	beq.n	800dd7e <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800dd78:	f06f 0301 	mvn.w	r3, #1
 800dd7c:	e0bc      	b.n	800def8 <LmHandlerSend+0x1a0>
    }

    if( LoRaMacIsStopped() == true )
 800dd7e:	f002 f84d 	bl	800fe1c <LoRaMacIsStopped>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d002      	beq.n	800dd8e <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800dd88:	f06f 0302 	mvn.w	r3, #2
 800dd8c:	e0b4      	b.n	800def8 <LmHandlerSend+0x1a0>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800dd8e:	f7ff ffc7 	bl	800dd20 <LmHandlerJoinStatus>
 800dd92:	4603      	mov	r3, r0
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d00a      	beq.n	800ddae <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800dd98:	4b59      	ldr	r3, [pc, #356]	@ (800df00 <LmHandlerSend+0x1a8>)
 800dd9a:	79db      	ldrb	r3, [r3, #7]
 800dd9c:	4a58      	ldr	r2, [pc, #352]	@ (800df00 <LmHandlerSend+0x1a8>)
 800dd9e:	7a12      	ldrb	r2, [r2, #8]
 800dda0:	4611      	mov	r1, r2
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7ff ff18 	bl	800dbd8 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800dda8:	f06f 0302 	mvn.w	r3, #2
 800ddac:	e0a4      	b.n	800def8 <LmHandlerSend+0x1a0>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800ddae:	4b55      	ldr	r3, [pc, #340]	@ (800df04 <LmHandlerSend+0x1ac>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	4798      	blx	r3
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d00d      	beq.n	800ddd8 <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	781a      	ldrb	r2, [r3, #0]
 800ddc0:	4b50      	ldr	r3, [pc, #320]	@ (800df04 <LmHandlerSend+0x1ac>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d006      	beq.n	800ddd8 <LmHandlerSend+0x80>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d002      	beq.n	800ddd8 <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800ddd2:	f06f 0303 	mvn.w	r3, #3
 800ddd6:	e08f      	b.n	800def8 <LmHandlerSend+0x1a0>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800ddd8:	4a4b      	ldr	r2, [pc, #300]	@ (800df08 <LmHandlerSend+0x1b0>)
 800ddda:	78fb      	ldrb	r3, [r7, #3]
 800dddc:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800ddde:	78fb      	ldrb	r3, [r7, #3]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	bf14      	ite	ne
 800dde4:	2301      	movne	r3, #1
 800dde6:	2300      	moveq	r3, #0
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800ddec:	4b47      	ldr	r3, [pc, #284]	@ (800df0c <LmHandlerSend+0x1b4>)
 800ddee:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ddf2:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	785b      	ldrb	r3, [r3, #1]
 800ddf8:	f107 020c 	add.w	r2, r7, #12
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	4618      	mov	r0, r3
 800de00:	f004 fe2c 	bl	8012a5c <LoRaMacQueryTxPossible>
 800de04:	4603      	mov	r3, r0
 800de06:	2b00      	cmp	r3, #0
 800de08:	d009      	beq.n	800de1e <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800de0a:	2300      	movs	r3, #0
 800de0c:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800de0e:	2300      	movs	r3, #0
 800de10:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800de12:	2300      	movs	r3, #0
 800de14:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800de16:	23f9      	movs	r3, #249	@ 0xf9
 800de18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800de1c:	e008      	b.n	800de30 <LmHandlerSend+0xd8>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	785b      	ldrb	r3, [r3, #1]
 800de28:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800de30:	4b35      	ldr	r3, [pc, #212]	@ (800df08 <LmHandlerSend+0x1b0>)
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	3310      	adds	r3, #16
 800de36:	e892 0003 	ldmia.w	r2, {r0, r1}
 800de3a:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800de3e:	4b33      	ldr	r3, [pc, #204]	@ (800df0c <LmHandlerSend+0x1b4>)
 800de40:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800de44:	4b30      	ldr	r3, [pc, #192]	@ (800df08 <LmHandlerSend+0x1b0>)
 800de46:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800de48:	78ba      	ldrb	r2, [r7, #2]
 800de4a:	f107 0310 	add.w	r3, r7, #16
 800de4e:	4611      	mov	r1, r2
 800de50:	4618      	mov	r0, r3
 800de52:	f005 fd27 	bl	80138a4 <LoRaMacMcpsRequest>
 800de56:	4603      	mov	r3, r0
 800de58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800de5c:	6a3b      	ldr	r3, [r7, #32]
 800de5e:	4a2c      	ldr	r2, [pc, #176]	@ (800df10 <LmHandlerSend+0x1b8>)
 800de60:	6013      	str	r3, [r2, #0]

    switch( status )
 800de62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800de66:	2b11      	cmp	r3, #17
 800de68:	d83f      	bhi.n	800deea <LmHandlerSend+0x192>
 800de6a:	a201      	add	r2, pc, #4	@ (adr r2, 800de70 <LmHandlerSend+0x118>)
 800de6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de70:	0800deb9 	.word	0x0800deb9
 800de74:	0800decb 	.word	0x0800decb
 800de78:	0800deeb 	.word	0x0800deeb
 800de7c:	0800deeb 	.word	0x0800deeb
 800de80:	0800deeb 	.word	0x0800deeb
 800de84:	0800deeb 	.word	0x0800deeb
 800de88:	0800deeb 	.word	0x0800deeb
 800de8c:	0800ded3 	.word	0x0800ded3
 800de90:	0800deeb 	.word	0x0800deeb
 800de94:	0800deeb 	.word	0x0800deeb
 800de98:	0800deeb 	.word	0x0800deeb
 800de9c:	0800dee3 	.word	0x0800dee3
 800dea0:	0800deeb 	.word	0x0800deeb
 800dea4:	0800deeb 	.word	0x0800deeb
 800dea8:	0800decb 	.word	0x0800decb
 800deac:	0800decb 	.word	0x0800decb
 800deb0:	0800decb 	.word	0x0800decb
 800deb4:	0800dedb 	.word	0x0800dedb
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800deb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800debc:	f113 0f07 	cmn.w	r3, #7
 800dec0:	d017      	beq.n	800def2 <LmHandlerSend+0x19a>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800dec2:	2300      	movs	r3, #0
 800dec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800dec8:	e013      	b.n	800def2 <LmHandlerSend+0x19a>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800deca:	23fe      	movs	r3, #254	@ 0xfe
 800decc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ded0:	e010      	b.n	800def4 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ded2:	23fd      	movs	r3, #253	@ 0xfd
 800ded4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ded8:	e00c      	b.n	800def4 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800deda:	23fb      	movs	r3, #251	@ 0xfb
 800dedc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800dee0:	e008      	b.n	800def4 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800dee2:	23fa      	movs	r3, #250	@ 0xfa
 800dee4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800dee8:	e004      	b.n	800def4 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800deea:	23ff      	movs	r3, #255	@ 0xff
 800deec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800def0:	e000      	b.n	800def4 <LmHandlerSend+0x19c>
            break;
 800def2:	bf00      	nop
    }

    return lmhStatus;
 800def4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800def8:	4618      	mov	r0, r3
 800defa:	3728      	adds	r7, #40	@ 0x28
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}
 800df00:	2000008c 	.word	0x2000008c
 800df04:	20000580 	.word	0x20000580
 800df08:	20000098 	.word	0x20000098
 800df0c:	20000594 	.word	0x20000594
 800df10:	200005d8 	.word	0x200005d8

0800df14 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b086      	sub	sp, #24
 800df18:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800df1a:	230a      	movs	r3, #10
 800df1c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800df1e:	463b      	mov	r3, r7
 800df20:	4618      	mov	r0, r3
 800df22:	f005 fb6d 	bl	8013600 <LoRaMacMlmeRequest>
 800df26:	4603      	mov	r3, r0
 800df28:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	4a06      	ldr	r2, [pc, #24]	@ (800df48 <LmHandlerDeviceTimeReq+0x34>)
 800df2e:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800df30:	7dfb      	ldrb	r3, [r7, #23]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d101      	bne.n	800df3a <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800df36:	2300      	movs	r3, #0
 800df38:	e001      	b.n	800df3e <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800df3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3718      	adds	r7, #24
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	200005d8 	.word	0x200005d8

0800df4c <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800df4c:	b480      	push	{r7}
 800df4e:	b083      	sub	sp, #12
 800df50:	af00      	add	r7, sp, #0
 800df52:	4603      	mov	r3, r0
 800df54:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800df56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	370c      	adds	r7, #12
 800df5e:	46bd      	mov	sp, r7
 800df60:	bc80      	pop	{r7}
 800df62:	4770      	bx	lr

0800df64 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b08e      	sub	sp, #56	@ 0x38
 800df68:	af00      	add	r7, sp, #0
 800df6a:	4603      	mov	r3, r0
 800df6c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800df6e:	2300      	movs	r3, #0
 800df70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800df74:	f001 ff36 	bl	800fde4 <LoRaMacIsBusy>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d002      	beq.n	800df84 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800df7e:	f06f 0301 	mvn.w	r3, #1
 800df82:	e071      	b.n	800e068 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800df84:	f7ff fecc 	bl	800dd20 <LmHandlerJoinStatus>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d002      	beq.n	800df94 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800df8e:	f06f 0302 	mvn.w	r3, #2
 800df92:	e069      	b.n	800e068 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800df94:	2300      	movs	r3, #0
 800df96:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800df98:	f107 030c 	add.w	r3, r7, #12
 800df9c:	4618      	mov	r0, r3
 800df9e:	f004 fde3 	bl	8012b68 <LoRaMacMibGetRequestConfirm>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d002      	beq.n	800dfae <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800dfa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dfac:	e05c      	b.n	800e068 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800dfae:	7c3b      	ldrb	r3, [r7, #16]
 800dfb0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800dfb4:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800dfb8:	79fb      	ldrb	r3, [r7, #7]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d052      	beq.n	800e064 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800dfbe:	79fb      	ldrb	r3, [r7, #7]
 800dfc0:	2b02      	cmp	r3, #2
 800dfc2:	d028      	beq.n	800e016 <LmHandlerRequestClass+0xb2>
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	dc48      	bgt.n	800e05a <LmHandlerRequestClass+0xf6>
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d002      	beq.n	800dfd2 <LmHandlerRequestClass+0x6e>
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d01e      	beq.n	800e00e <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800dfd0:	e043      	b.n	800e05a <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800dfd2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d041      	beq.n	800e05e <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800dfda:	79fb      	ldrb	r3, [r7, #7]
 800dfdc:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800dfde:	f107 030c 	add.w	r3, r7, #12
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f004 ff78 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d10b      	bne.n	800e006 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800dfee:	4b20      	ldr	r3, [pc, #128]	@ (800e070 <LmHandlerRequestClass+0x10c>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d032      	beq.n	800e05e <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800dff8:	4b1d      	ldr	r3, [pc, #116]	@ (800e070 <LmHandlerRequestClass+0x10c>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dffe:	79fa      	ldrb	r2, [r7, #7]
 800e000:	4610      	mov	r0, r2
 800e002:	4798      	blx	r3
                break;
 800e004:	e02b      	b.n	800e05e <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800e006:	23ff      	movs	r3, #255	@ 0xff
 800e008:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e00c:	e027      	b.n	800e05e <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800e00e:	23ff      	movs	r3, #255	@ 0xff
 800e010:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e014:	e026      	b.n	800e064 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800e016:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d003      	beq.n	800e026 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800e01e:	23ff      	movs	r3, #255	@ 0xff
 800e020:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e024:	e01d      	b.n	800e062 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800e026:	79fb      	ldrb	r3, [r7, #7]
 800e028:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e02a:	f107 030c 	add.w	r3, r7, #12
 800e02e:	4618      	mov	r0, r3
 800e030:	f004 ff52 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d10b      	bne.n	800e052 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800e03a:	4b0d      	ldr	r3, [pc, #52]	@ (800e070 <LmHandlerRequestClass+0x10c>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e040:	2b00      	cmp	r3, #0
 800e042:	d00e      	beq.n	800e062 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800e044:	4b0a      	ldr	r3, [pc, #40]	@ (800e070 <LmHandlerRequestClass+0x10c>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e04a:	79fa      	ldrb	r2, [r7, #7]
 800e04c:	4610      	mov	r0, r2
 800e04e:	4798      	blx	r3
                break;
 800e050:	e007      	b.n	800e062 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800e052:	23ff      	movs	r3, #255	@ 0xff
 800e054:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e058:	e003      	b.n	800e062 <LmHandlerRequestClass+0xfe>
                break;
 800e05a:	bf00      	nop
 800e05c:	e002      	b.n	800e064 <LmHandlerRequestClass+0x100>
                break;
 800e05e:	bf00      	nop
 800e060:	e000      	b.n	800e064 <LmHandlerRequestClass+0x100>
                break;
 800e062:	bf00      	nop
        }
    }
    return errorStatus;
 800e064:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3738      	adds	r7, #56	@ 0x38
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	200005ac 	.word	0x200005ac

0800e074 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b08c      	sub	sp, #48	@ 0x30
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d102      	bne.n	800e088 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e082:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e086:	e010      	b.n	800e0aa <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e088:	2300      	movs	r3, #0
 800e08a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e08c:	f107 0308 	add.w	r3, r7, #8
 800e090:	4618      	mov	r0, r3
 800e092:	f004 fd69 	bl	8012b68 <LoRaMacMibGetRequestConfirm>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d002      	beq.n	800e0a2 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e09c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0a0:	e003      	b.n	800e0aa <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800e0a2:	7b3a      	ldrb	r2, [r7, #12]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3730      	adds	r7, #48	@ 0x30
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
	...

0800e0b4 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b08c      	sub	sp, #48	@ 0x30
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d102      	bne.n	800e0c8 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e0c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0c6:	e016      	b.n	800e0f6 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800e0c8:	231f      	movs	r3, #31
 800e0ca:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800e0cc:	f107 0308 	add.w	r3, r7, #8
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f004 fd49 	bl	8012b68 <LoRaMacMibGetRequestConfirm>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d002      	beq.n	800e0e2 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e0dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0e0:	e009      	b.n	800e0f6 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800e0e2:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f993 2000 	ldrsb.w	r2, [r3]
 800e0f0:	4b03      	ldr	r3, [pc, #12]	@ (800e100 <LmHandlerGetTxDatarate+0x4c>)
 800e0f2:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800e0f4:	2300      	movs	r3, #0
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3730      	adds	r7, #48	@ 0x30
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	20000594 	.word	0x20000594

0800e104 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b08c      	sub	sp, #48	@ 0x30
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800e10c:	2322      	movs	r3, #34	@ 0x22
 800e10e:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e114:	f107 0308 	add.w	r3, r7, #8
 800e118:	4618      	mov	r0, r3
 800e11a:	f004 fedd 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d002      	beq.n	800e12a <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800e124:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e128:	e000      	b.n	800e12c <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3730      	adds	r7, #48	@ 0x30
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800e13c:	4b18      	ldr	r3, [pc, #96]	@ (800e1a0 <McpsConfirm+0x6c>)
 800e13e:	2201      	movs	r2, #1
 800e140:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	785a      	ldrb	r2, [r3, #1]
 800e146:	4b16      	ldr	r3, [pc, #88]	@ (800e1a0 <McpsConfirm+0x6c>)
 800e148:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	789b      	ldrb	r3, [r3, #2]
 800e14e:	b25a      	sxtb	r2, r3
 800e150:	4b13      	ldr	r3, [pc, #76]	@ (800e1a0 <McpsConfirm+0x6c>)
 800e152:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	4a11      	ldr	r2, [pc, #68]	@ (800e1a0 <McpsConfirm+0x6c>)
 800e15a:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800e162:	4b0f      	ldr	r3, [pc, #60]	@ (800e1a0 <McpsConfirm+0x6c>)
 800e164:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	691b      	ldr	r3, [r3, #16]
 800e16a:	b2da      	uxtb	r2, r3
 800e16c:	4b0c      	ldr	r3, [pc, #48]	@ (800e1a0 <McpsConfirm+0x6c>)
 800e16e:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	791b      	ldrb	r3, [r3, #4]
 800e174:	461a      	mov	r2, r3
 800e176:	4b0a      	ldr	r3, [pc, #40]	@ (800e1a0 <McpsConfirm+0x6c>)
 800e178:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800e17a:	4b0a      	ldr	r3, [pc, #40]	@ (800e1a4 <McpsConfirm+0x70>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e180:	2b00      	cmp	r3, #0
 800e182:	d004      	beq.n	800e18e <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800e184:	4b07      	ldr	r3, [pc, #28]	@ (800e1a4 <McpsConfirm+0x70>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e18a:	4805      	ldr	r0, [pc, #20]	@ (800e1a0 <McpsConfirm+0x6c>)
 800e18c:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800e18e:	6879      	ldr	r1, [r7, #4]
 800e190:	2000      	movs	r0, #0
 800e192:	f000 f9eb 	bl	800e56c <LmHandlerPackagesNotify>
}
 800e196:	bf00      	nop
 800e198:	3708      	adds	r7, #8
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	20000098 	.word	0x20000098
 800e1a4:	200005ac 	.word	0x200005ac

0800e1a8 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b088      	sub	sp, #32
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800e1b6:	4b32      	ldr	r3, [pc, #200]	@ (800e280 <McpsIndication+0xd8>)
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	785a      	ldrb	r2, [r3, #1]
 800e1c0:	4b2f      	ldr	r3, [pc, #188]	@ (800e280 <McpsIndication+0xd8>)
 800e1c2:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800e1c4:	4b2e      	ldr	r3, [pc, #184]	@ (800e280 <McpsIndication+0xd8>)
 800e1c6:	785b      	ldrb	r3, [r3, #1]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d155      	bne.n	800e278 <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	791b      	ldrb	r3, [r3, #4]
 800e1d0:	b25a      	sxtb	r2, r3
 800e1d2:	4b2b      	ldr	r3, [pc, #172]	@ (800e280 <McpsIndication+0xd8>)
 800e1d4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1dc:	b25a      	sxtb	r2, r3
 800e1de:	4b28      	ldr	r3, [pc, #160]	@ (800e280 <McpsIndication+0xd8>)
 800e1e0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e1e8:	4b25      	ldr	r3, [pc, #148]	@ (800e280 <McpsIndication+0xd8>)
 800e1ea:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	78da      	ldrb	r2, [r3, #3]
 800e1f0:	4b23      	ldr	r3, [pc, #140]	@ (800e280 <McpsIndication+0xd8>)
 800e1f2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	691b      	ldr	r3, [r3, #16]
 800e1f8:	4a21      	ldr	r2, [pc, #132]	@ (800e280 <McpsIndication+0xd8>)
 800e1fa:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	78db      	ldrb	r3, [r3, #3]
 800e200:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	7b1b      	ldrb	r3, [r3, #12]
 800e206:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	689b      	ldr	r3, [r3, #8]
 800e20c:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800e20e:	4b1d      	ldr	r3, [pc, #116]	@ (800e284 <McpsIndication+0xdc>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e214:	2b00      	cmp	r3, #0
 800e216:	d007      	beq.n	800e228 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800e218:	4b1a      	ldr	r3, [pc, #104]	@ (800e284 <McpsIndication+0xdc>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e21e:	f107 0218 	add.w	r2, r7, #24
 800e222:	4917      	ldr	r1, [pc, #92]	@ (800e280 <McpsIndication+0xd8>)
 800e224:	4610      	mov	r0, r2
 800e226:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800e228:	4b16      	ldr	r3, [pc, #88]	@ (800e284 <McpsIndication+0xdc>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d007      	beq.n	800e242 <McpsIndication+0x9a>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	7e1b      	ldrb	r3, [r3, #24]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d003      	beq.n	800e242 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800e23a:	4b12      	ldr	r3, [pc, #72]	@ (800e284 <McpsIndication+0xdc>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e240:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800e242:	6879      	ldr	r1, [r7, #4]
 800e244:	2001      	movs	r0, #1
 800e246:	f000 f991 	bl	800e56c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800e24a:	f107 0317 	add.w	r3, r7, #23
 800e24e:	4618      	mov	r0, r3
 800e250:	f7ff ff10 	bl	800e074 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	795b      	ldrb	r3, [r3, #5]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d00e      	beq.n	800e27a <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800e25c:	2300      	movs	r3, #0
 800e25e:	733b      	strb	r3, [r7, #12]
 800e260:	2300      	movs	r3, #0
 800e262:	737b      	strb	r3, [r7, #13]
 800e264:	2300      	movs	r3, #0
 800e266:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800e268:	f107 030c 	add.w	r3, r7, #12
 800e26c:	2201      	movs	r2, #1
 800e26e:	2100      	movs	r1, #0
 800e270:	4618      	mov	r0, r3
 800e272:	f7ff fd71 	bl	800dd58 <LmHandlerSend>
 800e276:	e000      	b.n	800e27a <McpsIndication+0xd2>
        return;
 800e278:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800e27a:	3720      	adds	r7, #32
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}
 800e280:	200000b4 	.word	0x200000b4
 800e284:	200005ac 	.word	0x200005ac

0800e288 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b08c      	sub	sp, #48	@ 0x30
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800e290:	4b4a      	ldr	r3, [pc, #296]	@ (800e3bc <MlmeConfirm+0x134>)
 800e292:	2200      	movs	r2, #0
 800e294:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	785a      	ldrb	r2, [r3, #1]
 800e29a:	4b48      	ldr	r3, [pc, #288]	@ (800e3bc <MlmeConfirm+0x134>)
 800e29c:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800e29e:	4b48      	ldr	r3, [pc, #288]	@ (800e3c0 <MlmeConfirm+0x138>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d004      	beq.n	800e2b2 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800e2a8:	4b45      	ldr	r3, [pc, #276]	@ (800e3c0 <MlmeConfirm+0x138>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2ae:	4843      	ldr	r0, [pc, #268]	@ (800e3bc <MlmeConfirm+0x134>)
 800e2b0:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800e2b2:	6879      	ldr	r1, [r7, #4]
 800e2b4:	2002      	movs	r0, #2
 800e2b6:	f000 f959 	bl	800e56c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	3b01      	subs	r3, #1
 800e2c0:	2b0c      	cmp	r3, #12
 800e2c2:	d874      	bhi.n	800e3ae <MlmeConfirm+0x126>
 800e2c4:	a201      	add	r2, pc, #4	@ (adr r2, 800e2cc <MlmeConfirm+0x44>)
 800e2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ca:	bf00      	nop
 800e2cc:	0800e301 	.word	0x0800e301
 800e2d0:	0800e3af 	.word	0x0800e3af
 800e2d4:	0800e3af 	.word	0x0800e3af
 800e2d8:	0800e3af 	.word	0x0800e3af
 800e2dc:	0800e37d 	.word	0x0800e37d
 800e2e0:	0800e3af 	.word	0x0800e3af
 800e2e4:	0800e3af 	.word	0x0800e3af
 800e2e8:	0800e3af 	.word	0x0800e3af
 800e2ec:	0800e3af 	.word	0x0800e3af
 800e2f0:	0800e3af 	.word	0x0800e3af
 800e2f4:	0800e3af 	.word	0x0800e3af
 800e2f8:	0800e395 	.word	0x0800e395
 800e2fc:	0800e3af 	.word	0x0800e3af
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800e300:	2306      	movs	r3, #6
 800e302:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800e304:	f107 0308 	add.w	r3, r7, #8
 800e308:	4618      	mov	r0, r3
 800e30a:	f004 fc2d 	bl	8012b68 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800e30e:	4b2d      	ldr	r3, [pc, #180]	@ (800e3c4 <MlmeConfirm+0x13c>)
 800e310:	79db      	ldrb	r3, [r3, #7]
 800e312:	68fa      	ldr	r2, [r7, #12]
 800e314:	4611      	mov	r1, r2
 800e316:	4618      	mov	r0, r3
 800e318:	f7ff fa62 	bl	800d7e0 <SecureElementSetDevAddr>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d102      	bne.n	800e328 <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	4a28      	ldr	r2, [pc, #160]	@ (800e3c8 <MlmeConfirm+0x140>)
 800e326:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800e328:	4828      	ldr	r0, [pc, #160]	@ (800e3cc <MlmeConfirm+0x144>)
 800e32a:	f7ff fec3 	bl	800e0b4 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800e32e:	4828      	ldr	r0, [pc, #160]	@ (800e3d0 <MlmeConfirm+0x148>)
 800e330:	f000 fa2a 	bl	800e788 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e334:	4b21      	ldr	r3, [pc, #132]	@ (800e3bc <MlmeConfirm+0x134>)
 800e336:	785b      	ldrb	r3, [r3, #1]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d108      	bne.n	800e34e <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e33c:	4b21      	ldr	r3, [pc, #132]	@ (800e3c4 <MlmeConfirm+0x13c>)
 800e33e:	2200      	movs	r2, #0
 800e340:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800e342:	4b24      	ldr	r3, [pc, #144]	@ (800e3d4 <MlmeConfirm+0x14c>)
 800e344:	785b      	ldrb	r3, [r3, #1]
 800e346:	4618      	mov	r0, r3
 800e348:	f7ff fe0c 	bl	800df64 <LmHandlerRequestClass>
 800e34c:	e002      	b.n	800e354 <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800e34e:	4b1d      	ldr	r3, [pc, #116]	@ (800e3c4 <MlmeConfirm+0x13c>)
 800e350:	22ff      	movs	r2, #255	@ 0xff
 800e352:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800e354:	4b1a      	ldr	r3, [pc, #104]	@ (800e3c0 <MlmeConfirm+0x138>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d004      	beq.n	800e368 <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800e35e:	4b18      	ldr	r3, [pc, #96]	@ (800e3c0 <MlmeConfirm+0x138>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e364:	4817      	ldr	r0, [pc, #92]	@ (800e3c4 <MlmeConfirm+0x13c>)
 800e366:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e368:	4b14      	ldr	r3, [pc, #80]	@ (800e3bc <MlmeConfirm+0x134>)
 800e36a:	785b      	ldrb	r3, [r3, #1]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d120      	bne.n	800e3b2 <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800e370:	4b14      	ldr	r3, [pc, #80]	@ (800e3c4 <MlmeConfirm+0x13c>)
 800e372:	79db      	ldrb	r3, [r3, #7]
 800e374:	4618      	mov	r0, r3
 800e376:	f7fe ffc5 	bl	800d304 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800e37a:	e01a      	b.n	800e3b2 <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800e37c:	4b16      	ldr	r3, [pc, #88]	@ (800e3d8 <MlmeConfirm+0x150>)
 800e37e:	2201      	movs	r2, #1
 800e380:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	7a1a      	ldrb	r2, [r3, #8]
 800e386:	4b14      	ldr	r3, [pc, #80]	@ (800e3d8 <MlmeConfirm+0x150>)
 800e388:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	7a5a      	ldrb	r2, [r3, #9]
 800e38e:	4b12      	ldr	r3, [pc, #72]	@ (800e3d8 <MlmeConfirm+0x150>)
 800e390:	74da      	strb	r2, [r3, #19]
            }
            break;
 800e392:	e00f      	b.n	800e3b4 <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	785b      	ldrb	r3, [r3, #1]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d105      	bne.n	800e3a8 <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800e39c:	4b0d      	ldr	r3, [pc, #52]	@ (800e3d4 <MlmeConfirm+0x14c>)
 800e39e:	7c1b      	ldrb	r3, [r3, #16]
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7ff fdd3 	bl	800df4c <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800e3a6:	e005      	b.n	800e3b4 <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 800e3a8:	f7ff fdb4 	bl	800df14 <LmHandlerDeviceTimeReq>
            break;
 800e3ac:	e002      	b.n	800e3b4 <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800e3ae:	bf00      	nop
 800e3b0:	e000      	b.n	800e3b4 <MlmeConfirm+0x12c>
            break;
 800e3b2:	bf00      	nop
    }
}
 800e3b4:	bf00      	nop
 800e3b6:	3730      	adds	r7, #48	@ 0x30
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	20000098 	.word	0x20000098
 800e3c0:	200005ac 	.word	0x200005ac
 800e3c4:	2000008c 	.word	0x2000008c
 800e3c8:	20000568 	.word	0x20000568
 800e3cc:	20000090 	.word	0x20000090
 800e3d0:	20000091 	.word	0x20000091
 800e3d4:	20000594 	.word	0x20000594
 800e3d8:	200000b4 	.word	0x200000b4

0800e3dc <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800e3e6:	4b20      	ldr	r3, [pc, #128]	@ (800e468 <MlmeIndication+0x8c>)
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	785a      	ldrb	r2, [r3, #1]
 800e3f0:	4b1d      	ldr	r3, [pc, #116]	@ (800e468 <MlmeIndication+0x8c>)
 800e3f2:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	789b      	ldrb	r3, [r3, #2]
 800e3f8:	b25a      	sxtb	r2, r3
 800e3fa:	4b1b      	ldr	r3, [pc, #108]	@ (800e468 <MlmeIndication+0x8c>)
 800e3fc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e404:	b25a      	sxtb	r2, r3
 800e406:	4b18      	ldr	r3, [pc, #96]	@ (800e468 <MlmeIndication+0x8c>)
 800e408:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e410:	4b15      	ldr	r3, [pc, #84]	@ (800e468 <MlmeIndication+0x8c>)
 800e412:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	78da      	ldrb	r2, [r3, #3]
 800e418:	4b13      	ldr	r3, [pc, #76]	@ (800e468 <MlmeIndication+0x8c>)
 800e41a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	4a11      	ldr	r2, [pc, #68]	@ (800e468 <MlmeIndication+0x8c>)
 800e422:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800e424:	4b11      	ldr	r3, [pc, #68]	@ (800e46c <MlmeIndication+0x90>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00d      	beq.n	800e44a <MlmeIndication+0x6e>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	2b0b      	cmp	r3, #11
 800e434:	d009      	beq.n	800e44a <MlmeIndication+0x6e>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	781b      	ldrb	r3, [r3, #0]
 800e43a:	2b0f      	cmp	r3, #15
 800e43c:	d005      	beq.n	800e44a <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800e43e:	4b0b      	ldr	r3, [pc, #44]	@ (800e46c <MlmeIndication+0x90>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e444:	4908      	ldr	r1, [pc, #32]	@ (800e468 <MlmeIndication+0x8c>)
 800e446:	2000      	movs	r0, #0
 800e448:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800e44a:	6879      	ldr	r1, [r7, #4]
 800e44c:	2003      	movs	r0, #3
 800e44e:	f000 f88d 	bl	800e56c <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	2b0b      	cmp	r3, #11
 800e458:	d001      	beq.n	800e45e <MlmeIndication+0x82>
 800e45a:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800e45c:	e000      	b.n	800e460 <MlmeIndication+0x84>
            break;
 800e45e:	bf00      	nop
    }
}
 800e460:	bf00      	nop
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	200000b4 	.word	0x200000b4
 800e46c:	200005ac 	.word	0x200005ac

0800e470 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	4603      	mov	r3, r0
 800e478:	6039      	str	r1, [r7, #0]
 800e47a:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800e47c:	2300      	movs	r3, #0
 800e47e:	60fb      	str	r3, [r7, #12]
    switch( id )
 800e480:	79fb      	ldrb	r3, [r7, #7]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d104      	bne.n	800e490 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800e486:	f000 fa35 	bl	800e8f4 <LmhpCompliancePackageFactory>
 800e48a:	4603      	mov	r3, r0
 800e48c:	60fb      	str	r3, [r7, #12]
                break;
 800e48e:	e00d      	b.n	800e4ac <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800e490:	f107 020c 	add.w	r2, r7, #12
 800e494:	79fb      	ldrb	r3, [r7, #7]
 800e496:	4611      	mov	r1, r2
 800e498:	4618      	mov	r0, r3
 800e49a:	f000 fd41 	bl	800ef20 <LmhpPackagesRegister>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d002      	beq.n	800e4aa <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800e4a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e4a8:	e031      	b.n	800e50e <LmHandlerPackageRegister+0x9e>
                }
                break;
 800e4aa:	bf00      	nop
            }
    }
    if( package != NULL )
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d02b      	beq.n	800e50a <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 800e4b2:	79fb      	ldrb	r3, [r7, #7]
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	4918      	ldr	r1, [pc, #96]	@ (800e518 <LmHandlerPackageRegister+0xa8>)
 800e4b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e4bc:	79fb      	ldrb	r3, [r7, #7]
 800e4be:	4a16      	ldr	r2, [pc, #88]	@ (800e518 <LmHandlerPackageRegister+0xa8>)
 800e4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4c4:	4a15      	ldr	r2, [pc, #84]	@ (800e51c <LmHandlerPackageRegister+0xac>)
 800e4c6:	62da      	str	r2, [r3, #44]	@ 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800e4c8:	79fb      	ldrb	r3, [r7, #7]
 800e4ca:	4a13      	ldr	r2, [pc, #76]	@ (800e518 <LmHandlerPackageRegister+0xa8>)
 800e4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4d0:	4a13      	ldr	r2, [pc, #76]	@ (800e520 <LmHandlerPackageRegister+0xb0>)
 800e4d2:	631a      	str	r2, [r3, #48]	@ 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e4d4:	79fb      	ldrb	r3, [r7, #7]
 800e4d6:	4a10      	ldr	r2, [pc, #64]	@ (800e518 <LmHandlerPackageRegister+0xa8>)
 800e4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4dc:	4a11      	ldr	r2, [pc, #68]	@ (800e524 <LmHandlerPackageRegister+0xb4>)
 800e4de:	635a      	str	r2, [r3, #52]	@ 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800e4e0:	4b11      	ldr	r3, [pc, #68]	@ (800e528 <LmHandlerPackageRegister+0xb8>)
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	79fb      	ldrb	r3, [r7, #7]
 800e4e6:	490c      	ldr	r1, [pc, #48]	@ (800e518 <LmHandlerPackageRegister+0xa8>)
 800e4e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e4ec:	6992      	ldr	r2, [r2, #24]
 800e4ee:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800e4f0:	79fb      	ldrb	r3, [r7, #7]
 800e4f2:	4a09      	ldr	r2, [pc, #36]	@ (800e518 <LmHandlerPackageRegister+0xa8>)
 800e4f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	4a0c      	ldr	r2, [pc, #48]	@ (800e52c <LmHandlerPackageRegister+0xbc>)
 800e4fc:	6851      	ldr	r1, [r2, #4]
 800e4fe:	4a0b      	ldr	r2, [pc, #44]	@ (800e52c <LmHandlerPackageRegister+0xbc>)
 800e500:	7852      	ldrb	r2, [r2, #1]
 800e502:	6838      	ldr	r0, [r7, #0]
 800e504:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800e506:	2300      	movs	r3, #0
 800e508:	e001      	b.n	800e50e <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e50a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3710      	adds	r7, #16
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	20000580 	.word	0x20000580
 800e51c:	0800dbd9 	.word	0x0800dbd9
 800e520:	0800dd59 	.word	0x0800dd59
 800e524:	0800df15 	.word	0x0800df15
 800e528:	200005ac 	.word	0x200005ac
 800e52c:	200000c8 	.word	0x200000c8

0800e530 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	4603      	mov	r3, r0
 800e538:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800e53a:	79fb      	ldrb	r3, [r7, #7]
 800e53c:	2b04      	cmp	r3, #4
 800e53e:	d80e      	bhi.n	800e55e <LmHandlerPackageIsInitialized+0x2e>
 800e540:	79fb      	ldrb	r3, [r7, #7]
 800e542:	4a09      	ldr	r2, [pc, #36]	@ (800e568 <LmHandlerPackageIsInitialized+0x38>)
 800e544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e548:	689b      	ldr	r3, [r3, #8]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d007      	beq.n	800e55e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800e54e:	79fb      	ldrb	r3, [r7, #7]
 800e550:	4a05      	ldr	r2, [pc, #20]	@ (800e568 <LmHandlerPackageIsInitialized+0x38>)
 800e552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e556:	689b      	ldr	r3, [r3, #8]
 800e558:	4798      	blx	r3
 800e55a:	4603      	mov	r3, r0
 800e55c:	e000      	b.n	800e560 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800e55e:	2300      	movs	r3, #0
    }
}
 800e560:	4618      	mov	r0, r3
 800e562:	3708      	adds	r7, #8
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}
 800e568:	20000580 	.word	0x20000580

0800e56c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	4603      	mov	r3, r0
 800e574:	6039      	str	r1, [r7, #0]
 800e576:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e578:	2300      	movs	r3, #0
 800e57a:	73fb      	strb	r3, [r7, #15]
 800e57c:	e07c      	b.n	800e678 <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 800e57e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e582:	4a42      	ldr	r2, [pc, #264]	@ (800e68c <LmHandlerPackagesNotify+0x120>)
 800e584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d06f      	beq.n	800e66c <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 800e58c:	79fb      	ldrb	r3, [r7, #7]
 800e58e:	2b03      	cmp	r3, #3
 800e590:	d863      	bhi.n	800e65a <LmHandlerPackagesNotify+0xee>
 800e592:	a201      	add	r2, pc, #4	@ (adr r2, 800e598 <LmHandlerPackagesNotify+0x2c>)
 800e594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e598:	0800e5a9 	.word	0x0800e5a9
 800e59c:	0800e5cb 	.word	0x0800e5cb
 800e5a0:	0800e617 	.word	0x0800e617
 800e5a4:	0800e639 	.word	0x0800e639
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800e5a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5ac:	4a37      	ldr	r2, [pc, #220]	@ (800e68c <LmHandlerPackagesNotify+0x120>)
 800e5ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5b2:	69db      	ldr	r3, [r3, #28]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d052      	beq.n	800e65e <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800e5b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5bc:	4a33      	ldr	r2, [pc, #204]	@ (800e68c <LmHandlerPackagesNotify+0x120>)
 800e5be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5c2:	69db      	ldr	r3, [r3, #28]
 800e5c4:	6838      	ldr	r0, [r7, #0]
 800e5c6:	4798      	blx	r3
                        }
                        break;
 800e5c8:	e049      	b.n	800e65e <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800e5ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5ce:	4a2f      	ldr	r2, [pc, #188]	@ (800e68c <LmHandlerPackagesNotify+0x120>)
 800e5d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5d4:	6a1b      	ldr	r3, [r3, #32]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d043      	beq.n	800e662 <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800e5da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5de:	4a2b      	ldr	r2, [pc, #172]	@ (800e68c <LmHandlerPackagesNotify+0x120>)
 800e5e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5e4:	781a      	ldrb	r2, [r3, #0]
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d00a      	beq.n	800e604 <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800e5ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d135      	bne.n	800e662 <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800e5f6:	4b25      	ldr	r3, [pc, #148]	@ (800e68c <LmHandlerPackagesNotify+0x120>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	4798      	blx	r3
 800e5fe:	4603      	mov	r3, r0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d02e      	beq.n	800e662 <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800e604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e608:	4a20      	ldr	r2, [pc, #128]	@ (800e68c <LmHandlerPackagesNotify+0x120>)
 800e60a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e60e:	6a1b      	ldr	r3, [r3, #32]
 800e610:	6838      	ldr	r0, [r7, #0]
 800e612:	4798      	blx	r3
                        }
                        break;
 800e614:	e025      	b.n	800e662 <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800e616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e61a:	4a1c      	ldr	r2, [pc, #112]	@ (800e68c <LmHandlerPackagesNotify+0x120>)
 800e61c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e622:	2b00      	cmp	r3, #0
 800e624:	d01f      	beq.n	800e666 <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800e626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e62a:	4a18      	ldr	r2, [pc, #96]	@ (800e68c <LmHandlerPackagesNotify+0x120>)
 800e62c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e632:	6838      	ldr	r0, [r7, #0]
 800e634:	4798      	blx	r3
                        }
                        break;
 800e636:	e016      	b.n	800e666 <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800e638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e63c:	4a13      	ldr	r2, [pc, #76]	@ (800e68c <LmHandlerPackagesNotify+0x120>)
 800e63e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e644:	2b00      	cmp	r3, #0
 800e646:	d010      	beq.n	800e66a <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800e648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e64c:	4a0f      	ldr	r2, [pc, #60]	@ (800e68c <LmHandlerPackagesNotify+0x120>)
 800e64e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e654:	6838      	ldr	r0, [r7, #0]
 800e656:	4798      	blx	r3
                        }
                        break;
 800e658:	e007      	b.n	800e66a <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 800e65a:	bf00      	nop
 800e65c:	e006      	b.n	800e66c <LmHandlerPackagesNotify+0x100>
                        break;
 800e65e:	bf00      	nop
 800e660:	e004      	b.n	800e66c <LmHandlerPackagesNotify+0x100>
                        break;
 800e662:	bf00      	nop
 800e664:	e002      	b.n	800e66c <LmHandlerPackagesNotify+0x100>
                        break;
 800e666:	bf00      	nop
 800e668:	e000      	b.n	800e66c <LmHandlerPackagesNotify+0x100>
                        break;
 800e66a:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e66c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e670:	b2db      	uxtb	r3, r3
 800e672:	3301      	adds	r3, #1
 800e674:	b2db      	uxtb	r3, r3
 800e676:	73fb      	strb	r3, [r7, #15]
 800e678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e67c:	2b04      	cmp	r3, #4
 800e67e:	f77f af7e 	ble.w	800e57e <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800e682:	bf00      	nop
 800e684:	bf00      	nop
 800e686:	3710      	adds	r7, #16
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	20000580 	.word	0x20000580

0800e690 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e696:	2300      	movs	r3, #0
 800e698:	71fb      	strb	r3, [r7, #7]
 800e69a:	e01c      	b.n	800e6d6 <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 800e69c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6a0:	4a11      	ldr	r2, [pc, #68]	@ (800e6e8 <LmHandlerPackageIsTxPending+0x58>)
 800e6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d00f      	beq.n	800e6ca <LmHandlerPackageIsTxPending+0x3a>
 800e6aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d00b      	beq.n	800e6ca <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800e6b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6b6:	4a0c      	ldr	r2, [pc, #48]	@ (800e6e8 <LmHandlerPackageIsTxPending+0x58>)
 800e6b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6bc:	691b      	ldr	r3, [r3, #16]
 800e6be:	4798      	blx	r3
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d001      	beq.n	800e6ca <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e00a      	b.n	800e6e0 <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e6ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	b2db      	uxtb	r3, r3
 800e6d4:	71fb      	strb	r3, [r7, #7]
 800e6d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6da:	2b04      	cmp	r3, #4
 800e6dc:	ddde      	ble.n	800e69c <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800e6de:	2300      	movs	r3, #0
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3708      	adds	r7, #8
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	20000580 	.word	0x20000580

0800e6ec <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	71fb      	strb	r3, [r7, #7]
 800e6f6:	e022      	b.n	800e73e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e6f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6fc:	4a14      	ldr	r2, [pc, #80]	@ (800e750 <LmHandlerPackagesProcess+0x64>)
 800e6fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d015      	beq.n	800e732 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e70a:	4a11      	ldr	r2, [pc, #68]	@ (800e750 <LmHandlerPackagesProcess+0x64>)
 800e70c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e710:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e712:	2b00      	cmp	r3, #0
 800e714:	d00d      	beq.n	800e732 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800e716:	79fb      	ldrb	r3, [r7, #7]
 800e718:	4618      	mov	r0, r3
 800e71a:	f7ff ff09 	bl	800e530 <LmHandlerPackageIsInitialized>
 800e71e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e720:	2b00      	cmp	r3, #0
 800e722:	d006      	beq.n	800e732 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800e724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e728:	4a09      	ldr	r2, [pc, #36]	@ (800e750 <LmHandlerPackagesProcess+0x64>)
 800e72a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e72e:	695b      	ldr	r3, [r3, #20]
 800e730:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e736:	b2db      	uxtb	r3, r3
 800e738:	3301      	adds	r3, #1
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	71fb      	strb	r3, [r7, #7]
 800e73e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e742:	2b04      	cmp	r3, #4
 800e744:	ddd8      	ble.n	800e6f8 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800e746:	bf00      	nop
 800e748:	bf00      	nop
 800e74a:	3708      	adds	r7, #8
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	20000580 	.word	0x20000580

0800e754 <LmHandlerStop>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800e754:	b580      	push	{r7, lr}
 800e756:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800e758:	f005 f9c0 	bl	8013adc <LoRaMacDeInitialization>
 800e75c:	4603      	mov	r3, r0
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d101      	bne.n	800e766 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e762:	2300      	movs	r3, #0
 800e764:	e001      	b.n	800e76a <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e766:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	bd80      	pop	{r7, pc}

0800e76e <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800e76e:	b580      	push	{r7, lr}
 800e770:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800e772:	f004 f93b 	bl	80129ec <LoRaMacHalt>
 800e776:	4603      	mov	r3, r0
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d101      	bne.n	800e780 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e77c:	2300      	movs	r3, #0
 800e77e:	e001      	b.n	800e784 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e780:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e784:	4618      	mov	r0, r3
 800e786:	bd80      	pop	{r7, pc}

0800e788 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b08c      	sub	sp, #48	@ 0x30
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d102      	bne.n	800e79c <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e796:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e79a:	e016      	b.n	800e7ca <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800e79c:	2320      	movs	r3, #32
 800e79e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e7a0:	f107 0308 	add.w	r3, r7, #8
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f004 f9df 	bl	8012b68 <LoRaMacMibGetRequestConfirm>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d002      	beq.n	800e7b6 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e7b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e7b4:	e009      	b.n	800e7ca <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800e7b6:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f993 2000 	ldrsb.w	r2, [r3]
 800e7c4:	4b03      	ldr	r3, [pc, #12]	@ (800e7d4 <LmHandlerGetTxPower+0x4c>)
 800e7c6:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800e7c8:	2300      	movs	r3, #0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3730      	adds	r7, #48	@ 0x30
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	20000594 	.word	0x20000594

0800e7d8 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b08e      	sub	sp, #56	@ 0x38
 800e7dc:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800e7e8:	f7ff ffc1 	bl	800e76e <LmHandlerHalt>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800e7f2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d12f      	bne.n	800e85a <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800e7fa:	f000 f859 	bl	800e8b0 <NvmDataMgmtStoreBegin>
 800e7fe:	6338      	str	r0, [r7, #48]	@ 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800e800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e802:	f113 0f02 	cmn.w	r3, #2
 800e806:	d103      	bne.n	800e810 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800e808:	23f8      	movs	r3, #248	@ 0xf8
 800e80a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e80e:	e01c      	b.n	800e84a <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800e810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e812:	2b00      	cmp	r3, #0
 800e814:	d104      	bne.n	800e820 <LmHandlerNvmDataStore+0x48>
 800e816:	4b1b      	ldr	r3, [pc, #108]	@ (800e884 <LmHandlerNvmDataStore+0xac>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	695b      	ldr	r3, [r3, #20]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d103      	bne.n	800e828 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e820:	23ff      	movs	r3, #255	@ 0xff
 800e822:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e826:	e010      	b.n	800e84a <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800e828:	2326      	movs	r3, #38	@ 0x26
 800e82a:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e82c:	463b      	mov	r3, r7
 800e82e:	4618      	mov	r0, r3
 800e830:	f004 f99a 	bl	8012b68 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	62fb      	str	r3, [r7, #44]	@ 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800e838:	f44f 63ef 	mov.w	r3, #1912	@ 0x778
 800e83c:	62bb      	str	r3, [r7, #40]	@ 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800e83e:	4b11      	ldr	r3, [pc, #68]	@ (800e884 <LmHandlerNvmDataStore+0xac>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	695b      	ldr	r3, [r3, #20]
 800e844:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e846:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e848:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800e84a:	f000 f847 	bl	800e8dc <NvmDataMgmtStoreEnd>
 800e84e:	4603      	mov	r3, r0
 800e850:	2b00      	cmp	r3, #0
 800e852:	d002      	beq.n	800e85a <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e854:	23ff      	movs	r3, #255	@ 0xff
 800e856:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800e85a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d109      	bne.n	800e876 <LmHandlerNvmDataStore+0x9e>
 800e862:	4b08      	ldr	r3, [pc, #32]	@ (800e884 <LmHandlerNvmDataStore+0xac>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	69db      	ldr	r3, [r3, #28]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d004      	beq.n	800e876 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800e86c:	4b05      	ldr	r3, [pc, #20]	@ (800e884 <LmHandlerNvmDataStore+0xac>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	69db      	ldr	r3, [r3, #28]
 800e872:	2001      	movs	r0, #1
 800e874:	4798      	blx	r3
    }

    return lmhStatus;
 800e876:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3738      	adds	r7, #56	@ 0x38
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
 800e882:	bf00      	nop
 800e884:	200005ac 	.word	0x200005ac

0800e888 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	4603      	mov	r3, r0
 800e890:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800e892:	4b06      	ldr	r3, [pc, #24]	@ (800e8ac <NvmDataMgmtEvent+0x24>)
 800e894:	881a      	ldrh	r2, [r3, #0]
 800e896:	88fb      	ldrh	r3, [r7, #6]
 800e898:	4313      	orrs	r3, r2
 800e89a:	b29a      	uxth	r2, r3
 800e89c:	4b03      	ldr	r3, [pc, #12]	@ (800e8ac <NvmDataMgmtEvent+0x24>)
 800e89e:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800e8a0:	bf00      	nop
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bc80      	pop	{r7}
 800e8a8:	4770      	bx	lr
 800e8aa:	bf00      	nop
 800e8ac:	200006d0 	.word	0x200006d0

0800e8b0 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800e8b4:	4b08      	ldr	r3, [pc, #32]	@ (800e8d8 <NvmDataMgmtStoreBegin+0x28>)
 800e8b6:	881b      	ldrh	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d102      	bne.n	800e8c2 <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800e8bc:	f06f 0301 	mvn.w	r3, #1
 800e8c0:	e008      	b.n	800e8d4 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800e8c2:	f004 f86b 	bl	801299c <LoRaMacStop>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d002      	beq.n	800e8d2 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800e8cc:	f06f 0302 	mvn.w	r3, #2
 800e8d0:	e000      	b.n	800e8d4 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800e8d2:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	200006d0 	.word	0x200006d0

0800e8dc <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e8e0:	4b03      	ldr	r3, [pc, #12]	@ (800e8f0 <NvmDataMgmtStoreEnd+0x14>)
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800e8e6:	f004 f84b 	bl	8012980 <LoRaMacStart>
    return NVM_DATA_OK;
 800e8ea:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	200006d0 	.word	0x200006d0

0800e8f4 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800e8f8:	4b02      	ldr	r3, [pc, #8]	@ (800e904 <LmhpCompliancePackageFactory+0x10>)
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bc80      	pop	{r7}
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	200000d0 	.word	0x200000d0

0800e908 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800e908:	b480      	push	{r7}
 800e90a:	b085      	sub	sp, #20
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	60f8      	str	r0, [r7, #12]
 800e910:	60b9      	str	r1, [r7, #8]
 800e912:	4613      	mov	r3, r2
 800e914:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d00f      	beq.n	800e93c <LmhpComplianceInit+0x34>
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d00c      	beq.n	800e93c <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 800e922:	4a0c      	ldr	r2, [pc, #48]	@ (800e954 <LmhpComplianceInit+0x4c>)
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800e928:	4a0b      	ldr	r2, [pc, #44]	@ (800e958 <LmhpComplianceInit+0x50>)
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800e92e:	4a0a      	ldr	r2, [pc, #40]	@ (800e958 <LmhpComplianceInit+0x50>)
 800e930:	79fb      	ldrb	r3, [r7, #7]
 800e932:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800e934:	4b08      	ldr	r3, [pc, #32]	@ (800e958 <LmhpComplianceInit+0x50>)
 800e936:	2201      	movs	r2, #1
 800e938:	701a      	strb	r2, [r3, #0]
 800e93a:	e006      	b.n	800e94a <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800e93c:	4b05      	ldr	r3, [pc, #20]	@ (800e954 <LmhpComplianceInit+0x4c>)
 800e93e:	2200      	movs	r2, #0
 800e940:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800e942:	4b05      	ldr	r3, [pc, #20]	@ (800e958 <LmhpComplianceInit+0x50>)
 800e944:	2200      	movs	r2, #0
 800e946:	701a      	strb	r2, [r3, #0]
    }
}
 800e948:	bf00      	nop
 800e94a:	bf00      	nop
 800e94c:	3714      	adds	r7, #20
 800e94e:	46bd      	mov	sp, r7
 800e950:	bc80      	pop	{r7}
 800e952:	4770      	bx	lr
 800e954:	20000700 	.word	0x20000700
 800e958:	200006ec 	.word	0x200006ec

0800e95c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800e95c:	b480      	push	{r7}
 800e95e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800e960:	4b02      	ldr	r3, [pc, #8]	@ (800e96c <LmhpComplianceIsInitialized+0x10>)
 800e962:	781b      	ldrb	r3, [r3, #0]
}
 800e964:	4618      	mov	r0, r3
 800e966:	46bd      	mov	sp, r7
 800e968:	bc80      	pop	{r7}
 800e96a:	4770      	bx	lr
 800e96c:	200006ec 	.word	0x200006ec

0800e970 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800e970:	b480      	push	{r7}
 800e972:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800e974:	4b07      	ldr	r3, [pc, #28]	@ (800e994 <LmhpComplianceIsRunning+0x24>)
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	f083 0301 	eor.w	r3, r3, #1
 800e97c:	b2db      	uxtb	r3, r3
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d001      	beq.n	800e986 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800e982:	2300      	movs	r3, #0
 800e984:	e001      	b.n	800e98a <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800e986:	4b03      	ldr	r3, [pc, #12]	@ (800e994 <LmhpComplianceIsRunning+0x24>)
 800e988:	785b      	ldrb	r3, [r3, #1]
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bc80      	pop	{r7}
 800e990:	4770      	bx	lr
 800e992:	bf00      	nop
 800e994:	200006ec 	.word	0x200006ec

0800e998 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e9a0:	4b0f      	ldr	r3, [pc, #60]	@ (800e9e0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	f083 0301 	eor.w	r3, r3, #1
 800e9a8:	b2db      	uxtb	r3, r3
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d112      	bne.n	800e9d4 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800e9ae:	4b0c      	ldr	r3, [pc, #48]	@ (800e9e0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800e9b0:	785b      	ldrb	r3, [r3, #1]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d00f      	beq.n	800e9d6 <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	d10b      	bne.n	800e9d6 <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d007      	beq.n	800e9d6 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800e9c6:	4b06      	ldr	r3, [pc, #24]	@ (800e9e0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800e9c8:	899b      	ldrh	r3, [r3, #12]
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	b29a      	uxth	r2, r3
 800e9ce:	4b04      	ldr	r3, [pc, #16]	@ (800e9e0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800e9d0:	819a      	strh	r2, [r3, #12]
 800e9d2:	e000      	b.n	800e9d6 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800e9d4:	bf00      	nop
    }
}
 800e9d6:	370c      	adds	r7, #12
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bc80      	pop	{r7}
 800e9dc:	4770      	bx	lr
 800e9de:	bf00      	nop
 800e9e0:	200006ec 	.word	0x200006ec

0800e9e4 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e9ec:	4b12      	ldr	r3, [pc, #72]	@ (800ea38 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	f083 0301 	eor.w	r3, r3, #1
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d116      	bne.n	800ea28 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800e9fa:	4b0f      	ldr	r3, [pc, #60]	@ (800ea38 <LmhpComplianceOnMlmeConfirm+0x54>)
 800e9fc:	785b      	ldrb	r3, [r3, #1]
 800e9fe:	f083 0301 	eor.w	r3, r3, #1
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d111      	bne.n	800ea2c <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	2b05      	cmp	r3, #5
 800ea0e:	d10e      	bne.n	800ea2e <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800ea10:	4b09      	ldr	r3, [pc, #36]	@ (800ea38 <LmhpComplianceOnMlmeConfirm+0x54>)
 800ea12:	2201      	movs	r2, #1
 800ea14:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	7a1a      	ldrb	r2, [r3, #8]
 800ea1a:	4b07      	ldr	r3, [pc, #28]	@ (800ea38 <LmhpComplianceOnMlmeConfirm+0x54>)
 800ea1c:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	7a5a      	ldrb	r2, [r3, #9]
 800ea22:	4b05      	ldr	r3, [pc, #20]	@ (800ea38 <LmhpComplianceOnMlmeConfirm+0x54>)
 800ea24:	741a      	strb	r2, [r3, #16]
 800ea26:	e002      	b.n	800ea2e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800ea28:	bf00      	nop
 800ea2a:	e000      	b.n	800ea2e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800ea2c:	bf00      	nop
    }
}
 800ea2e:	370c      	adds	r7, #12
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bc80      	pop	{r7}
 800ea34:	4770      	bx	lr
 800ea36:	bf00      	nop
 800ea38:	200006ec 	.word	0x200006ec

0800ea3c <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800ea42:	4b36      	ldr	r3, [pc, #216]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	f083 0301 	eor.w	r3, r3, #1
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d002      	beq.n	800ea56 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800ea50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ea54:	e05e      	b.n	800eb14 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 800ea56:	4b31      	ldr	r3, [pc, #196]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800ea58:	785b      	ldrb	r3, [r3, #1]
 800ea5a:	f083 0301 	eor.w	r3, r3, #1
 800ea5e:	b2db      	uxtb	r3, r3
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d001      	beq.n	800ea68 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ea64:	2300      	movs	r3, #0
 800ea66:	e055      	b.n	800eb14 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 800ea68:	4b2c      	ldr	r3, [pc, #176]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800ea6a:	7b9b      	ldrb	r3, [r3, #14]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d019      	beq.n	800eaa4 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800ea70:	4b2a      	ldr	r3, [pc, #168]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800ea72:	2200      	movs	r2, #0
 800ea74:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800ea76:	4b29      	ldr	r3, [pc, #164]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800ea78:	2203      	movs	r2, #3
 800ea7a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800ea7c:	4b27      	ldr	r3, [pc, #156]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800ea7e:	689b      	ldr	r3, [r3, #8]
 800ea80:	2205      	movs	r2, #5
 800ea82:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800ea84:	4b25      	ldr	r3, [pc, #148]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800ea86:	689b      	ldr	r3, [r3, #8]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	4a24      	ldr	r2, [pc, #144]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800ea8c:	7bd2      	ldrb	r2, [r2, #15]
 800ea8e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800ea90:	4b22      	ldr	r3, [pc, #136]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800ea92:	689b      	ldr	r3, [r3, #8]
 800ea94:	3302      	adds	r3, #2
 800ea96:	4a21      	ldr	r2, [pc, #132]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800ea98:	7c12      	ldrb	r2, [r2, #16]
 800ea9a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800ea9c:	4b1f      	ldr	r3, [pc, #124]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	709a      	strb	r2, [r3, #2]
 800eaa2:	e01c      	b.n	800eade <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800eaa4:	4b1d      	ldr	r3, [pc, #116]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800eaa6:	789b      	ldrb	r3, [r3, #2]
 800eaa8:	2b01      	cmp	r3, #1
 800eaaa:	d005      	beq.n	800eab8 <LmhpComplianceTxProcess+0x7c>
 800eaac:	2b04      	cmp	r3, #4
 800eaae:	d116      	bne.n	800eade <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 800eab0:	4b1a      	ldr	r3, [pc, #104]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800eab2:	2201      	movs	r2, #1
 800eab4:	709a      	strb	r2, [r3, #2]
                break;
 800eab6:	e012      	b.n	800eade <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 800eab8:	4b18      	ldr	r3, [pc, #96]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800eaba:	2202      	movs	r2, #2
 800eabc:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800eabe:	4b17      	ldr	r3, [pc, #92]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800eac0:	899b      	ldrh	r3, [r3, #12]
 800eac2:	0a1b      	lsrs	r3, r3, #8
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	4b15      	ldr	r3, [pc, #84]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800eac8:	689b      	ldr	r3, [r3, #8]
 800eaca:	b2d2      	uxtb	r2, r2
 800eacc:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800eace:	4b13      	ldr	r3, [pc, #76]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800ead0:	899a      	ldrh	r2, [r3, #12]
 800ead2:	4b12      	ldr	r3, [pc, #72]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800ead4:	689b      	ldr	r3, [r3, #8]
 800ead6:	3301      	adds	r3, #1
 800ead8:	b2d2      	uxtb	r2, r2
 800eada:	701a      	strb	r2, [r3, #0]
                break;
 800eadc:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800eade:	23e0      	movs	r3, #224	@ 0xe0
 800eae0:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800eae2:	4b0e      	ldr	r3, [pc, #56]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800eae4:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800eae6:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800eae8:	4b0c      	ldr	r3, [pc, #48]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800eaea:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800eaec:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 800eaee:	480c      	ldr	r0, [pc, #48]	@ (800eb20 <LmhpComplianceTxProcess+0xe4>)
 800eaf0:	f00d fe2e 	bl	801c750 <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 800eaf4:	4b0b      	ldr	r3, [pc, #44]	@ (800eb24 <LmhpComplianceTxProcess+0xe8>)
 800eaf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d102      	bne.n	800eb02 <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 800eafc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eb00:	e008      	b.n	800eb14 <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800eb02:	4b08      	ldr	r3, [pc, #32]	@ (800eb24 <LmhpComplianceTxProcess+0xe8>)
 800eb04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb06:	4a05      	ldr	r2, [pc, #20]	@ (800eb1c <LmhpComplianceTxProcess+0xe0>)
 800eb08:	78d2      	ldrb	r2, [r2, #3]
 800eb0a:	4611      	mov	r1, r2
 800eb0c:	4638      	mov	r0, r7
 800eb0e:	2201      	movs	r2, #1
 800eb10:	4798      	blx	r3
 800eb12:	4603      	mov	r3, r0
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	200006ec 	.word	0x200006ec
 800eb20:	200006d4 	.word	0x200006d4
 800eb24:	200000d0 	.word	0x200000d0

0800eb28 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b0a4      	sub	sp, #144	@ 0x90
 800eb2c:	af02      	add	r7, sp, #8
 800eb2e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800eb30:	4ba5      	ldr	r3, [pc, #660]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	f083 0301 	eor.w	r3, r3, #1
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	f040 81c6 	bne.w	800eecc <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	7b5b      	ldrb	r3, [r3, #13]
 800eb44:	f083 0301 	eor.w	r3, r3, #1
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	f040 81c0 	bne.w	800eed0 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800eb50:	4b9d      	ldr	r3, [pc, #628]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800eb52:	785b      	ldrb	r3, [r3, #1]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d00c      	beq.n	800eb72 <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	7b9b      	ldrb	r3, [r3, #14]
 800eb5c:	f083 0301 	eor.w	r3, r3, #1
 800eb60:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d005      	beq.n	800eb72 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800eb66:	4b98      	ldr	r3, [pc, #608]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800eb68:	899b      	ldrh	r3, [r3, #12]
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	b29a      	uxth	r2, r3
 800eb6e:	4b96      	ldr	r3, [pc, #600]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800eb70:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	78db      	ldrb	r3, [r3, #3]
 800eb76:	2be0      	cmp	r3, #224	@ 0xe0
 800eb78:	f040 81ac 	bne.w	800eed4 <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800eb7c:	4b92      	ldr	r3, [pc, #584]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800eb7e:	785b      	ldrb	r3, [r3, #1]
 800eb80:	f083 0301 	eor.w	r3, r3, #1
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d060      	beq.n	800ec4c <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	7b1b      	ldrb	r3, [r3, #12]
 800eb8e:	2b04      	cmp	r3, #4
 800eb90:	f040 81a7 	bne.w	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	689b      	ldr	r3, [r3, #8]
 800eb98:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	f040 81a1 	bne.w	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	689b      	ldr	r3, [r3, #8]
 800eba4:	3301      	adds	r3, #1
 800eba6:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	f040 819a 	bne.w	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	689b      	ldr	r3, [r3, #8]
 800ebb2:	3302      	adds	r3, #2
 800ebb4:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	f040 8193 	bne.w	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	689b      	ldr	r3, [r3, #8]
 800ebc0:	3303      	adds	r3, #3
 800ebc2:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	f040 818c 	bne.w	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 800ebca:	4b7f      	ldr	r3, [pc, #508]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ebcc:	2200      	movs	r2, #0
 800ebce:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800ebd0:	4b7d      	ldr	r3, [pc, #500]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ebd2:	22e0      	movs	r2, #224	@ 0xe0
 800ebd4:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800ebd6:	4b7c      	ldr	r3, [pc, #496]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ebd8:	2202      	movs	r2, #2
 800ebda:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800ebdc:	4b7a      	ldr	r3, [pc, #488]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ebde:	2200      	movs	r2, #0
 800ebe0:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800ebe2:	4b79      	ldr	r3, [pc, #484]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800ebe8:	4b77      	ldr	r3, [pc, #476]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ebea:	2200      	movs	r2, #0
 800ebec:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800ebee:	4b76      	ldr	r3, [pc, #472]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800ebf4:	4b74      	ldr	r3, [pc, #464]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800ebfa:	4b73      	ldr	r3, [pc, #460]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 800ec00:	2304      	movs	r3, #4
 800ec02:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 800ec04:	2301      	movs	r3, #1
 800ec06:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ec08:	f107 030c 	add.w	r3, r7, #12
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f004 f963 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 800ec12:	2000      	movs	r0, #0
 800ec14:	f004 ff3c 	bl	8013a90 <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800ec18:	4b6c      	ldr	r3, [pc, #432]	@ (800edcc <LmhpComplianceOnMcpsIndication+0x2a4>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d003      	beq.n	800ec2a <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800ec22:	4b6a      	ldr	r3, [pc, #424]	@ (800edcc <LmhpComplianceOnMcpsIndication+0x2a4>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	9300      	str	r3, [sp, #0]
 800ec2e:	4b68      	ldr	r3, [pc, #416]	@ (800edd0 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800ec30:	2200      	movs	r2, #0
 800ec32:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ec36:	4867      	ldr	r0, [pc, #412]	@ (800edd4 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800ec38:	f00d fd54 	bl	801c6e4 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800ec3c:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ec40:	4864      	ldr	r0, [pc, #400]	@ (800edd4 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800ec42:	f00d fe63 	bl	801c90c <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 800ec46:	f7ff fef9 	bl	800ea3c <LmhpComplianceTxProcess>
 800ec4a:	e14a      	b.n	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	689b      	ldr	r3, [r3, #8]
 800ec50:	781a      	ldrb	r2, [r3, #0]
 800ec52:	4b5d      	ldr	r3, [pc, #372]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ec54:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800ec56:	4b5c      	ldr	r3, [pc, #368]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ec58:	789b      	ldrb	r3, [r3, #2]
 800ec5a:	2b0a      	cmp	r3, #10
 800ec5c:	f200 813c 	bhi.w	800eed8 <LmhpComplianceOnMcpsIndication+0x3b0>
 800ec60:	a201      	add	r2, pc, #4	@ (adr r2, 800ec68 <LmhpComplianceOnMcpsIndication+0x140>)
 800ec62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec66:	bf00      	nop
 800ec68:	0800ec95 	.word	0x0800ec95
 800ec6c:	0800ecdf 	.word	0x0800ecdf
 800ec70:	0800ece7 	.word	0x0800ece7
 800ec74:	0800ecf5 	.word	0x0800ecf5
 800ec78:	0800ed03 	.word	0x0800ed03
 800ec7c:	0800ed5b 	.word	0x0800ed5b
 800ec80:	0800ed6d 	.word	0x0800ed6d
 800ec84:	0800eddd 	.word	0x0800eddd
 800ec88:	0800ee85 	.word	0x0800ee85
 800ec8c:	0800ee97 	.word	0x0800ee97
 800ec90:	0800eeb1 	.word	0x0800eeb1
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800ec94:	484f      	ldr	r0, [pc, #316]	@ (800edd4 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800ec96:	f00d fdc9 	bl	801c82c <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800ec9a:	4b4b      	ldr	r3, [pc, #300]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800eca0:	4b49      	ldr	r3, [pc, #292]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800eca2:	2200      	movs	r2, #0
 800eca4:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800eca6:	2304      	movs	r3, #4
 800eca8:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800ecaa:	4b48      	ldr	r3, [pc, #288]	@ (800edcc <LmhpComplianceOnMcpsIndication+0x2a4>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800ecb2:	f107 030c 	add.w	r3, r7, #12
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f004 f90e 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800ecbc:	4b43      	ldr	r3, [pc, #268]	@ (800edcc <LmhpComplianceOnMcpsIndication+0x2a4>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	785b      	ldrb	r3, [r3, #1]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f004 fee4 	bl	8013a90 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800ecc8:	4b40      	ldr	r3, [pc, #256]	@ (800edcc <LmhpComplianceOnMcpsIndication+0x2a4>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	689b      	ldr	r3, [r3, #8]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	f000 8104 	beq.w	800eedc <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800ecd4:	4b3d      	ldr	r3, [pc, #244]	@ (800edcc <LmhpComplianceOnMcpsIndication+0x2a4>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	689b      	ldr	r3, [r3, #8]
 800ecda:	4798      	blx	r3
                    }
                }
                break;
 800ecdc:	e0fe      	b.n	800eedc <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 800ecde:	4b3a      	ldr	r3, [pc, #232]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ece0:	2202      	movs	r2, #2
 800ece2:	719a      	strb	r2, [r3, #6]
                break;
 800ece4:	e0fd      	b.n	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 800ece6:	4b38      	ldr	r3, [pc, #224]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ece8:	2201      	movs	r2, #1
 800ecea:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800ecec:	4b36      	ldr	r3, [pc, #216]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ecee:	2201      	movs	r2, #1
 800ecf0:	709a      	strb	r2, [r3, #2]
                break;
 800ecf2:	e0f6      	b.n	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 800ecf4:	4b34      	ldr	r3, [pc, #208]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800ecfa:	4b33      	ldr	r3, [pc, #204]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ecfc:	2201      	movs	r2, #1
 800ecfe:	709a      	strb	r2, [r3, #2]
                break;
 800ed00:	e0ef      	b.n	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	7b1a      	ldrb	r2, [r3, #12]
 800ed06:	4b30      	ldr	r3, [pc, #192]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ed08:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 800ed0a:	4b2f      	ldr	r3, [pc, #188]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ed0c:	689b      	ldr	r3, [r3, #8]
 800ed0e:	2204      	movs	r2, #4
 800ed10:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800ed12:	2301      	movs	r3, #1
 800ed14:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800ed18:	e012      	b.n	800ed40 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	689a      	ldr	r2, [r3, #8]
 800ed1e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800ed22:	4413      	add	r3, r2
 800ed24:	781a      	ldrb	r2, [r3, #0]
 800ed26:	4b28      	ldr	r3, [pc, #160]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ed28:	6899      	ldr	r1, [r3, #8]
 800ed2a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800ed2e:	440b      	add	r3, r1
 800ed30:	3201      	adds	r2, #1
 800ed32:	b2d2      	uxtb	r2, r2
 800ed34:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800ed36:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800ed3a:	3301      	adds	r3, #1
 800ed3c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800ed40:	4b21      	ldr	r3, [pc, #132]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ed42:	795a      	ldrb	r2, [r3, #5]
 800ed44:	4b20      	ldr	r3, [pc, #128]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ed46:	799b      	ldrb	r3, [r3, #6]
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	bf28      	it	cs
 800ed4c:	4613      	movcs	r3, r2
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d3e0      	bcc.n	800ed1a <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 800ed58:	e0c3      	b.n	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 800ed5a:	2305      	movs	r3, #5
 800ed5c:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 800ed60:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800ed64:	4618      	mov	r0, r3
 800ed66:	f004 fc4b 	bl	8013600 <LoRaMacMlmeRequest>
                }
                break;
 800ed6a:	e0ba      	b.n	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800ed6c:	4819      	ldr	r0, [pc, #100]	@ (800edd4 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800ed6e:	f00d fd5d 	bl	801c82c <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800ed72:	4b15      	ldr	r3, [pc, #84]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ed74:	2200      	movs	r2, #0
 800ed76:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800ed78:	4b13      	ldr	r3, [pc, #76]	@ (800edc8 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800ed7e:	2304      	movs	r3, #4
 800ed80:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800ed82:	4b12      	ldr	r3, [pc, #72]	@ (800edcc <LmhpComplianceOnMcpsIndication+0x2a4>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800ed8a:	f107 030c 	add.w	r3, r7, #12
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f004 f8a2 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800ed94:	4b0d      	ldr	r3, [pc, #52]	@ (800edcc <LmhpComplianceOnMcpsIndication+0x2a4>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	785b      	ldrb	r3, [r3, #1]
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f004 fe78 	bl	8013a90 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800eda0:	4b0a      	ldr	r3, [pc, #40]	@ (800edcc <LmhpComplianceOnMcpsIndication+0x2a4>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	689b      	ldr	r3, [r3, #8]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d003      	beq.n	800edb2 <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800edaa:	4b08      	ldr	r3, [pc, #32]	@ (800edcc <LmhpComplianceOnMcpsIndication+0x2a4>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	689b      	ldr	r3, [r3, #8]
 800edb0:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 800edb2:	4b09      	ldr	r3, [pc, #36]	@ (800edd8 <LmhpComplianceOnMcpsIndication+0x2b0>)
 800edb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	f000 8092 	beq.w	800eee0 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800edbc:	4b06      	ldr	r3, [pc, #24]	@ (800edd8 <LmhpComplianceOnMcpsIndication+0x2b0>)
 800edbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc0:	2101      	movs	r1, #1
 800edc2:	2002      	movs	r0, #2
 800edc4:	4798      	blx	r3
                    }
                }
                break;
 800edc6:	e08b      	b.n	800eee0 <LmhpComplianceOnMcpsIndication+0x3b8>
 800edc8:	200006ec 	.word	0x200006ec
 800edcc:	20000700 	.word	0x20000700
 800edd0:	0800eef9 	.word	0x0800eef9
 800edd4:	200006d4 	.word	0x200006d4
 800edd8:	200000d0 	.word	0x200000d0
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	7b1b      	ldrb	r3, [r3, #12]
 800ede0:	2b03      	cmp	r3, #3
 800ede2:	d113      	bne.n	800ee0c <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 800ede4:	2306      	movs	r3, #6
 800ede6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	689b      	ldr	r3, [r3, #8]
 800edee:	3301      	adds	r3, #1
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	021b      	lsls	r3, r3, #8
 800edf4:	b21a      	sxth	r2, r3
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	689b      	ldr	r3, [r3, #8]
 800edfa:	3302      	adds	r3, #2
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	b21b      	sxth	r3, r3
 800ee00:	4313      	orrs	r3, r2
 800ee02:	b21b      	sxth	r3, r3
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800ee0a:	e032      	b.n	800ee72 <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	7b1b      	ldrb	r3, [r3, #12]
 800ee10:	2b07      	cmp	r3, #7
 800ee12:	d12e      	bne.n	800ee72 <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 800ee14:	2307      	movs	r3, #7
 800ee16:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	689b      	ldr	r3, [r3, #8]
 800ee1e:	3301      	adds	r3, #1
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	021b      	lsls	r3, r3, #8
 800ee24:	b21a      	sxth	r2, r3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	3302      	adds	r3, #2
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	b21b      	sxth	r3, r3
 800ee30:	4313      	orrs	r3, r2
 800ee32:	b21b      	sxth	r3, r3
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	689b      	ldr	r3, [r3, #8]
 800ee3e:	3303      	adds	r3, #3
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	041a      	lsls	r2, r3, #16
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	689b      	ldr	r3, [r3, #8]
 800ee48:	3304      	adds	r3, #4
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	021b      	lsls	r3, r3, #8
 800ee4e:	4313      	orrs	r3, r2
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	6892      	ldr	r2, [r2, #8]
 800ee54:	3205      	adds	r2, #5
 800ee56:	7812      	ldrb	r2, [r2, #0]
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	2364      	movs	r3, #100	@ 0x64
 800ee5e:	fb02 f303 	mul.w	r3, r2, r3
 800ee62:	667b      	str	r3, [r7, #100]	@ 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	689b      	ldr	r3, [r3, #8]
 800ee68:	3306      	adds	r3, #6
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	b25b      	sxtb	r3, r3
 800ee6e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 800ee72:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800ee76:	4618      	mov	r0, r3
 800ee78:	f004 fbc2 	bl	8013600 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 800ee7c:	4b1a      	ldr	r3, [pc, #104]	@ (800eee8 <LmhpComplianceOnMcpsIndication+0x3c0>)
 800ee7e:	2201      	movs	r2, #1
 800ee80:	709a      	strb	r2, [r3, #2]
                }
                break;
 800ee82:	e02e      	b.n	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 800ee84:	230a      	movs	r3, #10
 800ee86:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800ee8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f004 fbb6 	bl	8013600 <LoRaMacMlmeRequest>
                }
                break;
 800ee94:	e025      	b.n	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 800ee96:	2300      	movs	r3, #0
 800ee98:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	689b      	ldr	r3, [r3, #8]
 800ee9e:	3301      	adds	r3, #1
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800eea4:	f107 030c 	add.w	r3, r7, #12
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f004 f815 	bl	8012ed8 <LoRaMacMibSetRequestConfirm>
                }
                break;
 800eeae:	e018      	b.n	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800eeb0:	230d      	movs	r3, #13
 800eeb2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	689b      	ldr	r3, [r3, #8]
 800eeba:	785b      	ldrb	r3, [r3, #1]
 800eebc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 800eec0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800eec4:	4618      	mov	r0, r3
 800eec6:	f004 fb9b 	bl	8013600 <LoRaMacMlmeRequest>
                }
                break;
 800eeca:	e00a      	b.n	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800eecc:	bf00      	nop
 800eece:	e008      	b.n	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800eed0:	bf00      	nop
 800eed2:	e006      	b.n	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800eed4:	bf00      	nop
 800eed6:	e004      	b.n	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 800eed8:	bf00      	nop
 800eeda:	e002      	b.n	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800eedc:	bf00      	nop
 800eede:	e000      	b.n	800eee2 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800eee0:	bf00      	nop
        }
    }
}
 800eee2:	3788      	adds	r7, #136	@ 0x88
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	200006ec 	.word	0x200006ec

0800eeec <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800eeec:	b480      	push	{r7}
 800eeee:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800eef0:	bf00      	nop
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bc80      	pop	{r7}
 800eef6:	4770      	bx	lr

0800eef8 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800ef00:	f7ff fd9c 	bl	800ea3c <LmhpComplianceTxProcess>
}
 800ef04:	bf00      	nop
 800ef06:	3708      	adds	r7, #8
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b083      	sub	sp, #12
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800ef14:	2300      	movs	r3, #0
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	370c      	adds	r7, #12
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bc80      	pop	{r7}
 800ef1e:	4770      	bx	lr

0800ef20 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800ef20:	b480      	push	{r7}
 800ef22:	b083      	sub	sp, #12
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	4603      	mov	r3, r0
 800ef28:	6039      	str	r1, [r7, #0]
 800ef2a:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800ef2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	370c      	adds	r7, #12
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bc80      	pop	{r7}
 800ef38:	4770      	bx	lr
	...

0800ef3c <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800ef3c:	b590      	push	{r4, r7, lr}
 800ef3e:	b083      	sub	sp, #12
 800ef40:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800ef42:	f00d fd8d 	bl	801ca60 <UTIL_TIMER_GetCurrentTime>
 800ef46:	4603      	mov	r3, r0
 800ef48:	4a0f      	ldr	r2, [pc, #60]	@ (800ef88 <OnRadioTxDone+0x4c>)
 800ef4a:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800ef4c:	4c0f      	ldr	r4, [pc, #60]	@ (800ef8c <OnRadioTxDone+0x50>)
 800ef4e:	463b      	mov	r3, r7
 800ef50:	4618      	mov	r0, r3
 800ef52:	f00c ff05 	bl	801bd60 <SysTimeGet>
 800ef56:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800ef5a:	463a      	mov	r2, r7
 800ef5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef60:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800ef64:	4a0a      	ldr	r2, [pc, #40]	@ (800ef90 <OnRadioTxDone+0x54>)
 800ef66:	7813      	ldrb	r3, [r2, #0]
 800ef68:	f043 0310 	orr.w	r3, r3, #16
 800ef6c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800ef6e:	f003 f993 	bl	8012298 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800ef72:	4b08      	ldr	r3, [pc, #32]	@ (800ef94 <OnRadioTxDone+0x58>)
 800ef74:	2201      	movs	r2, #1
 800ef76:	2100      	movs	r1, #0
 800ef78:	2002      	movs	r0, #2
 800ef7a:	f00d fe61 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
}
 800ef7e:	bf00      	nop
 800ef80:	370c      	adds	r7, #12
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd90      	pop	{r4, r7, pc}
 800ef86:	bf00      	nop
 800ef88:	20001b00 	.word	0x20001b00
 800ef8c:	20000704 	.word	0x20000704
 800ef90:	20001afc 	.word	0x20001afc
 800ef94:	0801d838 	.word	0x0801d838

0800ef98 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b084      	sub	sp, #16
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	60f8      	str	r0, [r7, #12]
 800efa0:	4608      	mov	r0, r1
 800efa2:	4611      	mov	r1, r2
 800efa4:	461a      	mov	r2, r3
 800efa6:	4603      	mov	r3, r0
 800efa8:	817b      	strh	r3, [r7, #10]
 800efaa:	460b      	mov	r3, r1
 800efac:	813b      	strh	r3, [r7, #8]
 800efae:	4613      	mov	r3, r2
 800efb0:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800efb2:	f00d fd55 	bl	801ca60 <UTIL_TIMER_GetCurrentTime>
 800efb6:	4603      	mov	r3, r0
 800efb8:	4a0f      	ldr	r2, [pc, #60]	@ (800eff8 <OnRadioRxDone+0x60>)
 800efba:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800efbc:	4a0e      	ldr	r2, [pc, #56]	@ (800eff8 <OnRadioRxDone+0x60>)
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800efc2:	4a0d      	ldr	r2, [pc, #52]	@ (800eff8 <OnRadioRxDone+0x60>)
 800efc4:	897b      	ldrh	r3, [r7, #10]
 800efc6:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800efc8:	4a0b      	ldr	r2, [pc, #44]	@ (800eff8 <OnRadioRxDone+0x60>)
 800efca:	893b      	ldrh	r3, [r7, #8]
 800efcc:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800efce:	4a0a      	ldr	r2, [pc, #40]	@ (800eff8 <OnRadioRxDone+0x60>)
 800efd0:	79fb      	ldrb	r3, [r7, #7]
 800efd2:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800efd4:	4a09      	ldr	r2, [pc, #36]	@ (800effc <OnRadioRxDone+0x64>)
 800efd6:	7813      	ldrb	r3, [r2, #0]
 800efd8:	f043 0308 	orr.w	r3, r3, #8
 800efdc:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800efde:	f003 f95b 	bl	8012298 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800efe2:	4b07      	ldr	r3, [pc, #28]	@ (800f000 <OnRadioRxDone+0x68>)
 800efe4:	2201      	movs	r2, #1
 800efe6:	2100      	movs	r1, #0
 800efe8:	2002      	movs	r0, #2
 800efea:	f00d fe29 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
}
 800efee:	bf00      	nop
 800eff0:	3710      	adds	r7, #16
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	20001b04 	.word	0x20001b04
 800effc:	20001afc 	.word	0x20001afc
 800f000:	0801d848 	.word	0x0801d848

0800f004 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f004:	b580      	push	{r7, lr}
 800f006:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f008:	4a07      	ldr	r2, [pc, #28]	@ (800f028 <OnRadioTxTimeout+0x24>)
 800f00a:	7813      	ldrb	r3, [r2, #0]
 800f00c:	f043 0304 	orr.w	r3, r3, #4
 800f010:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f012:	f003 f941 	bl	8012298 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800f016:	4b05      	ldr	r3, [pc, #20]	@ (800f02c <OnRadioTxTimeout+0x28>)
 800f018:	2201      	movs	r2, #1
 800f01a:	2100      	movs	r1, #0
 800f01c:	2002      	movs	r0, #2
 800f01e:	f00d fe0f 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
}
 800f022:	bf00      	nop
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop
 800f028:	20001afc 	.word	0x20001afc
 800f02c:	0801d858 	.word	0x0801d858

0800f030 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f030:	b580      	push	{r7, lr}
 800f032:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f034:	4a04      	ldr	r2, [pc, #16]	@ (800f048 <OnRadioRxError+0x18>)
 800f036:	7813      	ldrb	r3, [r2, #0]
 800f038:	f043 0302 	orr.w	r3, r3, #2
 800f03c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f03e:	f003 f92b 	bl	8012298 <OnMacProcessNotify>
}
 800f042:	bf00      	nop
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	20001afc 	.word	0x20001afc

0800f04c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f050:	4a07      	ldr	r2, [pc, #28]	@ (800f070 <OnRadioRxTimeout+0x24>)
 800f052:	7813      	ldrb	r3, [r2, #0]
 800f054:	f043 0301 	orr.w	r3, r3, #1
 800f058:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f05a:	f003 f91d 	bl	8012298 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800f05e:	4b05      	ldr	r3, [pc, #20]	@ (800f074 <OnRadioRxTimeout+0x28>)
 800f060:	2201      	movs	r2, #1
 800f062:	2100      	movs	r1, #0
 800f064:	2002      	movs	r0, #2
 800f066:	f00d fdeb 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
}
 800f06a:	bf00      	nop
 800f06c:	bd80      	pop	{r7, pc}
 800f06e:	bf00      	nop
 800f070:	20001afc 	.word	0x20001afc
 800f074:	0801d868 	.word	0x0801d868

0800f078 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f078:	b480      	push	{r7}
 800f07a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f07c:	4b08      	ldr	r3, [pc, #32]	@ (800f0a0 <UpdateRxSlotIdleState+0x28>)
 800f07e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f082:	2b02      	cmp	r3, #2
 800f084:	d004      	beq.n	800f090 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f086:	4b07      	ldr	r3, [pc, #28]	@ (800f0a4 <UpdateRxSlotIdleState+0x2c>)
 800f088:	2206      	movs	r2, #6
 800f08a:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f08e:	e003      	b.n	800f098 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f090:	4b04      	ldr	r3, [pc, #16]	@ (800f0a4 <UpdateRxSlotIdleState+0x2c>)
 800f092:	2202      	movs	r2, #2
 800f094:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
}
 800f098:	bf00      	nop
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bc80      	pop	{r7}
 800f09e:	4770      	bx	lr
 800f0a0:	20000c0c 	.word	0x20000c0c
 800f0a4:	20000704 	.word	0x20000704

0800f0a8 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b092      	sub	sp, #72	@ 0x48
 800f0ac:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f0ae:	4b50      	ldr	r3, [pc, #320]	@ (800f1f0 <ProcessRadioTxDone+0x148>)
 800f0b0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f0b4:	2b02      	cmp	r3, #2
 800f0b6:	d002      	beq.n	800f0be <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800f0b8:	4b4e      	ldr	r3, [pc, #312]	@ (800f1f4 <ProcessRadioTxDone+0x14c>)
 800f0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0bc:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0be:	f3ef 8310 	mrs	r3, PRIMASK
 800f0c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800f0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800f0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800f0c8:	b672      	cpsid	i
}
 800f0ca:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800f0cc:	f00d fcc8 	bl	801ca60 <UTIL_TIMER_GetCurrentTime>
 800f0d0:	4602      	mov	r2, r0
 800f0d2:	4b49      	ldr	r3, [pc, #292]	@ (800f1f8 <ProcessRadioTxDone+0x150>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	1ad3      	subs	r3, r2, r3
 800f0d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800f0da:	4b48      	ldr	r3, [pc, #288]	@ (800f1fc <ProcessRadioTxDone+0x154>)
 800f0dc:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800f0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e2:	1ad3      	subs	r3, r2, r3
 800f0e4:	4619      	mov	r1, r3
 800f0e6:	4846      	ldr	r0, [pc, #280]	@ (800f200 <ProcessRadioTxDone+0x158>)
 800f0e8:	f00d fc10 	bl	801c90c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f0ec:	4844      	ldr	r0, [pc, #272]	@ (800f200 <ProcessRadioTxDone+0x158>)
 800f0ee:	f00d fb2f 	bl	801c750 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800f0f2:	4b42      	ldr	r3, [pc, #264]	@ (800f1fc <ProcessRadioTxDone+0x154>)
 800f0f4:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800f0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0fa:	1ad3      	subs	r3, r2, r3
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	4841      	ldr	r0, [pc, #260]	@ (800f204 <ProcessRadioTxDone+0x15c>)
 800f100:	f00d fc04 	bl	801c90c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f104:	483f      	ldr	r0, [pc, #252]	@ (800f204 <ProcessRadioTxDone+0x15c>)
 800f106:	f00d fb23 	bl	801c750 <UTIL_TIMER_Start>
 800f10a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f10c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f10e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f110:	f383 8810 	msr	PRIMASK, r3
}
 800f114:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800f116:	4b36      	ldr	r3, [pc, #216]	@ (800f1f0 <ProcessRadioTxDone+0x148>)
 800f118:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d004      	beq.n	800f12a <ProcessRadioTxDone+0x82>
 800f120:	4b36      	ldr	r3, [pc, #216]	@ (800f1fc <ProcessRadioTxDone+0x154>)
 800f122:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800f126:	2b00      	cmp	r3, #0
 800f128:	d019      	beq.n	800f15e <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800f12a:	2316      	movs	r3, #22
 800f12c:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f130:	4b2f      	ldr	r3, [pc, #188]	@ (800f1f0 <ProcessRadioTxDone+0x148>)
 800f132:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f136:	f107 0220 	add.w	r2, r7, #32
 800f13a:	4611      	mov	r1, r2
 800f13c:	4618      	mov	r0, r3
 800f13e:	f006 fda8 	bl	8015c92 <RegionGetPhyParam>
 800f142:	4603      	mov	r3, r0
 800f144:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f146:	4b2d      	ldr	r3, [pc, #180]	@ (800f1fc <ProcessRadioTxDone+0x154>)
 800f148:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800f14c:	69fb      	ldr	r3, [r7, #28]
 800f14e:	4413      	add	r3, r2
 800f150:	4619      	mov	r1, r3
 800f152:	482d      	ldr	r0, [pc, #180]	@ (800f208 <ProcessRadioTxDone+0x160>)
 800f154:	f00d fbda 	bl	801c90c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800f158:	482b      	ldr	r0, [pc, #172]	@ (800f208 <ProcessRadioTxDone+0x160>)
 800f15a:	f00d faf9 	bl	801c750 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800f15e:	4b26      	ldr	r3, [pc, #152]	@ (800f1f8 <ProcessRadioTxDone+0x150>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	4a23      	ldr	r2, [pc, #140]	@ (800f1f0 <ProcessRadioTxDone+0x148>)
 800f164:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f166:	4b25      	ldr	r3, [pc, #148]	@ (800f1fc <ProcessRadioTxDone+0x154>)
 800f168:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 800f16c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f16e:	4b22      	ldr	r3, [pc, #136]	@ (800f1f8 <ProcessRadioTxDone+0x150>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f174:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f178:	4618      	mov	r0, r3
 800f17a:	f00c fe29 	bl	801bdd0 <SysTimeGetMcuTime>
 800f17e:	4638      	mov	r0, r7
 800f180:	4b1b      	ldr	r3, [pc, #108]	@ (800f1f0 <ProcessRadioTxDone+0x148>)
 800f182:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 800f186:	9200      	str	r2, [sp, #0]
 800f188:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800f18c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f190:	ca06      	ldmia	r2, {r1, r2}
 800f192:	f00c fd7e 	bl	801bc92 <SysTimeSub>
 800f196:	f107 0314 	add.w	r3, r7, #20
 800f19a:	463a      	mov	r2, r7
 800f19c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1a0:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f1a4:	4b15      	ldr	r3, [pc, #84]	@ (800f1fc <ProcessRadioTxDone+0x154>)
 800f1a6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800f1aa:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f1b0:	4b0f      	ldr	r3, [pc, #60]	@ (800f1f0 <ProcessRadioTxDone+0x148>)
 800f1b2:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d101      	bne.n	800f1be <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800f1be:	4b0c      	ldr	r3, [pc, #48]	@ (800f1f0 <ProcessRadioTxDone+0x148>)
 800f1c0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f1c4:	f107 0208 	add.w	r2, r7, #8
 800f1c8:	4611      	mov	r1, r2
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f006 fd79 	bl	8015cc2 <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800f1d0:	4b0a      	ldr	r3, [pc, #40]	@ (800f1fc <ProcessRadioTxDone+0x154>)
 800f1d2:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800f1d6:	f083 0301 	eor.w	r3, r3, #1
 800f1da:	b2db      	uxtb	r3, r3
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d003      	beq.n	800f1e8 <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f1e0:	4b06      	ldr	r3, [pc, #24]	@ (800f1fc <ProcessRadioTxDone+0x154>)
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    }
#endif /* LORAMAC_VERSION */
}
 800f1e8:	bf00      	nop
 800f1ea:	3740      	adds	r7, #64	@ 0x40
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	20000c0c 	.word	0x20000c0c
 800f1f4:	0801df78 	.word	0x0801df78
 800f1f8:	20001b00 	.word	0x20001b00
 800f1fc:	20000704 	.word	0x20000704
 800f200:	20000a84 	.word	0x20000a84
 800f204:	20000a9c 	.word	0x20000a9c
 800f208:	20000af8 	.word	0x20000af8

0800f20c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f210:	4b10      	ldr	r3, [pc, #64]	@ (800f254 <PrepareRxDoneAbort+0x48>)
 800f212:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f21a:	4a0e      	ldr	r2, [pc, #56]	@ (800f254 <PrepareRxDoneAbort+0x48>)
 800f21c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800f220:	4b0c      	ldr	r3, [pc, #48]	@ (800f254 <PrepareRxDoneAbort+0x48>)
 800f222:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800f226:	2b00      	cmp	r3, #0
 800f228:	d002      	beq.n	800f230 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800f22a:	2000      	movs	r0, #0
 800f22c:	f001 f950 	bl	80104d0 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f230:	4a08      	ldr	r2, [pc, #32]	@ (800f254 <PrepareRxDoneAbort+0x48>)
 800f232:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800f236:	f043 0302 	orr.w	r3, r3, #2
 800f23a:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f23e:	4a05      	ldr	r2, [pc, #20]	@ (800f254 <PrepareRxDoneAbort+0x48>)
 800f240:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800f244:	f043 0310 	orr.w	r3, r3, #16
 800f248:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

    UpdateRxSlotIdleState( );
 800f24c:	f7ff ff14 	bl	800f078 <UpdateRxSlotIdleState>
}
 800f250:	bf00      	nop
 800f252:	bd80      	pop	{r7, pc}
 800f254:	20000704 	.word	0x20000704

0800f258 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f258:	b5b0      	push	{r4, r5, r7, lr}
 800f25a:	b0aa      	sub	sp, #168	@ 0xa8
 800f25c:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f25e:	2313      	movs	r3, #19
 800f260:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f264:	4b78      	ldr	r3, [pc, #480]	@ (800f448 <ProcessRadioRxDone+0x1f0>)
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint16_t size = RxDoneParams.Size;
 800f26c:	4b76      	ldr	r3, [pc, #472]	@ (800f448 <ProcessRadioRxDone+0x1f0>)
 800f26e:	891b      	ldrh	r3, [r3, #8]
 800f270:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800f274:	4b74      	ldr	r3, [pc, #464]	@ (800f448 <ProcessRadioRxDone+0x1f0>)
 800f276:	895b      	ldrh	r3, [r3, #10]
 800f278:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    int8_t snr = RxDoneParams.Snr;
 800f27c:	4b72      	ldr	r3, [pc, #456]	@ (800f448 <ProcessRadioRxDone+0x1f0>)
 800f27e:	7b1b      	ldrb	r3, [r3, #12]
 800f280:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    uint8_t pktHeaderLen = 0;
 800f284:	2300      	movs	r3, #0
 800f286:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    uint32_t downLinkCounter = 0;
 800f28a:	2300      	movs	r3, #0
 800f28c:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800f28e:	4b6f      	ldr	r3, [pc, #444]	@ (800f44c <ProcessRadioRxDone+0x1f4>)
 800f290:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f294:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t multicast = 0;
 800f298:	2300      	movs	r3, #0
 800f29a:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f29e:	2301      	movs	r3, #1
 800f2a0:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800f2aa:	4b69      	ldr	r3, [pc, #420]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    MacCtx.RxStatus.Rssi = rssi;
 800f2b2:	4a67      	ldr	r2, [pc, #412]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f2b4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800f2b8:	f8a2 347c 	strh.w	r3, [r2, #1148]	@ 0x47c
    MacCtx.RxStatus.Snr = snr;
 800f2bc:	4a64      	ldr	r2, [pc, #400]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f2be:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f2c2:	f882 347e 	strb.w	r3, [r2, #1150]	@ 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800f2c6:	4b62      	ldr	r3, [pc, #392]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f2c8:	f893 2480 	ldrb.w	r2, [r3, #1152]	@ 0x480
 800f2cc:	4b60      	ldr	r3, [pc, #384]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f2ce:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
    MacCtx.McpsIndication.Port = 0;
 800f2d2:	4b5f      	ldr	r3, [pc, #380]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 800f2da:	4b5d      	ldr	r3, [pc, #372]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f2dc:	2200      	movs	r2, #0
 800f2de:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800f2e2:	4b5b      	ldr	r3, [pc, #364]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 800f2ea:	4b59      	ldr	r3, [pc, #356]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 800f2f2:	4b57      	ldr	r3, [pc, #348]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.RxData = false;
 800f2fa:	4b55      	ldr	r3, [pc, #340]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.AckReceived = false;
 800f302:	4b53      	ldr	r3, [pc, #332]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f304:	2200      	movs	r2, #0
 800f306:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f30a:	4b51      	ldr	r3, [pc, #324]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f30c:	2200      	movs	r2, #0
 800f30e:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f312:	4b4f      	ldr	r3, [pc, #316]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f314:	2200      	movs	r2, #0
 800f316:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 800f31a:	4b4d      	ldr	r3, [pc, #308]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f31c:	2200      	movs	r2, #0
 800f31e:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f322:	4b4b      	ldr	r3, [pc, #300]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f324:	2200      	movs	r2, #0
 800f326:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800f32a:	4b4a      	ldr	r3, [pc, #296]	@ (800f454 <ProcessRadioRxDone+0x1fc>)
 800f32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f32e:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800f330:	4849      	ldr	r0, [pc, #292]	@ (800f458 <ProcessRadioRxDone+0x200>)
 800f332:	f00d fa7b 	bl	801c82c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f336:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f33a:	4619      	mov	r1, r3
 800f33c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800f340:	f004 fd0d 	bl	8013d5e <LoRaMacClassBRxBeacon>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	d00b      	beq.n	800f362 <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f34a:	4a41      	ldr	r2, [pc, #260]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f34c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800f350:	f8a2 3472 	strh.w	r3, [r2, #1138]	@ 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f354:	4a3e      	ldr	r2, [pc, #248]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f356:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f35a:	f882 3474 	strb.w	r3, [r2, #1140]	@ 0x474
        return;
 800f35e:	f000 bc1f 	b.w	800fba0 <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f362:	4b3a      	ldr	r3, [pc, #232]	@ (800f44c <ProcessRadioRxDone+0x1f4>)
 800f364:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d11e      	bne.n	800f3aa <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f36c:	f004 fd0a 	bl	8013d84 <LoRaMacClassBIsPingExpected>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00a      	beq.n	800f38c <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f376:	2000      	movs	r0, #0
 800f378:	f004 fcbb 	bl	8013cf2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f37c:	2000      	movs	r0, #0
 800f37e:	f004 fcdc 	bl	8013d3a <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f382:	4b33      	ldr	r3, [pc, #204]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f384:	2204      	movs	r2, #4
 800f386:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
 800f38a:	e00e      	b.n	800f3aa <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f38c:	f004 fd01 	bl	8013d92 <LoRaMacClassBIsMulticastExpected>
 800f390:	4603      	mov	r3, r0
 800f392:	2b00      	cmp	r3, #0
 800f394:	d009      	beq.n	800f3aa <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f396:	2000      	movs	r0, #0
 800f398:	f004 fcb5 	bl	8013d06 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f39c:	2000      	movs	r0, #0
 800f39e:	f004 fcd5 	bl	8013d4c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f3a2:	4b2b      	ldr	r3, [pc, #172]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f3a4:	2205      	movs	r2, #5
 800f3a6:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800f3aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d106      	bne.n	800f3c0 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f3b2:	4b27      	ldr	r3, [pc, #156]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
        PrepareRxDoneAbort( );
 800f3ba:	f7ff ff27 	bl	800f20c <PrepareRxDoneAbort>
        return;
 800f3be:	e3ef      	b.n	800fba0 <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800f3c0:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800f3c4:	1c5a      	adds	r2, r3, #1
 800f3c6:	f887 2086 	strb.w	r2, [r7, #134]	@ 0x86
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f3d0:	4413      	add	r3, r2
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800f3d8:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800f3dc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f3e0:	b2db      	uxtb	r3, r3
 800f3e2:	3b01      	subs	r3, #1
 800f3e4:	2b06      	cmp	r3, #6
 800f3e6:	f200 83b4 	bhi.w	800fb52 <ProcessRadioRxDone+0x8fa>
 800f3ea:	a201      	add	r2, pc, #4	@ (adr r2, 800f3f0 <ProcessRadioRxDone+0x198>)
 800f3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f0:	0800f40d 	.word	0x0800f40d
 800f3f4:	0800fb53 	.word	0x0800fb53
 800f3f8:	0800f5ed 	.word	0x0800f5ed
 800f3fc:	0800fb53 	.word	0x0800fb53
 800f400:	0800f5e5 	.word	0x0800f5e5
 800f404:	0800fb53 	.word	0x0800fb53
 800f408:	0800faf7 	.word	0x0800faf7
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800f40c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f410:	2b10      	cmp	r3, #16
 800f412:	d806      	bhi.n	800f422 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f414:	4b0e      	ldr	r3, [pc, #56]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f416:	2201      	movs	r2, #1
 800f418:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800f41c:	f7ff fef6 	bl	800f20c <PrepareRxDoneAbort>
                return;
 800f420:	e3be      	b.n	800fba0 <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 800f422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f426:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800f428:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f42c:	b2db      	uxtb	r3, r3
 800f42e:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f430:	4b06      	ldr	r3, [pc, #24]	@ (800f44c <ProcessRadioRxDone+0x1f4>)
 800f432:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800f436:	2b00      	cmp	r3, #0
 800f438:	d010      	beq.n	800f45c <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f43a:	4b05      	ldr	r3, [pc, #20]	@ (800f450 <ProcessRadioRxDone+0x1f8>)
 800f43c:	2201      	movs	r2, #1
 800f43e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800f442:	f7ff fee3 	bl	800f20c <PrepareRxDoneAbort>
                return;
 800f446:	e3ab      	b.n	800fba0 <ProcessRadioRxDone+0x948>
 800f448:	20001b04 	.word	0x20001b04
 800f44c:	20000c0c 	.word	0x20000c0c
 800f450:	20000704 	.word	0x20000704
 800f454:	0801df78 	.word	0x0801df78
 800f458:	20000a9c 	.word	0x20000a9c
            }

            SecureElementGetJoinEui( joinEui );
 800f45c:	1d3b      	adds	r3, r7, #4
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fe f9a6 	bl	800d7b0 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800f464:	f107 0214 	add.w	r2, r7, #20
 800f468:	1d3b      	adds	r3, r7, #4
 800f46a:	4619      	mov	r1, r3
 800f46c:	20ff      	movs	r0, #255	@ 0xff
 800f46e:	f005 fe97 	bl	80151a0 <LoRaMacCryptoHandleJoinAccept>
 800f472:	4603      	mov	r3, r0
 800f474:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800f478:	2300      	movs	r3, #0
 800f47a:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f47e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f482:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f486:	b2db      	uxtb	r3, r3
 800f488:	b25b      	sxtb	r3, r3
 800f48a:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f48c:	4bbb      	ldr	r3, [pc, #748]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f48e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f492:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800f494:	4bb9      	ldr	r3, [pc, #740]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f496:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f49a:	4639      	mov	r1, r7
 800f49c:	2207      	movs	r2, #7
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f006 fc32 	bl	8015d08 <RegionVerify>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800f4aa:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f040 808c 	bne.w	800f5cc <ProcessRadioRxDone+0x374>
 800f4b4:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	f000 8087 	beq.w	800f5cc <ProcessRadioRxDone+0x374>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800f4be:	7f7b      	ldrb	r3, [r7, #29]
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	4bae      	ldr	r3, [pc, #696]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f4c4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800f4c8:	4bac      	ldr	r3, [pc, #688]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f4ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800f4ce:	7fbb      	ldrb	r3, [r7, #30]
 800f4d0:	021b      	lsls	r3, r3, #8
 800f4d2:	4313      	orrs	r3, r2
 800f4d4:	4aa9      	ldr	r2, [pc, #676]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f4d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800f4da:	4ba8      	ldr	r3, [pc, #672]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f4dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800f4e0:	7ffb      	ldrb	r3, [r7, #31]
 800f4e2:	041b      	lsls	r3, r3, #16
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	4aa5      	ldr	r2, [pc, #660]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f4e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800f4ec:	6a3b      	ldr	r3, [r7, #32]
 800f4ee:	4aa3      	ldr	r2, [pc, #652]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f4f0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800f4f4:	4ba1      	ldr	r3, [pc, #644]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f4f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	2002      	movs	r0, #2
 800f4fe:	f7fe f96f 	bl	800d7e0 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800f502:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f506:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	461a      	mov	r2, r3
 800f50e:	4b9b      	ldr	r3, [pc, #620]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f510:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f514:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f518:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	461a      	mov	r2, r3
 800f520:	4b96      	ldr	r3, [pc, #600]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f522:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f526:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f52a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f52e:	b2db      	uxtb	r3, r3
 800f530:	461a      	mov	r2, r3
 800f532:	4b92      	ldr	r3, [pc, #584]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f534:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800f538:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f53c:	461a      	mov	r2, r3
 800f53e:	4b8f      	ldr	r3, [pc, #572]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f540:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800f542:	4b8e      	ldr	r3, [pc, #568]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f546:	2b00      	cmp	r3, #0
 800f548:	d102      	bne.n	800f550 <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800f54a:	4b8c      	ldr	r3, [pc, #560]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f54c:	2201      	movs	r2, #1
 800f54e:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800f550:	4b8a      	ldr	r3, [pc, #552]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f554:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f558:	fb02 f303 	mul.w	r3, r2, r3
 800f55c:	4a87      	ldr	r2, [pc, #540]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f55e:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f560:	4b86      	ldr	r3, [pc, #536]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f564:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800f568:	4a84      	ldr	r2, [pc, #528]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f56a:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800f56c:	4b83      	ldr	r3, [pc, #524]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f56e:	2201      	movs	r2, #1
 800f570:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800f574:	4b81      	ldr	r3, [pc, #516]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f576:	2200      	movs	r2, #0
 800f578:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800f57c:	f107 0314 	add.w	r3, r7, #20
 800f580:	3312      	adds	r3, #18
 800f582:	67bb      	str	r3, [r7, #120]	@ 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800f584:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	3b11      	subs	r3, #17
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800f592:	4b7a      	ldr	r3, [pc, #488]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f594:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f598:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800f59c:	4611      	mov	r1, r2
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f006 fbc9 	bl	8015d36 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f5a4:	4b75      	ldr	r3, [pc, #468]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f5a6:	2202      	movs	r2, #2
 800f5a8:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800f5ac:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f005 f8cf 	bl	8014754 <LoRaMacConfirmQueueIsCmdActive>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	f000 82d2 	beq.w	800fb62 <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800f5be:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	2000      	movs	r0, #0
 800f5c6:	f005 f839 	bl	801463c <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800f5ca:	e2ca      	b.n	800fb62 <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f5cc:	2001      	movs	r0, #1
 800f5ce:	f005 f8c1 	bl	8014754 <LoRaMacConfirmQueueIsCmdActive>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	f000 82c3 	beq.w	800fb60 <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f5da:	2101      	movs	r1, #1
 800f5dc:	2007      	movs	r0, #7
 800f5de:	f005 f82d 	bl	801463c <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800f5e2:	e2bd      	b.n	800fb60 <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f5e4:	4b66      	ldr	r3, [pc, #408]	@ (800f780 <ProcessRadioRxDone+0x528>)
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f5ec:	4b63      	ldr	r3, [pc, #396]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f5ee:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f5f2:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800f5f6:	4b62      	ldr	r3, [pc, #392]	@ (800f780 <ProcessRadioRxDone+0x528>)
 800f5f8:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 800f5fc:	b25b      	sxtb	r3, r3
 800f5fe:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f602:	230d      	movs	r3, #13
 800f604:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f608:	4b5c      	ldr	r3, [pc, #368]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f60a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d002      	beq.n	800f618 <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f612:	230e      	movs	r3, #14
 800f614:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f618:	4b58      	ldr	r3, [pc, #352]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f61a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f61e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f622:	4611      	mov	r1, r2
 800f624:	4618      	mov	r0, r3
 800f626:	f006 fb34 	bl	8015c92 <RegionGetPhyParam>
 800f62a:	4603      	mov	r3, r0
 800f62c:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800f62e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f632:	3b0d      	subs	r3, #13
 800f634:	b29b      	uxth	r3, r3
 800f636:	b21b      	sxth	r3, r3
 800f638:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f63c:	b21a      	sxth	r2, r3
 800f63e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f640:	b21b      	sxth	r3, r3
 800f642:	429a      	cmp	r2, r3
 800f644:	dc03      	bgt.n	800f64e <ProcessRadioRxDone+0x3f6>
 800f646:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f64a:	2b0b      	cmp	r3, #11
 800f64c:	d806      	bhi.n	800f65c <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f64e:	4b4c      	ldr	r3, [pc, #304]	@ (800f780 <ProcessRadioRxDone+0x528>)
 800f650:	2201      	movs	r2, #1
 800f652:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800f656:	f7ff fdd9 	bl	800f20c <PrepareRxDoneAbort>
                return;
 800f65a:	e2a1      	b.n	800fba0 <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 800f65c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f660:	63fb      	str	r3, [r7, #60]	@ 0x3c
            macMsgData.BufSize = size;
 800f662:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f666:	b2db      	uxtb	r3, r3
 800f668:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800f66c:	4b45      	ldr	r3, [pc, #276]	@ (800f784 <ProcessRadioRxDone+0x52c>)
 800f66e:	663b      	str	r3, [r7, #96]	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800f670:	23ff      	movs	r3, #255	@ 0xff
 800f672:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800f676:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f67a:	4618      	mov	r0, r3
 800f67c:	f006 f890 	bl	80157a0 <LoRaMacParserData>
 800f680:	4603      	mov	r3, r0
 800f682:	2b00      	cmp	r3, #0
 800f684:	d006      	beq.n	800f694 <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f686:	4b3e      	ldr	r3, [pc, #248]	@ (800f780 <ProcessRadioRxDone+0x528>)
 800f688:	2201      	movs	r2, #1
 800f68a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800f68e:	f7ff fdbd 	bl	800f20c <PrepareRxDoneAbort>
                return;
 800f692:	e285      	b.n	800fba0 <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f696:	4a3a      	ldr	r2, [pc, #232]	@ (800f780 <ProcessRadioRxDone+0x528>)
 800f698:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f69c:	f107 020e 	add.w	r2, r7, #14
 800f6a0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f6a4:	4611      	mov	r1, r2
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f002 fd1e 	bl	80120e8 <DetermineFrameType>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d006      	beq.n	800f6c0 <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f6b2:	4b33      	ldr	r3, [pc, #204]	@ (800f780 <ProcessRadioRxDone+0x528>)
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800f6ba:	f7ff fda7 	bl	800f20c <PrepareRxDoneAbort>
                return;
 800f6be:	e26f      	b.n	800fba0 <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            downLinkCounter = 0;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800f6d0:	e04f      	b.n	800f772 <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f6d2:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800f6d6:	4929      	ldr	r1, [pc, #164]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f6d8:	4613      	mov	r3, r2
 800f6da:	005b      	lsls	r3, r3, #1
 800f6dc:	4413      	add	r3, r2
 800f6de:	011b      	lsls	r3, r3, #4
 800f6e0:	440b      	add	r3, r1
 800f6e2:	33ec      	adds	r3, #236	@ 0xec
 800f6e4:	681a      	ldr	r2, [r3, #0]
 800f6e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d13d      	bne.n	800f768 <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f6ec:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800f6f0:	4922      	ldr	r1, [pc, #136]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	005b      	lsls	r3, r3, #1
 800f6f6:	4413      	add	r3, r2
 800f6f8:	011b      	lsls	r3, r3, #4
 800f6fa:	440b      	add	r3, r1
 800f6fc:	33e9      	adds	r3, #233	@ 0xe9
 800f6fe:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f700:	2b00      	cmp	r3, #0
 800f702:	d031      	beq.n	800f768 <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 800f704:	2301      	movs	r3, #1
 800f706:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800f70a:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800f70e:	491b      	ldr	r1, [pc, #108]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f710:	4613      	mov	r3, r2
 800f712:	005b      	lsls	r3, r3, #1
 800f714:	4413      	add	r3, r2
 800f716:	011b      	lsls	r3, r3, #4
 800f718:	440b      	add	r3, r1
 800f71a:	33ea      	adds	r3, #234	@ 0xea
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800f722:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800f726:	4915      	ldr	r1, [pc, #84]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f728:	4613      	mov	r3, r2
 800f72a:	005b      	lsls	r3, r3, #1
 800f72c:	4413      	add	r3, r2
 800f72e:	011b      	lsls	r3, r3, #4
 800f730:	440b      	add	r3, r1
 800f732:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800f73c:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800f740:	490e      	ldr	r1, [pc, #56]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f742:	4613      	mov	r3, r2
 800f744:	005b      	lsls	r3, r3, #1
 800f746:	4413      	add	r3, r2
 800f748:	011b      	lsls	r3, r3, #4
 800f74a:	440b      	add	r3, r1
 800f74c:	33ec      	adds	r3, #236	@ 0xec
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f754:	4b09      	ldr	r3, [pc, #36]	@ (800f77c <ProcessRadioRxDone+0x524>)
 800f756:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f75a:	2b02      	cmp	r3, #2
 800f75c:	d114      	bne.n	800f788 <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f75e:	4b08      	ldr	r3, [pc, #32]	@ (800f780 <ProcessRadioRxDone+0x528>)
 800f760:	2203      	movs	r2, #3
 800f762:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
                    }
                    break;
 800f766:	e00f      	b.n	800f788 <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f768:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800f76c:	3301      	adds	r3, #1
 800f76e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800f772:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800f776:	2b00      	cmp	r3, #0
 800f778:	d0ab      	beq.n	800f6d2 <ProcessRadioRxDone+0x47a>
 800f77a:	e006      	b.n	800f78a <ProcessRadioRxDone+0x532>
 800f77c:	20000c0c 	.word	0x20000c0c
 800f780:	20000704 	.word	0x20000704
 800f784:	2000093c 	.word	0x2000093c
                    break;
 800f788:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f78a:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d117      	bne.n	800f7c2 <ProcessRadioRxDone+0x56a>
 800f792:	7bbb      	ldrb	r3, [r7, #14]
 800f794:	2b03      	cmp	r3, #3
 800f796:	d10d      	bne.n	800f7b4 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f798:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f79c:	f003 0320 	and.w	r3, r3, #32
 800f7a0:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d106      	bne.n	800f7b4 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800f7a6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f7aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7ae:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d006      	beq.n	800f7c2 <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f7b4:	4bb3      	ldr	r3, [pc, #716]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800f7bc:	f7ff fd26 	bl	800f20c <PrepareRxDoneAbort>
                return;
 800f7c0:	e1ee      	b.n	800fba0 <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800f7c2:	2315      	movs	r3, #21
 800f7c4:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f7c8:	4baf      	ldr	r3, [pc, #700]	@ (800fa88 <ProcessRadioRxDone+0x830>)
 800f7ca:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f7ce:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800f7d2:	4611      	mov	r1, r2
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f006 fa5c 	bl	8015c92 <RegionGetPhyParam>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	66fb      	str	r3, [r7, #108]	@ 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800f7de:	7bb9      	ldrb	r1, [r7, #14]
 800f7e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	4da8      	ldr	r5, [pc, #672]	@ (800fa88 <ProcessRadioRxDone+0x830>)
 800f7e6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800f7ea:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800f7ee:	f107 0210 	add.w	r2, r7, #16
 800f7f2:	9202      	str	r2, [sp, #8]
 800f7f4:	f107 020f 	add.w	r2, r7, #15
 800f7f8:	9201      	str	r2, [sp, #4]
 800f7fa:	9300      	str	r3, [sp, #0]
 800f7fc:	f8d5 3128 	ldr.w	r3, [r5, #296]	@ 0x128
 800f800:	4622      	mov	r2, r4
 800f802:	f000 fe8d 	bl	8010520 <GetFCntDown>
 800f806:	4603      	mov	r3, r0
 800f808:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f80c:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800f810:	2b00      	cmp	r3, #0
 800f812:	d035      	beq.n	800f880 <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800f814:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800f818:	2b07      	cmp	r3, #7
 800f81a:	d119      	bne.n	800f850 <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800f81c:	4b99      	ldr	r3, [pc, #612]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f81e:	2208      	movs	r2, #8
 800f820:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800f824:	4b98      	ldr	r3, [pc, #608]	@ (800fa88 <ProcessRadioRxDone+0x830>)
 800f826:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d11d      	bne.n	800f86a <ProcessRadioRxDone+0x612>
 800f82e:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800f832:	f023 031f 	bic.w	r3, r3, #31
 800f836:	b2db      	uxtb	r3, r3
 800f838:	2ba0      	cmp	r3, #160	@ 0xa0
 800f83a:	d116      	bne.n	800f86a <ProcessRadioRxDone+0x612>
 800f83c:	4b92      	ldr	r3, [pc, #584]	@ (800fa88 <ProcessRadioRxDone+0x830>)
 800f83e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f840:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f842:	429a      	cmp	r2, r3
 800f844:	d111      	bne.n	800f86a <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800f846:	4b90      	ldr	r3, [pc, #576]	@ (800fa88 <ProcessRadioRxDone+0x830>)
 800f848:	2201      	movs	r2, #1
 800f84a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800f84e:	e00c      	b.n	800f86a <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800f850:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800f854:	2b08      	cmp	r3, #8
 800f856:	d104      	bne.n	800f862 <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800f858:	4b8a      	ldr	r3, [pc, #552]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f85a:	220a      	movs	r2, #10
 800f85c:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800f860:	e003      	b.n	800f86a <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f862:	4b88      	ldr	r3, [pc, #544]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f864:	2201      	movs	r2, #1
 800f866:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	4a85      	ldr	r2, [pc, #532]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f86e:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	4a83      	ldr	r2, [pc, #524]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f876:	f8c2 3460 	str.w	r3, [r2, #1120]	@ 0x460
                PrepareRxDoneAbort( );
 800f87a:	f7ff fcc7 	bl	800f20c <PrepareRxDoneAbort>
                return;
 800f87e:	e18f      	b.n	800fba0 <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800f880:	7bfa      	ldrb	r2, [r7, #15]
 800f882:	6939      	ldr	r1, [r7, #16]
 800f884:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800f888:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f88c:	9300      	str	r3, [sp, #0]
 800f88e:	460b      	mov	r3, r1
 800f890:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800f894:	f005 fde6 	bl	8015464 <LoRaMacCryptoUnsecureMessage>
 800f898:	4603      	mov	r3, r0
 800f89a:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f89e:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d00f      	beq.n	800f8c6 <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800f8a6:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800f8aa:	2b02      	cmp	r3, #2
 800f8ac:	d104      	bne.n	800f8b8 <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800f8ae:	4b75      	ldr	r3, [pc, #468]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f8b0:	220b      	movs	r2, #11
 800f8b2:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800f8b6:	e003      	b.n	800f8c0 <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800f8b8:	4b72      	ldr	r3, [pc, #456]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f8ba:	220c      	movs	r2, #12
 800f8bc:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                }
                PrepareRxDoneAbort( );
 800f8c0:	f7ff fca4 	bl	800f20c <PrepareRxDoneAbort>
                return;
 800f8c4:	e16c      	b.n	800fba0 <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f8c6:	4b6f      	ldr	r3, [pc, #444]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 800f8ce:	4a6d      	ldr	r2, [pc, #436]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f8d0:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800f8d4:	f882 341a 	strb.w	r3, [r2, #1050]	@ 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 800f8d8:	4b6a      	ldr	r3, [pc, #424]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f8da:	2200      	movs	r2, #0
 800f8dc:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 800f8e0:	4b68      	ldr	r3, [pc, #416]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	4a66      	ldr	r2, [pc, #408]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f8ec:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	4a64      	ldr	r2, [pc, #400]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f8f4:	f8c2 3460 	str.w	r3, [r2, #1120]	@ 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f8f8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f8fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f900:	b2db      	uxtb	r3, r3
 800f902:	2b00      	cmp	r3, #0
 800f904:	bf14      	ite	ne
 800f906:	2301      	movne	r3, #1
 800f908:	2300      	moveq	r3, #0
 800f90a:	b2da      	uxtb	r2, r3
 800f90c:	4b5d      	ldr	r3, [pc, #372]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f90e:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f912:	4b5c      	ldr	r3, [pc, #368]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f914:	2200      	movs	r2, #0
 800f916:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f91a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f91e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f922:	b2db      	uxtb	r3, r3
 800f924:	2b00      	cmp	r3, #0
 800f926:	bf14      	ite	ne
 800f928:	2301      	movne	r3, #1
 800f92a:	2300      	moveq	r3, #0
 800f92c:	b2da      	uxtb	r2, r3
 800f92e:	4b55      	ldr	r3, [pc, #340]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f930:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f934:	4b53      	ldr	r3, [pc, #332]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f936:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d004      	beq.n	800f948 <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f93e:	4b51      	ldr	r3, [pc, #324]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f940:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f944:	2b01      	cmp	r3, #1
 800f946:	d102      	bne.n	800f94e <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800f948:	4b4f      	ldr	r3, [pc, #316]	@ (800fa88 <ProcessRadioRxDone+0x830>)
 800f94a:	2200      	movs	r2, #0
 800f94c:	629a      	str	r2, [r3, #40]	@ 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800f94e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800f952:	2b01      	cmp	r3, #1
 800f954:	d104      	bne.n	800f960 <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f956:	4b4b      	ldr	r3, [pc, #300]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f958:	2202      	movs	r2, #2
 800f95a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800f95e:	e01f      	b.n	800f9a0 <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800f960:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800f964:	f023 031f 	bic.w	r3, r3, #31
 800f968:	b2db      	uxtb	r3, r3
 800f96a:	2ba0      	cmp	r3, #160	@ 0xa0
 800f96c:	d110      	bne.n	800f990 <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800f96e:	4b46      	ldr	r3, [pc, #280]	@ (800fa88 <ProcessRadioRxDone+0x830>)
 800f970:	2201      	movs	r2, #1
 800f972:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f976:	4b44      	ldr	r3, [pc, #272]	@ (800fa88 <ProcessRadioRxDone+0x830>)
 800f978:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d102      	bne.n	800f986 <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800f980:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f982:	4a41      	ldr	r2, [pc, #260]	@ (800fa88 <ProcessRadioRxDone+0x830>)
 800f984:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f986:	4b3f      	ldr	r3, [pc, #252]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f988:	2201      	movs	r2, #1
 800f98a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800f98e:	e007      	b.n	800f9a0 <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800f990:	4b3d      	ldr	r3, [pc, #244]	@ (800fa88 <ProcessRadioRxDone+0x830>)
 800f992:	2200      	movs	r2, #0
 800f994:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f998:	4b3a      	ldr	r3, [pc, #232]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f99a:	2200      	movs	r2, #0
 800f99c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800f9a0:	4b39      	ldr	r3, [pc, #228]	@ (800fa88 <ProcessRadioRxDone+0x830>)
 800f9a2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d106      	bne.n	800f9b8 <ProcessRadioRxDone+0x760>
 800f9aa:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f9ae:	f003 0310 	and.w	r3, r3, #16
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d008      	beq.n	800f9ca <ProcessRadioRxDone+0x772>
 800f9b8:	4b33      	ldr	r3, [pc, #204]	@ (800fa88 <ProcessRadioRxDone+0x830>)
 800f9ba:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d103      	bne.n	800f9ca <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800f9c2:	4b30      	ldr	r3, [pc, #192]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f9c4:	2201      	movs	r2, #1
 800f9c6:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800f9ca:	4b2e      	ldr	r3, [pc, #184]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f9cc:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800f9d0:	4a2c      	ldr	r2, [pc, #176]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800f9d2:	f892 2434 	ldrb.w	r2, [r2, #1076]	@ 0x434
 800f9d6:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f001 ff02 	bl	80117e4 <RemoveMacCommands>

            switch( fType )
 800f9e0:	7bbb      	ldrb	r3, [r7, #14]
 800f9e2:	2b03      	cmp	r3, #3
 800f9e4:	d878      	bhi.n	800fad8 <ProcessRadioRxDone+0x880>
 800f9e6:	a201      	add	r2, pc, #4	@ (adr r2, 800f9ec <ProcessRadioRxDone+0x794>)
 800f9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9ec:	0800f9fd 	.word	0x0800f9fd
 800f9f0:	0800fa4d 	.word	0x0800fa4d
 800f9f4:	0800fa8d 	.word	0x0800fa8d
 800f9f8:	0800fab3 	.word	0x0800fab3
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f9fc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800fa00:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fa04:	b2db      	uxtb	r3, r3
 800fa06:	461c      	mov	r4, r3
 800fa08:	4b1e      	ldr	r3, [pc, #120]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800fa0a:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800fa0e:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800fa12:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800fa16:	f102 0010 	add.w	r0, r2, #16
 800fa1a:	9300      	str	r3, [sp, #0]
 800fa1c:	460b      	mov	r3, r1
 800fa1e:	4622      	mov	r2, r4
 800fa20:	2100      	movs	r1, #0
 800fa22:	f000 fef7 	bl	8010814 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fa26:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800fa2a:	4b16      	ldr	r3, [pc, #88]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800fa2c:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fa30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fa32:	4a14      	ldr	r2, [pc, #80]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800fa34:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fa38:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800fa3c:	4b11      	ldr	r3, [pc, #68]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800fa3e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                    MacCtx.McpsIndication.RxData = true;
 800fa42:	4b10      	ldr	r3, [pc, #64]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800fa44:	2201      	movs	r2, #1
 800fa46:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    break;
 800fa4a:	e04c      	b.n	800fae6 <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800fa4c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800fa50:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fa54:	b2db      	uxtb	r3, r3
 800fa56:	461c      	mov	r4, r3
 800fa58:	4b0a      	ldr	r3, [pc, #40]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800fa5a:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800fa5e:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800fa62:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800fa66:	f102 0010 	add.w	r0, r2, #16
 800fa6a:	9300      	str	r3, [sp, #0]
 800fa6c:	460b      	mov	r3, r1
 800fa6e:	4622      	mov	r2, r4
 800fa70:	2100      	movs	r1, #0
 800fa72:	f000 fecf 	bl	8010814 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fa76:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800fa7a:	4b02      	ldr	r3, [pc, #8]	@ (800fa84 <ProcessRadioRxDone+0x82c>)
 800fa7c:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    break;
 800fa80:	e031      	b.n	800fae6 <ProcessRadioRxDone+0x88e>
 800fa82:	bf00      	nop
 800fa84:	20000704 	.word	0x20000704
 800fa88:	20000c0c 	.word	0x20000c0c
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800fa8c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800fa8e:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800fa92:	4b45      	ldr	r3, [pc, #276]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800fa94:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800fa98:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800fa9c:	9300      	str	r3, [sp, #0]
 800fa9e:	460b      	mov	r3, r1
 800faa0:	2100      	movs	r1, #0
 800faa2:	f000 feb7 	bl	8010814 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800faa6:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800faaa:	4b3f      	ldr	r3, [pc, #252]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800faac:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    break;
 800fab0:	e019      	b.n	800fae6 <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fab2:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800fab6:	4b3c      	ldr	r3, [pc, #240]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800fab8:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fabc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fabe:	4a3a      	ldr	r2, [pc, #232]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800fac0:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fac4:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800fac8:	4b37      	ldr	r3, [pc, #220]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800faca:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                    MacCtx.McpsIndication.RxData = true;
 800face:	4b36      	ldr	r3, [pc, #216]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800fad0:	2201      	movs	r2, #1
 800fad2:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    break;
 800fad6:	e006      	b.n	800fae6 <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fad8:	4b33      	ldr	r3, [pc, #204]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800fada:	2201      	movs	r2, #1
 800fadc:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                    PrepareRxDoneAbort( );
 800fae0:	f7ff fb94 	bl	800f20c <PrepareRxDoneAbort>
                    break;
 800fae4:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fae6:	4a30      	ldr	r2, [pc, #192]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800fae8:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800faec:	f043 0302 	orr.w	r3, r3, #2
 800faf0:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

            break;
 800faf4:	e035      	b.n	800fb62 <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800faf6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800fafa:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800fafe:	18d1      	adds	r1, r2, r3
 800fb00:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800fb0a:	1ad3      	subs	r3, r2, r3
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	461a      	mov	r2, r3
 800fb10:	4826      	ldr	r0, [pc, #152]	@ (800fbac <ProcessRadioRxDone+0x954>)
 800fb12:	f008 fcf4 	bl	80184fe <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800fb16:	4b24      	ldr	r3, [pc, #144]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800fb18:	2203      	movs	r2, #3
 800fb1a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fb1e:	4b22      	ldr	r3, [pc, #136]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800fb20:	2200      	movs	r2, #0
 800fb22:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800fb26:	4b20      	ldr	r3, [pc, #128]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800fb28:	4a20      	ldr	r2, [pc, #128]	@ (800fbac <ProcessRadioRxDone+0x954>)
 800fb2a:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800fb2e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800fb32:	b2da      	uxtb	r2, r3
 800fb34:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800fb38:	1ad3      	subs	r3, r2, r3
 800fb3a:	b2da      	uxtb	r2, r3
 800fb3c:	4b1a      	ldr	r3, [pc, #104]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800fb3e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fb42:	4a19      	ldr	r2, [pc, #100]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800fb44:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800fb48:	f043 0302 	orr.w	r3, r3, #2
 800fb4c:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            break;
 800fb50:	e007      	b.n	800fb62 <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fb52:	4b15      	ldr	r3, [pc, #84]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800fb54:	2201      	movs	r2, #1
 800fb56:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            PrepareRxDoneAbort( );
 800fb5a:	f7ff fb57 	bl	800f20c <PrepareRxDoneAbort>
            break;
 800fb5e:	e000      	b.n	800fb62 <ProcessRadioRxDone+0x90a>
            break;
 800fb60:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800fb62:	4b11      	ldr	r3, [pc, #68]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800fb64:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d008      	beq.n	800fb7e <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800fb6c:	4b0e      	ldr	r3, [pc, #56]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800fb6e:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d00b      	beq.n	800fb8e <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 800fb76:	2000      	movs	r0, #0
 800fb78:	f000 fcaa 	bl	80104d0 <OnAckTimeoutTimerEvent>
 800fb7c:	e007      	b.n	800fb8e <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800fb7e:	4b0c      	ldr	r3, [pc, #48]	@ (800fbb0 <ProcessRadioRxDone+0x958>)
 800fb80:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fb84:	2b02      	cmp	r3, #2
 800fb86:	d102      	bne.n	800fb8e <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 800fb88:	2000      	movs	r0, #0
 800fb8a:	f000 fca1 	bl	80104d0 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fb8e:	4a06      	ldr	r2, [pc, #24]	@ (800fba8 <ProcessRadioRxDone+0x950>)
 800fb90:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800fb94:	f043 0310 	orr.w	r3, r3, #16
 800fb98:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800fb9c:	f7ff fa6c 	bl	800f078 <UpdateRxSlotIdleState>
}
 800fba0:	3798      	adds	r7, #152	@ 0x98
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bdb0      	pop	{r4, r5, r7, pc}
 800fba6:	bf00      	nop
 800fba8:	20000704 	.word	0x20000704
 800fbac:	2000093c 	.word	0x2000093c
 800fbb0:	20000c0c 	.word	0x20000c0c

0800fbb4 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fbb8:	4b11      	ldr	r3, [pc, #68]	@ (800fc00 <ProcessRadioTxTimeout+0x4c>)
 800fbba:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fbbe:	2b02      	cmp	r3, #2
 800fbc0:	d002      	beq.n	800fbc8 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800fbc2:	4b10      	ldr	r3, [pc, #64]	@ (800fc04 <ProcessRadioTxTimeout+0x50>)
 800fbc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbc6:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800fbc8:	f7ff fa56 	bl	800f078 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800fbcc:	4b0e      	ldr	r3, [pc, #56]	@ (800fc08 <ProcessRadioTxTimeout+0x54>)
 800fbce:	2202      	movs	r2, #2
 800fbd0:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800fbd4:	2002      	movs	r0, #2
 800fbd6:	f004 fd89 	bl	80146ec <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800fbda:	4b0b      	ldr	r3, [pc, #44]	@ (800fc08 <ProcessRadioTxTimeout+0x54>)
 800fbdc:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d003      	beq.n	800fbec <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 800fbe4:	4b08      	ldr	r3, [pc, #32]	@ (800fc08 <ProcessRadioTxTimeout+0x54>)
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fbec:	4a06      	ldr	r2, [pc, #24]	@ (800fc08 <ProcessRadioTxTimeout+0x54>)
 800fbee:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800fbf2:	f043 0310 	orr.w	r3, r3, #16
 800fbf6:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
}
 800fbfa:	bf00      	nop
 800fbfc:	bd80      	pop	{r7, pc}
 800fbfe:	bf00      	nop
 800fc00:	20000c0c 	.word	0x20000c0c
 800fc04:	0801df78 	.word	0x0801df78
 800fc08:	20000704 	.word	0x20000704

0800fc0c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b084      	sub	sp, #16
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	4603      	mov	r3, r0
 800fc14:	460a      	mov	r2, r1
 800fc16:	71fb      	strb	r3, [r7, #7]
 800fc18:	4613      	mov	r3, r2
 800fc1a:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fc20:	4b40      	ldr	r3, [pc, #256]	@ (800fd24 <HandleRadioRxErrorTimeout+0x118>)
 800fc22:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fc26:	2b02      	cmp	r3, #2
 800fc28:	d002      	beq.n	800fc30 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800fc2a:	4b3f      	ldr	r3, [pc, #252]	@ (800fd28 <HandleRadioRxErrorTimeout+0x11c>)
 800fc2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc2e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fc30:	f004 f8a1 	bl	8013d76 <LoRaMacClassBIsBeaconExpected>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d007      	beq.n	800fc4a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800fc3a:	2002      	movs	r0, #2
 800fc3c:	f004 f84f 	bl	8013cde <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800fc40:	2000      	movs	r0, #0
 800fc42:	f004 f871 	bl	8013d28 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800fc46:	2301      	movs	r3, #1
 800fc48:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fc4a:	4b36      	ldr	r3, [pc, #216]	@ (800fd24 <HandleRadioRxErrorTimeout+0x118>)
 800fc4c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d119      	bne.n	800fc88 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fc54:	f004 f896 	bl	8013d84 <LoRaMacClassBIsPingExpected>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d007      	beq.n	800fc6e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fc5e:	2000      	movs	r0, #0
 800fc60:	f004 f847 	bl	8013cf2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fc64:	2000      	movs	r0, #0
 800fc66:	f004 f868 	bl	8013d3a <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fc6e:	f004 f890 	bl	8013d92 <LoRaMacClassBIsMulticastExpected>
 800fc72:	4603      	mov	r3, r0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d007      	beq.n	800fc88 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fc78:	2000      	movs	r0, #0
 800fc7a:	f004 f844 	bl	8013d06 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fc7e:	2000      	movs	r0, #0
 800fc80:	f004 f864 	bl	8013d4c <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800fc84:	2301      	movs	r3, #1
 800fc86:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800fc88:	7bfb      	ldrb	r3, [r7, #15]
 800fc8a:	f083 0301 	eor.w	r3, r3, #1
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d040      	beq.n	800fd16 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fc94:	4b25      	ldr	r3, [pc, #148]	@ (800fd2c <HandleRadioRxErrorTimeout+0x120>)
 800fc96:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d122      	bne.n	800fce4 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800fc9e:	4b23      	ldr	r3, [pc, #140]	@ (800fd2c <HandleRadioRxErrorTimeout+0x120>)
 800fca0:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d003      	beq.n	800fcb0 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800fca8:	4a20      	ldr	r2, [pc, #128]	@ (800fd2c <HandleRadioRxErrorTimeout+0x120>)
 800fcaa:	79fb      	ldrb	r3, [r7, #7]
 800fcac:	f882 3435 	strb.w	r3, [r2, #1077]	@ 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800fcb0:	79fb      	ldrb	r3, [r7, #7]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f004 fd1a 	bl	80146ec <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800fcb8:	4b1a      	ldr	r3, [pc, #104]	@ (800fd24 <HandleRadioRxErrorTimeout+0x118>)
 800fcba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f00c fee1 	bl	801ca84 <UTIL_TIMER_GetElapsedTime>
 800fcc2:	4602      	mov	r2, r0
 800fcc4:	4b19      	ldr	r3, [pc, #100]	@ (800fd2c <HandleRadioRxErrorTimeout+0x120>)
 800fcc6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d323      	bcc.n	800fd16 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800fcce:	4818      	ldr	r0, [pc, #96]	@ (800fd30 <HandleRadioRxErrorTimeout+0x124>)
 800fcd0:	f00c fdac 	bl	801c82c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800fcd4:	4a15      	ldr	r2, [pc, #84]	@ (800fd2c <HandleRadioRxErrorTimeout+0x120>)
 800fcd6:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800fcda:	f043 0310 	orr.w	r3, r3, #16
 800fcde:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 800fce2:	e018      	b.n	800fd16 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800fce4:	4b11      	ldr	r3, [pc, #68]	@ (800fd2c <HandleRadioRxErrorTimeout+0x120>)
 800fce6:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d003      	beq.n	800fcf6 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800fcee:	4a0f      	ldr	r2, [pc, #60]	@ (800fd2c <HandleRadioRxErrorTimeout+0x120>)
 800fcf0:	79bb      	ldrb	r3, [r7, #6]
 800fcf2:	f882 3435 	strb.w	r3, [r2, #1077]	@ 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800fcf6:	79bb      	ldrb	r3, [r7, #6]
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f004 fcf7 	bl	80146ec <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fcfe:	4b09      	ldr	r3, [pc, #36]	@ (800fd24 <HandleRadioRxErrorTimeout+0x118>)
 800fd00:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fd04:	2b02      	cmp	r3, #2
 800fd06:	d006      	beq.n	800fd16 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800fd08:	4a08      	ldr	r2, [pc, #32]	@ (800fd2c <HandleRadioRxErrorTimeout+0x120>)
 800fd0a:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800fd0e:	f043 0310 	orr.w	r3, r3, #16
 800fd12:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800fd16:	f7ff f9af 	bl	800f078 <UpdateRxSlotIdleState>
}
 800fd1a:	bf00      	nop
 800fd1c:	3710      	adds	r7, #16
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}
 800fd22:	bf00      	nop
 800fd24:	20000c0c 	.word	0x20000c0c
 800fd28:	0801df78 	.word	0x0801df78
 800fd2c:	20000704 	.word	0x20000704
 800fd30:	20000a9c 	.word	0x20000a9c

0800fd34 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800fd38:	2106      	movs	r1, #6
 800fd3a:	2005      	movs	r0, #5
 800fd3c:	f7ff ff66 	bl	800fc0c <HandleRadioRxErrorTimeout>
}
 800fd40:	bf00      	nop
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800fd48:	2104      	movs	r1, #4
 800fd4a:	2003      	movs	r0, #3
 800fd4c:	f7ff ff5e 	bl	800fc0c <HandleRadioRxErrorTimeout>
}
 800fd50:	bf00      	nop
 800fd52:	bd80      	pop	{r7, pc}

0800fd54 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b084      	sub	sp, #16
 800fd58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd5a:	f3ef 8310 	mrs	r3, PRIMASK
 800fd5e:	607b      	str	r3, [r7, #4]
  return(result);
 800fd60:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800fd62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd64:	b672      	cpsid	i
}
 800fd66:	bf00      	nop
    events = LoRaMacRadioEvents;
 800fd68:	4b1d      	ldr	r3, [pc, #116]	@ (800fde0 <LoRaMacHandleIrqEvents+0x8c>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800fd6e:	4b1c      	ldr	r3, [pc, #112]	@ (800fde0 <LoRaMacHandleIrqEvents+0x8c>)
 800fd70:	2200      	movs	r2, #0
 800fd72:	601a      	str	r2, [r3, #0]
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	f383 8810 	msr	PRIMASK, r3
}
 800fd7e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d027      	beq.n	800fdd6 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800fd86:	783b      	ldrb	r3, [r7, #0]
 800fd88:	f003 0310 	and.w	r3, r3, #16
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d001      	beq.n	800fd96 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800fd92:	f7ff f989 	bl	800f0a8 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800fd96:	783b      	ldrb	r3, [r7, #0]
 800fd98:	f003 0308 	and.w	r3, r3, #8
 800fd9c:	b2db      	uxtb	r3, r3
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d001      	beq.n	800fda6 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800fda2:	f7ff fa59 	bl	800f258 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800fda6:	783b      	ldrb	r3, [r7, #0]
 800fda8:	f003 0304 	and.w	r3, r3, #4
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d001      	beq.n	800fdb6 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800fdb2:	f7ff feff 	bl	800fbb4 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800fdb6:	783b      	ldrb	r3, [r7, #0]
 800fdb8:	f003 0302 	and.w	r3, r3, #2
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d001      	beq.n	800fdc6 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800fdc2:	f7ff ffb7 	bl	800fd34 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800fdc6:	783b      	ldrb	r3, [r7, #0]
 800fdc8:	f003 0301 	and.w	r3, r3, #1
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d001      	beq.n	800fdd6 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800fdd2:	f7ff ffb7 	bl	800fd44 <ProcessRadioRxTimeout>
        }
    }
}
 800fdd6:	bf00      	nop
 800fdd8:	3710      	adds	r7, #16
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
 800fdde:	bf00      	nop
 800fde0:	20001afc 	.word	0x20001afc

0800fde4 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800fde4:	b480      	push	{r7}
 800fde6:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800fde8:	4b0b      	ldr	r3, [pc, #44]	@ (800fe18 <LoRaMacIsBusy+0x34>)
 800fdea:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fdee:	2b01      	cmp	r3, #1
 800fdf0:	d101      	bne.n	800fdf6 <LoRaMacIsBusy+0x12>
    {
        return false;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	e00c      	b.n	800fe10 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800fdf6:	4b08      	ldr	r3, [pc, #32]	@ (800fe18 <LoRaMacIsBusy+0x34>)
 800fdf8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d106      	bne.n	800fe0e <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800fe00:	4b05      	ldr	r3, [pc, #20]	@ (800fe18 <LoRaMacIsBusy+0x34>)
 800fe02:	f893 3482 	ldrb.w	r3, [r3, #1154]	@ 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800fe06:	2b01      	cmp	r3, #1
 800fe08:	d101      	bne.n	800fe0e <LoRaMacIsBusy+0x2a>
    {
        return false;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	e000      	b.n	800fe10 <LoRaMacIsBusy+0x2c>
    }
    return true;
 800fe0e:	2301      	movs	r3, #1
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bc80      	pop	{r7}
 800fe16:	4770      	bx	lr
 800fe18:	20000704 	.word	0x20000704

0800fe1c <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800fe20:	4b05      	ldr	r3, [pc, #20]	@ (800fe38 <LoRaMacIsStopped+0x1c>)
 800fe22:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fe26:	2b01      	cmp	r3, #1
 800fe28:	d101      	bne.n	800fe2e <LoRaMacIsStopped+0x12>
    {
        return true;
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	e000      	b.n	800fe30 <LoRaMacIsStopped+0x14>
    }
    return false;
 800fe2e:	2300      	movs	r3, #0
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bc80      	pop	{r7}
 800fe36:	4770      	bx	lr
 800fe38:	20000704 	.word	0x20000704

0800fe3c <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800fe3c:	b480      	push	{r7}
 800fe3e:	b083      	sub	sp, #12
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	4603      	mov	r3, r0
 800fe44:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800fe46:	4a04      	ldr	r2, [pc, #16]	@ (800fe58 <LoRaMacEnableRequests+0x1c>)
 800fe48:	79fb      	ldrb	r3, [r7, #7]
 800fe4a:	f882 3482 	strb.w	r3, [r2, #1154]	@ 0x482
}
 800fe4e:	bf00      	nop
 800fe50:	370c      	adds	r7, #12
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bc80      	pop	{r7}
 800fe56:	4770      	bx	lr
 800fe58:	20000704 	.word	0x20000704

0800fe5c <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800fe62:	4b2c      	ldr	r3, [pc, #176]	@ (800ff14 <LoRaMacHandleRequestEvents+0xb8>)
 800fe64:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800fe68:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800fe6a:	4b2a      	ldr	r3, [pc, #168]	@ (800ff14 <LoRaMacHandleRequestEvents+0xb8>)
 800fe6c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d14a      	bne.n	800ff0a <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800fe74:	4b27      	ldr	r3, [pc, #156]	@ (800ff14 <LoRaMacHandleRequestEvents+0xb8>)
 800fe76:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800fe7a:	f003 0301 	and.w	r3, r3, #1
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d006      	beq.n	800fe92 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800fe84:	4a23      	ldr	r2, [pc, #140]	@ (800ff14 <LoRaMacHandleRequestEvents+0xb8>)
 800fe86:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800fe8a:	f36f 0300 	bfc	r3, #0, #1
 800fe8e:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800fe92:	4b20      	ldr	r3, [pc, #128]	@ (800ff14 <LoRaMacHandleRequestEvents+0xb8>)
 800fe94:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800fe98:	f003 0304 	and.w	r3, r3, #4
 800fe9c:	b2db      	uxtb	r3, r3
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d006      	beq.n	800feb0 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800fea2:	4a1c      	ldr	r2, [pc, #112]	@ (800ff14 <LoRaMacHandleRequestEvents+0xb8>)
 800fea4:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800fea8:	f36f 0382 	bfc	r3, #2, #1
 800feac:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800feb0:	2001      	movs	r0, #1
 800feb2:	f7ff ffc3 	bl	800fe3c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800feb6:	793b      	ldrb	r3, [r7, #4]
 800feb8:	f003 0301 	and.w	r3, r3, #1
 800febc:	b2db      	uxtb	r3, r3
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d005      	beq.n	800fece <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800fec2:	4b14      	ldr	r3, [pc, #80]	@ (800ff14 <LoRaMacHandleRequestEvents+0xb8>)
 800fec4:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4813      	ldr	r0, [pc, #76]	@ (800ff18 <LoRaMacHandleRequestEvents+0xbc>)
 800fecc:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800fece:	793b      	ldrb	r3, [r7, #4]
 800fed0:	f003 0304 	and.w	r3, r3, #4
 800fed4:	b2db      	uxtb	r3, r3
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d00e      	beq.n	800fef8 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800feda:	4810      	ldr	r0, [pc, #64]	@ (800ff1c <LoRaMacHandleRequestEvents+0xc0>)
 800fedc:	f004 fc54 	bl	8014788 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800fee0:	f004 fca4 	bl	801482c <LoRaMacConfirmQueueGetCnt>
 800fee4:	4603      	mov	r3, r0
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d006      	beq.n	800fef8 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800feea:	4a0a      	ldr	r2, [pc, #40]	@ (800ff14 <LoRaMacHandleRequestEvents+0xb8>)
 800feec:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800fef0:	f043 0304 	orr.w	r3, r3, #4
 800fef4:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800fef8:	f003 ff69 	bl	8013dce <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800fefc:	4a05      	ldr	r2, [pc, #20]	@ (800ff14 <LoRaMacHandleRequestEvents+0xb8>)
 800fefe:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ff02:	f36f 1304 	bfc	r3, #4, #1
 800ff06:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 800ff0a:	bf00      	nop
 800ff0c:	3708      	adds	r7, #8
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}
 800ff12:	bf00      	nop
 800ff14:	20000704 	.word	0x20000704
 800ff18:	20000b38 	.word	0x20000b38
 800ff1c:	20000b4c 	.word	0x20000b4c

0800ff20 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800ff24:	4b16      	ldr	r3, [pc, #88]	@ (800ff80 <LoRaMacHandleIndicationEvents+0x60>)
 800ff26:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800ff2a:	f003 0308 	and.w	r3, r3, #8
 800ff2e:	b2db      	uxtb	r3, r3
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d00d      	beq.n	800ff50 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800ff34:	4a12      	ldr	r2, [pc, #72]	@ (800ff80 <LoRaMacHandleIndicationEvents+0x60>)
 800ff36:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ff3a:	f36f 03c3 	bfc	r3, #3, #1
 800ff3e:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800ff42:	4b0f      	ldr	r3, [pc, #60]	@ (800ff80 <LoRaMacHandleIndicationEvents+0x60>)
 800ff44:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ff48:	68db      	ldr	r3, [r3, #12]
 800ff4a:	490e      	ldr	r1, [pc, #56]	@ (800ff84 <LoRaMacHandleIndicationEvents+0x64>)
 800ff4c:	480e      	ldr	r0, [pc, #56]	@ (800ff88 <LoRaMacHandleIndicationEvents+0x68>)
 800ff4e:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ff50:	4b0b      	ldr	r3, [pc, #44]	@ (800ff80 <LoRaMacHandleIndicationEvents+0x60>)
 800ff52:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800ff56:	f003 0302 	and.w	r3, r3, #2
 800ff5a:	b2db      	uxtb	r3, r3
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d00d      	beq.n	800ff7c <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800ff60:	4a07      	ldr	r2, [pc, #28]	@ (800ff80 <LoRaMacHandleIndicationEvents+0x60>)
 800ff62:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ff66:	f36f 0341 	bfc	r3, #1, #1
 800ff6a:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800ff6e:	4b04      	ldr	r3, [pc, #16]	@ (800ff80 <LoRaMacHandleIndicationEvents+0x60>)
 800ff70:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	4903      	ldr	r1, [pc, #12]	@ (800ff84 <LoRaMacHandleIndicationEvents+0x64>)
 800ff78:	4804      	ldr	r0, [pc, #16]	@ (800ff8c <LoRaMacHandleIndicationEvents+0x6c>)
 800ff7a:	4798      	blx	r3
    }
}
 800ff7c:	bf00      	nop
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	20000704 	.word	0x20000704
 800ff84:	20000b80 	.word	0x20000b80
 800ff88:	20000b60 	.word	0x20000b60
 800ff8c:	20000b1c 	.word	0x20000b1c

0800ff90 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ff96:	4b32      	ldr	r3, [pc, #200]	@ (8010060 <LoRaMacHandleMcpsRequest+0xd0>)
 800ff98:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800ff9c:	f003 0301 	and.w	r3, r3, #1
 800ffa0:	b2db      	uxtb	r3, r3
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d058      	beq.n	8010058 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ffae:	4b2c      	ldr	r3, [pc, #176]	@ (8010060 <LoRaMacHandleMcpsRequest+0xd0>)
 800ffb0:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d004      	beq.n	800ffc2 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800ffb8:	4b29      	ldr	r3, [pc, #164]	@ (8010060 <LoRaMacHandleMcpsRequest+0xd0>)
 800ffba:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ffbe:	2b03      	cmp	r3, #3
 800ffc0:	d104      	bne.n	800ffcc <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800ffc2:	f002 f8df 	bl	8012184 <CheckRetransUnconfirmedUplink>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	71fb      	strb	r3, [r7, #7]
 800ffca:	e020      	b.n	801000e <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800ffcc:	4b24      	ldr	r3, [pc, #144]	@ (8010060 <LoRaMacHandleMcpsRequest+0xd0>)
 800ffce:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d11b      	bne.n	801000e <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 800ffd6:	4b22      	ldr	r3, [pc, #136]	@ (8010060 <LoRaMacHandleMcpsRequest+0xd0>)
 800ffd8:	f893 340f 	ldrb.w	r3, [r3, #1039]	@ 0x40f
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d014      	beq.n	801000a <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800ffe0:	f002 f8fc 	bl	80121dc <CheckRetransConfirmedUplink>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ffe8:	4b1e      	ldr	r3, [pc, #120]	@ (8010064 <LoRaMacHandleMcpsRequest+0xd4>)
 800ffea:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d10d      	bne.n	801000e <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800fff2:	79fb      	ldrb	r3, [r7, #7]
 800fff4:	f083 0301 	eor.w	r3, r3, #1
 800fff8:	b2db      	uxtb	r3, r3
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d002      	beq.n	8010004 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800fffe:	f002 f97f 	bl	8012300 <AckTimeoutRetriesProcess>
 8010002:	e004      	b.n	801000e <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8010004:	f002 f9ba 	bl	801237c <AckTimeoutRetriesFinalize>
 8010008:	e001      	b.n	801000e <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 801000a:	2301      	movs	r3, #1
 801000c:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 801000e:	79fb      	ldrb	r3, [r7, #7]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d00d      	beq.n	8010030 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8010014:	4814      	ldr	r0, [pc, #80]	@ (8010068 <LoRaMacHandleMcpsRequest+0xd8>)
 8010016:	f00c fc09 	bl	801c82c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801001a:	4b11      	ldr	r3, [pc, #68]	@ (8010060 <LoRaMacHandleMcpsRequest+0xd0>)
 801001c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010020:	f023 0320 	bic.w	r3, r3, #32
 8010024:	4a0e      	ldr	r2, [pc, #56]	@ (8010060 <LoRaMacHandleMcpsRequest+0xd0>)
 8010026:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 801002a:	f002 f8f9 	bl	8012220 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 801002e:	e013      	b.n	8010058 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 8010030:	79bb      	ldrb	r3, [r7, #6]
 8010032:	f083 0301 	eor.w	r3, r3, #1
 8010036:	b2db      	uxtb	r3, r3
 8010038:	2b00      	cmp	r3, #0
 801003a:	d00d      	beq.n	8010058 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 801003c:	4a08      	ldr	r2, [pc, #32]	@ (8010060 <LoRaMacHandleMcpsRequest+0xd0>)
 801003e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8010042:	f36f 1304 	bfc	r3, #4, #1
 8010046:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            MacCtx.AckTimeoutRetry = false;
 801004a:	4b05      	ldr	r3, [pc, #20]	@ (8010060 <LoRaMacHandleMcpsRequest+0xd0>)
 801004c:	2200      	movs	r2, #0
 801004e:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
            OnTxDelayedTimerEvent( NULL );
 8010052:	2000      	movs	r0, #0
 8010054:	f000 f992 	bl	801037c <OnTxDelayedTimerEvent>
}
 8010058:	bf00      	nop
 801005a:	3708      	adds	r7, #8
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}
 8010060:	20000704 	.word	0x20000704
 8010064:	20000c0c 	.word	0x20000c0c
 8010068:	20000a6c 	.word	0x20000a6c

0801006c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 801006c:	b580      	push	{r7, lr}
 801006e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010070:	4b1b      	ldr	r3, [pc, #108]	@ (80100e0 <LoRaMacHandleMlmeRequest+0x74>)
 8010072:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 8010076:	f003 0304 	and.w	r3, r3, #4
 801007a:	b2db      	uxtb	r3, r3
 801007c:	2b00      	cmp	r3, #0
 801007e:	d02c      	beq.n	80100da <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010080:	2001      	movs	r0, #1
 8010082:	f004 fb67 	bl	8014754 <LoRaMacConfirmQueueIsCmdActive>
 8010086:	4603      	mov	r3, r0
 8010088:	2b00      	cmp	r3, #0
 801008a:	d012      	beq.n	80100b2 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 801008c:	2001      	movs	r0, #1
 801008e:	f004 fb03 	bl	8014698 <LoRaMacConfirmQueueGetStatus>
 8010092:	4603      	mov	r3, r0
 8010094:	2b00      	cmp	r3, #0
 8010096:	d103      	bne.n	80100a0 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010098:	4b11      	ldr	r3, [pc, #68]	@ (80100e0 <LoRaMacHandleMlmeRequest+0x74>)
 801009a:	2200      	movs	r2, #0
 801009c:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80100a0:	4b0f      	ldr	r3, [pc, #60]	@ (80100e0 <LoRaMacHandleMlmeRequest+0x74>)
 80100a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80100a6:	f023 0302 	bic.w	r3, r3, #2
 80100aa:	4a0d      	ldr	r2, [pc, #52]	@ (80100e0 <LoRaMacHandleMlmeRequest+0x74>)
 80100ac:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 80100b0:	e013      	b.n	80100da <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80100b2:	2006      	movs	r0, #6
 80100b4:	f004 fb4e 	bl	8014754 <LoRaMacConfirmQueueIsCmdActive>
 80100b8:	4603      	mov	r3, r0
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d105      	bne.n	80100ca <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 80100be:	2007      	movs	r0, #7
 80100c0:	f004 fb48 	bl	8014754 <LoRaMacConfirmQueueIsCmdActive>
 80100c4:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d007      	beq.n	80100da <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80100ca:	4b05      	ldr	r3, [pc, #20]	@ (80100e0 <LoRaMacHandleMlmeRequest+0x74>)
 80100cc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80100d0:	f023 0302 	bic.w	r3, r3, #2
 80100d4:	4a02      	ldr	r2, [pc, #8]	@ (80100e0 <LoRaMacHandleMlmeRequest+0x74>)
 80100d6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 80100da:	bf00      	nop
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	20000704 	.word	0x20000704

080100e4 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80100e8:	200c      	movs	r0, #12
 80100ea:	f004 fb33 	bl	8014754 <LoRaMacConfirmQueueIsCmdActive>
 80100ee:	4603      	mov	r3, r0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d019      	beq.n	8010128 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80100f4:	4b0e      	ldr	r3, [pc, #56]	@ (8010130 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80100f6:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80100fa:	f003 0301 	and.w	r3, r3, #1
 80100fe:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010100:	2b00      	cmp	r3, #0
 8010102:	d111      	bne.n	8010128 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010104:	4b0a      	ldr	r3, [pc, #40]	@ (8010130 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010106:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 801010a:	f003 0304 	and.w	r3, r3, #4
 801010e:	b2db      	uxtb	r3, r3
 8010110:	2b00      	cmp	r3, #0
 8010112:	d009      	beq.n	8010128 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010114:	4b06      	ldr	r3, [pc, #24]	@ (8010130 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010116:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801011a:	f023 0302 	bic.w	r3, r3, #2
 801011e:	4a04      	ldr	r2, [pc, #16]	@ (8010130 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010120:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 8010124:	2301      	movs	r3, #1
 8010126:	e000      	b.n	801012a <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8010128:	2300      	movs	r3, #0
}
 801012a:	4618      	mov	r0, r3
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	20000704 	.word	0x20000704

08010134 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8010134:	b480      	push	{r7}
 8010136:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8010138:	4b0d      	ldr	r3, [pc, #52]	@ (8010170 <LoRaMacCheckForRxAbort+0x3c>)
 801013a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801013e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010142:	2b00      	cmp	r3, #0
 8010144:	d00f      	beq.n	8010166 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8010146:	4b0a      	ldr	r3, [pc, #40]	@ (8010170 <LoRaMacCheckForRxAbort+0x3c>)
 8010148:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801014c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010150:	4a07      	ldr	r2, [pc, #28]	@ (8010170 <LoRaMacCheckForRxAbort+0x3c>)
 8010152:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010156:	4b06      	ldr	r3, [pc, #24]	@ (8010170 <LoRaMacCheckForRxAbort+0x3c>)
 8010158:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801015c:	f023 0302 	bic.w	r3, r3, #2
 8010160:	4a03      	ldr	r2, [pc, #12]	@ (8010170 <LoRaMacCheckForRxAbort+0x3c>)
 8010162:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 8010166:	bf00      	nop
 8010168:	46bd      	mov	sp, r7
 801016a:	bc80      	pop	{r7}
 801016c:	4770      	bx	lr
 801016e:	bf00      	nop
 8010170:	20000704 	.word	0x20000704

08010174 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b084      	sub	sp, #16
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 801017c:	2300      	movs	r3, #0
 801017e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010180:	2300      	movs	r3, #0
 8010182:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8010184:	4b50      	ldr	r3, [pc, #320]	@ (80102c8 <LoRaMacHandleNvm+0x154>)
 8010186:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801018a:	2b00      	cmp	r3, #0
 801018c:	f040 8098 	bne.w	80102c0 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2124      	movs	r1, #36	@ 0x24
 8010194:	4618      	mov	r0, r3
 8010196:	f008 fa07 	bl	80185a8 <Crc32>
 801019a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101a0:	68ba      	ldr	r2, [r7, #8]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d006      	beq.n	80101b4 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	68ba      	ldr	r2, [r7, #8]
 80101aa:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80101ac:	89fb      	ldrh	r3, [r7, #14]
 80101ae:	f043 0301 	orr.w	r3, r3, #1
 80101b2:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	3328      	adds	r3, #40	@ 0x28
 80101b8:	211c      	movs	r1, #28
 80101ba:	4618      	mov	r0, r3
 80101bc:	f008 f9f4 	bl	80185a8 <Crc32>
 80101c0:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101c6:	68ba      	ldr	r2, [r7, #8]
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d006      	beq.n	80101da <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	68ba      	ldr	r2, [r7, #8]
 80101d0:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80101d2:	89fb      	ldrh	r3, [r7, #14]
 80101d4:	f043 0302 	orr.w	r3, r3, #2
 80101d8:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	3348      	adds	r3, #72	@ 0x48
 80101de:	21fc      	movs	r1, #252	@ 0xfc
 80101e0:	4618      	mov	r0, r3
 80101e2:	f008 f9e1 	bl	80185a8 <Crc32>
 80101e6:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80101ee:	68ba      	ldr	r2, [r7, #8]
 80101f0:	429a      	cmp	r2, r3
 80101f2:	d007      	beq.n	8010204 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	68ba      	ldr	r2, [r7, #8]
 80101f8:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80101fc:	89fb      	ldrh	r3, [r7, #14]
 80101fe:	f043 0304 	orr.w	r3, r3, #4
 8010202:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 801020a:	21d4      	movs	r1, #212	@ 0xd4
 801020c:	4618      	mov	r0, r3
 801020e:	f008 f9cb 	bl	80185a8 <Crc32>
 8010212:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 801021a:	68ba      	ldr	r2, [r7, #8]
 801021c:	429a      	cmp	r2, r3
 801021e:	d007      	beq.n	8010230 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	68ba      	ldr	r2, [r7, #8]
 8010224:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8010228:	89fb      	ldrh	r3, [r7, #14]
 801022a:	f043 0308 	orr.w	r3, r3, #8
 801022e:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8010236:	21a0      	movs	r1, #160	@ 0xa0
 8010238:	4618      	mov	r0, r3
 801023a:	f008 f9b5 	bl	80185a8 <Crc32>
 801023e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8010246:	68ba      	ldr	r2, [r7, #8]
 8010248:	429a      	cmp	r2, r3
 801024a:	d007      	beq.n	801025c <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	68ba      	ldr	r2, [r7, #8]
 8010250:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8010254:	89fb      	ldrh	r3, [r7, #14]
 8010256:	f043 0310 	orr.w	r3, r3, #16
 801025a:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8010262:	f44f 6193 	mov.w	r1, #1176	@ 0x498
 8010266:	4618      	mov	r0, r3
 8010268:	f008 f99e 	bl	80185a8 <Crc32>
 801026c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f8d3 375c 	ldr.w	r3, [r3, #1884]	@ 0x75c
 8010274:	68ba      	ldr	r2, [r7, #8]
 8010276:	429a      	cmp	r2, r3
 8010278:	d007      	beq.n	801028a <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	68ba      	ldr	r2, [r7, #8]
 801027e:	f8c3 275c 	str.w	r2, [r3, #1884]	@ 0x75c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8010282:	89fb      	ldrh	r3, [r7, #14]
 8010284:	f043 0320 	orr.w	r3, r3, #32
 8010288:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 8010290:	2114      	movs	r1, #20
 8010292:	4618      	mov	r0, r3
 8010294:	f008 f988 	bl	80185a8 <Crc32>
 8010298:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f8d3 3774 	ldr.w	r3, [r3, #1908]	@ 0x774
 80102a0:	68ba      	ldr	r2, [r7, #8]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d007      	beq.n	80102b6 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	68ba      	ldr	r2, [r7, #8]
 80102aa:	f8c3 2774 	str.w	r2, [r3, #1908]	@ 0x774
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80102ae:	89fb      	ldrh	r3, [r7, #14]
 80102b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80102b4:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 80102b6:	89fb      	ldrh	r3, [r7, #14]
 80102b8:	4618      	mov	r0, r3
 80102ba:	f002 f803 	bl	80122c4 <CallNvmDataChangeCallback>
 80102be:	e000      	b.n	80102c2 <LoRaMacHandleNvm+0x14e>
        return;
 80102c0:	bf00      	nop
}
 80102c2:	3710      	adds	r7, #16
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	20000704 	.word	0x20000704

080102cc <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b082      	sub	sp, #8
 80102d0:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 80102d2:	2300      	movs	r3, #0
 80102d4:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 80102d6:	f7ff fd3d 	bl	800fd54 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80102da:	f003 fddc 	bl	8013e96 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80102de:	4b25      	ldr	r3, [pc, #148]	@ (8010374 <LoRaMacProcess+0xa8>)
 80102e0:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80102e4:	f003 0310 	and.w	r3, r3, #16
 80102e8:	b2db      	uxtb	r3, r3
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d023      	beq.n	8010336 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 80102ee:	2000      	movs	r0, #0
 80102f0:	f7ff fda4 	bl	800fe3c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 80102f4:	f7ff ff1e 	bl	8010134 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 80102f8:	f002 f874 	bl	80123e4 <IsRequestPending>
 80102fc:	4603      	mov	r3, r0
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d006      	beq.n	8010310 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8010302:	f7ff feef 	bl	80100e4 <LoRaMacCheckForBeaconAcquisition>
 8010306:	4603      	mov	r3, r0
 8010308:	461a      	mov	r2, r3
 801030a:	79fb      	ldrb	r3, [r7, #7]
 801030c:	4313      	orrs	r3, r2
 801030e:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8010310:	79fb      	ldrb	r3, [r7, #7]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d103      	bne.n	801031e <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8010316:	f7ff fea9 	bl	801006c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 801031a:	f7ff fe39 	bl	800ff90 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 801031e:	f7ff fd9d 	bl	800fe5c <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010322:	2001      	movs	r0, #1
 8010324:	f7ff fd8a 	bl	800fe3c <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010328:	4a12      	ldr	r2, [pc, #72]	@ (8010374 <LoRaMacProcess+0xa8>)
 801032a:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 801032e:	f043 0320 	orr.w	r3, r3, #32
 8010332:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
    LoRaMacHandleIndicationEvents( );
 8010336:	f7ff fdf3 	bl	800ff20 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 801033a:	4b0e      	ldr	r3, [pc, #56]	@ (8010374 <LoRaMacProcess+0xa8>)
 801033c:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 8010340:	2b02      	cmp	r3, #2
 8010342:	d101      	bne.n	8010348 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8010344:	f001 fbc8 	bl	8011ad8 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8010348:	4b0a      	ldr	r3, [pc, #40]	@ (8010374 <LoRaMacProcess+0xa8>)
 801034a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 801034e:	f003 0320 	and.w	r3, r3, #32
 8010352:	b2db      	uxtb	r3, r3
 8010354:	2b00      	cmp	r3, #0
 8010356:	d009      	beq.n	801036c <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8010358:	4a06      	ldr	r2, [pc, #24]	@ (8010374 <LoRaMacProcess+0xa8>)
 801035a:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 801035e:	f36f 1345 	bfc	r3, #5, #1
 8010362:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        LoRaMacHandleNvm( &Nvm );
 8010366:	4804      	ldr	r0, [pc, #16]	@ (8010378 <LoRaMacProcess+0xac>)
 8010368:	f7ff ff04 	bl	8010174 <LoRaMacHandleNvm>
    }
}
 801036c:	bf00      	nop
 801036e:	3708      	adds	r7, #8
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}
 8010374:	20000704 	.word	0x20000704
 8010378:	20000c0c 	.word	0x20000c0c

0801037c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010384:	4817      	ldr	r0, [pc, #92]	@ (80103e4 <OnTxDelayedTimerEvent+0x68>)
 8010386:	f00c fa51 	bl	801c82c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801038a:	4b17      	ldr	r3, [pc, #92]	@ (80103e8 <OnTxDelayedTimerEvent+0x6c>)
 801038c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010390:	f023 0320 	bic.w	r3, r3, #32
 8010394:	4a14      	ldr	r2, [pc, #80]	@ (80103e8 <OnTxDelayedTimerEvent+0x6c>)
 8010396:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 801039a:	2001      	movs	r0, #1
 801039c:	f001 f8f4 	bl	8011588 <ScheduleTx>
 80103a0:	4603      	mov	r3, r0
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d018      	beq.n	80103d8 <OnTxDelayedTimerEvent+0x5c>
 80103a6:	2b0b      	cmp	r3, #11
 80103a8:	d016      	beq.n	80103d8 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80103aa:	4b10      	ldr	r3, [pc, #64]	@ (80103ec <OnTxDelayedTimerEvent+0x70>)
 80103ac:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80103b0:	b2da      	uxtb	r2, r3
 80103b2:	4b0d      	ldr	r3, [pc, #52]	@ (80103e8 <OnTxDelayedTimerEvent+0x6c>)
 80103b4:	f883 2436 	strb.w	r2, [r3, #1078]	@ 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80103b8:	4b0b      	ldr	r3, [pc, #44]	@ (80103e8 <OnTxDelayedTimerEvent+0x6c>)
 80103ba:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 80103be:	4b0a      	ldr	r3, [pc, #40]	@ (80103e8 <OnTxDelayedTimerEvent+0x6c>)
 80103c0:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80103c4:	4b08      	ldr	r3, [pc, #32]	@ (80103e8 <OnTxDelayedTimerEvent+0x6c>)
 80103c6:	2209      	movs	r2, #9
 80103c8:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80103cc:	2009      	movs	r0, #9
 80103ce:	f004 f98d 	bl	80146ec <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80103d2:	f001 ff25 	bl	8012220 <StopRetransmission>
            break;
 80103d6:	e000      	b.n	80103da <OnTxDelayedTimerEvent+0x5e>
            break;
 80103d8:	bf00      	nop
        }
    }
}
 80103da:	bf00      	nop
 80103dc:	3708      	adds	r7, #8
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
 80103e2:	bf00      	nop
 80103e4:	20000a6c 	.word	0x20000a6c
 80103e8:	20000704 	.word	0x20000704
 80103ec:	20000c0c 	.word	0x20000c0c

080103f0 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80103f8:	4b14      	ldr	r3, [pc, #80]	@ (801044c <OnRxWindow1TimerEvent+0x5c>)
 80103fa:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 80103fe:	4b13      	ldr	r3, [pc, #76]	@ (801044c <OnRxWindow1TimerEvent+0x5c>)
 8010400:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8010404:	4b12      	ldr	r3, [pc, #72]	@ (8010450 <OnRxWindow1TimerEvent+0x60>)
 8010406:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801040a:	b25a      	sxtb	r2, r3
 801040c:	4b0f      	ldr	r3, [pc, #60]	@ (801044c <OnRxWindow1TimerEvent+0x5c>)
 801040e:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010412:	4b0f      	ldr	r3, [pc, #60]	@ (8010450 <OnRxWindow1TimerEvent+0x60>)
 8010414:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8010418:	4b0c      	ldr	r3, [pc, #48]	@ (801044c <OnRxWindow1TimerEvent+0x5c>)
 801041a:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801041e:	4b0c      	ldr	r3, [pc, #48]	@ (8010450 <OnRxWindow1TimerEvent+0x60>)
 8010420:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010424:	4b09      	ldr	r3, [pc, #36]	@ (801044c <OnRxWindow1TimerEvent+0x5c>)
 8010426:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 801042a:	4b08      	ldr	r3, [pc, #32]	@ (801044c <OnRxWindow1TimerEvent+0x5c>)
 801042c:	2200      	movs	r2, #0
 801042e:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010432:	4b06      	ldr	r3, [pc, #24]	@ (801044c <OnRxWindow1TimerEvent+0x5c>)
 8010434:	2200      	movs	r2, #0
 8010436:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 801043a:	4906      	ldr	r1, [pc, #24]	@ (8010454 <OnRxWindow1TimerEvent+0x64>)
 801043c:	4806      	ldr	r0, [pc, #24]	@ (8010458 <OnRxWindow1TimerEvent+0x68>)
 801043e:	f001 fb17 	bl	8011a70 <RxWindowSetup>
}
 8010442:	bf00      	nop
 8010444:	3708      	adds	r7, #8
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}
 801044a:	bf00      	nop
 801044c:	20000704 	.word	0x20000704
 8010450:	20000c0c 	.word	0x20000c0c
 8010454:	20000abc 	.word	0x20000abc
 8010458:	20000a84 	.word	0x20000a84

0801045c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b082      	sub	sp, #8
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010464:	4b16      	ldr	r3, [pc, #88]	@ (80104c0 <OnRxWindow2TimerEvent+0x64>)
 8010466:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 801046a:	2b00      	cmp	r3, #0
 801046c:	d023      	beq.n	80104b6 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801046e:	4b14      	ldr	r3, [pc, #80]	@ (80104c0 <OnRxWindow2TimerEvent+0x64>)
 8010470:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 8010474:	4b12      	ldr	r3, [pc, #72]	@ (80104c0 <OnRxWindow2TimerEvent+0x64>)
 8010476:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801047a:	4b12      	ldr	r3, [pc, #72]	@ (80104c4 <OnRxWindow2TimerEvent+0x68>)
 801047c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801047e:	4a10      	ldr	r2, [pc, #64]	@ (80104c0 <OnRxWindow2TimerEvent+0x64>)
 8010480:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010484:	4b0f      	ldr	r3, [pc, #60]	@ (80104c4 <OnRxWindow2TimerEvent+0x68>)
 8010486:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 801048a:	4b0d      	ldr	r3, [pc, #52]	@ (80104c0 <OnRxWindow2TimerEvent+0x64>)
 801048c:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010490:	4b0c      	ldr	r3, [pc, #48]	@ (80104c4 <OnRxWindow2TimerEvent+0x68>)
 8010492:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010496:	4b0a      	ldr	r3, [pc, #40]	@ (80104c0 <OnRxWindow2TimerEvent+0x64>)
 8010498:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 801049c:	4b08      	ldr	r3, [pc, #32]	@ (80104c0 <OnRxWindow2TimerEvent+0x64>)
 801049e:	2200      	movs	r2, #0
 80104a0:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80104a4:	4b06      	ldr	r3, [pc, #24]	@ (80104c0 <OnRxWindow2TimerEvent+0x64>)
 80104a6:	2201      	movs	r2, #1
 80104a8:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80104ac:	4906      	ldr	r1, [pc, #24]	@ (80104c8 <OnRxWindow2TimerEvent+0x6c>)
 80104ae:	4807      	ldr	r0, [pc, #28]	@ (80104cc <OnRxWindow2TimerEvent+0x70>)
 80104b0:	f001 fade 	bl	8011a70 <RxWindowSetup>
 80104b4:	e000      	b.n	80104b8 <OnRxWindow2TimerEvent+0x5c>
        return;
 80104b6:	bf00      	nop
}
 80104b8:	3708      	adds	r7, #8
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
 80104be:	bf00      	nop
 80104c0:	20000704 	.word	0x20000704
 80104c4:	20000c0c 	.word	0x20000c0c
 80104c8:	20000ad0 	.word	0x20000ad0
 80104cc:	20000a9c 	.word	0x20000a9c

080104d0 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 80104d8:	480e      	ldr	r0, [pc, #56]	@ (8010514 <OnAckTimeoutTimerEvent+0x44>)
 80104da:	f00c f9a7 	bl	801c82c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 80104de:	4b0e      	ldr	r3, [pc, #56]	@ (8010518 <OnAckTimeoutTimerEvent+0x48>)
 80104e0:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d003      	beq.n	80104f0 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 80104e8:	4b0b      	ldr	r3, [pc, #44]	@ (8010518 <OnAckTimeoutTimerEvent+0x48>)
 80104ea:	2201      	movs	r2, #1
 80104ec:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80104f0:	4b0a      	ldr	r3, [pc, #40]	@ (801051c <OnAckTimeoutTimerEvent+0x4c>)
 80104f2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80104f6:	2b02      	cmp	r3, #2
 80104f8:	d106      	bne.n	8010508 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 80104fa:	4a07      	ldr	r2, [pc, #28]	@ (8010518 <OnAckTimeoutTimerEvent+0x48>)
 80104fc:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8010500:	f043 0310 	orr.w	r3, r3, #16
 8010504:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
    OnMacProcessNotify( );
 8010508:	f001 fec6 	bl	8012298 <OnMacProcessNotify>
}
 801050c:	bf00      	nop
 801050e:	3708      	adds	r7, #8
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}
 8010514:	20000af8 	.word	0x20000af8
 8010518:	20000704 	.word	0x20000704
 801051c:	20000c0c 	.word	0x20000c0c

08010520 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
 8010526:	60ba      	str	r2, [r7, #8]
 8010528:	607b      	str	r3, [r7, #4]
 801052a:	4603      	mov	r3, r0
 801052c:	73fb      	strb	r3, [r7, #15]
 801052e:	460b      	mov	r3, r1
 8010530:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d005      	beq.n	8010544 <GetFCntDown+0x24>
 8010538:	69fb      	ldr	r3, [r7, #28]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d002      	beq.n	8010544 <GetFCntDown+0x24>
 801053e:	6a3b      	ldr	r3, [r7, #32]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d101      	bne.n	8010548 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010544:	230a      	movs	r3, #10
 8010546:	e029      	b.n	801059c <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010548:	7bfb      	ldrb	r3, [r7, #15]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d016      	beq.n	801057c <GetFCntDown+0x5c>
 801054e:	2b01      	cmp	r3, #1
 8010550:	d118      	bne.n	8010584 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8010552:	79bb      	ldrb	r3, [r7, #6]
 8010554:	2b01      	cmp	r3, #1
 8010556:	d10d      	bne.n	8010574 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8010558:	7bbb      	ldrb	r3, [r7, #14]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d002      	beq.n	8010564 <GetFCntDown+0x44>
 801055e:	7bbb      	ldrb	r3, [r7, #14]
 8010560:	2b03      	cmp	r3, #3
 8010562:	d103      	bne.n	801056c <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8010564:	69fb      	ldr	r3, [r7, #28]
 8010566:	2202      	movs	r2, #2
 8010568:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 801056a:	e00d      	b.n	8010588 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 801056c:	69fb      	ldr	r3, [r7, #28]
 801056e:	2201      	movs	r2, #1
 8010570:	701a      	strb	r2, [r3, #0]
            break;
 8010572:	e009      	b.n	8010588 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8010574:	69fb      	ldr	r3, [r7, #28]
 8010576:	2203      	movs	r2, #3
 8010578:	701a      	strb	r2, [r3, #0]
            break;
 801057a:	e005      	b.n	8010588 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 801057c:	69fb      	ldr	r3, [r7, #28]
 801057e:	2204      	movs	r2, #4
 8010580:	701a      	strb	r2, [r3, #0]
            break;
 8010582:	e001      	b.n	8010588 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010584:	2305      	movs	r3, #5
 8010586:	e009      	b.n	801059c <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8010588:	69fb      	ldr	r3, [r7, #28]
 801058a:	7818      	ldrb	r0, [r3, #0]
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	89db      	ldrh	r3, [r3, #14]
 8010590:	461a      	mov	r2, r3
 8010592:	8b39      	ldrh	r1, [r7, #24]
 8010594:	6a3b      	ldr	r3, [r7, #32]
 8010596:	f004 fce7 	bl	8014f68 <LoRaMacCryptoGetFCntDown>
 801059a:	4603      	mov	r3, r0
}
 801059c:	4618      	mov	r0, r3
 801059e:	3710      	adds	r7, #16
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}

080105a4 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80105a4:	b5b0      	push	{r4, r5, r7, lr}
 80105a6:	b084      	sub	sp, #16
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	4603      	mov	r3, r0
 80105ac:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80105ae:	2303      	movs	r3, #3
 80105b0:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 80105b2:	4b6d      	ldr	r3, [pc, #436]	@ (8010768 <SwitchClass+0x1c4>)
 80105b4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80105b8:	2b02      	cmp	r3, #2
 80105ba:	f000 80b9 	beq.w	8010730 <SwitchClass+0x18c>
 80105be:	2b02      	cmp	r3, #2
 80105c0:	f300 80cc 	bgt.w	801075c <SwitchClass+0x1b8>
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d003      	beq.n	80105d0 <SwitchClass+0x2c>
 80105c8:	2b01      	cmp	r3, #1
 80105ca:	f000 80a3 	beq.w	8010714 <SwitchClass+0x170>
 80105ce:	e0c5      	b.n	801075c <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80105d0:	79fb      	ldrb	r3, [r7, #7]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d109      	bne.n	80105ea <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80105d6:	4b64      	ldr	r3, [pc, #400]	@ (8010768 <SwitchClass+0x1c4>)
 80105d8:	4a63      	ldr	r2, [pc, #396]	@ (8010768 <SwitchClass+0x1c4>)
 80105da:	3374      	adds	r3, #116	@ 0x74
 80105dc:	326c      	adds	r2, #108	@ 0x6c
 80105de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105e2:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 80105e6:	2300      	movs	r3, #0
 80105e8:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 80105ea:	79fb      	ldrb	r3, [r7, #7]
 80105ec:	2b01      	cmp	r3, #1
 80105ee:	d10c      	bne.n	801060a <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80105f0:	79fb      	ldrb	r3, [r7, #7]
 80105f2:	4618      	mov	r0, r3
 80105f4:	f003 fbf1 	bl	8013dda <LoRaMacClassBSwitchClass>
 80105f8:	4603      	mov	r3, r0
 80105fa:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 80105fc:	7bfb      	ldrb	r3, [r7, #15]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d103      	bne.n	801060a <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8010602:	4a59      	ldr	r2, [pc, #356]	@ (8010768 <SwitchClass+0x1c4>)
 8010604:	79fb      	ldrb	r3, [r7, #7]
 8010606:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 801060a:	79fb      	ldrb	r3, [r7, #7]
 801060c:	2b02      	cmp	r3, #2
 801060e:	f040 80a0 	bne.w	8010752 <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010612:	4a55      	ldr	r2, [pc, #340]	@ (8010768 <SwitchClass+0x1c4>)
 8010614:	79fb      	ldrb	r3, [r7, #7]
 8010616:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801061a:	4a54      	ldr	r2, [pc, #336]	@ (801076c <SwitchClass+0x1c8>)
 801061c:	4b53      	ldr	r3, [pc, #332]	@ (801076c <SwitchClass+0x1c8>)
 801061e:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 8010622:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 8010626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801062a:	682b      	ldr	r3, [r5, #0]
 801062c:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801062e:	4b4f      	ldr	r3, [pc, #316]	@ (801076c <SwitchClass+0x1c8>)
 8010630:	2202      	movs	r2, #2
 8010632:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010636:	2300      	movs	r3, #0
 8010638:	73bb      	strb	r3, [r7, #14]
 801063a:	e05b      	b.n	80106f4 <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 801063c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010640:	4949      	ldr	r1, [pc, #292]	@ (8010768 <SwitchClass+0x1c4>)
 8010642:	4613      	mov	r3, r2
 8010644:	005b      	lsls	r3, r3, #1
 8010646:	4413      	add	r3, r2
 8010648:	011b      	lsls	r3, r3, #4
 801064a:	440b      	add	r3, r1
 801064c:	33e9      	adds	r3, #233	@ 0xe9
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d049      	beq.n	80106e8 <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8010654:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010658:	4943      	ldr	r1, [pc, #268]	@ (8010768 <SwitchClass+0x1c4>)
 801065a:	4613      	mov	r3, r2
 801065c:	005b      	lsls	r3, r3, #1
 801065e:	4413      	add	r3, r2
 8010660:	011b      	lsls	r3, r3, #4
 8010662:	440b      	add	r3, r1
 8010664:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8010668:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 801066a:	2b02      	cmp	r3, #2
 801066c:	d13c      	bne.n	80106e8 <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 801066e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010672:	493d      	ldr	r1, [pc, #244]	@ (8010768 <SwitchClass+0x1c4>)
 8010674:	4613      	mov	r3, r2
 8010676:	005b      	lsls	r3, r3, #1
 8010678:	4413      	add	r3, r2
 801067a:	011b      	lsls	r3, r3, #4
 801067c:	440b      	add	r3, r1
 801067e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4a38      	ldr	r2, [pc, #224]	@ (8010768 <SwitchClass+0x1c4>)
 8010686:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8010688:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801068c:	4936      	ldr	r1, [pc, #216]	@ (8010768 <SwitchClass+0x1c4>)
 801068e:	4613      	mov	r3, r2
 8010690:	005b      	lsls	r3, r3, #1
 8010692:	4413      	add	r3, r2
 8010694:	011b      	lsls	r3, r3, #4
 8010696:	440b      	add	r3, r1
 8010698:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 801069c:	f993 3000 	ldrsb.w	r3, [r3]
 80106a0:	b2da      	uxtb	r2, r3
 80106a2:	4b31      	ldr	r3, [pc, #196]	@ (8010768 <SwitchClass+0x1c4>)
 80106a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80106a8:	4b30      	ldr	r3, [pc, #192]	@ (801076c <SwitchClass+0x1c8>)
 80106aa:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 80106ae:	4b2f      	ldr	r3, [pc, #188]	@ (801076c <SwitchClass+0x1c8>)
 80106b0:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80106b4:	4b2c      	ldr	r3, [pc, #176]	@ (8010768 <SwitchClass+0x1c4>)
 80106b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80106b8:	4a2c      	ldr	r2, [pc, #176]	@ (801076c <SwitchClass+0x1c8>)
 80106ba:	f8c2 33e4 	str.w	r3, [r2, #996]	@ 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80106be:	4b2a      	ldr	r3, [pc, #168]	@ (8010768 <SwitchClass+0x1c4>)
 80106c0:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80106c4:	4b29      	ldr	r3, [pc, #164]	@ (801076c <SwitchClass+0x1c8>)
 80106c6:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80106ca:	4b27      	ldr	r3, [pc, #156]	@ (8010768 <SwitchClass+0x1c4>)
 80106cc:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80106d0:	4b26      	ldr	r3, [pc, #152]	@ (801076c <SwitchClass+0x1c8>)
 80106d2:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80106d6:	4b25      	ldr	r3, [pc, #148]	@ (801076c <SwitchClass+0x1c8>)
 80106d8:	2203      	movs	r2, #3
 80106da:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80106de:	4b23      	ldr	r3, [pc, #140]	@ (801076c <SwitchClass+0x1c8>)
 80106e0:	2201      	movs	r2, #1
 80106e2:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
                        break;
 80106e6:	e009      	b.n	80106fc <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80106e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106ec:	b2db      	uxtb	r3, r3
 80106ee:	3301      	adds	r3, #1
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	73bb      	strb	r3, [r7, #14]
 80106f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	dd9f      	ble.n	801063c <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80106fc:	4b1b      	ldr	r3, [pc, #108]	@ (801076c <SwitchClass+0x1c8>)
 80106fe:	2200      	movs	r2, #0
 8010700:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010704:	4b1a      	ldr	r3, [pc, #104]	@ (8010770 <SwitchClass+0x1cc>)
 8010706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010708:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 801070a:	f001 f9e5 	bl	8011ad8 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 801070e:	2300      	movs	r3, #0
 8010710:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010712:	e01e      	b.n	8010752 <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010714:	79fb      	ldrb	r3, [r7, #7]
 8010716:	4618      	mov	r0, r3
 8010718:	f003 fb5f 	bl	8013dda <LoRaMacClassBSwitchClass>
 801071c:	4603      	mov	r3, r0
 801071e:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8010720:	7bfb      	ldrb	r3, [r7, #15]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d117      	bne.n	8010756 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010726:	4a10      	ldr	r2, [pc, #64]	@ (8010768 <SwitchClass+0x1c4>)
 8010728:	79fb      	ldrb	r3, [r7, #7]
 801072a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 801072e:	e012      	b.n	8010756 <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010730:	79fb      	ldrb	r3, [r7, #7]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d111      	bne.n	801075a <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8010736:	4b0d      	ldr	r3, [pc, #52]	@ (801076c <SwitchClass+0x1c8>)
 8010738:	2206      	movs	r2, #6
 801073a:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 801073e:	4a0a      	ldr	r2, [pc, #40]	@ (8010768 <SwitchClass+0x1c4>)
 8010740:	79fb      	ldrb	r3, [r7, #7]
 8010742:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010746:	4b0a      	ldr	r3, [pc, #40]	@ (8010770 <SwitchClass+0x1cc>)
 8010748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801074a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 801074c:	2300      	movs	r3, #0
 801074e:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8010750:	e003      	b.n	801075a <SwitchClass+0x1b6>
            break;
 8010752:	bf00      	nop
 8010754:	e002      	b.n	801075c <SwitchClass+0x1b8>
            break;
 8010756:	bf00      	nop
 8010758:	e000      	b.n	801075c <SwitchClass+0x1b8>
            break;
 801075a:	bf00      	nop
        }
    }

    return status;
 801075c:	7bfb      	ldrb	r3, [r7, #15]
}
 801075e:	4618      	mov	r0, r3
 8010760:	3710      	adds	r7, #16
 8010762:	46bd      	mov	sp, r7
 8010764:	bdb0      	pop	{r4, r5, r7, pc}
 8010766:	bf00      	nop
 8010768:	20000c0c 	.word	0x20000c0c
 801076c:	20000704 	.word	0x20000704
 8010770:	0801df78 	.word	0x0801df78

08010774 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b086      	sub	sp, #24
 8010778:	af00      	add	r7, sp, #0
 801077a:	4603      	mov	r3, r0
 801077c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801077e:	4b10      	ldr	r3, [pc, #64]	@ (80107c0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010780:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010784:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8010786:	79fb      	ldrb	r3, [r7, #7]
 8010788:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 801078a:	230d      	movs	r3, #13
 801078c:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 801078e:	4b0c      	ldr	r3, [pc, #48]	@ (80107c0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010790:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8010794:	2b00      	cmp	r3, #0
 8010796:	d001      	beq.n	801079c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010798:	230e      	movs	r3, #14
 801079a:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801079c:	4b08      	ldr	r3, [pc, #32]	@ (80107c0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 801079e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80107a2:	f107 0210 	add.w	r2, r7, #16
 80107a6:	4611      	mov	r1, r2
 80107a8:	4618      	mov	r0, r3
 80107aa:	f005 fa72 	bl	8015c92 <RegionGetPhyParam>
 80107ae:	4603      	mov	r3, r0
 80107b0:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	b2db      	uxtb	r3, r3
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	3718      	adds	r7, #24
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}
 80107be:	bf00      	nop
 80107c0:	20000c0c 	.word	0x20000c0c

080107c4 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b084      	sub	sp, #16
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	4603      	mov	r3, r0
 80107cc:	71fb      	strb	r3, [r7, #7]
 80107ce:	460b      	mov	r3, r1
 80107d0:	71bb      	strb	r3, [r7, #6]
 80107d2:	4613      	mov	r3, r2
 80107d4:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 80107d6:	2300      	movs	r3, #0
 80107d8:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 80107da:	2300      	movs	r3, #0
 80107dc:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80107de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7ff ffc6 	bl	8010774 <GetMaxAppPayloadWithoutFOptsLength>
 80107e8:	4603      	mov	r3, r0
 80107ea:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80107ec:	79fb      	ldrb	r3, [r7, #7]
 80107ee:	b29a      	uxth	r2, r3
 80107f0:	797b      	ldrb	r3, [r7, #5]
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	4413      	add	r3, r2
 80107f6:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80107f8:	89ba      	ldrh	r2, [r7, #12]
 80107fa:	89fb      	ldrh	r3, [r7, #14]
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d804      	bhi.n	801080a <ValidatePayloadLength+0x46>
 8010800:	89bb      	ldrh	r3, [r7, #12]
 8010802:	2bff      	cmp	r3, #255	@ 0xff
 8010804:	d801      	bhi.n	801080a <ValidatePayloadLength+0x46>
    {
        return true;
 8010806:	2301      	movs	r3, #1
 8010808:	e000      	b.n	801080c <ValidatePayloadLength+0x48>
    }
    return false;
 801080a:	2300      	movs	r3, #0
}
 801080c:	4618      	mov	r0, r3
 801080e:	3710      	adds	r7, #16
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}

08010814 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010814:	b590      	push	{r4, r7, lr}
 8010816:	b0a5      	sub	sp, #148	@ 0x94
 8010818:	af02      	add	r7, sp, #8
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	4608      	mov	r0, r1
 801081e:	4611      	mov	r1, r2
 8010820:	461a      	mov	r2, r3
 8010822:	4603      	mov	r3, r0
 8010824:	70fb      	strb	r3, [r7, #3]
 8010826:	460b      	mov	r3, r1
 8010828:	70bb      	strb	r3, [r7, #2]
 801082a:	4613      	mov	r3, r2
 801082c:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 801082e:	2300      	movs	r3, #0
 8010830:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 8010834:	2300      	movs	r3, #0
 8010836:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801083a:	2300      	movs	r3, #0
 801083c:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8010840:	f000 bc7d 	b.w	801113e <ProcessMacCommands+0x92a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010844:	78fb      	ldrb	r3, [r7, #3]
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	4413      	add	r3, r2
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	4618      	mov	r0, r3
 801084e:	f003 fda9 	bl	80143a4 <LoRaMacCommandsGetCmdSize>
 8010852:	4603      	mov	r3, r0
 8010854:	461a      	mov	r2, r3
 8010856:	78fb      	ldrb	r3, [r7, #3]
 8010858:	441a      	add	r2, r3
 801085a:	78bb      	ldrb	r3, [r7, #2]
 801085c:	429a      	cmp	r2, r3
 801085e:	f300 8474 	bgt.w	801114a <ProcessMacCommands+0x936>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8010862:	78fb      	ldrb	r3, [r7, #3]
 8010864:	1c5a      	adds	r2, r3, #1
 8010866:	70fa      	strb	r2, [r7, #3]
 8010868:	461a      	mov	r2, r3
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4413      	add	r3, r2
 801086e:	781b      	ldrb	r3, [r3, #0]
 8010870:	3b02      	subs	r3, #2
 8010872:	2b11      	cmp	r3, #17
 8010874:	f200 846b 	bhi.w	801114e <ProcessMacCommands+0x93a>
 8010878:	a201      	add	r2, pc, #4	@ (adr r2, 8010880 <ProcessMacCommands+0x6c>)
 801087a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801087e:	bf00      	nop
 8010880:	080108c9 	.word	0x080108c9
 8010884:	0801090b 	.word	0x0801090b
 8010888:	08010a27 	.word	0x08010a27
 801088c:	08010a65 	.word	0x08010a65
 8010890:	08010b4f 	.word	0x08010b4f
 8010894:	08010bad 	.word	0x08010bad
 8010898:	08010c69 	.word	0x08010c69
 801089c:	08010cbf 	.word	0x08010cbf
 80108a0:	08010da5 	.word	0x08010da5
 80108a4:	0801114f 	.word	0x0801114f
 80108a8:	0801114f 	.word	0x0801114f
 80108ac:	08010e49 	.word	0x08010e49
 80108b0:	0801114f 	.word	0x0801114f
 80108b4:	0801114f 	.word	0x0801114f
 80108b8:	08010f5f 	.word	0x08010f5f
 80108bc:	08010f93 	.word	0x08010f93
 80108c0:	08011023 	.word	0x08011023
 80108c4:	0801109b 	.word	0x0801109b
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80108c8:	2005      	movs	r0, #5
 80108ca:	f003 ff43 	bl	8014754 <LoRaMacConfirmQueueIsCmdActive>
 80108ce:	4603      	mov	r3, r0
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	f000 8425 	beq.w	8011120 <ProcessMacCommands+0x90c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80108d6:	2105      	movs	r1, #5
 80108d8:	2000      	movs	r0, #0
 80108da:	f003 feaf 	bl	801463c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80108de:	78fb      	ldrb	r3, [r7, #3]
 80108e0:	1c5a      	adds	r2, r3, #1
 80108e2:	70fa      	strb	r2, [r7, #3]
 80108e4:	461a      	mov	r2, r3
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	4413      	add	r3, r2
 80108ea:	781a      	ldrb	r2, [r3, #0]
 80108ec:	4bac      	ldr	r3, [pc, #688]	@ (8010ba0 <ProcessMacCommands+0x38c>)
 80108ee:	f883 2450 	strb.w	r2, [r3, #1104]	@ 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80108f2:	78fb      	ldrb	r3, [r7, #3]
 80108f4:	1c5a      	adds	r2, r3, #1
 80108f6:	70fa      	strb	r2, [r7, #3]
 80108f8:	461a      	mov	r2, r3
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	4413      	add	r3, r2
 80108fe:	781a      	ldrb	r2, [r3, #0]
 8010900:	4ba7      	ldr	r3, [pc, #668]	@ (8010ba0 <ProcessMacCommands+0x38c>)
 8010902:	f883 2451 	strb.w	r2, [r3, #1105]	@ 0x451
                }
                break;
 8010906:	f000 bc0b 	b.w	8011120 <ProcessMacCommands+0x90c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 801090a:	2300      	movs	r3, #0
 801090c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8010910:	2300      	movs	r3, #0
 8010912:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 8010916:	2300      	movs	r3, #0
 8010918:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 801091c:	2300      	movs	r3, #0
 801091e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 8010922:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8010926:	f083 0301 	eor.w	r3, r3, #1
 801092a:	b2db      	uxtb	r3, r3
 801092c:	2b00      	cmp	r3, #0
 801092e:	f000 83f9 	beq.w	8011124 <ProcessMacCommands+0x910>
                {
                    adrBlockFound = true;
 8010932:	2301      	movs	r3, #1
 8010934:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8010938:	78fb      	ldrb	r3, [r7, #3]
 801093a:	3b01      	subs	r3, #1
 801093c:	687a      	ldr	r2, [r7, #4]
 801093e:	4413      	add	r3, r2
 8010940:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8010942:	78ba      	ldrb	r2, [r7, #2]
 8010944:	78fb      	ldrb	r3, [r7, #3]
 8010946:	1ad3      	subs	r3, r2, r3
 8010948:	b2db      	uxtb	r3, r3
 801094a:	3301      	adds	r3, #1
 801094c:	b2db      	uxtb	r3, r3
 801094e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010952:	4b94      	ldr	r3, [pc, #592]	@ (8010ba4 <ProcessMacCommands+0x390>)
 8010954:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8010958:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801095c:	4b91      	ldr	r3, [pc, #580]	@ (8010ba4 <ProcessMacCommands+0x390>)
 801095e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010962:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010966:	4b8f      	ldr	r3, [pc, #572]	@ (8010ba4 <ProcessMacCommands+0x390>)
 8010968:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801096c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010970:	4b8c      	ldr	r3, [pc, #560]	@ (8010ba4 <ProcessMacCommands+0x390>)
 8010972:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010976:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801097a:	4b8a      	ldr	r3, [pc, #552]	@ (8010ba4 <ProcessMacCommands+0x390>)
 801097c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010980:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8010984:	4b87      	ldr	r3, [pc, #540]	@ (8010ba4 <ProcessMacCommands+0x390>)
 8010986:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801098a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 801098c:	4b85      	ldr	r3, [pc, #532]	@ (8010ba4 <ProcessMacCommands+0x390>)
 801098e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8010992:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 8010996:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 801099a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801099e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80109a2:	9301      	str	r3, [sp, #4]
 80109a4:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80109a8:	9300      	str	r3, [sp, #0]
 80109aa:	4623      	mov	r3, r4
 80109ac:	f005 fa2e 	bl	8015e0c <RegionLinkAdrReq>
 80109b0:	4603      	mov	r3, r0
 80109b2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 80109b6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80109ba:	f003 0307 	and.w	r3, r3, #7
 80109be:	2b07      	cmp	r3, #7
 80109c0:	d10e      	bne.n	80109e0 <ProcessMacCommands+0x1cc>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80109c2:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 80109c6:	4b77      	ldr	r3, [pc, #476]	@ (8010ba4 <ProcessMacCommands+0x390>)
 80109c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80109cc:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 80109d0:	4b74      	ldr	r3, [pc, #464]	@ (8010ba4 <ProcessMacCommands+0x390>)
 80109d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80109d6:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80109da:	4b72      	ldr	r3, [pc, #456]	@ (8010ba4 <ProcessMacCommands+0x390>)
 80109dc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80109e0:	2300      	movs	r3, #0
 80109e2:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80109e6:	e00b      	b.n	8010a00 <ProcessMacCommands+0x1ec>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80109e8:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 80109ec:	2201      	movs	r2, #1
 80109ee:	4619      	mov	r1, r3
 80109f0:	2003      	movs	r0, #3
 80109f2:	f003 fb77 	bl	80140e4 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80109f6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80109fa:	3301      	adds	r3, #1
 80109fc:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8010a00:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8010a04:	4a68      	ldr	r2, [pc, #416]	@ (8010ba8 <ProcessMacCommands+0x394>)
 8010a06:	fba2 2303 	umull	r2, r3, r2, r3
 8010a0a:	089b      	lsrs	r3, r3, #2
 8010a0c:	b2db      	uxtb	r3, r3
 8010a0e:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d3e8      	bcc.n	80109e8 <ProcessMacCommands+0x1d4>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8010a16:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8010a1a:	78fb      	ldrb	r3, [r7, #3]
 8010a1c:	4413      	add	r3, r2
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	3b01      	subs	r3, #1
 8010a22:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8010a24:	e37e      	b.n	8011124 <ProcessMacCommands+0x910>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8010a26:	78fb      	ldrb	r3, [r7, #3]
 8010a28:	1c5a      	adds	r2, r3, #1
 8010a2a:	70fa      	strb	r2, [r7, #3]
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	4413      	add	r3, r2
 8010a32:	781b      	ldrb	r3, [r3, #0]
 8010a34:	f003 030f 	and.w	r3, r3, #15
 8010a38:	b2da      	uxtb	r2, r3
 8010a3a:	4b5a      	ldr	r3, [pc, #360]	@ (8010ba4 <ProcessMacCommands+0x390>)
 8010a3c:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8010a40:	4b58      	ldr	r3, [pc, #352]	@ (8010ba4 <ProcessMacCommands+0x390>)
 8010a42:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 8010a46:	461a      	mov	r2, r3
 8010a48:	2301      	movs	r3, #1
 8010a4a:	4093      	lsls	r3, r2
 8010a4c:	b29a      	uxth	r2, r3
 8010a4e:	4b55      	ldr	r3, [pc, #340]	@ (8010ba4 <ProcessMacCommands+0x390>)
 8010a50:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010a54:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010a58:	2200      	movs	r2, #0
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	2004      	movs	r0, #4
 8010a5e:	f003 fb41 	bl	80140e4 <LoRaMacCommandsAddCmd>
                break;
 8010a62:	e36c      	b.n	801113e <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010a64:	2307      	movs	r3, #7
 8010a66:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010a6a:	78fb      	ldrb	r3, [r7, #3]
 8010a6c:	687a      	ldr	r2, [r7, #4]
 8010a6e:	4413      	add	r3, r2
 8010a70:	781b      	ldrb	r3, [r3, #0]
 8010a72:	091b      	lsrs	r3, r3, #4
 8010a74:	b2db      	uxtb	r3, r3
 8010a76:	b25b      	sxtb	r3, r3
 8010a78:	f003 0307 	and.w	r3, r3, #7
 8010a7c:	b25b      	sxtb	r3, r3
 8010a7e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8010a82:	78fb      	ldrb	r3, [r7, #3]
 8010a84:	687a      	ldr	r2, [r7, #4]
 8010a86:	4413      	add	r3, r2
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	b25b      	sxtb	r3, r3
 8010a8c:	f003 030f 	and.w	r3, r3, #15
 8010a90:	b25b      	sxtb	r3, r3
 8010a92:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 8010a96:	78fb      	ldrb	r3, [r7, #3]
 8010a98:	3301      	adds	r3, #1
 8010a9a:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010a9c:	78fb      	ldrb	r3, [r7, #3]
 8010a9e:	1c5a      	adds	r2, r3, #1
 8010aa0:	70fa      	strb	r2, [r7, #3]
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	4413      	add	r3, r2
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010aac:	78fb      	ldrb	r3, [r7, #3]
 8010aae:	1c5a      	adds	r2, r3, #1
 8010ab0:	70fa      	strb	r2, [r7, #3]
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	4413      	add	r3, r2
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	021a      	lsls	r2, r3, #8
 8010abc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010abe:	4313      	orrs	r3, r2
 8010ac0:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010ac2:	78fb      	ldrb	r3, [r7, #3]
 8010ac4:	1c5a      	adds	r2, r3, #1
 8010ac6:	70fa      	strb	r2, [r7, #3]
 8010ac8:	461a      	mov	r2, r3
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	4413      	add	r3, r2
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	041a      	lsls	r2, r3, #16
 8010ad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ad4:	4313      	orrs	r3, r2
 8010ad6:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 8010ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ada:	2264      	movs	r2, #100	@ 0x64
 8010adc:	fb02 f303 	mul.w	r3, r2, r3
 8010ae0:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8010ae2:	4b30      	ldr	r3, [pc, #192]	@ (8010ba4 <ProcessMacCommands+0x390>)
 8010ae4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010ae8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8010aec:	4611      	mov	r1, r2
 8010aee:	4618      	mov	r0, r3
 8010af0:	f005 f9a6 	bl	8015e40 <RegionRxParamSetupReq>
 8010af4:	4603      	mov	r3, r0
 8010af6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8010afa:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010afe:	f003 0307 	and.w	r3, r3, #7
 8010b02:	2b07      	cmp	r3, #7
 8010b04:	d117      	bne.n	8010b36 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010b06:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8010b0a:	b2da      	uxtb	r2, r3
 8010b0c:	4b25      	ldr	r3, [pc, #148]	@ (8010ba4 <ProcessMacCommands+0x390>)
 8010b0e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010b12:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8010b16:	b2da      	uxtb	r2, r3
 8010b18:	4b22      	ldr	r3, [pc, #136]	@ (8010ba4 <ProcessMacCommands+0x390>)
 8010b1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b20:	4a20      	ldr	r2, [pc, #128]	@ (8010ba4 <ProcessMacCommands+0x390>)
 8010b22:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010b24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b26:	4a1f      	ldr	r2, [pc, #124]	@ (8010ba4 <ProcessMacCommands+0x390>)
 8010b28:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010b2a:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8010b2e:	b2da      	uxtb	r2, r3
 8010b30:	4b1c      	ldr	r3, [pc, #112]	@ (8010ba4 <ProcessMacCommands+0x390>)
 8010b32:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 8010b36:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010b3a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010b3e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010b42:	2201      	movs	r2, #1
 8010b44:	4619      	mov	r1, r3
 8010b46:	2005      	movs	r0, #5
 8010b48:	f003 facc 	bl	80140e4 <LoRaMacCommandsAddCmd>
                break;
 8010b4c:	e2f7      	b.n	801113e <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010b4e:	23ff      	movs	r3, #255	@ 0xff
 8010b50:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010b54:	4b12      	ldr	r3, [pc, #72]	@ (8010ba0 <ProcessMacCommands+0x38c>)
 8010b56:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d00d      	beq.n	8010b7a <ProcessMacCommands+0x366>
 8010b5e:	4b10      	ldr	r3, [pc, #64]	@ (8010ba0 <ProcessMacCommands+0x38c>)
 8010b60:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d007      	beq.n	8010b7a <ProcessMacCommands+0x366>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8010ba0 <ProcessMacCommands+0x38c>)
 8010b6c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	4798      	blx	r3
 8010b74:	4603      	mov	r3, r0
 8010b76:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8010b7a:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8010b7e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010b82:	787b      	ldrb	r3, [r7, #1]
 8010b84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010b88:	b2db      	uxtb	r3, r3
 8010b8a:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010b8e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010b92:	2202      	movs	r2, #2
 8010b94:	4619      	mov	r1, r3
 8010b96:	2006      	movs	r0, #6
 8010b98:	f003 faa4 	bl	80140e4 <LoRaMacCommandsAddCmd>
                break;
 8010b9c:	e2cf      	b.n	801113e <ProcessMacCommands+0x92a>
 8010b9e:	bf00      	nop
 8010ba0:	20000704 	.word	0x20000704
 8010ba4:	20000c0c 	.word	0x20000c0c
 8010ba8:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010bac:	2303      	movs	r3, #3
 8010bae:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8010bb2:	78fb      	ldrb	r3, [r7, #3]
 8010bb4:	1c5a      	adds	r2, r3, #1
 8010bb6:	70fa      	strb	r2, [r7, #3]
 8010bb8:	461a      	mov	r2, r3
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	4413      	add	r3, r2
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	b25b      	sxtb	r3, r3
 8010bc2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 8010bc6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010bca:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010bcc:	78fb      	ldrb	r3, [r7, #3]
 8010bce:	1c5a      	adds	r2, r3, #1
 8010bd0:	70fa      	strb	r2, [r7, #3]
 8010bd2:	461a      	mov	r2, r3
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	4413      	add	r3, r2
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010bdc:	78fb      	ldrb	r3, [r7, #3]
 8010bde:	1c5a      	adds	r2, r3, #1
 8010be0:	70fa      	strb	r2, [r7, #3]
 8010be2:	461a      	mov	r2, r3
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	4413      	add	r3, r2
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	021a      	lsls	r2, r3, #8
 8010bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bee:	4313      	orrs	r3, r2
 8010bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010bf2:	78fb      	ldrb	r3, [r7, #3]
 8010bf4:	1c5a      	adds	r2, r3, #1
 8010bf6:	70fa      	strb	r2, [r7, #3]
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	4413      	add	r3, r2
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	041a      	lsls	r2, r3, #16
 8010c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c04:	4313      	orrs	r3, r2
 8010c06:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 8010c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c0a:	2264      	movs	r2, #100	@ 0x64
 8010c0c:	fb02 f303 	mul.w	r3, r2, r3
 8010c10:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 8010c12:	2300      	movs	r3, #0
 8010c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8010c16:	78fb      	ldrb	r3, [r7, #3]
 8010c18:	1c5a      	adds	r2, r3, #1
 8010c1a:	70fa      	strb	r2, [r7, #3]
 8010c1c:	461a      	mov	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	4413      	add	r3, r2
 8010c22:	781b      	ldrb	r3, [r3, #0]
 8010c24:	b25b      	sxtb	r3, r3
 8010c26:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8010c2a:	4b85      	ldr	r3, [pc, #532]	@ (8010e40 <ProcessMacCommands+0x62c>)
 8010c2c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010c30:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8010c34:	4611      	mov	r1, r2
 8010c36:	4618      	mov	r0, r3
 8010c38:	f005 f915 	bl	8015e66 <RegionNewChannelReq>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	b2db      	uxtb	r3, r3
 8010c40:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8010c44:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010c48:	b25b      	sxtb	r3, r3
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	f2c0 826c 	blt.w	8011128 <ProcessMacCommands+0x914>
                {
                    macCmdPayload[0] = status;
 8010c50:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010c54:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010c58:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010c5c:	2201      	movs	r2, #1
 8010c5e:	4619      	mov	r1, r3
 8010c60:	2007      	movs	r0, #7
 8010c62:	f003 fa3f 	bl	80140e4 <LoRaMacCommandsAddCmd>
                }
                break;
 8010c66:	e25f      	b.n	8011128 <ProcessMacCommands+0x914>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010c68:	78fb      	ldrb	r3, [r7, #3]
 8010c6a:	1c5a      	adds	r2, r3, #1
 8010c6c:	70fa      	strb	r2, [r7, #3]
 8010c6e:	461a      	mov	r2, r3
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	4413      	add	r3, r2
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	f003 030f 	and.w	r3, r3, #15
 8010c7a:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 8010c7e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d104      	bne.n	8010c90 <ProcessMacCommands+0x47c>
                {
                    delay++;
 8010c86:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8010c90:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010c94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010c98:	fb02 f303 	mul.w	r3, r2, r3
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	4b68      	ldr	r3, [pc, #416]	@ (8010e40 <ProcessMacCommands+0x62c>)
 8010ca0:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010ca2:	4b67      	ldr	r3, [pc, #412]	@ (8010e40 <ProcessMacCommands+0x62c>)
 8010ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010ca6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8010caa:	4a65      	ldr	r2, [pc, #404]	@ (8010e40 <ProcessMacCommands+0x62c>)
 8010cac:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010cae:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	4619      	mov	r1, r3
 8010cb6:	2008      	movs	r0, #8
 8010cb8:	f003 fa14 	bl	80140e4 <LoRaMacCommandsAddCmd>
                break;
 8010cbc:	e23f      	b.n	801113e <ProcessMacCommands+0x92a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8010cbe:	78fb      	ldrb	r3, [r7, #3]
 8010cc0:	1c5a      	adds	r2, r3, #1
 8010cc2:	70fa      	strb	r2, [r7, #3]
 8010cc4:	461a      	mov	r2, r3
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	4413      	add	r3, r2
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010cdc:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8010ce0:	f003 0320 	and.w	r3, r3, #32
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d002      	beq.n	8010cee <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8010ce8:	2301      	movs	r3, #1
 8010cea:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8010cee:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8010cf2:	f003 0310 	and.w	r3, r3, #16
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d002      	beq.n	8010d00 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010d00:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8010d04:	f003 030f 	and.w	r3, r3, #15
 8010d08:	b2db      	uxtb	r3, r3
 8010d0a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8010d0e:	4b4c      	ldr	r3, [pc, #304]	@ (8010e40 <ProcessMacCommands+0x62c>)
 8010d10:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010d14:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8010d18:	4611      	mov	r1, r2
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f005 f8b6 	bl	8015e8c <RegionTxParamSetupReq>
 8010d20:	4603      	mov	r3, r0
 8010d22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010d26:	f000 8201 	beq.w	801112c <ProcessMacCommands+0x918>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8010d2a:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8010d2e:	4b44      	ldr	r3, [pc, #272]	@ (8010e40 <ProcessMacCommands+0x62c>)
 8010d30:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8010d34:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8010d38:	4b41      	ldr	r3, [pc, #260]	@ (8010e40 <ProcessMacCommands+0x62c>)
 8010d3a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8010d3e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8010d42:	461a      	mov	r2, r3
 8010d44:	4b3f      	ldr	r3, [pc, #252]	@ (8010e44 <ProcessMacCommands+0x630>)
 8010d46:	5c9b      	ldrb	r3, [r3, r2]
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f7ef fdf3 	bl	8000934 <__aeabi_ui2f>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	4a3b      	ldr	r2, [pc, #236]	@ (8010e40 <ProcessMacCommands+0x62c>)
 8010d52:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010d56:	2302      	movs	r3, #2
 8010d58:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010d5c:	4b38      	ldr	r3, [pc, #224]	@ (8010e40 <ProcessMacCommands+0x62c>)
 8010d5e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010d62:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d66:	4b36      	ldr	r3, [pc, #216]	@ (8010e40 <ProcessMacCommands+0x62c>)
 8010d68:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010d6c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8010d70:	4611      	mov	r1, r2
 8010d72:	4618      	mov	r0, r3
 8010d74:	f004 ff8d 	bl	8015c92 <RegionGetPhyParam>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8010d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d7e:	b25a      	sxtb	r2, r3
 8010d80:	4b2f      	ldr	r3, [pc, #188]	@ (8010e40 <ProcessMacCommands+0x62c>)
 8010d82:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010d86:	4293      	cmp	r3, r2
 8010d88:	bfb8      	it	lt
 8010d8a:	4613      	movlt	r3, r2
 8010d8c:	b25a      	sxtb	r2, r3
 8010d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8010e40 <ProcessMacCommands+0x62c>)
 8010d90:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8010d94:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010d98:	2200      	movs	r2, #0
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	2009      	movs	r0, #9
 8010d9e:	f003 f9a1 	bl	80140e4 <LoRaMacCommandsAddCmd>
                }
                break;
 8010da2:	e1c3      	b.n	801112c <ProcessMacCommands+0x918>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010da4:	2303      	movs	r3, #3
 8010da6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8010daa:	78fb      	ldrb	r3, [r7, #3]
 8010dac:	1c5a      	adds	r2, r3, #1
 8010dae:	70fa      	strb	r2, [r7, #3]
 8010db0:	461a      	mov	r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	4413      	add	r3, r2
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8010dbc:	78fb      	ldrb	r3, [r7, #3]
 8010dbe:	1c5a      	adds	r2, r3, #1
 8010dc0:	70fa      	strb	r2, [r7, #3]
 8010dc2:	461a      	mov	r2, r3
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	4413      	add	r3, r2
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010dcc:	78fb      	ldrb	r3, [r7, #3]
 8010dce:	1c5a      	adds	r2, r3, #1
 8010dd0:	70fa      	strb	r2, [r7, #3]
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	4413      	add	r3, r2
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	021a      	lsls	r2, r3, #8
 8010ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dde:	4313      	orrs	r3, r2
 8010de0:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010de2:	78fb      	ldrb	r3, [r7, #3]
 8010de4:	1c5a      	adds	r2, r3, #1
 8010de6:	70fa      	strb	r2, [r7, #3]
 8010de8:	461a      	mov	r2, r3
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	4413      	add	r3, r2
 8010dee:	781b      	ldrb	r3, [r3, #0]
 8010df0:	041a      	lsls	r2, r3, #16
 8010df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010df4:	4313      	orrs	r3, r2
 8010df6:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8010df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dfa:	2264      	movs	r2, #100	@ 0x64
 8010dfc:	fb02 f303 	mul.w	r3, r2, r3
 8010e00:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8010e02:	4b0f      	ldr	r3, [pc, #60]	@ (8010e40 <ProcessMacCommands+0x62c>)
 8010e04:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010e08:	f107 0220 	add.w	r2, r7, #32
 8010e0c:	4611      	mov	r1, r2
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f005 f84f 	bl	8015eb2 <RegionDlChannelReq>
 8010e14:	4603      	mov	r3, r0
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8010e1c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010e20:	b25b      	sxtb	r3, r3
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	f2c0 8184 	blt.w	8011130 <ProcessMacCommands+0x91c>
                {
                    macCmdPayload[0] = status;
 8010e28:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010e2c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8010e30:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010e34:	2201      	movs	r2, #1
 8010e36:	4619      	mov	r1, r3
 8010e38:	200a      	movs	r0, #10
 8010e3a:	f003 f953 	bl	80140e4 <LoRaMacCommandsAddCmd>
                }
                break;
 8010e3e:	e177      	b.n	8011130 <ProcessMacCommands+0x91c>
 8010e40:	20000c0c 	.word	0x20000c0c
 8010e44:	0801deac 	.word	0x0801deac
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8010e48:	200a      	movs	r0, #10
 8010e4a:	f003 fc83 	bl	8014754 <LoRaMacConfirmQueueIsCmdActive>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f000 816f 	beq.w	8011134 <ProcessMacCommands+0x920>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8010e56:	210a      	movs	r1, #10
 8010e58:	2000      	movs	r0, #0
 8010e5a:	f003 fbef 	bl	801463c <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8010e5e:	f107 0318 	add.w	r3, r7, #24
 8010e62:	2200      	movs	r2, #0
 8010e64:	601a      	str	r2, [r3, #0]
 8010e66:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8010e68:	f107 0310 	add.w	r3, r7, #16
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	601a      	str	r2, [r3, #0]
 8010e70:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8010e72:	f107 0308 	add.w	r3, r7, #8
 8010e76:	2200      	movs	r2, #0
 8010e78:	601a      	str	r2, [r3, #0]
 8010e7a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8010e7c:	78fb      	ldrb	r3, [r7, #3]
 8010e7e:	1c5a      	adds	r2, r3, #1
 8010e80:	70fa      	strb	r2, [r7, #3]
 8010e82:	461a      	mov	r2, r3
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	4413      	add	r3, r2
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8010e8c:	78fb      	ldrb	r3, [r7, #3]
 8010e8e:	1c5a      	adds	r2, r3, #1
 8010e90:	70fa      	strb	r2, [r7, #3]
 8010e92:	461a      	mov	r2, r3
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	4413      	add	r3, r2
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	021a      	lsls	r2, r3, #8
 8010e9c:	69bb      	ldr	r3, [r7, #24]
 8010e9e:	4313      	orrs	r3, r2
 8010ea0:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8010ea2:	78fb      	ldrb	r3, [r7, #3]
 8010ea4:	1c5a      	adds	r2, r3, #1
 8010ea6:	70fa      	strb	r2, [r7, #3]
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	4413      	add	r3, r2
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	041a      	lsls	r2, r3, #16
 8010eb2:	69bb      	ldr	r3, [r7, #24]
 8010eb4:	4313      	orrs	r3, r2
 8010eb6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8010eb8:	78fb      	ldrb	r3, [r7, #3]
 8010eba:	1c5a      	adds	r2, r3, #1
 8010ebc:	70fa      	strb	r2, [r7, #3]
 8010ebe:	461a      	mov	r2, r3
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	4413      	add	r3, r2
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	061a      	lsls	r2, r3, #24
 8010ec8:	69bb      	ldr	r3, [r7, #24]
 8010eca:	4313      	orrs	r3, r2
 8010ecc:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8010ece:	78fb      	ldrb	r3, [r7, #3]
 8010ed0:	1c5a      	adds	r2, r3, #1
 8010ed2:	70fa      	strb	r2, [r7, #3]
 8010ed4:	461a      	mov	r2, r3
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	4413      	add	r3, r2
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	b21b      	sxth	r3, r3
 8010ede:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8010ee0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010ee4:	461a      	mov	r2, r3
 8010ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010eea:	fb02 f303 	mul.w	r3, r2, r3
 8010eee:	121b      	asrs	r3, r3, #8
 8010ef0:	b21b      	sxth	r3, r3
 8010ef2:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8010ef4:	f107 0310 	add.w	r3, r7, #16
 8010ef8:	f107 0218 	add.w	r2, r7, #24
 8010efc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f00:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8010f04:	693a      	ldr	r2, [r7, #16]
 8010f06:	4b94      	ldr	r3, [pc, #592]	@ (8011158 <ProcessMacCommands+0x944>)
 8010f08:	4413      	add	r3, r2
 8010f0a:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8010f0c:	f107 0308 	add.w	r3, r7, #8
 8010f10:	4618      	mov	r0, r3
 8010f12:	f00a ff25 	bl	801bd60 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8010f16:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8010f1a:	4b90      	ldr	r3, [pc, #576]	@ (801115c <ProcessMacCommands+0x948>)
 8010f1c:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 8010f20:	9200      	str	r2, [sp, #0]
 8010f22:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 8010f26:	f107 0210 	add.w	r2, r7, #16
 8010f2a:	ca06      	ldmia	r2, {r1, r2}
 8010f2c:	f00a feb1 	bl	801bc92 <SysTimeSub>
 8010f30:	f107 0010 	add.w	r0, r7, #16
 8010f34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010f36:	9300      	str	r3, [sp, #0]
 8010f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f3a:	f107 0208 	add.w	r2, r7, #8
 8010f3e:	ca06      	ldmia	r2, {r1, r2}
 8010f40:	f00a fe6e 	bl	801bc20 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8010f44:	f107 0310 	add.w	r3, r7, #16
 8010f48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010f4c:	f00a feda 	bl	801bd04 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8010f50:	f002 ff81 	bl	8013e56 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8010f54:	4b81      	ldr	r3, [pc, #516]	@ (801115c <ProcessMacCommands+0x948>)
 8010f56:	2201      	movs	r2, #1
 8010f58:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8010f5c:	e0ea      	b.n	8011134 <ProcessMacCommands+0x920>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8010f5e:	200d      	movs	r0, #13
 8010f60:	f003 fbf8 	bl	8014754 <LoRaMacConfirmQueueIsCmdActive>
 8010f64:	4603      	mov	r3, r0
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	f000 80e6 	beq.w	8011138 <ProcessMacCommands+0x924>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8010f6c:	210d      	movs	r1, #13
 8010f6e:	2000      	movs	r0, #0
 8010f70:	f003 fb64 	bl	801463c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8010f74:	4b79      	ldr	r3, [pc, #484]	@ (801115c <ProcessMacCommands+0x948>)
 8010f76:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 8010f7a:	2b04      	cmp	r3, #4
 8010f7c:	f000 80dc 	beq.w	8011138 <ProcessMacCommands+0x924>
 8010f80:	4b76      	ldr	r3, [pc, #472]	@ (801115c <ProcessMacCommands+0x948>)
 8010f82:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 8010f86:	2b05      	cmp	r3, #5
 8010f88:	f000 80d6 	beq.w	8011138 <ProcessMacCommands+0x924>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8010f8c:	f002 ff44 	bl	8013e18 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8010f90:	e0d2      	b.n	8011138 <ProcessMacCommands+0x924>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8010f92:	2303      	movs	r3, #3
 8010f94:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8010f9c:	78fb      	ldrb	r3, [r7, #3]
 8010f9e:	1c5a      	adds	r2, r3, #1
 8010fa0:	70fa      	strb	r2, [r7, #3]
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	4413      	add	r3, r2
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010fac:	78fb      	ldrb	r3, [r7, #3]
 8010fae:	1c5a      	adds	r2, r3, #1
 8010fb0:	70fa      	strb	r2, [r7, #3]
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	4413      	add	r3, r2
 8010fb8:	781b      	ldrb	r3, [r3, #0]
 8010fba:	021b      	lsls	r3, r3, #8
 8010fbc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010fbe:	4313      	orrs	r3, r2
 8010fc0:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010fc2:	78fb      	ldrb	r3, [r7, #3]
 8010fc4:	1c5a      	adds	r2, r3, #1
 8010fc6:	70fa      	strb	r2, [r7, #3]
 8010fc8:	461a      	mov	r2, r3
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	4413      	add	r3, r2
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	041b      	lsls	r3, r3, #16
 8010fd2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010fd4:	4313      	orrs	r3, r2
 8010fd6:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 8010fd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010fda:	2264      	movs	r2, #100	@ 0x64
 8010fdc:	fb02 f303 	mul.w	r3, r2, r3
 8010fe0:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 8010fe2:	78fb      	ldrb	r3, [r7, #3]
 8010fe4:	1c5a      	adds	r2, r3, #1
 8010fe6:	70fa      	strb	r2, [r7, #3]
 8010fe8:	461a      	mov	r2, r3
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	4413      	add	r3, r2
 8010fee:	781b      	ldrb	r3, [r3, #0]
 8010ff0:	f003 030f 	and.w	r3, r3, #15
 8010ff4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8010ff8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8010ffc:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8010ffe:	4618      	mov	r0, r3
 8011000:	f002 ff10 	bl	8013e24 <LoRaMacClassBPingSlotChannelReq>
 8011004:	4603      	mov	r3, r0
 8011006:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 801100a:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 801100e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8011012:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011016:	2201      	movs	r2, #1
 8011018:	4619      	mov	r1, r3
 801101a:	2011      	movs	r0, #17
 801101c:	f003 f862 	bl	80140e4 <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 8011020:	e08d      	b.n	801113e <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8011022:	200e      	movs	r0, #14
 8011024:	f003 fb96 	bl	8014754 <LoRaMacConfirmQueueIsCmdActive>
 8011028:	4603      	mov	r3, r0
 801102a:	2b00      	cmp	r3, #0
 801102c:	f000 8086 	beq.w	801113c <ProcessMacCommands+0x928>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8011030:	210e      	movs	r1, #14
 8011032:	2000      	movs	r0, #0
 8011034:	f003 fb02 	bl	801463c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8011038:	2300      	movs	r3, #0
 801103a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 801103e:	2300      	movs	r3, #0
 8011040:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8011044:	78fb      	ldrb	r3, [r7, #3]
 8011046:	1c5a      	adds	r2, r3, #1
 8011048:	70fa      	strb	r2, [r7, #3]
 801104a:	461a      	mov	r2, r3
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	4413      	add	r3, r2
 8011050:	781b      	ldrb	r3, [r3, #0]
 8011052:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8011056:	78fb      	ldrb	r3, [r7, #3]
 8011058:	1c5a      	adds	r2, r3, #1
 801105a:	70fa      	strb	r2, [r7, #3]
 801105c:	461a      	mov	r2, r3
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	4413      	add	r3, r2
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	021b      	lsls	r3, r3, #8
 8011066:	b21a      	sxth	r2, r3
 8011068:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 801106c:	4313      	orrs	r3, r2
 801106e:	b21b      	sxth	r3, r3
 8011070:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8011074:	78fb      	ldrb	r3, [r7, #3]
 8011076:	1c5a      	adds	r2, r3, #1
 8011078:	70fa      	strb	r2, [r7, #3]
 801107a:	461a      	mov	r2, r3
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	4413      	add	r3, r2
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011086:	4b36      	ldr	r3, [pc, #216]	@ (8011160 <ProcessMacCommands+0x94c>)
 8011088:	681a      	ldr	r2, [r3, #0]
 801108a:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 801108e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8011092:	4618      	mov	r0, r3
 8011094:	f002 fed2 	bl	8013e3c <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8011098:	e050      	b.n	801113c <ProcessMacCommands+0x928>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 801109a:	2300      	movs	r3, #0
 801109c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 80110a0:	78fb      	ldrb	r3, [r7, #3]
 80110a2:	1c5a      	adds	r2, r3, #1
 80110a4:	70fa      	strb	r2, [r7, #3]
 80110a6:	461a      	mov	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	4413      	add	r3, r2
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80110b2:	78fb      	ldrb	r3, [r7, #3]
 80110b4:	1c5a      	adds	r2, r3, #1
 80110b6:	70fa      	strb	r2, [r7, #3]
 80110b8:	461a      	mov	r2, r3
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	4413      	add	r3, r2
 80110be:	781b      	ldrb	r3, [r3, #0]
 80110c0:	021b      	lsls	r3, r3, #8
 80110c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80110c6:	4313      	orrs	r3, r2
 80110c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80110cc:	78fb      	ldrb	r3, [r7, #3]
 80110ce:	1c5a      	adds	r2, r3, #1
 80110d0:	70fa      	strb	r2, [r7, #3]
 80110d2:	461a      	mov	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	4413      	add	r3, r2
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	041b      	lsls	r3, r3, #16
 80110dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80110e0:	4313      	orrs	r3, r2
 80110e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 80110e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80110ea:	2264      	movs	r2, #100	@ 0x64
 80110ec:	fb02 f303 	mul.w	r3, r2, r3
 80110f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80110f4:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80110f8:	f002 feb3 	bl	8013e62 <LoRaMacClassBBeaconFreqReq>
 80110fc:	4603      	mov	r3, r0
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d003      	beq.n	801110a <ProcessMacCommands+0x8f6>
                    {
                        macCmdPayload[0] = 1;
 8011102:	2301      	movs	r3, #1
 8011104:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 8011108:	e002      	b.n	8011110 <ProcessMacCommands+0x8fc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 801110a:	2300      	movs	r3, #0
 801110c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8011110:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011114:	2201      	movs	r2, #1
 8011116:	4619      	mov	r1, r3
 8011118:	2013      	movs	r0, #19
 801111a:	f002 ffe3 	bl	80140e4 <LoRaMacCommandsAddCmd>
                }
                break;
 801111e:	e00e      	b.n	801113e <ProcessMacCommands+0x92a>
                break;
 8011120:	bf00      	nop
 8011122:	e00c      	b.n	801113e <ProcessMacCommands+0x92a>
                break;
 8011124:	bf00      	nop
 8011126:	e00a      	b.n	801113e <ProcessMacCommands+0x92a>
                break;
 8011128:	bf00      	nop
 801112a:	e008      	b.n	801113e <ProcessMacCommands+0x92a>
                break;
 801112c:	bf00      	nop
 801112e:	e006      	b.n	801113e <ProcessMacCommands+0x92a>
                break;
 8011130:	bf00      	nop
 8011132:	e004      	b.n	801113e <ProcessMacCommands+0x92a>
                break;
 8011134:	bf00      	nop
 8011136:	e002      	b.n	801113e <ProcessMacCommands+0x92a>
                break;
 8011138:	bf00      	nop
 801113a:	e000      	b.n	801113e <ProcessMacCommands+0x92a>
                break;
 801113c:	bf00      	nop
    while( macIndex < commandsSize )
 801113e:	78fa      	ldrb	r2, [r7, #3]
 8011140:	78bb      	ldrb	r3, [r7, #2]
 8011142:	429a      	cmp	r2, r3
 8011144:	f4ff ab7e 	bcc.w	8010844 <ProcessMacCommands+0x30>
 8011148:	e002      	b.n	8011150 <ProcessMacCommands+0x93c>
            return;
 801114a:	bf00      	nop
 801114c:	e000      	b.n	8011150 <ProcessMacCommands+0x93c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 801114e:	bf00      	nop
        }
    }
}
 8011150:	378c      	adds	r7, #140	@ 0x8c
 8011152:	46bd      	mov	sp, r7
 8011154:	bd90      	pop	{r4, r7, pc}
 8011156:	bf00      	nop
 8011158:	12d53d80 	.word	0x12d53d80
 801115c:	20000704 	.word	0x20000704
 8011160:	20001b04 	.word	0x20001b04

08011164 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b08e      	sub	sp, #56	@ 0x38
 8011168:	af02      	add	r7, sp, #8
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	607a      	str	r2, [r7, #4]
 801116e:	461a      	mov	r2, r3
 8011170:	460b      	mov	r3, r1
 8011172:	72fb      	strb	r3, [r7, #11]
 8011174:	4613      	mov	r3, r2
 8011176:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011178:	2303      	movs	r3, #3
 801117a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 801117e:	4b65      	ldr	r3, [pc, #404]	@ (8011314 <Send+0x1b0>)
 8011180:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8011184:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8011188:	4b62      	ldr	r3, [pc, #392]	@ (8011314 <Send+0x1b0>)
 801118a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801118e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011192:	4b60      	ldr	r3, [pc, #384]	@ (8011314 <Send+0x1b0>)
 8011194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011196:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011198:	4b5e      	ldr	r3, [pc, #376]	@ (8011314 <Send+0x1b0>)
 801119a:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d101      	bne.n	80111a6 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80111a2:	2307      	movs	r3, #7
 80111a4:	e0b1      	b.n	801130a <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80111a6:	4b5b      	ldr	r3, [pc, #364]	@ (8011314 <Send+0x1b0>)
 80111a8:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d102      	bne.n	80111b6 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80111b0:	4b58      	ldr	r3, [pc, #352]	@ (8011314 <Send+0x1b0>)
 80111b2:	2200      	movs	r2, #0
 80111b4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 80111b6:	2300      	movs	r3, #0
 80111b8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 80111bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80111c0:	f36f 0303 	bfc	r3, #0, #4
 80111c4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80111c8:	4b52      	ldr	r3, [pc, #328]	@ (8011314 <Send+0x1b0>)
 80111ca:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 80111ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80111d2:	f362 13c7 	bfi	r3, r2, #7, #1
 80111d6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80111da:	4b4e      	ldr	r3, [pc, #312]	@ (8011314 <Send+0x1b0>)
 80111dc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	d106      	bne.n	80111f2 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 80111e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80111e8:	f043 0310 	orr.w	r3, r3, #16
 80111ec:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80111f0:	e005      	b.n	80111fe <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80111f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80111f6:	f36f 1304 	bfc	r3, #4, #1
 80111fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80111fe:	4b45      	ldr	r3, [pc, #276]	@ (8011314 <Send+0x1b0>)
 8011200:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8011204:	2b00      	cmp	r3, #0
 8011206:	d005      	beq.n	8011214 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8011208:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801120c:	f043 0320 	orr.w	r3, r3, #32
 8011210:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8011214:	2301      	movs	r3, #1
 8011216:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011218:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801121c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011220:	b2db      	uxtb	r3, r3
 8011222:	2b00      	cmp	r3, #0
 8011224:	bf14      	ite	ne
 8011226:	2301      	movne	r3, #1
 8011228:	2300      	moveq	r3, #0
 801122a:	b2db      	uxtb	r3, r3
 801122c:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801122e:	4b39      	ldr	r3, [pc, #228]	@ (8011314 <Send+0x1b0>)
 8011230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011232:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8011234:	4b37      	ldr	r3, [pc, #220]	@ (8011314 <Send+0x1b0>)
 8011236:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801123a:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 801123c:	4b35      	ldr	r3, [pc, #212]	@ (8011314 <Send+0x1b0>)
 801123e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8011242:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011244:	4b33      	ldr	r3, [pc, #204]	@ (8011314 <Send+0x1b0>)
 8011246:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801124a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801124e:	4b31      	ldr	r3, [pc, #196]	@ (8011314 <Send+0x1b0>)
 8011250:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011254:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011258:	4b2e      	ldr	r3, [pc, #184]	@ (8011314 <Send+0x1b0>)
 801125a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801125e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8011262:	4b2c      	ldr	r3, [pc, #176]	@ (8011314 <Send+0x1b0>)
 8011264:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011268:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 801126c:	4b29      	ldr	r3, [pc, #164]	@ (8011314 <Send+0x1b0>)
 801126e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8011272:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8011274:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011278:	f107 0014 	add.w	r0, r7, #20
 801127c:	4a26      	ldr	r2, [pc, #152]	@ (8011318 <Send+0x1b4>)
 801127e:	4927      	ldr	r1, [pc, #156]	@ (801131c <Send+0x1b8>)
 8011280:	f002 fd0a 	bl	8013c98 <LoRaMacAdrCalcNext>
 8011284:	4603      	mov	r3, r0
 8011286:	461a      	mov	r2, r3
 8011288:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801128c:	f362 1386 	bfi	r3, r2, #6, #1
 8011290:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011294:	7afa      	ldrb	r2, [r7, #11]
 8011296:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 801129a:	893b      	ldrh	r3, [r7, #8]
 801129c:	9300      	str	r3, [sp, #0]
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	68f8      	ldr	r0, [r7, #12]
 80112a2:	f000 fc5d 	bl	8011b60 <PrepareFrame>
 80112a6:	4603      	mov	r3, r0
 80112a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80112ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d003      	beq.n	80112bc <Send+0x158>
 80112b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80112b8:	2b0a      	cmp	r3, #10
 80112ba:	d107      	bne.n	80112cc <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 80112bc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80112c0:	4618      	mov	r0, r3
 80112c2:	f000 f961 	bl	8011588 <ScheduleTx>
 80112c6:	4603      	mov	r3, r0
 80112c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 80112cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d00a      	beq.n	80112ea <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 80112d4:	4a0f      	ldr	r2, [pc, #60]	@ (8011314 <Send+0x1b0>)
 80112d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80112da:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 80112de:	4a0d      	ldr	r2, [pc, #52]	@ (8011314 <Send+0x1b0>)
 80112e0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80112e4:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 80112e8:	e00d      	b.n	8011306 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 80112ea:	4b0a      	ldr	r3, [pc, #40]	@ (8011314 <Send+0x1b0>)
 80112ec:	2200      	movs	r2, #0
 80112ee:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80112f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112f4:	4a07      	ldr	r2, [pc, #28]	@ (8011314 <Send+0x1b0>)
 80112f6:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80112f8:	f002 ff9a 	bl	8014230 <LoRaMacCommandsRemoveNoneStickyCmds>
 80112fc:	4603      	mov	r3, r0
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d001      	beq.n	8011306 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011302:	2313      	movs	r3, #19
 8011304:	e001      	b.n	801130a <Send+0x1a6>
        }
    }
    return status;
 8011306:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801130a:	4618      	mov	r0, r3
 801130c:	3730      	adds	r7, #48	@ 0x30
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	20000c0c 	.word	0x20000c0c
 8011318:	20000c44 	.word	0x20000c44
 801131c:	20000c45 	.word	0x20000c45

08011320 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b084      	sub	sp, #16
 8011324:	af00      	add	r7, sp, #0
 8011326:	4603      	mov	r3, r0
 8011328:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801132a:	2300      	movs	r3, #0
 801132c:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 801132e:	2300      	movs	r3, #0
 8011330:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8011332:	2301      	movs	r3, #1
 8011334:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8011336:	79fb      	ldrb	r3, [r7, #7]
 8011338:	2bff      	cmp	r3, #255	@ 0xff
 801133a:	d11f      	bne.n	801137c <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 801133c:	2000      	movs	r0, #0
 801133e:	f7ff f931 	bl	80105a4 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8011342:	4b15      	ldr	r3, [pc, #84]	@ (8011398 <SendReJoinReq+0x78>)
 8011344:	2200      	movs	r2, #0
 8011346:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 801134a:	4b13      	ldr	r3, [pc, #76]	@ (8011398 <SendReJoinReq+0x78>)
 801134c:	4a13      	ldr	r2, [pc, #76]	@ (801139c <SendReJoinReq+0x7c>)
 801134e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011352:	4b11      	ldr	r3, [pc, #68]	@ (8011398 <SendReJoinReq+0x78>)
 8011354:	22ff      	movs	r2, #255	@ 0xff
 8011356:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 801135a:	7b3b      	ldrb	r3, [r7, #12]
 801135c:	f36f 1347 	bfc	r3, #5, #3
 8011360:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8011362:	7b3a      	ldrb	r2, [r7, #12]
 8011364:	4b0c      	ldr	r3, [pc, #48]	@ (8011398 <SendReJoinReq+0x78>)
 8011366:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 801136a:	480d      	ldr	r0, [pc, #52]	@ (80113a0 <SendReJoinReq+0x80>)
 801136c:	f7fc fa20 	bl	800d7b0 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8011370:	480c      	ldr	r0, [pc, #48]	@ (80113a4 <SendReJoinReq+0x84>)
 8011372:	f7fc f9ed 	bl	800d750 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8011376:	2300      	movs	r3, #0
 8011378:	73fb      	strb	r3, [r7, #15]

            break;
 801137a:	e002      	b.n	8011382 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801137c:	2302      	movs	r3, #2
 801137e:	73bb      	strb	r3, [r7, #14]
            break;
 8011380:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011382:	7bfb      	ldrb	r3, [r7, #15]
 8011384:	4618      	mov	r0, r3
 8011386:	f000 f8ff 	bl	8011588 <ScheduleTx>
 801138a:	4603      	mov	r3, r0
 801138c:	73bb      	strb	r3, [r7, #14]
    return status;
 801138e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011390:	4618      	mov	r0, r3
 8011392:	3710      	adds	r7, #16
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}
 8011398:	20000704 	.word	0x20000704
 801139c:	20000706 	.word	0x20000706
 80113a0:	20000812 	.word	0x20000812
 80113a4:	2000081a 	.word	0x2000081a

080113a8 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80113ac:	f002 fce3 	bl	8013d76 <LoRaMacClassBIsBeaconExpected>
 80113b0:	4603      	mov	r3, r0
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d001      	beq.n	80113ba <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80113b6:	230e      	movs	r3, #14
 80113b8:	e013      	b.n	80113e2 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80113ba:	4b0b      	ldr	r3, [pc, #44]	@ (80113e8 <CheckForClassBCollision+0x40>)
 80113bc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80113c0:	2b01      	cmp	r3, #1
 80113c2:	d10d      	bne.n	80113e0 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80113c4:	f002 fcde 	bl	8013d84 <LoRaMacClassBIsPingExpected>
 80113c8:	4603      	mov	r3, r0
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d001      	beq.n	80113d2 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80113ce:	230f      	movs	r3, #15
 80113d0:	e007      	b.n	80113e2 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80113d2:	f002 fcde 	bl	8013d92 <LoRaMacClassBIsMulticastExpected>
 80113d6:	4603      	mov	r3, r0
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d001      	beq.n	80113e0 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80113dc:	230f      	movs	r3, #15
 80113de:	e000      	b.n	80113e2 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 80113e0:	2300      	movs	r3, #0
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	bd80      	pop	{r7, pc}
 80113e6:	bf00      	nop
 80113e8:	20000c0c 	.word	0x20000c0c

080113ec <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80113ec:	b590      	push	{r4, r7, lr}
 80113ee:	b083      	sub	sp, #12
 80113f0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80113f2:	4b2d      	ldr	r3, [pc, #180]	@ (80114a8 <ComputeRxWindowParameters+0xbc>)
 80113f4:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80113f8:	4b2b      	ldr	r3, [pc, #172]	@ (80114a8 <ComputeRxWindowParameters+0xbc>)
 80113fa:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80113fe:	4b2a      	ldr	r3, [pc, #168]	@ (80114a8 <ComputeRxWindowParameters+0xbc>)
 8011400:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 8011404:	4b28      	ldr	r3, [pc, #160]	@ (80114a8 <ComputeRxWindowParameters+0xbc>)
 8011406:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 801140a:	4b27      	ldr	r3, [pc, #156]	@ (80114a8 <ComputeRxWindowParameters+0xbc>)
 801140c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011410:	b25b      	sxtb	r3, r3
 8011412:	f004 fda5 	bl	8015f60 <RegionApplyDrOffset>
 8011416:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011418:	b259      	sxtb	r1, r3
 801141a:	4b23      	ldr	r3, [pc, #140]	@ (80114a8 <ComputeRxWindowParameters+0xbc>)
 801141c:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011420:	4b21      	ldr	r3, [pc, #132]	@ (80114a8 <ComputeRxWindowParameters+0xbc>)
 8011422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011424:	4821      	ldr	r0, [pc, #132]	@ (80114ac <ComputeRxWindowParameters+0xc0>)
 8011426:	9000      	str	r0, [sp, #0]
 8011428:	4620      	mov	r0, r4
 801142a:	f004 fca9 	bl	8015d80 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801142e:	4b1e      	ldr	r3, [pc, #120]	@ (80114a8 <ComputeRxWindowParameters+0xbc>)
 8011430:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8011434:	4b1c      	ldr	r3, [pc, #112]	@ (80114a8 <ComputeRxWindowParameters+0xbc>)
 8011436:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801143a:	b259      	sxtb	r1, r3
 801143c:	4b1a      	ldr	r3, [pc, #104]	@ (80114a8 <ComputeRxWindowParameters+0xbc>)
 801143e:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011442:	4b19      	ldr	r3, [pc, #100]	@ (80114a8 <ComputeRxWindowParameters+0xbc>)
 8011444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011446:	4c1a      	ldr	r4, [pc, #104]	@ (80114b0 <ComputeRxWindowParameters+0xc4>)
 8011448:	9400      	str	r4, [sp, #0]
 801144a:	f004 fc99 	bl	8015d80 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801144e:	4b16      	ldr	r3, [pc, #88]	@ (80114a8 <ComputeRxWindowParameters+0xbc>)
 8011450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011452:	4a18      	ldr	r2, [pc, #96]	@ (80114b4 <ComputeRxWindowParameters+0xc8>)
 8011454:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8011458:	4413      	add	r3, r2
 801145a:	4a16      	ldr	r2, [pc, #88]	@ (80114b4 <ComputeRxWindowParameters+0xc8>)
 801145c:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011460:	4b11      	ldr	r3, [pc, #68]	@ (80114a8 <ComputeRxWindowParameters+0xbc>)
 8011462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011464:	4a13      	ldr	r2, [pc, #76]	@ (80114b4 <ComputeRxWindowParameters+0xc8>)
 8011466:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 801146a:	4413      	add	r3, r2
 801146c:	4a11      	ldr	r2, [pc, #68]	@ (80114b4 <ComputeRxWindowParameters+0xc8>)
 801146e:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8011472:	4b10      	ldr	r3, [pc, #64]	@ (80114b4 <ComputeRxWindowParameters+0xc8>)
 8011474:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011478:	2b04      	cmp	r3, #4
 801147a:	d011      	beq.n	80114a0 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801147c:	4b0a      	ldr	r3, [pc, #40]	@ (80114a8 <ComputeRxWindowParameters+0xbc>)
 801147e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011480:	4a0c      	ldr	r2, [pc, #48]	@ (80114b4 <ComputeRxWindowParameters+0xc8>)
 8011482:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8011486:	4413      	add	r3, r2
 8011488:	4a0a      	ldr	r2, [pc, #40]	@ (80114b4 <ComputeRxWindowParameters+0xc8>)
 801148a:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801148e:	4b06      	ldr	r3, [pc, #24]	@ (80114a8 <ComputeRxWindowParameters+0xbc>)
 8011490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011492:	4a08      	ldr	r2, [pc, #32]	@ (80114b4 <ComputeRxWindowParameters+0xc8>)
 8011494:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 8011498:	4413      	add	r3, r2
 801149a:	4a06      	ldr	r2, [pc, #24]	@ (80114b4 <ComputeRxWindowParameters+0xc8>)
 801149c:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 80114a0:	bf00      	nop
 80114a2:	3704      	adds	r7, #4
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd90      	pop	{r4, r7, pc}
 80114a8:	20000c0c 	.word	0x20000c0c
 80114ac:	20000abc 	.word	0x20000abc
 80114b0:	20000ad0 	.word	0x20000ad0
 80114b4:	20000704 	.word	0x20000704

080114b8 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 80114be:	2300      	movs	r3, #0
 80114c0:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80114c2:	4b13      	ldr	r3, [pc, #76]	@ (8011510 <VerifyTxFrame+0x58>)
 80114c4:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d01b      	beq.n	8011504 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80114cc:	1d3b      	adds	r3, r7, #4
 80114ce:	4618      	mov	r0, r3
 80114d0:	f002 fefe 	bl	80142d0 <LoRaMacCommandsGetSizeSerializedCmds>
 80114d4:	4603      	mov	r3, r0
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d001      	beq.n	80114de <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80114da:	2313      	movs	r3, #19
 80114dc:	e013      	b.n	8011506 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80114de:	4b0d      	ldr	r3, [pc, #52]	@ (8011514 <VerifyTxFrame+0x5c>)
 80114e0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80114e4:	4a0a      	ldr	r2, [pc, #40]	@ (8011510 <VerifyTxFrame+0x58>)
 80114e6:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 80114ea:	687a      	ldr	r2, [r7, #4]
 80114ec:	b2d2      	uxtb	r2, r2
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7ff f968 	bl	80107c4 <ValidatePayloadLength>
 80114f4:	4603      	mov	r3, r0
 80114f6:	f083 0301 	eor.w	r3, r3, #1
 80114fa:	b2db      	uxtb	r3, r3
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d001      	beq.n	8011504 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011500:	2308      	movs	r3, #8
 8011502:	e000      	b.n	8011506 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8011504:	2300      	movs	r3, #0
}
 8011506:	4618      	mov	r0, r3
 8011508:	3708      	adds	r7, #8
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}
 801150e:	bf00      	nop
 8011510:	20000c0c 	.word	0x20000c0c
 8011514:	20000704 	.word	0x20000704

08011518 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b082      	sub	sp, #8
 801151c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 801151e:	4b18      	ldr	r3, [pc, #96]	@ (8011580 <SerializeTxFrame+0x68>)
 8011520:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011524:	2b00      	cmp	r3, #0
 8011526:	d002      	beq.n	801152e <SerializeTxFrame+0x16>
 8011528:	2b04      	cmp	r3, #4
 801152a:	d011      	beq.n	8011550 <SerializeTxFrame+0x38>
 801152c:	e021      	b.n	8011572 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801152e:	4815      	ldr	r0, [pc, #84]	@ (8011584 <SerializeTxFrame+0x6c>)
 8011530:	f004 fa28 	bl	8015984 <LoRaMacSerializerJoinRequest>
 8011534:	4603      	mov	r3, r0
 8011536:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011538:	79fb      	ldrb	r3, [r7, #7]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d001      	beq.n	8011542 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801153e:	2311      	movs	r3, #17
 8011540:	e01a      	b.n	8011578 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011542:	4b0f      	ldr	r3, [pc, #60]	@ (8011580 <SerializeTxFrame+0x68>)
 8011544:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011548:	461a      	mov	r2, r3
 801154a:	4b0d      	ldr	r3, [pc, #52]	@ (8011580 <SerializeTxFrame+0x68>)
 801154c:	801a      	strh	r2, [r3, #0]
            break;
 801154e:	e012      	b.n	8011576 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011550:	480c      	ldr	r0, [pc, #48]	@ (8011584 <SerializeTxFrame+0x6c>)
 8011552:	f004 fa99 	bl	8015a88 <LoRaMacSerializerData>
 8011556:	4603      	mov	r3, r0
 8011558:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801155a:	79fb      	ldrb	r3, [r7, #7]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d001      	beq.n	8011564 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011560:	2311      	movs	r3, #17
 8011562:	e009      	b.n	8011578 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011564:	4b06      	ldr	r3, [pc, #24]	@ (8011580 <SerializeTxFrame+0x68>)
 8011566:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 801156a:	461a      	mov	r2, r3
 801156c:	4b04      	ldr	r3, [pc, #16]	@ (8011580 <SerializeTxFrame+0x68>)
 801156e:	801a      	strh	r2, [r3, #0]
            break;
 8011570:	e001      	b.n	8011576 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011572:	2303      	movs	r3, #3
 8011574:	e000      	b.n	8011578 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8011576:	2300      	movs	r3, #0
}
 8011578:	4618      	mov	r0, r3
 801157a:	3708      	adds	r7, #8
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}
 8011580:	20000704 	.word	0x20000704
 8011584:	2000080c 	.word	0x2000080c

08011588 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b090      	sub	sp, #64	@ 0x40
 801158c:	af02      	add	r7, sp, #8
 801158e:	4603      	mov	r3, r0
 8011590:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011592:	2303      	movs	r3, #3
 8011594:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011598:	f7ff ff06 	bl	80113a8 <CheckForClassBCollision>
 801159c:	4603      	mov	r3, r0
 801159e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 80115a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d002      	beq.n	80115b0 <ScheduleTx+0x28>
    {
        return status;
 80115aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115ae:	e092      	b.n	80116d6 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 80115b0:	f000 f8fe 	bl	80117b0 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 80115b4:	f7ff ffb0 	bl	8011518 <SerializeTxFrame>
 80115b8:	4603      	mov	r3, r0
 80115ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 80115be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d002      	beq.n	80115cc <ScheduleTx+0x44>
    {
        return status;
 80115c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115ca:	e084      	b.n	80116d6 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80115cc:	4b44      	ldr	r3, [pc, #272]	@ (80116e0 <ScheduleTx+0x158>)
 80115ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115d0:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80115d2:	4b43      	ldr	r3, [pc, #268]	@ (80116e0 <ScheduleTx+0x158>)
 80115d4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80115d8:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80115da:	4b41      	ldr	r3, [pc, #260]	@ (80116e0 <ScheduleTx+0x158>)
 80115dc:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80115e0:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80115e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80115e6:	4618      	mov	r0, r3
 80115e8:	f00a fbf2 	bl	801bdd0 <SysTimeGetMcuTime>
 80115ec:	4638      	mov	r0, r7
 80115ee:	4b3c      	ldr	r3, [pc, #240]	@ (80116e0 <ScheduleTx+0x158>)
 80115f0:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 80115f4:	9200      	str	r2, [sp, #0]
 80115f6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80115fa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80115fe:	ca06      	ldmia	r2, {r1, r2}
 8011600:	f00a fb47 	bl	801bc92 <SysTimeSub>
 8011604:	f107 0320 	add.w	r3, r7, #32
 8011608:	463a      	mov	r2, r7
 801160a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801160e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8011612:	4b33      	ldr	r3, [pc, #204]	@ (80116e0 <ScheduleTx+0x158>)
 8011614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011616:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8011618:	2300      	movs	r3, #0
 801161a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 801161e:	2301      	movs	r3, #1
 8011620:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011622:	4b30      	ldr	r3, [pc, #192]	@ (80116e4 <ScheduleTx+0x15c>)
 8011624:	881b      	ldrh	r3, [r3, #0]
 8011626:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011628:	4b2d      	ldr	r3, [pc, #180]	@ (80116e0 <ScheduleTx+0x158>)
 801162a:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 801162e:	2b00      	cmp	r3, #0
 8011630:	d104      	bne.n	801163c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011632:	2301      	movs	r3, #1
 8011634:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 8011638:	2300      	movs	r3, #0
 801163a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 801163c:	4b28      	ldr	r3, [pc, #160]	@ (80116e0 <ScheduleTx+0x158>)
 801163e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011642:	f107 0114 	add.w	r1, r7, #20
 8011646:	4b28      	ldr	r3, [pc, #160]	@ (80116e8 <ScheduleTx+0x160>)
 8011648:	9300      	str	r3, [sp, #0]
 801164a:	4b28      	ldr	r3, [pc, #160]	@ (80116ec <ScheduleTx+0x164>)
 801164c:	4a28      	ldr	r2, [pc, #160]	@ (80116f0 <ScheduleTx+0x168>)
 801164e:	f004 fc5d 	bl	8015f0c <RegionNextChannel>
 8011652:	4603      	mov	r3, r0
 8011654:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 8011658:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801165c:	2b00      	cmp	r3, #0
 801165e:	d025      	beq.n	80116ac <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8011660:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011664:	2b0b      	cmp	r3, #11
 8011666:	d11e      	bne.n	80116a6 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011668:	4b1e      	ldr	r3, [pc, #120]	@ (80116e4 <ScheduleTx+0x15c>)
 801166a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 801166e:	2b00      	cmp	r3, #0
 8011670:	d01c      	beq.n	80116ac <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8011672:	7bfb      	ldrb	r3, [r7, #15]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d013      	beq.n	80116a0 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011678:	4b1a      	ldr	r3, [pc, #104]	@ (80116e4 <ScheduleTx+0x15c>)
 801167a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801167e:	f043 0320 	orr.w	r3, r3, #32
 8011682:	4a18      	ldr	r2, [pc, #96]	@ (80116e4 <ScheduleTx+0x15c>)
 8011684:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011688:	4b16      	ldr	r3, [pc, #88]	@ (80116e4 <ScheduleTx+0x15c>)
 801168a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 801168e:	4619      	mov	r1, r3
 8011690:	4818      	ldr	r0, [pc, #96]	@ (80116f4 <ScheduleTx+0x16c>)
 8011692:	f00b f93b 	bl	801c90c <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8011696:	4817      	ldr	r0, [pc, #92]	@ (80116f4 <ScheduleTx+0x16c>)
 8011698:	f00b f85a 	bl	801c750 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 801169c:	2300      	movs	r3, #0
 801169e:	e01a      	b.n	80116d6 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 80116a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80116a4:	e017      	b.n	80116d6 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 80116a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80116aa:	e014      	b.n	80116d6 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 80116ac:	f7ff fe9e 	bl	80113ec <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 80116b0:	f7ff ff02 	bl	80114b8 <VerifyTxFrame>
 80116b4:	4603      	mov	r3, r0
 80116b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 80116ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d002      	beq.n	80116c8 <ScheduleTx+0x140>
    {
        return status;
 80116c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80116c6:	e006      	b.n	80116d6 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 80116c8:	4b06      	ldr	r3, [pc, #24]	@ (80116e4 <ScheduleTx+0x15c>)
 80116ca:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 80116ce:	4618      	mov	r0, r3
 80116d0:	f000 fb60 	bl	8011d94 <SendFrameOnChannel>
 80116d4:	4603      	mov	r3, r0
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3738      	adds	r7, #56	@ 0x38
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}
 80116de:	bf00      	nop
 80116e0:	20000c0c 	.word	0x20000c0c
 80116e4:	20000704 	.word	0x20000704
 80116e8:	20000c3c 	.word	0x20000c3c
 80116ec:	20000b88 	.word	0x20000b88
 80116f0:	20000b15 	.word	0x20000b15
 80116f4:	20000a6c 	.word	0x20000a6c

080116f8 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b084      	sub	sp, #16
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	4603      	mov	r3, r0
 8011700:	460a      	mov	r2, r1
 8011702:	71fb      	strb	r3, [r7, #7]
 8011704:	4613      	mov	r3, r2
 8011706:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011708:	2313      	movs	r3, #19
 801170a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 801170c:	2300      	movs	r3, #0
 801170e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011710:	4b25      	ldr	r3, [pc, #148]	@ (80117a8 <SecureFrame+0xb0>)
 8011712:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011716:	2b00      	cmp	r3, #0
 8011718:	d002      	beq.n	8011720 <SecureFrame+0x28>
 801171a:	2b04      	cmp	r3, #4
 801171c:	d011      	beq.n	8011742 <SecureFrame+0x4a>
 801171e:	e03b      	b.n	8011798 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011720:	4822      	ldr	r0, [pc, #136]	@ (80117ac <SecureFrame+0xb4>)
 8011722:	f003 fcf9 	bl	8015118 <LoRaMacCryptoPrepareJoinRequest>
 8011726:	4603      	mov	r3, r0
 8011728:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801172a:	7bfb      	ldrb	r3, [r7, #15]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d001      	beq.n	8011734 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011730:	2311      	movs	r3, #17
 8011732:	e034      	b.n	801179e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011734:	4b1c      	ldr	r3, [pc, #112]	@ (80117a8 <SecureFrame+0xb0>)
 8011736:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 801173a:	461a      	mov	r2, r3
 801173c:	4b1a      	ldr	r3, [pc, #104]	@ (80117a8 <SecureFrame+0xb0>)
 801173e:	801a      	strh	r2, [r3, #0]
            break;
 8011740:	e02c      	b.n	801179c <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011742:	f107 0308 	add.w	r3, r7, #8
 8011746:	4618      	mov	r0, r3
 8011748:	f003 fbf6 	bl	8014f38 <LoRaMacCryptoGetFCntUp>
 801174c:	4603      	mov	r3, r0
 801174e:	2b00      	cmp	r3, #0
 8011750:	d001      	beq.n	8011756 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011752:	2312      	movs	r3, #18
 8011754:	e023      	b.n	801179e <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8011756:	4b14      	ldr	r3, [pc, #80]	@ (80117a8 <SecureFrame+0xb0>)
 8011758:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 801175c:	2b00      	cmp	r3, #0
 801175e:	d104      	bne.n	801176a <SecureFrame+0x72>
 8011760:	4b11      	ldr	r3, [pc, #68]	@ (80117a8 <SecureFrame+0xb0>)
 8011762:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 8011766:	2b01      	cmp	r3, #1
 8011768:	d902      	bls.n	8011770 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	3b01      	subs	r3, #1
 801176e:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011770:	68b8      	ldr	r0, [r7, #8]
 8011772:	79ba      	ldrb	r2, [r7, #6]
 8011774:	79f9      	ldrb	r1, [r7, #7]
 8011776:	4b0d      	ldr	r3, [pc, #52]	@ (80117ac <SecureFrame+0xb4>)
 8011778:	f003 fdfc 	bl	8015374 <LoRaMacCryptoSecureMessage>
 801177c:	4603      	mov	r3, r0
 801177e:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011780:	7bfb      	ldrb	r3, [r7, #15]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d001      	beq.n	801178a <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011786:	2311      	movs	r3, #17
 8011788:	e009      	b.n	801179e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801178a:	4b07      	ldr	r3, [pc, #28]	@ (80117a8 <SecureFrame+0xb0>)
 801178c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011790:	461a      	mov	r2, r3
 8011792:	4b05      	ldr	r3, [pc, #20]	@ (80117a8 <SecureFrame+0xb0>)
 8011794:	801a      	strh	r2, [r3, #0]
            break;
 8011796:	e001      	b.n	801179c <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011798:	2303      	movs	r3, #3
 801179a:	e000      	b.n	801179e <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 801179c:	2300      	movs	r3, #0
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3710      	adds	r7, #16
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}
 80117a6:	bf00      	nop
 80117a8:	20000704 	.word	0x20000704
 80117ac:	2000080c 	.word	0x2000080c

080117b0 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 80117b0:	b480      	push	{r7}
 80117b2:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80117b4:	4b09      	ldr	r3, [pc, #36]	@ (80117dc <CalculateBackOff+0x2c>)
 80117b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d10a      	bne.n	80117d2 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80117bc:	4b07      	ldr	r3, [pc, #28]	@ (80117dc <CalculateBackOff+0x2c>)
 80117be:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 80117c2:	3b01      	subs	r3, #1
 80117c4:	4a06      	ldr	r2, [pc, #24]	@ (80117e0 <CalculateBackOff+0x30>)
 80117c6:	f8d2 2414 	ldr.w	r2, [r2, #1044]	@ 0x414
 80117ca:	fb02 f303 	mul.w	r3, r2, r3
 80117ce:	4a03      	ldr	r2, [pc, #12]	@ (80117dc <CalculateBackOff+0x2c>)
 80117d0:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 80117d2:	bf00      	nop
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bc80      	pop	{r7}
 80117d8:	4770      	bx	lr
 80117da:	bf00      	nop
 80117dc:	20000c0c 	.word	0x20000c0c
 80117e0:	20000704 	.word	0x20000704

080117e4 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b082      	sub	sp, #8
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	4603      	mov	r3, r0
 80117ec:	7139      	strb	r1, [r7, #4]
 80117ee:	71fb      	strb	r3, [r7, #7]
 80117f0:	4613      	mov	r3, r2
 80117f2:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80117f4:	79fb      	ldrb	r3, [r7, #7]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d002      	beq.n	8011800 <RemoveMacCommands+0x1c>
 80117fa:	79fb      	ldrb	r3, [r7, #7]
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	d10d      	bne.n	801181c <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011800:	79bb      	ldrb	r3, [r7, #6]
 8011802:	2b01      	cmp	r3, #1
 8011804:	d108      	bne.n	8011818 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011806:	793b      	ldrb	r3, [r7, #4]
 8011808:	f003 0320 	and.w	r3, r3, #32
 801180c:	b2db      	uxtb	r3, r3
 801180e:	2b00      	cmp	r3, #0
 8011810:	d004      	beq.n	801181c <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011812:	f002 fd31 	bl	8014278 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8011816:	e001      	b.n	801181c <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8011818:	f002 fd2e 	bl	8014278 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 801181c:	bf00      	nop
 801181e:	3708      	adds	r7, #8
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}

08011824 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8011824:	b5b0      	push	{r4, r5, r7, lr}
 8011826:	b090      	sub	sp, #64	@ 0x40
 8011828:	af00      	add	r7, sp, #0
 801182a:	4603      	mov	r3, r0
 801182c:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 801182e:	79fb      	ldrb	r3, [r7, #7]
 8011830:	f083 0301 	eor.w	r3, r3, #1
 8011834:	b2db      	uxtb	r3, r3
 8011836:	2b00      	cmp	r3, #0
 8011838:	d003      	beq.n	8011842 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801183a:	4b80      	ldr	r3, [pc, #512]	@ (8011a3c <ResetMacParameters+0x218>)
 801183c:	2200      	movs	r2, #0
 801183e:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8011842:	4b7e      	ldr	r3, [pc, #504]	@ (8011a3c <ResetMacParameters+0x218>)
 8011844:	2200      	movs	r2, #0
 8011846:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8011848:	4b7d      	ldr	r3, [pc, #500]	@ (8011a40 <ResetMacParameters+0x21c>)
 801184a:	2200      	movs	r2, #0
 801184c:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8011850:	4b7b      	ldr	r3, [pc, #492]	@ (8011a40 <ResetMacParameters+0x21c>)
 8011852:	2201      	movs	r2, #1
 8011854:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011858:	4b79      	ldr	r3, [pc, #484]	@ (8011a40 <ResetMacParameters+0x21c>)
 801185a:	2201      	movs	r2, #1
 801185c:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetry = false;
 8011860:	4b77      	ldr	r3, [pc, #476]	@ (8011a40 <ResetMacParameters+0x21c>)
 8011862:	2200      	movs	r2, #0
 8011864:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8011868:	4b74      	ldr	r3, [pc, #464]	@ (8011a3c <ResetMacParameters+0x218>)
 801186a:	2200      	movs	r2, #0
 801186c:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8011870:	4b72      	ldr	r3, [pc, #456]	@ (8011a3c <ResetMacParameters+0x218>)
 8011872:	2201      	movs	r2, #1
 8011874:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011878:	4b70      	ldr	r3, [pc, #448]	@ (8011a3c <ResetMacParameters+0x218>)
 801187a:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 801187e:	4b6f      	ldr	r3, [pc, #444]	@ (8011a3c <ResetMacParameters+0x218>)
 8011880:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011884:	4b6d      	ldr	r3, [pc, #436]	@ (8011a3c <ResetMacParameters+0x218>)
 8011886:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 801188a:	4b6c      	ldr	r3, [pc, #432]	@ (8011a3c <ResetMacParameters+0x218>)
 801188c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8011890:	4b6a      	ldr	r3, [pc, #424]	@ (8011a3c <ResetMacParameters+0x218>)
 8011892:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 8011896:	4b69      	ldr	r3, [pc, #420]	@ (8011a3c <ResetMacParameters+0x218>)
 8011898:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801189c:	4b67      	ldr	r3, [pc, #412]	@ (8011a3c <ResetMacParameters+0x218>)
 801189e:	4a67      	ldr	r2, [pc, #412]	@ (8011a3c <ResetMacParameters+0x218>)
 80118a0:	336c      	adds	r3, #108	@ 0x6c
 80118a2:	32b4      	adds	r2, #180	@ 0xb4
 80118a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118a8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80118ac:	4b63      	ldr	r3, [pc, #396]	@ (8011a3c <ResetMacParameters+0x218>)
 80118ae:	4a63      	ldr	r2, [pc, #396]	@ (8011a3c <ResetMacParameters+0x218>)
 80118b0:	3374      	adds	r3, #116	@ 0x74
 80118b2:	32bc      	adds	r2, #188	@ 0xbc
 80118b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118b8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80118bc:	4b5f      	ldr	r3, [pc, #380]	@ (8011a3c <ResetMacParameters+0x218>)
 80118be:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 80118c2:	4b5e      	ldr	r3, [pc, #376]	@ (8011a3c <ResetMacParameters+0x218>)
 80118c4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80118c8:	4b5c      	ldr	r3, [pc, #368]	@ (8011a3c <ResetMacParameters+0x218>)
 80118ca:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 80118ce:	4b5b      	ldr	r3, [pc, #364]	@ (8011a3c <ResetMacParameters+0x218>)
 80118d0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80118d4:	4b59      	ldr	r3, [pc, #356]	@ (8011a3c <ResetMacParameters+0x218>)
 80118d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80118da:	4a58      	ldr	r2, [pc, #352]	@ (8011a3c <ResetMacParameters+0x218>)
 80118dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80118e0:	4b56      	ldr	r3, [pc, #344]	@ (8011a3c <ResetMacParameters+0x218>)
 80118e2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80118e6:	4a55      	ldr	r2, [pc, #340]	@ (8011a3c <ResetMacParameters+0x218>)
 80118e8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80118ec:	4b53      	ldr	r3, [pc, #332]	@ (8011a3c <ResetMacParameters+0x218>)
 80118ee:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 80118f2:	4b52      	ldr	r3, [pc, #328]	@ (8011a3c <ResetMacParameters+0x218>)
 80118f4:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80118f8:	4b50      	ldr	r3, [pc, #320]	@ (8011a3c <ResetMacParameters+0x218>)
 80118fa:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 80118fe:	4b4f      	ldr	r3, [pc, #316]	@ (8011a3c <ResetMacParameters+0x218>)
 8011900:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 8011904:	4b4e      	ldr	r3, [pc, #312]	@ (8011a40 <ResetMacParameters+0x21c>)
 8011906:	2200      	movs	r2, #0
 8011908:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 801190c:	4b4b      	ldr	r3, [pc, #300]	@ (8011a3c <ResetMacParameters+0x218>)
 801190e:	2200      	movs	r2, #0
 8011910:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8011914:	4b49      	ldr	r3, [pc, #292]	@ (8011a3c <ResetMacParameters+0x218>)
 8011916:	2200      	movs	r2, #0
 8011918:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 801191c:	4b47      	ldr	r3, [pc, #284]	@ (8011a3c <ResetMacParameters+0x218>)
 801191e:	2200      	movs	r2, #0
 8011920:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 8011924:	4b45      	ldr	r3, [pc, #276]	@ (8011a3c <ResetMacParameters+0x218>)
 8011926:	2200      	movs	r2, #0
 8011928:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 801192c:	4b43      	ldr	r3, [pc, #268]	@ (8011a3c <ResetMacParameters+0x218>)
 801192e:	2200      	movs	r2, #0
 8011930:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8011934:	4b41      	ldr	r3, [pc, #260]	@ (8011a3c <ResetMacParameters+0x218>)
 8011936:	2200      	movs	r2, #0
 8011938:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 801193c:	4b3f      	ldr	r3, [pc, #252]	@ (8011a3c <ResetMacParameters+0x218>)
 801193e:	2200      	movs	r2, #0
 8011940:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8011944:	4b3d      	ldr	r3, [pc, #244]	@ (8011a3c <ResetMacParameters+0x218>)
 8011946:	2200      	movs	r2, #0
 8011948:	f883 2142 	strb.w	r2, [r3, #322]	@ 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 801194c:	4b3b      	ldr	r3, [pc, #236]	@ (8011a3c <ResetMacParameters+0x218>)
 801194e:	2200      	movs	r2, #0
 8011950:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8011954:	2301      	movs	r3, #1
 8011956:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011958:	4b3a      	ldr	r3, [pc, #232]	@ (8011a44 <ResetMacParameters+0x220>)
 801195a:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801195c:	4b3a      	ldr	r3, [pc, #232]	@ (8011a48 <ResetMacParameters+0x224>)
 801195e:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011960:	4b36      	ldr	r3, [pc, #216]	@ (8011a3c <ResetMacParameters+0x218>)
 8011962:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011966:	f107 020c 	add.w	r2, r7, #12
 801196a:	4611      	mov	r1, r2
 801196c:	4618      	mov	r0, r3
 801196e:	f004 f9b9 	bl	8015ce4 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8011972:	4b33      	ldr	r3, [pc, #204]	@ (8011a40 <ResetMacParameters+0x21c>)
 8011974:	2200      	movs	r2, #0
 8011976:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801197a:	4b31      	ldr	r3, [pc, #196]	@ (8011a40 <ResetMacParameters+0x21c>)
 801197c:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 8011980:	4b2f      	ldr	r3, [pc, #188]	@ (8011a40 <ResetMacParameters+0x21c>)
 8011982:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011986:	4b2d      	ldr	r3, [pc, #180]	@ (8011a3c <ResetMacParameters+0x218>)
 8011988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801198a:	4a2d      	ldr	r2, [pc, #180]	@ (8011a40 <ResetMacParameters+0x21c>)
 801198c:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011990:	4b2a      	ldr	r3, [pc, #168]	@ (8011a3c <ResetMacParameters+0x218>)
 8011992:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8011996:	4b2a      	ldr	r3, [pc, #168]	@ (8011a40 <ResetMacParameters+0x21c>)
 8011998:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801199c:	4b27      	ldr	r3, [pc, #156]	@ (8011a3c <ResetMacParameters+0x218>)
 801199e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80119a2:	4b27      	ldr	r3, [pc, #156]	@ (8011a40 <ResetMacParameters+0x21c>)
 80119a4:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 80119a8:	4b25      	ldr	r3, [pc, #148]	@ (8011a40 <ResetMacParameters+0x21c>)
 80119aa:	2200      	movs	r2, #0
 80119ac:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80119b0:	4b23      	ldr	r3, [pc, #140]	@ (8011a40 <ResetMacParameters+0x21c>)
 80119b2:	2201      	movs	r2, #1
 80119b4:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80119b8:	4a21      	ldr	r2, [pc, #132]	@ (8011a40 <ResetMacParameters+0x21c>)
 80119ba:	4b21      	ldr	r3, [pc, #132]	@ (8011a40 <ResetMacParameters+0x21c>)
 80119bc:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 80119c0:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 80119c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119c8:	682b      	ldr	r3, [r5, #0]
 80119ca:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80119cc:	4b1c      	ldr	r3, [pc, #112]	@ (8011a40 <ResetMacParameters+0x21c>)
 80119ce:	2201      	movs	r2, #1
 80119d0:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80119d4:	4b1a      	ldr	r3, [pc, #104]	@ (8011a40 <ResetMacParameters+0x21c>)
 80119d6:	2202      	movs	r2, #2
 80119d8:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80119dc:	2300      	movs	r3, #0
 80119de:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 80119e0:	2300      	movs	r3, #0
 80119e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 80119e4:	4b16      	ldr	r3, [pc, #88]	@ (8011a40 <ResetMacParameters+0x21c>)
 80119e6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d009      	beq.n	8011a02 <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80119ee:	4b14      	ldr	r3, [pc, #80]	@ (8011a40 <ResetMacParameters+0x21c>)
 80119f0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80119f4:	685b      	ldr	r3, [r3, #4]
 80119f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80119f8:	4b11      	ldr	r3, [pc, #68]	@ (8011a40 <ResetMacParameters+0x21c>)
 80119fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80119fe:	695b      	ldr	r3, [r3, #20]
 8011a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8011a02:	4b12      	ldr	r3, [pc, #72]	@ (8011a4c <ResetMacParameters+0x228>)
 8011a04:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8011a06:	4b12      	ldr	r3, [pc, #72]	@ (8011a50 <ResetMacParameters+0x22c>)
 8011a08:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8011a0a:	4b12      	ldr	r3, [pc, #72]	@ (8011a54 <ResetMacParameters+0x230>)
 8011a0c:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8011a0e:	4b12      	ldr	r3, [pc, #72]	@ (8011a58 <ResetMacParameters+0x234>)
 8011a10:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8011a12:	4b12      	ldr	r3, [pc, #72]	@ (8011a5c <ResetMacParameters+0x238>)
 8011a14:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8011a16:	4b12      	ldr	r3, [pc, #72]	@ (8011a60 <ResetMacParameters+0x23c>)
 8011a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8011a1a:	4b12      	ldr	r3, [pc, #72]	@ (8011a64 <ResetMacParameters+0x240>)
 8011a1c:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8011a1e:	4b12      	ldr	r3, [pc, #72]	@ (8011a68 <ResetMacParameters+0x244>)
 8011a20:	637b      	str	r3, [r7, #52]	@ 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8011a22:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8011a26:	f107 0318 	add.w	r3, r7, #24
 8011a2a:	4a10      	ldr	r2, [pc, #64]	@ (8011a6c <ResetMacParameters+0x248>)
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f002 f94b 	bl	8013cc8 <LoRaMacClassBInit>
}
 8011a32:	bf00      	nop
 8011a34:	3740      	adds	r7, #64	@ 0x40
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bdb0      	pop	{r4, r5, r7, pc}
 8011a3a:	bf00      	nop
 8011a3c:	20000c0c 	.word	0x20000c0c
 8011a40:	20000704 	.word	0x20000704
 8011a44:	20000e2c 	.word	0x20000e2c
 8011a48:	20000ed0 	.word	0x20000ed0
 8011a4c:	20000b60 	.word	0x20000b60
 8011a50:	20000b1c 	.word	0x20000b1c
 8011a54:	20000b4c 	.word	0x20000b4c
 8011a58:	20000b85 	.word	0x20000b85
 8011a5c:	20000cf0 	.word	0x20000cf0
 8011a60:	20000c54 	.word	0x20000c54
 8011a64:	20000c58 	.word	0x20000c58
 8011a68:	20000cf4 	.word	0x20000cf4
 8011a6c:	2000136c 	.word	0x2000136c

08011a70 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b082      	sub	sp, #8
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f00a fed6 	bl	801c82c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8011a80:	4b11      	ldr	r3, [pc, #68]	@ (8011ac8 <RxWindowSetup+0x58>)
 8011a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a84:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011a86:	4b11      	ldr	r3, [pc, #68]	@ (8011acc <RxWindowSetup+0x5c>)
 8011a88:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011a8c:	4a10      	ldr	r2, [pc, #64]	@ (8011ad0 <RxWindowSetup+0x60>)
 8011a8e:	6839      	ldr	r1, [r7, #0]
 8011a90:	4618      	mov	r0, r3
 8011a92:	f004 f98f 	bl	8015db4 <RegionRxConfig>
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d010      	beq.n	8011abe <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8011ad4 <RxWindowSetup+0x64>)
 8011a9e:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8011aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8011ad4 <RxWindowSetup+0x64>)
 8011aa4:	f883 245e 	strb.w	r2, [r3, #1118]	@ 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8011aa8:	4b07      	ldr	r3, [pc, #28]	@ (8011ac8 <RxWindowSetup+0x58>)
 8011aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011aac:	4a07      	ldr	r2, [pc, #28]	@ (8011acc <RxWindowSetup+0x5c>)
 8011aae:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8011ab0:	4610      	mov	r0, r2
 8011ab2:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	7cda      	ldrb	r2, [r3, #19]
 8011ab8:	4b06      	ldr	r3, [pc, #24]	@ (8011ad4 <RxWindowSetup+0x64>)
 8011aba:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 8011abe:	bf00      	nop
 8011ac0:	3708      	adds	r7, #8
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}
 8011ac6:	bf00      	nop
 8011ac8:	0801df78 	.word	0x0801df78
 8011acc:	20000c0c 	.word	0x20000c0c
 8011ad0:	20000b20 	.word	0x20000b20
 8011ad4:	20000704 	.word	0x20000704

08011ad8 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011ad8:	b590      	push	{r4, r7, lr}
 8011ada:	b083      	sub	sp, #12
 8011adc:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011ade:	4b1b      	ldr	r3, [pc, #108]	@ (8011b4c <OpenContinuousRxCWindow+0x74>)
 8011ae0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8011ae4:	4b19      	ldr	r3, [pc, #100]	@ (8011b4c <OpenContinuousRxCWindow+0x74>)
 8011ae6:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011aea:	b259      	sxtb	r1, r3
 8011aec:	4b17      	ldr	r3, [pc, #92]	@ (8011b4c <OpenContinuousRxCWindow+0x74>)
 8011aee:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011af2:	4b16      	ldr	r3, [pc, #88]	@ (8011b4c <OpenContinuousRxCWindow+0x74>)
 8011af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011af6:	4c16      	ldr	r4, [pc, #88]	@ (8011b50 <OpenContinuousRxCWindow+0x78>)
 8011af8:	9400      	str	r4, [sp, #0]
 8011afa:	f004 f941 	bl	8015d80 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011afe:	4b15      	ldr	r3, [pc, #84]	@ (8011b54 <OpenContinuousRxCWindow+0x7c>)
 8011b00:	2202      	movs	r2, #2
 8011b02:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011b06:	4b13      	ldr	r3, [pc, #76]	@ (8011b54 <OpenContinuousRxCWindow+0x7c>)
 8011b08:	2201      	movs	r2, #1
 8011b0a:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8011b4c <OpenContinuousRxCWindow+0x74>)
 8011b10:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011b14:	4a10      	ldr	r2, [pc, #64]	@ (8011b58 <OpenContinuousRxCWindow+0x80>)
 8011b16:	490e      	ldr	r1, [pc, #56]	@ (8011b50 <OpenContinuousRxCWindow+0x78>)
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f004 f94b 	bl	8015db4 <RegionRxConfig>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d00f      	beq.n	8011b44 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011b24:	4b0b      	ldr	r3, [pc, #44]	@ (8011b54 <OpenContinuousRxCWindow+0x7c>)
 8011b26:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8011b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8011b54 <OpenContinuousRxCWindow+0x7c>)
 8011b2c:	f883 245e 	strb.w	r2, [r3, #1118]	@ 0x45e
        Radio.Rx( 0 ); // Continuous mode
 8011b30:	4b0a      	ldr	r3, [pc, #40]	@ (8011b5c <OpenContinuousRxCWindow+0x84>)
 8011b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b34:	2000      	movs	r0, #0
 8011b36:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8011b38:	4b06      	ldr	r3, [pc, #24]	@ (8011b54 <OpenContinuousRxCWindow+0x7c>)
 8011b3a:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
 8011b3e:	4b05      	ldr	r3, [pc, #20]	@ (8011b54 <OpenContinuousRxCWindow+0x7c>)
 8011b40:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 8011b44:	bf00      	nop
 8011b46:	3704      	adds	r7, #4
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd90      	pop	{r4, r7, pc}
 8011b4c:	20000c0c 	.word	0x20000c0c
 8011b50:	20000ae4 	.word	0x20000ae4
 8011b54:	20000704 	.word	0x20000704
 8011b58:	20000b20 	.word	0x20000b20
 8011b5c:	0801df78 	.word	0x0801df78

08011b60 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b088      	sub	sp, #32
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	60f8      	str	r0, [r7, #12]
 8011b68:	60b9      	str	r1, [r7, #8]
 8011b6a:	603b      	str	r3, [r7, #0]
 8011b6c:	4613      	mov	r3, r2
 8011b6e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8011b70:	4b81      	ldr	r3, [pc, #516]	@ (8011d78 <PrepareFrame+0x218>)
 8011b72:	2200      	movs	r2, #0
 8011b74:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8011b76:	4b80      	ldr	r3, [pc, #512]	@ (8011d78 <PrepareFrame+0x218>)
 8011b78:	2200      	movs	r2, #0
 8011b7a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    uint32_t fCntUp = 0;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8011b82:	2300      	movs	r3, #0
 8011b84:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8011b86:	2300      	movs	r3, #0
 8011b88:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d101      	bne.n	8011b94 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8011b90:	2300      	movs	r3, #0
 8011b92:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8011b94:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011b96:	461a      	mov	r2, r3
 8011b98:	6839      	ldr	r1, [r7, #0]
 8011b9a:	4878      	ldr	r0, [pc, #480]	@ (8011d7c <PrepareFrame+0x21c>)
 8011b9c:	f006 fcaf 	bl	80184fe <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8011ba0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011ba2:	b2da      	uxtb	r2, r3
 8011ba4:	4b74      	ldr	r3, [pc, #464]	@ (8011d78 <PrepareFrame+0x218>)
 8011ba6:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	781a      	ldrb	r2, [r3, #0]
 8011bae:	4b72      	ldr	r3, [pc, #456]	@ (8011d78 <PrepareFrame+0x218>)
 8011bb0:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011bba:	b2db      	uxtb	r3, r3
 8011bbc:	2b07      	cmp	r3, #7
 8011bbe:	f000 80b9 	beq.w	8011d34 <PrepareFrame+0x1d4>
 8011bc2:	2b07      	cmp	r3, #7
 8011bc4:	f300 80ce 	bgt.w	8011d64 <PrepareFrame+0x204>
 8011bc8:	2b02      	cmp	r3, #2
 8011bca:	d006      	beq.n	8011bda <PrepareFrame+0x7a>
 8011bcc:	2b04      	cmp	r3, #4
 8011bce:	f040 80c9 	bne.w	8011d64 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8011bd2:	4b69      	ldr	r3, [pc, #420]	@ (8011d78 <PrepareFrame+0x218>)
 8011bd4:	2201      	movs	r2, #1
 8011bd6:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8011bda:	4b67      	ldr	r3, [pc, #412]	@ (8011d78 <PrepareFrame+0x218>)
 8011bdc:	2204      	movs	r2, #4
 8011bde:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8011be2:	4b65      	ldr	r3, [pc, #404]	@ (8011d78 <PrepareFrame+0x218>)
 8011be4:	4a66      	ldr	r2, [pc, #408]	@ (8011d80 <PrepareFrame+0x220>)
 8011be6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011bea:	4b63      	ldr	r3, [pc, #396]	@ (8011d78 <PrepareFrame+0x218>)
 8011bec:	22ff      	movs	r2, #255	@ 0xff
 8011bee:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	781a      	ldrb	r2, [r3, #0]
 8011bf6:	4b60      	ldr	r3, [pc, #384]	@ (8011d78 <PrepareFrame+0x218>)
 8011bf8:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011bfc:	4a5e      	ldr	r2, [pc, #376]	@ (8011d78 <PrepareFrame+0x218>)
 8011bfe:	79fb      	ldrb	r3, [r7, #7]
 8011c00:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8011c04:	4b5f      	ldr	r3, [pc, #380]	@ (8011d84 <PrepareFrame+0x224>)
 8011c06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8011c0a:	4a5b      	ldr	r2, [pc, #364]	@ (8011d78 <PrepareFrame+0x218>)
 8011c0c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	781a      	ldrb	r2, [r3, #0]
 8011c14:	4b58      	ldr	r3, [pc, #352]	@ (8011d78 <PrepareFrame+0x218>)
 8011c16:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8011c1a:	4b57      	ldr	r3, [pc, #348]	@ (8011d78 <PrepareFrame+0x218>)
 8011c1c:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8011c20:	4b55      	ldr	r3, [pc, #340]	@ (8011d78 <PrepareFrame+0x218>)
 8011c22:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8011c26:	4b54      	ldr	r3, [pc, #336]	@ (8011d78 <PrepareFrame+0x218>)
 8011c28:	4a54      	ldr	r2, [pc, #336]	@ (8011d7c <PrepareFrame+0x21c>)
 8011c2a:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011c2e:	f107 0318 	add.w	r3, r7, #24
 8011c32:	4618      	mov	r0, r3
 8011c34:	f003 f980 	bl	8014f38 <LoRaMacCryptoGetFCntUp>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d001      	beq.n	8011c42 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011c3e:	2312      	movs	r3, #18
 8011c40:	e096      	b.n	8011d70 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8011c42:	69bb      	ldr	r3, [r7, #24]
 8011c44:	b29a      	uxth	r2, r3
 8011c46:	4b4c      	ldr	r3, [pc, #304]	@ (8011d78 <PrepareFrame+0x218>)
 8011c48:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 8011c4c:	4b4a      	ldr	r3, [pc, #296]	@ (8011d78 <PrepareFrame+0x218>)
 8011c4e:	2200      	movs	r2, #0
 8011c50:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8011c54:	4b48      	ldr	r3, [pc, #288]	@ (8011d78 <PrepareFrame+0x218>)
 8011c56:	2200      	movs	r2, #0
 8011c58:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8011c5c:	69bb      	ldr	r3, [r7, #24]
 8011c5e:	4a46      	ldr	r2, [pc, #280]	@ (8011d78 <PrepareFrame+0x218>)
 8011c60:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011c64:	f107 0314 	add.w	r3, r7, #20
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f002 fb31 	bl	80142d0 <LoRaMacCommandsGetSizeSerializedCmds>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d001      	beq.n	8011c78 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011c74:	2313      	movs	r3, #19
 8011c76:	e07b      	b.n	8011d70 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d074      	beq.n	8011d68 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8011c7e:	4b41      	ldr	r3, [pc, #260]	@ (8011d84 <PrepareFrame+0x224>)
 8011c80:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7fe fd75 	bl	8010774 <GetMaxAppPayloadWithoutFOptsLength>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011c8e:	4b3a      	ldr	r3, [pc, #232]	@ (8011d78 <PrepareFrame+0x218>)
 8011c90:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d01d      	beq.n	8011cd4 <PrepareFrame+0x174>
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	2b0f      	cmp	r3, #15
 8011c9c:	d81a      	bhi.n	8011cd4 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8011c9e:	f107 0314 	add.w	r3, r7, #20
 8011ca2:	4a39      	ldr	r2, [pc, #228]	@ (8011d88 <PrepareFrame+0x228>)
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	200f      	movs	r0, #15
 8011ca8:	f002 fb28 	bl	80142fc <LoRaMacCommandsSerializeCmds>
 8011cac:	4603      	mov	r3, r0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d001      	beq.n	8011cb6 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011cb2:	2313      	movs	r3, #19
 8011cb4:	e05c      	b.n	8011d70 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	f003 030f 	and.w	r3, r3, #15
 8011cbc:	b2d9      	uxtb	r1, r3
 8011cbe:	68ba      	ldr	r2, [r7, #8]
 8011cc0:	7813      	ldrb	r3, [r2, #0]
 8011cc2:	f361 0303 	bfi	r3, r1, #0, #4
 8011cc6:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	781a      	ldrb	r2, [r3, #0]
 8011ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8011d78 <PrepareFrame+0x218>)
 8011cce:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8011cd2:	e049      	b.n	8011d68 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011cd4:	4b28      	ldr	r3, [pc, #160]	@ (8011d78 <PrepareFrame+0x218>)
 8011cd6:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d010      	beq.n	8011d00 <PrepareFrame+0x1a0>
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	2b0f      	cmp	r3, #15
 8011ce2:	d90d      	bls.n	8011d00 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011ce4:	7ffb      	ldrb	r3, [r7, #31]
 8011ce6:	f107 0114 	add.w	r1, r7, #20
 8011cea:	4a28      	ldr	r2, [pc, #160]	@ (8011d8c <PrepareFrame+0x22c>)
 8011cec:	4618      	mov	r0, r3
 8011cee:	f002 fb05 	bl	80142fc <LoRaMacCommandsSerializeCmds>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d001      	beq.n	8011cfc <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011cf8:	2313      	movs	r3, #19
 8011cfa:	e039      	b.n	8011d70 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011cfc:	230a      	movs	r3, #10
 8011cfe:	e037      	b.n	8011d70 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011d00:	7ffb      	ldrb	r3, [r7, #31]
 8011d02:	f107 0114 	add.w	r1, r7, #20
 8011d06:	4a21      	ldr	r2, [pc, #132]	@ (8011d8c <PrepareFrame+0x22c>)
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f002 faf7 	bl	80142fc <LoRaMacCommandsSerializeCmds>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d001      	beq.n	8011d18 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d14:	2313      	movs	r3, #19
 8011d16:	e02b      	b.n	8011d70 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8011d18:	4b17      	ldr	r3, [pc, #92]	@ (8011d78 <PrepareFrame+0x218>)
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8011d20:	4b15      	ldr	r3, [pc, #84]	@ (8011d78 <PrepareFrame+0x218>)
 8011d22:	4a1a      	ldr	r2, [pc, #104]	@ (8011d8c <PrepareFrame+0x22c>)
 8011d24:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	b2da      	uxtb	r2, r3
 8011d2c:	4b12      	ldr	r3, [pc, #72]	@ (8011d78 <PrepareFrame+0x218>)
 8011d2e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 8011d32:	e019      	b.n	8011d68 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d018      	beq.n	8011d6c <PrepareFrame+0x20c>
 8011d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8011d78 <PrepareFrame+0x218>)
 8011d3c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d013      	beq.n	8011d6c <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8011d44:	4812      	ldr	r0, [pc, #72]	@ (8011d90 <PrepareFrame+0x230>)
 8011d46:	4b0c      	ldr	r3, [pc, #48]	@ (8011d78 <PrepareFrame+0x218>)
 8011d48:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011d4c:	461a      	mov	r2, r3
 8011d4e:	6839      	ldr	r1, [r7, #0]
 8011d50:	f006 fbd5 	bl	80184fe <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8011d54:	4b08      	ldr	r3, [pc, #32]	@ (8011d78 <PrepareFrame+0x218>)
 8011d56:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	b29a      	uxth	r2, r3
 8011d5e:	4b06      	ldr	r3, [pc, #24]	@ (8011d78 <PrepareFrame+0x218>)
 8011d60:	801a      	strh	r2, [r3, #0]
            }
            break;
 8011d62:	e003      	b.n	8011d6c <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011d64:	2302      	movs	r3, #2
 8011d66:	e003      	b.n	8011d70 <PrepareFrame+0x210>
            break;
 8011d68:	bf00      	nop
 8011d6a:	e000      	b.n	8011d6e <PrepareFrame+0x20e>
            break;
 8011d6c:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8011d6e:	2300      	movs	r3, #0
}
 8011d70:	4618      	mov	r0, r3
 8011d72:	3720      	adds	r7, #32
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}
 8011d78:	20000704 	.word	0x20000704
 8011d7c:	2000083c 	.word	0x2000083c
 8011d80:	20000706 	.word	0x20000706
 8011d84:	20000c0c 	.word	0x20000c0c
 8011d88:	2000081c 	.word	0x2000081c
 8011d8c:	20000b8c 	.word	0x20000b8c
 8011d90:	20000707 	.word	0x20000707

08011d94 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b08a      	sub	sp, #40	@ 0x28
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d9e:	2303      	movs	r3, #3
 8011da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8011da4:	2300      	movs	r3, #0
 8011da6:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8011da8:	79fb      	ldrb	r3, [r7, #7]
 8011daa:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011dac:	4b48      	ldr	r3, [pc, #288]	@ (8011ed0 <SendFrameOnChannel+0x13c>)
 8011dae:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011db2:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011db4:	4b46      	ldr	r3, [pc, #280]	@ (8011ed0 <SendFrameOnChannel+0x13c>)
 8011db6:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011dba:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011dbc:	4b44      	ldr	r3, [pc, #272]	@ (8011ed0 <SendFrameOnChannel+0x13c>)
 8011dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011dc2:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011dc4:	4b42      	ldr	r3, [pc, #264]	@ (8011ed0 <SendFrameOnChannel+0x13c>)
 8011dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011dca:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011dcc:	4b41      	ldr	r3, [pc, #260]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011dce:	881b      	ldrh	r3, [r3, #0]
 8011dd0:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8011dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8011ed0 <SendFrameOnChannel+0x13c>)
 8011dd4:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011dd8:	f107 020f 	add.w	r2, r7, #15
 8011ddc:	f107 0110 	add.w	r1, r7, #16
 8011de0:	4b3d      	ldr	r3, [pc, #244]	@ (8011ed8 <SendFrameOnChannel+0x144>)
 8011de2:	f003 fffc 	bl	8015dde <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011de6:	4b3b      	ldr	r3, [pc, #236]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011de8:	2201      	movs	r2, #1
 8011dea:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011dee:	4b38      	ldr	r3, [pc, #224]	@ (8011ed0 <SendFrameOnChannel+0x13c>)
 8011df0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011df4:	b2da      	uxtb	r2, r3
 8011df6:	4b37      	ldr	r3, [pc, #220]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011df8:	f883 2436 	strb.w	r2, [r3, #1078]	@ 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 8011dfc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8011e00:	4b34      	ldr	r3, [pc, #208]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011e02:	f883 2437 	strb.w	r2, [r3, #1079]	@ 0x437
    MacCtx.McpsConfirm.Channel = channel;
 8011e06:	79fb      	ldrb	r3, [r7, #7]
 8011e08:	4a32      	ldr	r2, [pc, #200]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011e0a:	f8c2 3444 	str.w	r3, [r2, #1092]	@ 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011e0e:	4b31      	ldr	r3, [pc, #196]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011e10:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8011e14:	4a2f      	ldr	r2, [pc, #188]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011e16:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011e1c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8011e20:	4a2c      	ldr	r2, [pc, #176]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011e22:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8011e26:	f001 ffbb 	bl	8013da0 <LoRaMacClassBIsBeaconModeActive>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00b      	beq.n	8011e48 <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8011e30:	4b28      	ldr	r3, [pc, #160]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011e32:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8011e36:	4618      	mov	r0, r3
 8011e38:	f002 f81d 	bl	8013e76 <LoRaMacClassBIsUplinkCollision>
 8011e3c:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8011e3e:	6a3b      	ldr	r3, [r7, #32]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d001      	beq.n	8011e48 <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8011e44:	2310      	movs	r3, #16
 8011e46:	e03e      	b.n	8011ec6 <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011e48:	4b21      	ldr	r3, [pc, #132]	@ (8011ed0 <SendFrameOnChannel+0x13c>)
 8011e4a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011e4e:	2b01      	cmp	r3, #1
 8011e50:	d101      	bne.n	8011e56 <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8011e52:	f002 f81a 	bl	8013e8a <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8011e56:	f001 ffb4 	bl	8013dc2 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8011e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8011ed0 <SendFrameOnChannel+0x13c>)
 8011e5c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011e60:	b2db      	uxtb	r3, r3
 8011e62:	4a1c      	ldr	r2, [pc, #112]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011e64:	f892 2411 	ldrb.w	r2, [r2, #1041]	@ 0x411
 8011e68:	4611      	mov	r1, r2
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7ff fc44 	bl	80116f8 <SecureFrame>
 8011e70:	4603      	mov	r3, r0
 8011e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8011e76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d002      	beq.n	8011e84 <SendFrameOnChannel+0xf0>
    {
        return status;
 8011e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011e82:	e020      	b.n	8011ec6 <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011e84:	4b13      	ldr	r3, [pc, #76]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011e86:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011e8a:	f043 0302 	orr.w	r3, r3, #2
 8011e8e:	4a11      	ldr	r2, [pc, #68]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011e90:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8011e94:	4b0f      	ldr	r3, [pc, #60]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011e96:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 8011e9a:	f083 0301 	eor.w	r3, r3, #1
 8011e9e:	b2db      	uxtb	r3, r3
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d007      	beq.n	8011eb4 <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 8011ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011ea6:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 8011eaa:	3301      	adds	r3, #1
 8011eac:	b2da      	uxtb	r2, r3
 8011eae:	4b09      	ldr	r3, [pc, #36]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011eb0:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8011eb4:	4b09      	ldr	r3, [pc, #36]	@ (8011edc <SendFrameOnChannel+0x148>)
 8011eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011eb8:	4a06      	ldr	r2, [pc, #24]	@ (8011ed4 <SendFrameOnChannel+0x140>)
 8011eba:	8812      	ldrh	r2, [r2, #0]
 8011ebc:	b2d2      	uxtb	r2, r2
 8011ebe:	4611      	mov	r1, r2
 8011ec0:	4807      	ldr	r0, [pc, #28]	@ (8011ee0 <SendFrameOnChannel+0x14c>)
 8011ec2:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8011ec4:	2300      	movs	r3, #0
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3728      	adds	r7, #40	@ 0x28
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}
 8011ece:	bf00      	nop
 8011ed0:	20000c0c 	.word	0x20000c0c
 8011ed4:	20000704 	.word	0x20000704
 8011ed8:	20000b18 	.word	0x20000b18
 8011edc:	0801df78 	.word	0x0801df78
 8011ee0:	20000706 	.word	0x20000706

08011ee4 <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b086      	sub	sp, #24
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	4603      	mov	r3, r0
 8011eec:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8011eee:	4b16      	ldr	r3, [pc, #88]	@ (8011f48 <SetTxContinuousWave+0x64>)
 8011ef0:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 8011ef4:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011ef6:	4b15      	ldr	r3, [pc, #84]	@ (8011f4c <SetTxContinuousWave+0x68>)
 8011ef8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011efc:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011efe:	4b13      	ldr	r3, [pc, #76]	@ (8011f4c <SetTxContinuousWave+0x68>)
 8011f00:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011f04:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011f06:	4b11      	ldr	r3, [pc, #68]	@ (8011f4c <SetTxContinuousWave+0x68>)
 8011f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011f0c:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8011f4c <SetTxContinuousWave+0x68>)
 8011f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011f14:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8011f16:	88fb      	ldrh	r3, [r7, #6]
 8011f18:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8011f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8011f4c <SetTxContinuousWave+0x68>)
 8011f1c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011f20:	f107 0208 	add.w	r2, r7, #8
 8011f24:	4611      	mov	r1, r2
 8011f26:	4618      	mov	r0, r3
 8011f28:	f004 f808 	bl	8015f3c <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011f2c:	4b06      	ldr	r3, [pc, #24]	@ (8011f48 <SetTxContinuousWave+0x64>)
 8011f2e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011f32:	f043 0302 	orr.w	r3, r3, #2
 8011f36:	4a04      	ldr	r2, [pc, #16]	@ (8011f48 <SetTxContinuousWave+0x64>)
 8011f38:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8011f3c:	2300      	movs	r3, #0
}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3718      	adds	r7, #24
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}
 8011f46:	bf00      	nop
 8011f48:	20000704 	.word	0x20000704
 8011f4c:	20000c0c 	.word	0x20000c0c

08011f50 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	4603      	mov	r3, r0
 8011f58:	6039      	str	r1, [r7, #0]
 8011f5a:	80fb      	strh	r3, [r7, #6]
 8011f5c:	4613      	mov	r3, r2
 8011f5e:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8011f60:	4b09      	ldr	r3, [pc, #36]	@ (8011f88 <SetTxContinuousWave1+0x38>)
 8011f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f64:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011f68:	88fa      	ldrh	r2, [r7, #6]
 8011f6a:	6838      	ldr	r0, [r7, #0]
 8011f6c:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011f6e:	4b07      	ldr	r3, [pc, #28]	@ (8011f8c <SetTxContinuousWave1+0x3c>)
 8011f70:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011f74:	f043 0302 	orr.w	r3, r3, #2
 8011f78:	4a04      	ldr	r2, [pc, #16]	@ (8011f8c <SetTxContinuousWave1+0x3c>)
 8011f7a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8011f7e:	2300      	movs	r3, #0
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3708      	adds	r7, #8
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}
 8011f88:	0801df78 	.word	0x0801df78
 8011f8c:	20000704 	.word	0x20000704

08011f90 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b082      	sub	sp, #8
 8011f94:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 8011f96:	2300      	movs	r3, #0
 8011f98:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8011f9a:	4b49      	ldr	r3, [pc, #292]	@ (80120c0 <RestoreNvmData+0x130>)
 8011f9c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011fa0:	2b01      	cmp	r3, #1
 8011fa2:	d001      	beq.n	8011fa8 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	e086      	b.n	80120b6 <RestoreNvmData+0x126>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8011fa8:	2124      	movs	r1, #36	@ 0x24
 8011faa:	4846      	ldr	r0, [pc, #280]	@ (80120c4 <RestoreNvmData+0x134>)
 8011fac:	f006 fafc 	bl	80185a8 <Crc32>
 8011fb0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8011fb2:	4b44      	ldr	r3, [pc, #272]	@ (80120c4 <RestoreNvmData+0x134>)
 8011fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fb6:	687a      	ldr	r2, [r7, #4]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d001      	beq.n	8011fc0 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011fbc:	2317      	movs	r3, #23
 8011fbe:	e07a      	b.n	80120b6 <RestoreNvmData+0x126>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8011fc0:	211c      	movs	r1, #28
 8011fc2:	4841      	ldr	r0, [pc, #260]	@ (80120c8 <RestoreNvmData+0x138>)
 8011fc4:	f006 faf0 	bl	80185a8 <Crc32>
 8011fc8:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8011fca:	4b3e      	ldr	r3, [pc, #248]	@ (80120c4 <RestoreNvmData+0x134>)
 8011fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011fce:	687a      	ldr	r2, [r7, #4]
 8011fd0:	429a      	cmp	r2, r3
 8011fd2:	d001      	beq.n	8011fd8 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011fd4:	2317      	movs	r3, #23
 8011fd6:	e06e      	b.n	80120b6 <RestoreNvmData+0x126>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8011fd8:	21fc      	movs	r1, #252	@ 0xfc
 8011fda:	483c      	ldr	r0, [pc, #240]	@ (80120cc <RestoreNvmData+0x13c>)
 8011fdc:	f006 fae4 	bl	80185a8 <Crc32>
 8011fe0:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8011fe2:	4b38      	ldr	r3, [pc, #224]	@ (80120c4 <RestoreNvmData+0x134>)
 8011fe4:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8011fe8:	687a      	ldr	r2, [r7, #4]
 8011fea:	429a      	cmp	r2, r3
 8011fec:	d001      	beq.n	8011ff2 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011fee:	2317      	movs	r3, #23
 8011ff0:	e061      	b.n	80120b6 <RestoreNvmData+0x126>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8011ff2:	21d4      	movs	r1, #212	@ 0xd4
 8011ff4:	4836      	ldr	r0, [pc, #216]	@ (80120d0 <RestoreNvmData+0x140>)
 8011ff6:	f006 fad7 	bl	80185a8 <Crc32>
 8011ffa:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8011ffc:	4b31      	ldr	r3, [pc, #196]	@ (80120c4 <RestoreNvmData+0x134>)
 8011ffe:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8012002:	687a      	ldr	r2, [r7, #4]
 8012004:	429a      	cmp	r2, r3
 8012006:	d001      	beq.n	801200c <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012008:	2317      	movs	r3, #23
 801200a:	e054      	b.n	80120b6 <RestoreNvmData+0x126>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 801200c:	21a0      	movs	r1, #160	@ 0xa0
 801200e:	4831      	ldr	r0, [pc, #196]	@ (80120d4 <RestoreNvmData+0x144>)
 8012010:	f006 faca 	bl	80185a8 <Crc32>
 8012014:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8012016:	4b2b      	ldr	r3, [pc, #172]	@ (80120c4 <RestoreNvmData+0x134>)
 8012018:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	429a      	cmp	r2, r3
 8012020:	d001      	beq.n	8012026 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012022:	2317      	movs	r3, #23
 8012024:	e047      	b.n	80120b6 <RestoreNvmData+0x126>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8012026:	f44f 6193 	mov.w	r1, #1176	@ 0x498
 801202a:	482b      	ldr	r0, [pc, #172]	@ (80120d8 <RestoreNvmData+0x148>)
 801202c:	f006 fabc 	bl	80185a8 <Crc32>
 8012030:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8012032:	4b24      	ldr	r3, [pc, #144]	@ (80120c4 <RestoreNvmData+0x134>)
 8012034:	f8d3 375c 	ldr.w	r3, [r3, #1884]	@ 0x75c
 8012038:	687a      	ldr	r2, [r7, #4]
 801203a:	429a      	cmp	r2, r3
 801203c:	d001      	beq.n	8012042 <RestoreNvmData+0xb2>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801203e:	2317      	movs	r3, #23
 8012040:	e039      	b.n	80120b6 <RestoreNvmData+0x126>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8012042:	2114      	movs	r1, #20
 8012044:	4825      	ldr	r0, [pc, #148]	@ (80120dc <RestoreNvmData+0x14c>)
 8012046:	f006 faaf 	bl	80185a8 <Crc32>
 801204a:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 801204c:	4b1d      	ldr	r3, [pc, #116]	@ (80120c4 <RestoreNvmData+0x134>)
 801204e:	f8d3 3774 	ldr.w	r3, [r3, #1908]	@ 0x774
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	429a      	cmp	r2, r3
 8012056:	d001      	beq.n	801205c <RestoreNvmData+0xcc>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012058:	2317      	movs	r3, #23
 801205a:	e02c      	b.n	80120b6 <RestoreNvmData+0x126>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 801205c:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 8012060:	4918      	ldr	r1, [pc, #96]	@ (80120c4 <RestoreNvmData+0x134>)
 8012062:	481f      	ldr	r0, [pc, #124]	@ (80120e0 <RestoreNvmData+0x150>)
 8012064:	f006 fa4b 	bl	80184fe <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8012068:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 801206c:	2100      	movs	r1, #0
 801206e:	4815      	ldr	r0, [pc, #84]	@ (80120c4 <RestoreNvmData+0x134>)
 8012070:	f006 fa80 	bl	8018574 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012074:	4b12      	ldr	r3, [pc, #72]	@ (80120c0 <RestoreNvmData+0x130>)
 8012076:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 801207a:	4b11      	ldr	r3, [pc, #68]	@ (80120c0 <RestoreNvmData+0x130>)
 801207c:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012080:	4b17      	ldr	r3, [pc, #92]	@ (80120e0 <RestoreNvmData+0x150>)
 8012082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012084:	4a0e      	ldr	r2, [pc, #56]	@ (80120c0 <RestoreNvmData+0x130>)
 8012086:	f8c2 33e4 	str.w	r3, [r2, #996]	@ 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801208a:	4b15      	ldr	r3, [pc, #84]	@ (80120e0 <RestoreNvmData+0x150>)
 801208c:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8012090:	4b0b      	ldr	r3, [pc, #44]	@ (80120c0 <RestoreNvmData+0x130>)
 8012092:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012096:	4b0a      	ldr	r3, [pc, #40]	@ (80120c0 <RestoreNvmData+0x130>)
 8012098:	2201      	movs	r2, #1
 801209a:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801209e:	4b08      	ldr	r3, [pc, #32]	@ (80120c0 <RestoreNvmData+0x130>)
 80120a0:	2202      	movs	r2, #2
 80120a2:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80120a6:	4b0f      	ldr	r3, [pc, #60]	@ (80120e4 <RestoreNvmData+0x154>)
 80120a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120aa:	4a0d      	ldr	r2, [pc, #52]	@ (80120e0 <RestoreNvmData+0x150>)
 80120ac:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 80120b0:	4610      	mov	r0, r2
 80120b2:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 80120b4:	2300      	movs	r3, #0
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3708      	adds	r7, #8
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
 80120be:	bf00      	nop
 80120c0:	20000704 	.word	0x20000704
 80120c4:	20001384 	.word	0x20001384
 80120c8:	200013ac 	.word	0x200013ac
 80120cc:	200013cc 	.word	0x200013cc
 80120d0:	200014cc 	.word	0x200014cc
 80120d4:	200015a4 	.word	0x200015a4
 80120d8:	20001648 	.word	0x20001648
 80120dc:	20001ae4 	.word	0x20001ae4
 80120e0:	20000c0c 	.word	0x20000c0c
 80120e4:	0801df78 	.word	0x0801df78

080120e8 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80120e8:	b480      	push	{r7}
 80120ea:	b083      	sub	sp, #12
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d002      	beq.n	80120fe <DetermineFrameType+0x16>
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d101      	bne.n	8012102 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80120fe:	2303      	movs	r3, #3
 8012100:	e03b      	b.n	801217a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	7b1b      	ldrb	r3, [r3, #12]
 8012106:	f003 030f 	and.w	r3, r3, #15
 801210a:	b2db      	uxtb	r3, r3
 801210c:	2b00      	cmp	r3, #0
 801210e:	d008      	beq.n	8012122 <DetermineFrameType+0x3a>
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d003      	beq.n	8012122 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	2200      	movs	r2, #0
 801211e:	701a      	strb	r2, [r3, #0]
 8012120:	e02a      	b.n	8012178 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012128:	2b00      	cmp	r3, #0
 801212a:	d103      	bne.n	8012134 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	2201      	movs	r2, #1
 8012130:	701a      	strb	r2, [r3, #0]
 8012132:	e021      	b.n	8012178 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	7b1b      	ldrb	r3, [r3, #12]
 8012138:	f003 030f 	and.w	r3, r3, #15
 801213c:	b2db      	uxtb	r3, r3
 801213e:	2b00      	cmp	r3, #0
 8012140:	d108      	bne.n	8012154 <DetermineFrameType+0x6c>
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d103      	bne.n	8012154 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 801214c:	683b      	ldr	r3, [r7, #0]
 801214e:	2202      	movs	r2, #2
 8012150:	701a      	strb	r2, [r3, #0]
 8012152:	e011      	b.n	8012178 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	7b1b      	ldrb	r3, [r3, #12]
 8012158:	f003 030f 	and.w	r3, r3, #15
 801215c:	b2db      	uxtb	r3, r3
 801215e:	2b00      	cmp	r3, #0
 8012160:	d108      	bne.n	8012174 <DetermineFrameType+0x8c>
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d003      	beq.n	8012174 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	2203      	movs	r2, #3
 8012170:	701a      	strb	r2, [r3, #0]
 8012172:	e001      	b.n	8012178 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8012174:	2318      	movs	r3, #24
 8012176:	e000      	b.n	801217a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8012178:	2300      	movs	r3, #0
}
 801217a:	4618      	mov	r0, r3
 801217c:	370c      	adds	r7, #12
 801217e:	46bd      	mov	sp, r7
 8012180:	bc80      	pop	{r7}
 8012182:	4770      	bx	lr

08012184 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8012184:	b480      	push	{r7}
 8012186:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8012188:	4b12      	ldr	r3, [pc, #72]	@ (80121d4 <CheckRetransUnconfirmedUplink+0x50>)
 801218a:	f893 240c 	ldrb.w	r2, [r3, #1036]	@ 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 801218e:	4b12      	ldr	r3, [pc, #72]	@ (80121d8 <CheckRetransUnconfirmedUplink+0x54>)
 8012190:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 8012194:	429a      	cmp	r2, r3
 8012196:	d301      	bcc.n	801219c <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8012198:	2301      	movs	r3, #1
 801219a:	e016      	b.n	80121ca <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801219c:	4b0d      	ldr	r3, [pc, #52]	@ (80121d4 <CheckRetransUnconfirmedUplink+0x50>)
 801219e:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80121a2:	f003 0302 	and.w	r3, r3, #2
 80121a6:	b2db      	uxtb	r3, r3
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d00d      	beq.n	80121c8 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80121ac:	4b0a      	ldr	r3, [pc, #40]	@ (80121d8 <CheckRetransUnconfirmedUplink+0x54>)
 80121ae:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d101      	bne.n	80121ba <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 80121b6:	2301      	movs	r3, #1
 80121b8:	e007      	b.n	80121ca <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 80121ba:	4b06      	ldr	r3, [pc, #24]	@ (80121d4 <CheckRetransUnconfirmedUplink+0x50>)
 80121bc:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d101      	bne.n	80121c8 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 80121c4:	2301      	movs	r3, #1
 80121c6:	e000      	b.n	80121ca <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 80121c8:	2300      	movs	r3, #0
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bc80      	pop	{r7}
 80121d0:	4770      	bx	lr
 80121d2:	bf00      	nop
 80121d4:	20000704 	.word	0x20000704
 80121d8:	20000c0c 	.word	0x20000c0c

080121dc <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80121dc:	b480      	push	{r7}
 80121de:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80121e0:	4b0e      	ldr	r3, [pc, #56]	@ (801221c <CheckRetransConfirmedUplink+0x40>)
 80121e2:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
        MacCtx.AckTimeoutRetries )
 80121e6:	4b0d      	ldr	r3, [pc, #52]	@ (801221c <CheckRetransConfirmedUplink+0x40>)
 80121e8:	f893 340d 	ldrb.w	r3, [r3, #1037]	@ 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d301      	bcc.n	80121f4 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 80121f0:	2301      	movs	r3, #1
 80121f2:	e00f      	b.n	8012214 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80121f4:	4b09      	ldr	r3, [pc, #36]	@ (801221c <CheckRetransConfirmedUplink+0x40>)
 80121f6:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80121fa:	f003 0302 	and.w	r3, r3, #2
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	2b00      	cmp	r3, #0
 8012202:	d006      	beq.n	8012212 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012204:	4b05      	ldr	r3, [pc, #20]	@ (801221c <CheckRetransConfirmedUplink+0x40>)
 8012206:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 801220a:	2b00      	cmp	r3, #0
 801220c:	d001      	beq.n	8012212 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 801220e:	2301      	movs	r3, #1
 8012210:	e000      	b.n	8012214 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8012212:	2300      	movs	r3, #0
}
 8012214:	4618      	mov	r0, r3
 8012216:	46bd      	mov	sp, r7
 8012218:	bc80      	pop	{r7}
 801221a:	4770      	bx	lr
 801221c:	20000704 	.word	0x20000704

08012220 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8012220:	b480      	push	{r7}
 8012222:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012224:	4b1a      	ldr	r3, [pc, #104]	@ (8012290 <StopRetransmission+0x70>)
 8012226:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 801222a:	f003 0302 	and.w	r3, r3, #2
 801222e:	b2db      	uxtb	r3, r3
 8012230:	2b00      	cmp	r3, #0
 8012232:	d009      	beq.n	8012248 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012234:	4b16      	ldr	r3, [pc, #88]	@ (8012290 <StopRetransmission+0x70>)
 8012236:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801223a:	2b00      	cmp	r3, #0
 801223c:	d00e      	beq.n	801225c <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801223e:	4b14      	ldr	r3, [pc, #80]	@ (8012290 <StopRetransmission+0x70>)
 8012240:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012244:	2b01      	cmp	r3, #1
 8012246:	d009      	beq.n	801225c <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8012248:	4b12      	ldr	r3, [pc, #72]	@ (8012294 <StopRetransmission+0x74>)
 801224a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801224e:	2b00      	cmp	r3, #0
 8012250:	d004      	beq.n	801225c <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8012252:	4b10      	ldr	r3, [pc, #64]	@ (8012294 <StopRetransmission+0x74>)
 8012254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012256:	3301      	adds	r3, #1
 8012258:	4a0e      	ldr	r2, [pc, #56]	@ (8012294 <StopRetransmission+0x74>)
 801225a:	6293      	str	r3, [r2, #40]	@ 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 801225c:	4b0c      	ldr	r3, [pc, #48]	@ (8012290 <StopRetransmission+0x70>)
 801225e:	2200      	movs	r2, #0
 8012260:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
    MacCtx.NodeAckRequested = false;
 8012264:	4b0a      	ldr	r3, [pc, #40]	@ (8012290 <StopRetransmission+0x70>)
 8012266:	2200      	movs	r2, #0
 8012268:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 801226c:	4b08      	ldr	r3, [pc, #32]	@ (8012290 <StopRetransmission+0x70>)
 801226e:	2200      	movs	r2, #0
 8012270:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012274:	4b06      	ldr	r3, [pc, #24]	@ (8012290 <StopRetransmission+0x70>)
 8012276:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801227a:	f023 0302 	bic.w	r3, r3, #2
 801227e:	4a04      	ldr	r2, [pc, #16]	@ (8012290 <StopRetransmission+0x70>)
 8012280:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 8012284:	2301      	movs	r3, #1
}
 8012286:	4618      	mov	r0, r3
 8012288:	46bd      	mov	sp, r7
 801228a:	bc80      	pop	{r7}
 801228c:	4770      	bx	lr
 801228e:	bf00      	nop
 8012290:	20000704 	.word	0x20000704
 8012294:	20000c0c 	.word	0x20000c0c

08012298 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8012298:	b580      	push	{r7, lr}
 801229a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 801229c:	4b08      	ldr	r3, [pc, #32]	@ (80122c0 <OnMacProcessNotify+0x28>)
 801229e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d00a      	beq.n	80122bc <OnMacProcessNotify+0x24>
 80122a6:	4b06      	ldr	r3, [pc, #24]	@ (80122c0 <OnMacProcessNotify+0x28>)
 80122a8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80122ac:	695b      	ldr	r3, [r3, #20]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d004      	beq.n	80122bc <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80122b2:	4b03      	ldr	r3, [pc, #12]	@ (80122c0 <OnMacProcessNotify+0x28>)
 80122b4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80122b8:	695b      	ldr	r3, [r3, #20]
 80122ba:	4798      	blx	r3
    }
}
 80122bc:	bf00      	nop
 80122be:	bd80      	pop	{r7, pc}
 80122c0:	20000704 	.word	0x20000704

080122c4 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b082      	sub	sp, #8
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	4603      	mov	r3, r0
 80122cc:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80122ce:	4b0b      	ldr	r3, [pc, #44]	@ (80122fc <CallNvmDataChangeCallback+0x38>)
 80122d0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d00c      	beq.n	80122f2 <CallNvmDataChangeCallback+0x2e>
 80122d8:	4b08      	ldr	r3, [pc, #32]	@ (80122fc <CallNvmDataChangeCallback+0x38>)
 80122da:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80122de:	691b      	ldr	r3, [r3, #16]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d006      	beq.n	80122f2 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80122e4:	4b05      	ldr	r3, [pc, #20]	@ (80122fc <CallNvmDataChangeCallback+0x38>)
 80122e6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80122ea:	691b      	ldr	r3, [r3, #16]
 80122ec:	88fa      	ldrh	r2, [r7, #6]
 80122ee:	4610      	mov	r0, r2
 80122f0:	4798      	blx	r3
    }
}
 80122f2:	bf00      	nop
 80122f4:	3708      	adds	r7, #8
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}
 80122fa:	bf00      	nop
 80122fc:	20000704 	.word	0x20000704

08012300 <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b084      	sub	sp, #16
 8012304:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8012306:	4b1b      	ldr	r3, [pc, #108]	@ (8012374 <AckTimeoutRetriesProcess+0x74>)
 8012308:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 801230c:	4b19      	ldr	r3, [pc, #100]	@ (8012374 <AckTimeoutRetriesProcess+0x74>)
 801230e:	f893 340d 	ldrb.w	r3, [r3, #1037]	@ 0x40d
 8012312:	429a      	cmp	r2, r3
 8012314:	d229      	bcs.n	801236a <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8012316:	4b17      	ldr	r3, [pc, #92]	@ (8012374 <AckTimeoutRetriesProcess+0x74>)
 8012318:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 801231c:	3301      	adds	r3, #1
 801231e:	b2da      	uxtb	r2, r3
 8012320:	4b14      	ldr	r3, [pc, #80]	@ (8012374 <AckTimeoutRetriesProcess+0x74>)
 8012322:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8012326:	4b13      	ldr	r3, [pc, #76]	@ (8012374 <AckTimeoutRetriesProcess+0x74>)
 8012328:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 801232c:	f003 0301 	and.w	r3, r3, #1
 8012330:	b2db      	uxtb	r3, r3
 8012332:	2b00      	cmp	r3, #0
 8012334:	d019      	beq.n	801236a <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012336:	2322      	movs	r3, #34	@ 0x22
 8012338:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801233a:	4b0f      	ldr	r3, [pc, #60]	@ (8012378 <AckTimeoutRetriesProcess+0x78>)
 801233c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8012340:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012342:	4b0d      	ldr	r3, [pc, #52]	@ (8012378 <AckTimeoutRetriesProcess+0x78>)
 8012344:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012348:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801234a:	4b0b      	ldr	r3, [pc, #44]	@ (8012378 <AckTimeoutRetriesProcess+0x78>)
 801234c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012350:	f107 0208 	add.w	r2, r7, #8
 8012354:	4611      	mov	r1, r2
 8012356:	4618      	mov	r0, r3
 8012358:	f003 fc9b 	bl	8015c92 <RegionGetPhyParam>
 801235c:	4603      	mov	r3, r0
 801235e:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	b25a      	sxtb	r2, r3
 8012364:	4b04      	ldr	r3, [pc, #16]	@ (8012378 <AckTimeoutRetriesProcess+0x78>)
 8012366:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
    }
}
 801236a:	bf00      	nop
 801236c:	3710      	adds	r7, #16
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}
 8012372:	bf00      	nop
 8012374:	20000704 	.word	0x20000704
 8012378:	20000c0c 	.word	0x20000c0c

0801237c <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b084      	sub	sp, #16
 8012380:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8012382:	4b14      	ldr	r3, [pc, #80]	@ (80123d4 <AckTimeoutRetriesFinalize+0x58>)
 8012384:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 8012388:	f083 0301 	eor.w	r3, r3, #1
 801238c:	b2db      	uxtb	r3, r3
 801238e:	2b00      	cmp	r3, #0
 8012390:	d015      	beq.n	80123be <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012392:	2302      	movs	r3, #2
 8012394:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8012396:	4b10      	ldr	r3, [pc, #64]	@ (80123d8 <AckTimeoutRetriesFinalize+0x5c>)
 8012398:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 801239a:	4b10      	ldr	r3, [pc, #64]	@ (80123dc <AckTimeoutRetriesFinalize+0x60>)
 801239c:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801239e:	4b10      	ldr	r3, [pc, #64]	@ (80123e0 <AckTimeoutRetriesFinalize+0x64>)
 80123a0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80123a4:	1d3a      	adds	r2, r7, #4
 80123a6:	4611      	mov	r1, r2
 80123a8:	4618      	mov	r0, r3
 80123aa:	f003 fc9b 	bl	8015ce4 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 80123ae:	4b09      	ldr	r3, [pc, #36]	@ (80123d4 <AckTimeoutRetriesFinalize+0x58>)
 80123b0:	2200      	movs	r2, #0
 80123b2:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 80123b6:	4b07      	ldr	r3, [pc, #28]	@ (80123d4 <AckTimeoutRetriesFinalize+0x58>)
 80123b8:	2200      	movs	r2, #0
 80123ba:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80123be:	4b05      	ldr	r3, [pc, #20]	@ (80123d4 <AckTimeoutRetriesFinalize+0x58>)
 80123c0:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 80123c4:	4b03      	ldr	r3, [pc, #12]	@ (80123d4 <AckTimeoutRetriesFinalize+0x58>)
 80123c6:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
}
 80123ca:	bf00      	nop
 80123cc:	3710      	adds	r7, #16
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	bf00      	nop
 80123d4:	20000704 	.word	0x20000704
 80123d8:	20000e2c 	.word	0x20000e2c
 80123dc:	20000ed0 	.word	0x20000ed0
 80123e0:	20000c0c 	.word	0x20000c0c

080123e4 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80123e4:	b480      	push	{r7}
 80123e6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80123e8:	4b0b      	ldr	r3, [pc, #44]	@ (8012418 <IsRequestPending+0x34>)
 80123ea:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80123ee:	f003 0304 	and.w	r3, r3, #4
 80123f2:	b2db      	uxtb	r3, r3
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d107      	bne.n	8012408 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80123f8:	4b07      	ldr	r3, [pc, #28]	@ (8012418 <IsRequestPending+0x34>)
 80123fa:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80123fe:	f003 0301 	and.w	r3, r3, #1
 8012402:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012404:	2b00      	cmp	r3, #0
 8012406:	d001      	beq.n	801240c <IsRequestPending+0x28>
    {
        return 1;
 8012408:	2301      	movs	r3, #1
 801240a:	e000      	b.n	801240e <IsRequestPending+0x2a>
    }
    return 0;
 801240c:	2300      	movs	r3, #0
}
 801240e:	4618      	mov	r0, r3
 8012410:	46bd      	mov	sp, r7
 8012412:	bc80      	pop	{r7}
 8012414:	4770      	bx	lr
 8012416:	bf00      	nop
 8012418:	20000704 	.word	0x20000704

0801241c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 801241c:	b590      	push	{r4, r7, lr}
 801241e:	b08f      	sub	sp, #60	@ 0x3c
 8012420:	af02      	add	r7, sp, #8
 8012422:	6178      	str	r0, [r7, #20]
 8012424:	6139      	str	r1, [r7, #16]
 8012426:	4613      	mov	r3, r2
 8012428:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d002      	beq.n	8012436 <LoRaMacInitialization+0x1a>
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d101      	bne.n	801243a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012436:	2303      	movs	r3, #3
 8012438:	e273      	b.n	8012922 <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801243a:	697b      	ldr	r3, [r7, #20]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d00b      	beq.n	801245a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012446:	2b00      	cmp	r3, #0
 8012448:	d007      	beq.n	801245a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801244a:	697b      	ldr	r3, [r7, #20]
 801244c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801244e:	2b00      	cmp	r3, #0
 8012450:	d003      	beq.n	801245a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8012452:	697b      	ldr	r3, [r7, #20]
 8012454:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012456:	2b00      	cmp	r3, #0
 8012458:	d101      	bne.n	801245e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801245a:	2303      	movs	r3, #3
 801245c:	e261      	b.n	8012922 <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801245e:	7bfb      	ldrb	r3, [r7, #15]
 8012460:	4618      	mov	r0, r3
 8012462:	f003 fc06 	bl	8015c72 <RegionIsActive>
 8012466:	4603      	mov	r3, r0
 8012468:	f083 0301 	eor.w	r3, r3, #1
 801246c:	b2db      	uxtb	r3, r3
 801246e:	2b00      	cmp	r3, #0
 8012470:	d001      	beq.n	8012476 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012472:	2309      	movs	r3, #9
 8012474:	e255      	b.n	8012922 <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8012476:	6978      	ldr	r0, [r7, #20]
 8012478:	f002 f862 	bl	8014540 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 801247c:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 8012480:	2100      	movs	r1, #0
 8012482:	48c7      	ldr	r0, [pc, #796]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012484:	f006 f876 	bl	8018574 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012488:	f44f 62a1 	mov.w	r2, #1288	@ 0x508
 801248c:	2100      	movs	r1, #0
 801248e:	48c5      	ldr	r0, [pc, #788]	@ (80127a4 <LoRaMacInitialization+0x388>)
 8012490:	f006 f870 	bl	8018574 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012494:	4bc3      	ldr	r3, [pc, #780]	@ (80127a4 <LoRaMacInitialization+0x388>)
 8012496:	2201      	movs	r2, #1
 8012498:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetries = 1;
 801249c:	4bc1      	ldr	r3, [pc, #772]	@ (80127a4 <LoRaMacInitialization+0x388>)
 801249e:	2201      	movs	r2, #1
 80124a0:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 80124a4:	4abe      	ldr	r2, [pc, #760]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80124a6:	7bfb      	ldrb	r3, [r7, #15]
 80124a8:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80124ac:	4bbc      	ldr	r3, [pc, #752]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80124ae:	2200      	movs	r2, #0
 80124b0:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 80124b4:	4bba      	ldr	r3, [pc, #744]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80124b6:	2200      	movs	r2, #0
 80124b8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80124bc:	4bb8      	ldr	r3, [pc, #736]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80124be:	4aba      	ldr	r2, [pc, #744]	@ (80127a8 <LoRaMacInitialization+0x38c>)
 80124c0:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80124c4:	230f      	movs	r3, #15
 80124c6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80124ca:	4bb5      	ldr	r3, [pc, #724]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80124cc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80124d0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80124d4:	4611      	mov	r1, r2
 80124d6:	4618      	mov	r0, r3
 80124d8:	f003 fbdb 	bl	8015c92 <RegionGetPhyParam>
 80124dc:	4603      	mov	r3, r0
 80124de:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80124e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	bf14      	ite	ne
 80124e6:	2301      	movne	r3, #1
 80124e8:	2300      	moveq	r3, #0
 80124ea:	b2da      	uxtb	r2, r3
 80124ec:	4bac      	ldr	r3, [pc, #688]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80124ee:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80124f2:	230a      	movs	r3, #10
 80124f4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80124f8:	4ba9      	ldr	r3, [pc, #676]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80124fa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80124fe:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8012502:	4611      	mov	r1, r2
 8012504:	4618      	mov	r0, r3
 8012506:	f003 fbc4 	bl	8015c92 <RegionGetPhyParam>
 801250a:	4603      	mov	r3, r0
 801250c:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 801250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012510:	b25a      	sxtb	r2, r3
 8012512:	4ba3      	ldr	r3, [pc, #652]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012514:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012518:	2306      	movs	r3, #6
 801251a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801251e:	4ba0      	ldr	r3, [pc, #640]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012520:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012524:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8012528:	4611      	mov	r1, r2
 801252a:	4618      	mov	r0, r3
 801252c:	f003 fbb1 	bl	8015c92 <RegionGetPhyParam>
 8012530:	4603      	mov	r3, r0
 8012532:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8012534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012536:	b25a      	sxtb	r2, r3
 8012538:	4b99      	ldr	r3, [pc, #612]	@ (80127a0 <LoRaMacInitialization+0x384>)
 801253a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801253e:	2310      	movs	r3, #16
 8012540:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012544:	4b96      	ldr	r3, [pc, #600]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012546:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801254a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801254e:	4611      	mov	r1, r2
 8012550:	4618      	mov	r0, r3
 8012552:	f003 fb9e 	bl	8015c92 <RegionGetPhyParam>
 8012556:	4603      	mov	r3, r0
 8012558:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 801255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801255c:	4a90      	ldr	r2, [pc, #576]	@ (80127a0 <LoRaMacInitialization+0x384>)
 801255e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012562:	2311      	movs	r3, #17
 8012564:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012568:	4b8d      	ldr	r3, [pc, #564]	@ (80127a0 <LoRaMacInitialization+0x384>)
 801256a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801256e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8012572:	4611      	mov	r1, r2
 8012574:	4618      	mov	r0, r3
 8012576:	f003 fb8c 	bl	8015c92 <RegionGetPhyParam>
 801257a:	4603      	mov	r3, r0
 801257c:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 801257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012580:	4a87      	ldr	r2, [pc, #540]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012582:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8012586:	2312      	movs	r3, #18
 8012588:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801258c:	4b84      	ldr	r3, [pc, #528]	@ (80127a0 <LoRaMacInitialization+0x384>)
 801258e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012592:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8012596:	4611      	mov	r1, r2
 8012598:	4618      	mov	r0, r3
 801259a:	f003 fb7a 	bl	8015c92 <RegionGetPhyParam>
 801259e:	4603      	mov	r3, r0
 80125a0:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80125a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125a4:	4a7e      	ldr	r2, [pc, #504]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80125a6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80125aa:	2313      	movs	r3, #19
 80125ac:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125b0:	4b7b      	ldr	r3, [pc, #492]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80125b2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80125b6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80125ba:	4611      	mov	r1, r2
 80125bc:	4618      	mov	r0, r3
 80125be:	f003 fb68 	bl	8015c92 <RegionGetPhyParam>
 80125c2:	4603      	mov	r3, r0
 80125c4:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80125c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125c8:	4a75      	ldr	r2, [pc, #468]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80125ca:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80125ce:	2314      	movs	r3, #20
 80125d0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125d4:	4b72      	ldr	r3, [pc, #456]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80125d6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80125da:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80125de:	4611      	mov	r1, r2
 80125e0:	4618      	mov	r0, r3
 80125e2:	f003 fb56 	bl	8015c92 <RegionGetPhyParam>
 80125e6:	4603      	mov	r3, r0
 80125e8:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80125ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ec:	4a6c      	ldr	r2, [pc, #432]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80125ee:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80125f2:	2317      	movs	r3, #23
 80125f4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125f8:	4b69      	ldr	r3, [pc, #420]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80125fa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80125fe:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8012602:	4611      	mov	r1, r2
 8012604:	4618      	mov	r0, r3
 8012606:	f003 fb44 	bl	8015c92 <RegionGetPhyParam>
 801260a:	4603      	mov	r3, r0
 801260c:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012610:	b2da      	uxtb	r2, r3
 8012612:	4b63      	ldr	r3, [pc, #396]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012614:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012618:	2318      	movs	r3, #24
 801261a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801261e:	4b60      	ldr	r3, [pc, #384]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012620:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012624:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8012628:	4611      	mov	r1, r2
 801262a:	4618      	mov	r0, r3
 801262c:	f003 fb31 	bl	8015c92 <RegionGetPhyParam>
 8012630:	4603      	mov	r3, r0
 8012632:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012636:	4a5a      	ldr	r2, [pc, #360]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012638:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 801263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801263e:	4a58      	ldr	r2, [pc, #352]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012640:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012644:	2319      	movs	r3, #25
 8012646:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801264a:	4b55      	ldr	r3, [pc, #340]	@ (80127a0 <LoRaMacInitialization+0x384>)
 801264c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012650:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8012654:	4611      	mov	r1, r2
 8012656:	4618      	mov	r0, r3
 8012658:	f003 fb1b 	bl	8015c92 <RegionGetPhyParam>
 801265c:	4603      	mov	r3, r0
 801265e:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012662:	b2da      	uxtb	r2, r3
 8012664:	4b4e      	ldr	r3, [pc, #312]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012666:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801266c:	b2da      	uxtb	r2, r3
 801266e:	4b4c      	ldr	r3, [pc, #304]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012670:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8012674:	231e      	movs	r3, #30
 8012676:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801267a:	4b49      	ldr	r3, [pc, #292]	@ (80127a0 <LoRaMacInitialization+0x384>)
 801267c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012680:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8012684:	4611      	mov	r1, r2
 8012686:	4618      	mov	r0, r3
 8012688:	f003 fb03 	bl	8015c92 <RegionGetPhyParam>
 801268c:	4603      	mov	r3, r0
 801268e:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012692:	b2da      	uxtb	r2, r3
 8012694:	4b42      	ldr	r3, [pc, #264]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012696:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801269a:	231f      	movs	r3, #31
 801269c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80126a0:	4b3f      	ldr	r3, [pc, #252]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80126a2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80126a6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80126aa:	4611      	mov	r1, r2
 80126ac:	4618      	mov	r0, r3
 80126ae:	f003 faf0 	bl	8015c92 <RegionGetPhyParam>
 80126b2:	4603      	mov	r3, r0
 80126b4:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80126b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126b8:	b2da      	uxtb	r2, r3
 80126ba:	4b39      	ldr	r3, [pc, #228]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80126bc:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80126c0:	2320      	movs	r3, #32
 80126c2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80126c6:	4b36      	ldr	r3, [pc, #216]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80126c8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80126cc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80126d0:	4611      	mov	r1, r2
 80126d2:	4618      	mov	r0, r3
 80126d4:	f003 fadd 	bl	8015c92 <RegionGetPhyParam>
 80126d8:	4603      	mov	r3, r0
 80126da:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80126dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126de:	4a30      	ldr	r2, [pc, #192]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80126e0:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80126e4:	2321      	movs	r3, #33	@ 0x21
 80126e6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80126ea:	4b2d      	ldr	r3, [pc, #180]	@ (80127a0 <LoRaMacInitialization+0x384>)
 80126ec:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80126f0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80126f4:	4611      	mov	r1, r2
 80126f6:	4618      	mov	r0, r3
 80126f8:	f003 facb 	bl	8015c92 <RegionGetPhyParam>
 80126fc:	4603      	mov	r3, r0
 80126fe:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012702:	4a27      	ldr	r2, [pc, #156]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012704:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012708:	230b      	movs	r3, #11
 801270a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801270e:	4b24      	ldr	r3, [pc, #144]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012710:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012714:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8012718:	4611      	mov	r1, r2
 801271a:	4618      	mov	r0, r3
 801271c:	f003 fab9 	bl	8015c92 <RegionGetPhyParam>
 8012720:	4603      	mov	r3, r0
 8012722:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8012724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012726:	b29a      	uxth	r2, r3
 8012728:	4b1d      	ldr	r3, [pc, #116]	@ (80127a0 <LoRaMacInitialization+0x384>)
 801272a:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 801272e:	230c      	movs	r3, #12
 8012730:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012734:	4b1a      	ldr	r3, [pc, #104]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012736:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801273a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801273e:	4611      	mov	r1, r2
 8012740:	4618      	mov	r0, r3
 8012742:	f003 faa6 	bl	8015c92 <RegionGetPhyParam>
 8012746:	4603      	mov	r3, r0
 8012748:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 801274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801274c:	b29a      	uxth	r2, r3
 801274e:	4b14      	ldr	r3, [pc, #80]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012750:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8012754:	4b12      	ldr	r3, [pc, #72]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012756:	2201      	movs	r2, #1
 8012758:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 801275c:	4b10      	ldr	r3, [pc, #64]	@ (80127a0 <LoRaMacInitialization+0x384>)
 801275e:	220a      	movs	r2, #10
 8012760:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8012764:	4b0e      	ldr	r3, [pc, #56]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012766:	2206      	movs	r2, #6
 8012768:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 801276c:	4b0c      	ldr	r3, [pc, #48]	@ (80127a0 <LoRaMacInitialization+0x384>)
 801276e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012772:	4a0b      	ldr	r2, [pc, #44]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012774:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8012776:	4b0a      	ldr	r3, [pc, #40]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012778:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 801277c:	4b08      	ldr	r3, [pc, #32]	@ (80127a0 <LoRaMacInitialization+0x384>)
 801277e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8012782:	4b07      	ldr	r3, [pc, #28]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012784:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012788:	4a05      	ldr	r2, [pc, #20]	@ (80127a0 <LoRaMacInitialization+0x384>)
 801278a:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 801278c:	4b04      	ldr	r3, [pc, #16]	@ (80127a0 <LoRaMacInitialization+0x384>)
 801278e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012792:	4a03      	ldr	r2, [pc, #12]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012794:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8012796:	4b02      	ldr	r3, [pc, #8]	@ (80127a0 <LoRaMacInitialization+0x384>)
 8012798:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801279c:	e006      	b.n	80127ac <LoRaMacInitialization+0x390>
 801279e:	bf00      	nop
 80127a0:	20000c0c 	.word	0x20000c0c
 80127a4:	20000704 	.word	0x20000704
 80127a8:	01000300 	.word	0x01000300
 80127ac:	4a5f      	ldr	r2, [pc, #380]	@ (801292c <LoRaMacInitialization+0x510>)
 80127ae:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80127b0:	4b5e      	ldr	r3, [pc, #376]	@ (801292c <LoRaMacInitialization+0x510>)
 80127b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80127b6:	4a5d      	ldr	r2, [pc, #372]	@ (801292c <LoRaMacInitialization+0x510>)
 80127b8:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80127ba:	4b5c      	ldr	r3, [pc, #368]	@ (801292c <LoRaMacInitialization+0x510>)
 80127bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80127c0:	4a5a      	ldr	r2, [pc, #360]	@ (801292c <LoRaMacInitialization+0x510>)
 80127c2:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80127c4:	4b59      	ldr	r3, [pc, #356]	@ (801292c <LoRaMacInitialization+0x510>)
 80127c6:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 80127ca:	4b58      	ldr	r3, [pc, #352]	@ (801292c <LoRaMacInitialization+0x510>)
 80127cc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80127d0:	2300      	movs	r3, #0
 80127d2:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80127d6:	4b56      	ldr	r3, [pc, #344]	@ (8012930 <LoRaMacInitialization+0x514>)
 80127d8:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80127da:	4b56      	ldr	r3, [pc, #344]	@ (8012934 <LoRaMacInitialization+0x518>)
 80127dc:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80127de:	4b53      	ldr	r3, [pc, #332]	@ (801292c <LoRaMacInitialization+0x510>)
 80127e0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80127e4:	f107 0218 	add.w	r2, r7, #24
 80127e8:	4611      	mov	r1, r2
 80127ea:	4618      	mov	r0, r3
 80127ec:	f003 fa7a 	bl	8015ce4 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80127f0:	4a51      	ldr	r2, [pc, #324]	@ (8012938 <LoRaMacInitialization+0x51c>)
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 80127f8:	2000      	movs	r0, #0
 80127fa:	f7ff f813 	bl	8011824 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80127fe:	4b4b      	ldr	r3, [pc, #300]	@ (801292c <LoRaMacInitialization+0x510>)
 8012800:	2201      	movs	r2, #1
 8012802:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 8012806:	4a4c      	ldr	r2, [pc, #304]	@ (8012938 <LoRaMacInitialization+0x51c>)
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 801280e:	4b4a      	ldr	r3, [pc, #296]	@ (8012938 <LoRaMacInitialization+0x51c>)
 8012810:	2200      	movs	r2, #0
 8012812:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8012816:	4b48      	ldr	r3, [pc, #288]	@ (8012938 <LoRaMacInitialization+0x51c>)
 8012818:	2201      	movs	r2, #1
 801281a:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 801281e:	4b43      	ldr	r3, [pc, #268]	@ (801292c <LoRaMacInitialization+0x510>)
 8012820:	2200      	movs	r2, #0
 8012822:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012824:	4b41      	ldr	r3, [pc, #260]	@ (801292c <LoRaMacInitialization+0x510>)
 8012826:	2200      	movs	r2, #0
 8012828:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801282a:	2300      	movs	r3, #0
 801282c:	9300      	str	r3, [sp, #0]
 801282e:	4b43      	ldr	r3, [pc, #268]	@ (801293c <LoRaMacInitialization+0x520>)
 8012830:	2200      	movs	r2, #0
 8012832:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012836:	4842      	ldr	r0, [pc, #264]	@ (8012940 <LoRaMacInitialization+0x524>)
 8012838:	f009 ff54 	bl	801c6e4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801283c:	2300      	movs	r3, #0
 801283e:	9300      	str	r3, [sp, #0]
 8012840:	4b40      	ldr	r3, [pc, #256]	@ (8012944 <LoRaMacInitialization+0x528>)
 8012842:	2200      	movs	r2, #0
 8012844:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012848:	483f      	ldr	r0, [pc, #252]	@ (8012948 <LoRaMacInitialization+0x52c>)
 801284a:	f009 ff4b 	bl	801c6e4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 801284e:	2300      	movs	r3, #0
 8012850:	9300      	str	r3, [sp, #0]
 8012852:	4b3e      	ldr	r3, [pc, #248]	@ (801294c <LoRaMacInitialization+0x530>)
 8012854:	2200      	movs	r2, #0
 8012856:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801285a:	483d      	ldr	r0, [pc, #244]	@ (8012950 <LoRaMacInitialization+0x534>)
 801285c:	f009 ff42 	bl	801c6e4 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8012860:	2300      	movs	r3, #0
 8012862:	9300      	str	r3, [sp, #0]
 8012864:	4b3b      	ldr	r3, [pc, #236]	@ (8012954 <LoRaMacInitialization+0x538>)
 8012866:	2200      	movs	r2, #0
 8012868:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801286c:	483a      	ldr	r0, [pc, #232]	@ (8012958 <LoRaMacInitialization+0x53c>)
 801286e:	f009 ff39 	bl	801c6e4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8012872:	4c2e      	ldr	r4, [pc, #184]	@ (801292c <LoRaMacInitialization+0x510>)
 8012874:	463b      	mov	r3, r7
 8012876:	4618      	mov	r0, r3
 8012878:	f009 faaa 	bl	801bdd0 <SysTimeGetMcuTime>
 801287c:	f504 7390 	add.w	r3, r4, #288	@ 0x120
 8012880:	463a      	mov	r2, r7
 8012882:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012886:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801288a:	4b2b      	ldr	r3, [pc, #172]	@ (8012938 <LoRaMacInitialization+0x51c>)
 801288c:	4a33      	ldr	r2, [pc, #204]	@ (801295c <LoRaMacInitialization+0x540>)
 801288e:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8012892:	4b29      	ldr	r3, [pc, #164]	@ (8012938 <LoRaMacInitialization+0x51c>)
 8012894:	4a32      	ldr	r2, [pc, #200]	@ (8012960 <LoRaMacInitialization+0x544>)
 8012896:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801289a:	4b27      	ldr	r3, [pc, #156]	@ (8012938 <LoRaMacInitialization+0x51c>)
 801289c:	4a31      	ldr	r2, [pc, #196]	@ (8012964 <LoRaMacInitialization+0x548>)
 801289e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80128a2:	4b25      	ldr	r3, [pc, #148]	@ (8012938 <LoRaMacInitialization+0x51c>)
 80128a4:	4a30      	ldr	r2, [pc, #192]	@ (8012968 <LoRaMacInitialization+0x54c>)
 80128a6:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80128aa:	4b23      	ldr	r3, [pc, #140]	@ (8012938 <LoRaMacInitialization+0x51c>)
 80128ac:	4a2f      	ldr	r2, [pc, #188]	@ (801296c <LoRaMacInitialization+0x550>)
 80128ae:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80128b2:	4b2f      	ldr	r3, [pc, #188]	@ (8012970 <LoRaMacInitialization+0x554>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	482f      	ldr	r0, [pc, #188]	@ (8012974 <LoRaMacInitialization+0x558>)
 80128b8:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 80128ba:	482f      	ldr	r0, [pc, #188]	@ (8012978 <LoRaMacInitialization+0x55c>)
 80128bc:	f7fa fc72 	bl	800d1a4 <SecureElementInit>
 80128c0:	4603      	mov	r3, r0
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d001      	beq.n	80128ca <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80128c6:	2311      	movs	r3, #17
 80128c8:	e02b      	b.n	8012922 <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80128ca:	4818      	ldr	r0, [pc, #96]	@ (801292c <LoRaMacInitialization+0x510>)
 80128cc:	f002 faf8 	bl	8014ec0 <LoRaMacCryptoInit>
 80128d0:	4603      	mov	r3, r0
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d001      	beq.n	80128da <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80128d6:	2311      	movs	r3, #17
 80128d8:	e023      	b.n	8012922 <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80128da:	f001 fbf3 	bl	80140c4 <LoRaMacCommandsInit>
 80128de:	4603      	mov	r3, r0
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d001      	beq.n	80128e8 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80128e4:	2313      	movs	r3, #19
 80128e6:	e01c      	b.n	8012922 <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80128e8:	4824      	ldr	r0, [pc, #144]	@ (801297c <LoRaMacInitialization+0x560>)
 80128ea:	f002 fbb3 	bl	8015054 <LoRaMacCryptoSetMulticastReference>
 80128ee:	4603      	mov	r3, r0
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d001      	beq.n	80128f8 <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80128f4:	2311      	movs	r3, #17
 80128f6:	e014      	b.n	8012922 <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80128f8:	4b1d      	ldr	r3, [pc, #116]	@ (8012970 <LoRaMacInitialization+0x554>)
 80128fa:	695b      	ldr	r3, [r3, #20]
 80128fc:	4798      	blx	r3
 80128fe:	4603      	mov	r3, r0
 8012900:	4618      	mov	r0, r3
 8012902:	f005 fdd7 	bl	80184b4 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012906:	4b1a      	ldr	r3, [pc, #104]	@ (8012970 <LoRaMacInitialization+0x554>)
 8012908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801290a:	4a08      	ldr	r2, [pc, #32]	@ (801292c <LoRaMacInitialization+0x510>)
 801290c:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8012910:	4610      	mov	r0, r2
 8012912:	4798      	blx	r3
    Radio.Sleep( );
 8012914:	4b16      	ldr	r3, [pc, #88]	@ (8012970 <LoRaMacInitialization+0x554>)
 8012916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012918:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801291a:	2001      	movs	r0, #1
 801291c:	f7fd fa8e 	bl	800fe3c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8012920:	2300      	movs	r3, #0
}
 8012922:	4618      	mov	r0, r3
 8012924:	3734      	adds	r7, #52	@ 0x34
 8012926:	46bd      	mov	sp, r7
 8012928:	bd90      	pop	{r4, r7, pc}
 801292a:	bf00      	nop
 801292c:	20000c0c 	.word	0x20000c0c
 8012930:	20000e2c 	.word	0x20000e2c
 8012934:	20000ed0 	.word	0x20000ed0
 8012938:	20000704 	.word	0x20000704
 801293c:	0801037d 	.word	0x0801037d
 8012940:	20000a6c 	.word	0x20000a6c
 8012944:	080103f1 	.word	0x080103f1
 8012948:	20000a84 	.word	0x20000a84
 801294c:	0801045d 	.word	0x0801045d
 8012950:	20000a9c 	.word	0x20000a9c
 8012954:	080104d1 	.word	0x080104d1
 8012958:	20000af8 	.word	0x20000af8
 801295c:	0800ef3d 	.word	0x0800ef3d
 8012960:	0800ef99 	.word	0x0800ef99
 8012964:	0800f031 	.word	0x0800f031
 8012968:	0800f005 	.word	0x0800f005
 801296c:	0800f04d 	.word	0x0800f04d
 8012970:	0801df78 	.word	0x0801df78
 8012974:	20000a50 	.word	0x20000a50
 8012978:	20000d54 	.word	0x20000d54
 801297c:	20000cf4 	.word	0x20000cf4

08012980 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8012980:	b580      	push	{r7, lr}
 8012982:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8012984:	4b04      	ldr	r3, [pc, #16]	@ (8012998 <LoRaMacStart+0x18>)
 8012986:	2200      	movs	r2, #0
 8012988:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 801298c:	f7fc fb74 	bl	800f078 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8012990:	2300      	movs	r3, #0
}
 8012992:	4618      	mov	r0, r3
 8012994:	bd80      	pop	{r7, pc}
 8012996:	bf00      	nop
 8012998:	20000704 	.word	0x20000704

0801299c <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 801299c:	b580      	push	{r7, lr}
 801299e:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 80129a0:	f7fd fa20 	bl	800fde4 <LoRaMacIsBusy>
 80129a4:	4603      	mov	r3, r0
 80129a6:	f083 0301 	eor.w	r3, r3, #1
 80129aa:	b2db      	uxtb	r3, r3
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d00d      	beq.n	80129cc <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80129b0:	4b0b      	ldr	r3, [pc, #44]	@ (80129e0 <LoRaMacStop+0x44>)
 80129b2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80129b6:	2b02      	cmp	r3, #2
 80129b8:	d102      	bne.n	80129c0 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 80129ba:	4b0a      	ldr	r3, [pc, #40]	@ (80129e4 <LoRaMacStop+0x48>)
 80129bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129be:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 80129c0:	4b09      	ldr	r3, [pc, #36]	@ (80129e8 <LoRaMacStop+0x4c>)
 80129c2:	2201      	movs	r2, #1
 80129c4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 80129c8:	2300      	movs	r3, #0
 80129ca:	e007      	b.n	80129dc <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80129cc:	4b06      	ldr	r3, [pc, #24]	@ (80129e8 <LoRaMacStop+0x4c>)
 80129ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80129d2:	2b01      	cmp	r3, #1
 80129d4:	d101      	bne.n	80129da <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 80129d6:	2300      	movs	r3, #0
 80129d8:	e000      	b.n	80129dc <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 80129da:	2301      	movs	r3, #1
}
 80129dc:	4618      	mov	r0, r3
 80129de:	bd80      	pop	{r7, pc}
 80129e0:	20000c0c 	.word	0x20000c0c
 80129e4:	0801df78 	.word	0x0801df78
 80129e8:	20000704 	.word	0x20000704

080129ec <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80129f0:	4812      	ldr	r0, [pc, #72]	@ (8012a3c <LoRaMacHalt+0x50>)
 80129f2:	f009 ff1b 	bl	801c82c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80129f6:	4812      	ldr	r0, [pc, #72]	@ (8012a40 <LoRaMacHalt+0x54>)
 80129f8:	f009 ff18 	bl	801c82c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80129fc:	4811      	ldr	r0, [pc, #68]	@ (8012a44 <LoRaMacHalt+0x58>)
 80129fe:	f009 ff15 	bl	801c82c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8012a02:	4811      	ldr	r0, [pc, #68]	@ (8012a48 <LoRaMacHalt+0x5c>)
 8012a04:	f009 ff12 	bl	801c82c <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8012a08:	f001 f9db 	bl	8013dc2 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8012a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8012a4c <LoRaMacHalt+0x60>)
 8012a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a10:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8012a12:	4b0f      	ldr	r3, [pc, #60]	@ (8012a50 <LoRaMacHalt+0x64>)
 8012a14:	2200      	movs	r2, #0
 8012a16:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8012a1a:	480e      	ldr	r0, [pc, #56]	@ (8012a54 <LoRaMacHalt+0x68>)
 8012a1c:	f7fd fbaa 	bl	8010174 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8012a20:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 8012a24:	490b      	ldr	r1, [pc, #44]	@ (8012a54 <LoRaMacHalt+0x68>)
 8012a26:	480c      	ldr	r0, [pc, #48]	@ (8012a58 <LoRaMacHalt+0x6c>)
 8012a28:	f005 fd69 	bl	80184fe <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8012a2c:	4b08      	ldr	r3, [pc, #32]	@ (8012a50 <LoRaMacHalt+0x64>)
 8012a2e:	2201      	movs	r2, #1
 8012a30:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8012a34:	2300      	movs	r3, #0
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	20000a6c 	.word	0x20000a6c
 8012a40:	20000a84 	.word	0x20000a84
 8012a44:	20000a9c 	.word	0x20000a9c
 8012a48:	20000af8 	.word	0x20000af8
 8012a4c:	0801df78 	.word	0x0801df78
 8012a50:	20000704 	.word	0x20000704
 8012a54:	20000c0c 	.word	0x20000c0c
 8012a58:	20001384 	.word	0x20001384

08012a5c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b08a      	sub	sp, #40	@ 0x28
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	4603      	mov	r3, r0
 8012a64:	6039      	str	r1, [r7, #0]
 8012a66:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012a68:	4b3e      	ldr	r3, [pc, #248]	@ (8012b64 <LoRaMacQueryTxPossible+0x108>)
 8012a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a6c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8012b64 <LoRaMacQueryTxPossible+0x108>)
 8012a70:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 8012a74:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012a76:	4b3b      	ldr	r3, [pc, #236]	@ (8012b64 <LoRaMacQueryTxPossible+0x108>)
 8012a78:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 8012a7c:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8012a7e:	2300      	movs	r3, #0
 8012a80:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d101      	bne.n	8012a8c <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012a88:	2303      	movs	r3, #3
 8012a8a:	e066      	b.n	8012b5a <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8012a8c:	4b35      	ldr	r3, [pc, #212]	@ (8012b64 <LoRaMacQueryTxPossible+0x108>)
 8012a8e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8012a92:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8012a94:	2300      	movs	r3, #0
 8012a96:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012a98:	4b32      	ldr	r3, [pc, #200]	@ (8012b64 <LoRaMacQueryTxPossible+0x108>)
 8012a9a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8012a9e:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012aa0:	4b30      	ldr	r3, [pc, #192]	@ (8012b64 <LoRaMacQueryTxPossible+0x108>)
 8012aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012aa4:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8012b64 <LoRaMacQueryTxPossible+0x108>)
 8012aa8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8012aac:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012aae:	4b2d      	ldr	r3, [pc, #180]	@ (8012b64 <LoRaMacQueryTxPossible+0x108>)
 8012ab0:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8012ab4:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8012b64 <LoRaMacQueryTxPossible+0x108>)
 8012ab8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012abc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012ac0:	4b28      	ldr	r3, [pc, #160]	@ (8012b64 <LoRaMacQueryTxPossible+0x108>)
 8012ac2:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8012ac6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012aca:	4b26      	ldr	r3, [pc, #152]	@ (8012b64 <LoRaMacQueryTxPossible+0x108>)
 8012acc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8012ad0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8012ad4:	4b23      	ldr	r3, [pc, #140]	@ (8012b64 <LoRaMacQueryTxPossible+0x108>)
 8012ad6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012ada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8012ade:	f107 0310 	add.w	r3, r7, #16
 8012ae2:	f107 020e 	add.w	r2, r7, #14
 8012ae6:	f107 010f 	add.w	r1, r7, #15
 8012aea:	f107 0014 	add.w	r0, r7, #20
 8012aee:	f001 f8d3 	bl	8013c98 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012af6:	4618      	mov	r0, r3
 8012af8:	f7fd fe3c 	bl	8010774 <GetMaxAppPayloadWithoutFOptsLength>
 8012afc:	4603      	mov	r3, r0
 8012afe:	461a      	mov	r2, r3
 8012b00:	683b      	ldr	r3, [r7, #0]
 8012b02:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012b04:	f107 0308 	add.w	r3, r7, #8
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f001 fbe1 	bl	80142d0 <LoRaMacCommandsGetSizeSerializedCmds>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d001      	beq.n	8012b18 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012b14:	2313      	movs	r3, #19
 8012b16:	e020      	b.n	8012b5a <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	2b0f      	cmp	r3, #15
 8012b1c:	d819      	bhi.n	8012b52 <LoRaMacQueryTxPossible+0xf6>
 8012b1e:	683b      	ldr	r3, [r7, #0]
 8012b20:	785b      	ldrb	r3, [r3, #1]
 8012b22:	461a      	mov	r2, r3
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d313      	bcc.n	8012b52 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	785a      	ldrb	r2, [r3, #1]
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	b2db      	uxtb	r3, r3
 8012b32:	1ad3      	subs	r3, r2, r3
 8012b34:	b2da      	uxtb	r2, r3
 8012b36:	683b      	ldr	r3, [r7, #0]
 8012b38:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012b3a:	683b      	ldr	r3, [r7, #0]
 8012b3c:	785b      	ldrb	r3, [r3, #1]
 8012b3e:	4619      	mov	r1, r3
 8012b40:	79fa      	ldrb	r2, [r7, #7]
 8012b42:	68bb      	ldr	r3, [r7, #8]
 8012b44:	4413      	add	r3, r2
 8012b46:	4299      	cmp	r1, r3
 8012b48:	d301      	bcc.n	8012b4e <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	e005      	b.n	8012b5a <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8012b4e:	2308      	movs	r3, #8
 8012b50:	e003      	b.n	8012b5a <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8012b52:	683b      	ldr	r3, [r7, #0]
 8012b54:	2200      	movs	r2, #0
 8012b56:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8012b58:	2308      	movs	r3, #8
    }
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	3728      	adds	r7, #40	@ 0x28
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}
 8012b62:	bf00      	nop
 8012b64:	20000c0c 	.word	0x20000c0c

08012b68 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8012b68:	b590      	push	{r4, r7, lr}
 8012b6a:	b087      	sub	sp, #28
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012b70:	2300      	movs	r3, #0
 8012b72:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d101      	bne.n	8012b7e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012b7a:	2303      	movs	r3, #3
 8012b7c:	e1a4      	b.n	8012ec8 <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	781b      	ldrb	r3, [r3, #0]
 8012b82:	2b3f      	cmp	r3, #63	@ 0x3f
 8012b84:	f200 8199 	bhi.w	8012eba <LoRaMacMibGetRequestConfirm+0x352>
 8012b88:	a201      	add	r2, pc, #4	@ (adr r2, 8012b90 <LoRaMacMibGetRequestConfirm+0x28>)
 8012b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b8e:	bf00      	nop
 8012b90:	08012c91 	.word	0x08012c91
 8012b94:	08012c9d 	.word	0x08012c9d
 8012b98:	08012ca9 	.word	0x08012ca9
 8012b9c:	08012cb5 	.word	0x08012cb5
 8012ba0:	08012cc1 	.word	0x08012cc1
 8012ba4:	08012ccd 	.word	0x08012ccd
 8012ba8:	08012cd9 	.word	0x08012cd9
 8012bac:	08012ebb 	.word	0x08012ebb
 8012bb0:	08012ebb 	.word	0x08012ebb
 8012bb4:	08012ebb 	.word	0x08012ebb
 8012bb8:	08012ebb 	.word	0x08012ebb
 8012bbc:	08012ebb 	.word	0x08012ebb
 8012bc0:	08012ebb 	.word	0x08012ebb
 8012bc4:	08012ebb 	.word	0x08012ebb
 8012bc8:	08012ebb 	.word	0x08012ebb
 8012bcc:	08012ced 	.word	0x08012ced
 8012bd0:	08012cf9 	.word	0x08012cf9
 8012bd4:	08012d05 	.word	0x08012d05
 8012bd8:	08012d27 	.word	0x08012d27
 8012bdc:	08012d39 	.word	0x08012d39
 8012be0:	08012d4b 	.word	0x08012d4b
 8012be4:	08012d5d 	.word	0x08012d5d
 8012be8:	08012d91 	.word	0x08012d91
 8012bec:	08012d6f 	.word	0x08012d6f
 8012bf0:	08012db3 	.word	0x08012db3
 8012bf4:	08012dbf 	.word	0x08012dbf
 8012bf8:	08012dc9 	.word	0x08012dc9
 8012bfc:	08012dd3 	.word	0x08012dd3
 8012c00:	08012ddd 	.word	0x08012ddd
 8012c04:	08012de7 	.word	0x08012de7
 8012c08:	08012df1 	.word	0x08012df1
 8012c0c:	08012dfd 	.word	0x08012dfd
 8012c10:	08012e15 	.word	0x08012e15
 8012c14:	08012e09 	.word	0x08012e09
 8012c18:	08012e21 	.word	0x08012e21
 8012c1c:	08012e2b 	.word	0x08012e2b
 8012c20:	08012e37 	.word	0x08012e37
 8012c24:	08012e53 	.word	0x08012e53
 8012c28:	08012e43 	.word	0x08012e43
 8012c2c:	08012e4b 	.word	0x08012e4b
 8012c30:	08012ebb 	.word	0x08012ebb
 8012c34:	08012e5f 	.word	0x08012e5f
 8012c38:	08012ebb 	.word	0x08012ebb
 8012c3c:	08012ebb 	.word	0x08012ebb
 8012c40:	08012ebb 	.word	0x08012ebb
 8012c44:	08012ebb 	.word	0x08012ebb
 8012c48:	08012ebb 	.word	0x08012ebb
 8012c4c:	08012ebb 	.word	0x08012ebb
 8012c50:	08012ebb 	.word	0x08012ebb
 8012c54:	08012ebb 	.word	0x08012ebb
 8012c58:	08012ebb 	.word	0x08012ebb
 8012c5c:	08012ebb 	.word	0x08012ebb
 8012c60:	08012ebb 	.word	0x08012ebb
 8012c64:	08012ebb 	.word	0x08012ebb
 8012c68:	08012ebb 	.word	0x08012ebb
 8012c6c:	08012ebb 	.word	0x08012ebb
 8012c70:	08012ebb 	.word	0x08012ebb
 8012c74:	08012e73 	.word	0x08012e73
 8012c78:	08012e7f 	.word	0x08012e7f
 8012c7c:	08012e8b 	.word	0x08012e8b
 8012c80:	08012e97 	.word	0x08012e97
 8012c84:	08012ea3 	.word	0x08012ea3
 8012c88:	08012eaf 	.word	0x08012eaf
 8012c8c:	08012eb5 	.word	0x08012eb5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8012c90:	4b8f      	ldr	r3, [pc, #572]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012c92:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	711a      	strb	r2, [r3, #4]
            break;
 8012c9a:	e114      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012c9c:	4b8c      	ldr	r3, [pc, #560]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012c9e:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	711a      	strb	r2, [r3, #4]
            break;
 8012ca6:	e10e      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	685b      	ldr	r3, [r3, #4]
 8012cac:	4618      	mov	r0, r3
 8012cae:	f7fa fd4f 	bl	800d750 <SecureElementGetDevEui>
            break;
 8012cb2:	e108      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	685b      	ldr	r3, [r3, #4]
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f7fa fd79 	bl	800d7b0 <SecureElementGetJoinEui>
            break;
 8012cbe:	e102      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8012cc0:	4b83      	ldr	r3, [pc, #524]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012cc2:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	711a      	strb	r2, [r3, #4]
            break;
 8012cca:	e0fc      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8012ccc:	4b80      	ldr	r3, [pc, #512]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012cce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	605a      	str	r2, [r3, #4]
            break;
 8012cd6:	e0f6      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8012cd8:	4b7d      	ldr	r3, [pc, #500]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012cda:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	3304      	adds	r3, #4
 8012ce2:	4619      	mov	r1, r3
 8012ce4:	4610      	mov	r0, r2
 8012ce6:	f7fa fd95 	bl	800d814 <SecureElementGetDevAddr>
            break;
 8012cea:	e0ec      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8012cec:	4b78      	ldr	r3, [pc, #480]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012cee:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	711a      	strb	r2, [r3, #4]
            break;
 8012cf6:	e0e6      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012cf8:	4b75      	ldr	r3, [pc, #468]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012cfa:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	711a      	strb	r2, [r3, #4]
            break;
 8012d02:	e0e0      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012d04:	231d      	movs	r3, #29
 8012d06:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d08:	4b71      	ldr	r3, [pc, #452]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012d0a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d0e:	f107 0210 	add.w	r2, r7, #16
 8012d12:	4611      	mov	r1, r2
 8012d14:	4618      	mov	r0, r3
 8012d16:	f002 ffbc 	bl	8015c92 <RegionGetPhyParam>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8012d1e:	68fa      	ldr	r2, [r7, #12]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	605a      	str	r2, [r3, #4]
            break;
 8012d24:	e0cf      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	4a69      	ldr	r2, [pc, #420]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012d2a:	3304      	adds	r3, #4
 8012d2c:	326c      	adds	r2, #108	@ 0x6c
 8012d2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d32:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012d36:	e0c6      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	4a65      	ldr	r2, [pc, #404]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012d3c:	3304      	adds	r3, #4
 8012d3e:	32b4      	adds	r2, #180	@ 0xb4
 8012d40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d44:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012d48:	e0bd      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	4a60      	ldr	r2, [pc, #384]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012d4e:	3304      	adds	r3, #4
 8012d50:	3274      	adds	r2, #116	@ 0x74
 8012d52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d56:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012d5a:	e0b4      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	4a5c      	ldr	r2, [pc, #368]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012d60:	3304      	adds	r3, #4
 8012d62:	32bc      	adds	r2, #188	@ 0xbc
 8012d64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d68:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012d6c:	e0ab      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8012d6e:	231b      	movs	r3, #27
 8012d70:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d72:	4b57      	ldr	r3, [pc, #348]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012d74:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d78:	f107 0210 	add.w	r2, r7, #16
 8012d7c:	4611      	mov	r1, r2
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f002 ff87 	bl	8015c92 <RegionGetPhyParam>
 8012d84:	4603      	mov	r3, r0
 8012d86:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012d88:	68fa      	ldr	r2, [r7, #12]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	605a      	str	r2, [r3, #4]
            break;
 8012d8e:	e09a      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8012d90:	231a      	movs	r3, #26
 8012d92:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d94:	4b4e      	ldr	r3, [pc, #312]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012d96:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d9a:	f107 0210 	add.w	r2, r7, #16
 8012d9e:	4611      	mov	r1, r2
 8012da0:	4618      	mov	r0, r3
 8012da2:	f002 ff76 	bl	8015c92 <RegionGetPhyParam>
 8012da6:	4603      	mov	r3, r0
 8012da8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8012daa:	68fa      	ldr	r2, [r7, #12]
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	605a      	str	r2, [r3, #4]
            break;
 8012db0:	e089      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012db2:	4b47      	ldr	r3, [pc, #284]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012db4:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	711a      	strb	r2, [r3, #4]
            break;
 8012dbc:	e083      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8012dbe:	4b44      	ldr	r3, [pc, #272]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012dc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	605a      	str	r2, [r3, #4]
            break;
 8012dc6:	e07e      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8012dc8:	4b41      	ldr	r3, [pc, #260]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012dca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	605a      	str	r2, [r3, #4]
            break;
 8012dd0:	e079      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8012dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012dd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	605a      	str	r2, [r3, #4]
            break;
 8012dda:	e074      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8012ddc:	4b3c      	ldr	r3, [pc, #240]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012dde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	605a      	str	r2, [r3, #4]
            break;
 8012de4:	e06f      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8012de6:	4b3a      	ldr	r3, [pc, #232]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012de8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	605a      	str	r2, [r3, #4]
            break;
 8012dee:	e06a      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012df0:	4b37      	ldr	r3, [pc, #220]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012df2:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	711a      	strb	r2, [r3, #4]
            break;
 8012dfa:	e064      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012dfc:	4b34      	ldr	r3, [pc, #208]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012dfe:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	711a      	strb	r2, [r3, #4]
            break;
 8012e06:	e05e      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012e08:	4b31      	ldr	r3, [pc, #196]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012e0a:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	711a      	strb	r2, [r3, #4]
            break;
 8012e12:	e058      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012e14:	4b2e      	ldr	r3, [pc, #184]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012e16:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	711a      	strb	r2, [r3, #4]
            break;
 8012e1e:	e052      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8012e20:	4b2b      	ldr	r3, [pc, #172]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012e22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	605a      	str	r2, [r3, #4]
            break;
 8012e28:	e04d      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8012e2a:	4b29      	ldr	r3, [pc, #164]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012e2c:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	711a      	strb	r2, [r3, #4]
            break;
 8012e34:	e047      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012e36:	4b26      	ldr	r3, [pc, #152]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012e38:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	605a      	str	r2, [r3, #4]
            break;
 8012e40:	e041      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	4a22      	ldr	r2, [pc, #136]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012e46:	605a      	str	r2, [r3, #4]
            break;
 8012e48:	e03d      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	4a21      	ldr	r2, [pc, #132]	@ (8012ed4 <LoRaMacMibGetRequestConfirm+0x36c>)
 8012e4e:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8012e50:	e039      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012e52:	4b1f      	ldr	r3, [pc, #124]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012e54:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	605a      	str	r2, [r3, #4]
            break;
 8012e5c:	e033      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	4a1b      	ldr	r2, [pc, #108]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012e62:	f8d2 2128 	ldr.w	r2, [r2, #296]	@ 0x128
 8012e66:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8012e68:	687c      	ldr	r4, [r7, #4]
 8012e6a:	f003 f89b 	bl	8015fa4 <RegionGetVersion>
 8012e6e:	60a0      	str	r0, [r4, #8]
            break;
 8012e70:	e029      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8012e72:	4b17      	ldr	r3, [pc, #92]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012e74:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	605a      	str	r2, [r3, #4]
            break;
 8012e7c:	e023      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012e7e:	4b14      	ldr	r3, [pc, #80]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012e80:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	809a      	strh	r2, [r3, #4]
            break;
 8012e88:	e01d      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012e8a:	4b11      	ldr	r3, [pc, #68]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012e8c:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	809a      	strh	r2, [r3, #4]
            break;
 8012e94:	e017      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8012e96:	4b0e      	ldr	r3, [pc, #56]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012e98:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	809a      	strh	r2, [r3, #4]
            break;
 8012ea0:	e011      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8012ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8012ed0 <LoRaMacMibGetRequestConfirm+0x368>)
 8012ea4:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	809a      	strh	r2, [r3, #4]
            break;
 8012eac:	e00b      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012eae:	2318      	movs	r3, #24
 8012eb0:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012eb2:	e008      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8012eb4:	2318      	movs	r3, #24
 8012eb6:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8012eb8:	e005      	b.n	8012ec6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	f000 ff98 	bl	8013df0 <LoRaMacClassBMibGetRequestConfirm>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	75fb      	strb	r3, [r7, #23]
            break;
 8012ec4:	bf00      	nop
        }
    }
    return status;
 8012ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ec8:	4618      	mov	r0, r3
 8012eca:	371c      	adds	r7, #28
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd90      	pop	{r4, r7, pc}
 8012ed0:	20000c0c 	.word	0x20000c0c
 8012ed4:	20001384 	.word	0x20001384

08012ed8 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b086      	sub	sp, #24
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d101      	bne.n	8012eee <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012eea:	2303      	movs	r3, #3
 8012eec:	e382      	b.n	80135f4 <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8012eee:	4bbb      	ldr	r3, [pc, #748]	@ (80131dc <LoRaMacMibSetRequestConfirm+0x304>)
 8012ef0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012ef4:	f003 0302 	and.w	r3, r3, #2
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d001      	beq.n	8012f00 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012efc:	2301      	movs	r3, #1
 8012efe:	e379      	b.n	80135f4 <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	781b      	ldrb	r3, [r3, #0]
 8012f04:	2b3f      	cmp	r3, #63	@ 0x3f
 8012f06:	f200 8353 	bhi.w	80135b0 <LoRaMacMibSetRequestConfirm+0x6d8>
 8012f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8012f10 <LoRaMacMibSetRequestConfirm+0x38>)
 8012f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f10:	08013011 	.word	0x08013011
 8012f14:	08013021 	.word	0x08013021
 8012f18:	0801303b 	.word	0x0801303b
 8012f1c:	08013053 	.word	0x08013053
 8012f20:	0801306b 	.word	0x0801306b
 8012f24:	08013077 	.word	0x08013077
 8012f28:	08013083 	.word	0x08013083
 8012f2c:	080130ad 	.word	0x080130ad
 8012f30:	080130d3 	.word	0x080130d3
 8012f34:	080130f9 	.word	0x080130f9
 8012f38:	0801311f 	.word	0x0801311f
 8012f3c:	08013145 	.word	0x08013145
 8012f40:	0801316b 	.word	0x0801316b
 8012f44:	08013191 	.word	0x08013191
 8012f48:	080131b7 	.word	0x080131b7
 8012f4c:	080131e5 	.word	0x080131e5
 8012f50:	08013205 	.word	0x08013205
 8012f54:	080135b1 	.word	0x080135b1
 8012f58:	08013211 	.word	0x08013211
 8012f5c:	08013281 	.word	0x08013281
 8012f60:	080132c1 	.word	0x080132c1
 8012f64:	08013323 	.word	0x08013323
 8012f68:	08013393 	.word	0x08013393
 8012f6c:	08013363 	.word	0x08013363
 8012f70:	080133c3 	.word	0x080133c3
 8012f74:	080133e5 	.word	0x080133e5
 8012f78:	080133ef 	.word	0x080133ef
 8012f7c:	080133f9 	.word	0x080133f9
 8012f80:	08013403 	.word	0x08013403
 8012f84:	0801340d 	.word	0x0801340d
 8012f88:	08013417 	.word	0x08013417
 8012f8c:	08013449 	.word	0x08013449
 8012f90:	080134bd 	.word	0x080134bd
 8012f94:	08013483 	.word	0x08013483
 8012f98:	080134ef 	.word	0x080134ef
 8012f9c:	08013505 	.word	0x08013505
 8012fa0:	0801351d 	.word	0x0801351d
 8012fa4:	08013529 	.word	0x08013529
 8012fa8:	08013535 	.word	0x08013535
 8012fac:	080135b1 	.word	0x080135b1
 8012fb0:	0801353f 	.word	0x0801353f
 8012fb4:	080135b1 	.word	0x080135b1
 8012fb8:	080135b1 	.word	0x080135b1
 8012fbc:	080135b1 	.word	0x080135b1
 8012fc0:	080135b1 	.word	0x080135b1
 8012fc4:	080135b1 	.word	0x080135b1
 8012fc8:	080135b1 	.word	0x080135b1
 8012fcc:	080135b1 	.word	0x080135b1
 8012fd0:	080135b1 	.word	0x080135b1
 8012fd4:	080135b1 	.word	0x080135b1
 8012fd8:	080135b1 	.word	0x080135b1
 8012fdc:	080135b1 	.word	0x080135b1
 8012fe0:	080135b1 	.word	0x080135b1
 8012fe4:	080135b1 	.word	0x080135b1
 8012fe8:	080135b1 	.word	0x080135b1
 8012fec:	080135b1 	.word	0x080135b1
 8012ff0:	080135b1 	.word	0x080135b1
 8012ff4:	08013569 	.word	0x08013569
 8012ff8:	08013575 	.word	0x08013575
 8012ffc:	08013581 	.word	0x08013581
 8013000:	0801358d 	.word	0x0801358d
 8013004:	08013599 	.word	0x08013599
 8013008:	080135a5 	.word	0x080135a5
 801300c:	080135ab 	.word	0x080135ab
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	791b      	ldrb	r3, [r3, #4]
 8013014:	4618      	mov	r0, r3
 8013016:	f7fd fac5 	bl	80105a4 <SwitchClass>
 801301a:	4603      	mov	r3, r0
 801301c:	75fb      	strb	r3, [r7, #23]
            break;
 801301e:	e2e8      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	791b      	ldrb	r3, [r3, #4]
 8013024:	2b02      	cmp	r3, #2
 8013026:	d005      	beq.n	8013034 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	791a      	ldrb	r2, [r3, #4]
 801302c:	4b6c      	ldr	r3, [pc, #432]	@ (80131e0 <LoRaMacMibSetRequestConfirm+0x308>)
 801302e:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013032:	e2de      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013034:	2303      	movs	r3, #3
 8013036:	75fb      	strb	r3, [r7, #23]
            break;
 8013038:	e2db      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	685b      	ldr	r3, [r3, #4]
 801303e:	4618      	mov	r0, r3
 8013040:	f7fa fb6e 	bl	800d720 <SecureElementSetDevEui>
 8013044:	4603      	mov	r3, r0
 8013046:	2b00      	cmp	r3, #0
 8013048:	f000 82b8 	beq.w	80135bc <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801304c:	2303      	movs	r3, #3
 801304e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013050:	e2b4      	b.n	80135bc <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	685b      	ldr	r3, [r3, #4]
 8013056:	4618      	mov	r0, r3
 8013058:	f7fa fb92 	bl	800d780 <SecureElementSetJoinEui>
 801305c:	4603      	mov	r3, r0
 801305e:	2b00      	cmp	r3, #0
 8013060:	f000 82ae 	beq.w	80135c0 <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013064:	2303      	movs	r3, #3
 8013066:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013068:	e2aa      	b.n	80135c0 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	791a      	ldrb	r2, [r3, #4]
 801306e:	4b5c      	ldr	r3, [pc, #368]	@ (80131e0 <LoRaMacMibSetRequestConfirm+0x308>)
 8013070:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 8013074:	e2bd      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	685b      	ldr	r3, [r3, #4]
 801307a:	4a59      	ldr	r2, [pc, #356]	@ (80131e0 <LoRaMacMibSetRequestConfirm+0x308>)
 801307c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 8013080:	e2b7      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8013082:	4b57      	ldr	r3, [pc, #348]	@ (80131e0 <LoRaMacMibSetRequestConfirm+0x308>)
 8013084:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	685b      	ldr	r3, [r3, #4]
 801308c:	4619      	mov	r1, r3
 801308e:	4610      	mov	r0, r2
 8013090:	f7fa fba6 	bl	800d7e0 <SecureElementSetDevAddr>
 8013094:	4603      	mov	r3, r0
 8013096:	2b00      	cmp	r3, #0
 8013098:	d002      	beq.n	80130a0 <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801309a:	2303      	movs	r3, #3
 801309c:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 801309e:	e2a8      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	4a4e      	ldr	r2, [pc, #312]	@ (80131e0 <LoRaMacMibSetRequestConfirm+0x308>)
 80130a6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 80130aa:	e2a2      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	685b      	ldr	r3, [r3, #4]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d00b      	beq.n	80130cc <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	685b      	ldr	r3, [r3, #4]
 80130b8:	4619      	mov	r1, r3
 80130ba:	2000      	movs	r0, #0
 80130bc:	f001 fff4 	bl	80150a8 <LoRaMacCryptoSetKey>
 80130c0:	4603      	mov	r3, r0
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	f000 827e 	beq.w	80135c4 <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80130c8:	2311      	movs	r3, #17
 80130ca:	e293      	b.n	80135f4 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80130cc:	2303      	movs	r3, #3
 80130ce:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80130d0:	e278      	b.n	80135c4 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	685b      	ldr	r3, [r3, #4]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d00b      	beq.n	80130f2 <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	685b      	ldr	r3, [r3, #4]
 80130de:	4619      	mov	r1, r3
 80130e0:	2001      	movs	r0, #1
 80130e2:	f001 ffe1 	bl	80150a8 <LoRaMacCryptoSetKey>
 80130e6:	4603      	mov	r3, r0
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	f000 826d 	beq.w	80135c8 <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80130ee:	2311      	movs	r3, #17
 80130f0:	e280      	b.n	80135f4 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80130f2:	2303      	movs	r3, #3
 80130f4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80130f6:	e267      	b.n	80135c8 <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	685b      	ldr	r3, [r3, #4]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d00b      	beq.n	8013118 <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	685b      	ldr	r3, [r3, #4]
 8013104:	4619      	mov	r1, r3
 8013106:	2008      	movs	r0, #8
 8013108:	f001 ffce 	bl	80150a8 <LoRaMacCryptoSetKey>
 801310c:	4603      	mov	r3, r0
 801310e:	2b00      	cmp	r3, #0
 8013110:	f000 825c 	beq.w	80135cc <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013114:	2311      	movs	r3, #17
 8013116:	e26d      	b.n	80135f4 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013118:	2303      	movs	r3, #3
 801311a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801311c:	e256      	b.n	80135cc <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	685b      	ldr	r3, [r3, #4]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d00b      	beq.n	801313e <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	685b      	ldr	r3, [r3, #4]
 801312a:	4619      	mov	r1, r3
 801312c:	2009      	movs	r0, #9
 801312e:	f001 ffbb 	bl	80150a8 <LoRaMacCryptoSetKey>
 8013132:	4603      	mov	r3, r0
 8013134:	2b00      	cmp	r3, #0
 8013136:	f000 824b 	beq.w	80135d0 <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801313a:	2311      	movs	r3, #17
 801313c:	e25a      	b.n	80135f4 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801313e:	2303      	movs	r3, #3
 8013140:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013142:	e245      	b.n	80135d0 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	685b      	ldr	r3, [r3, #4]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d00b      	beq.n	8013164 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	685b      	ldr	r3, [r3, #4]
 8013150:	4619      	mov	r1, r3
 8013152:	200c      	movs	r0, #12
 8013154:	f001 ffa8 	bl	80150a8 <LoRaMacCryptoSetKey>
 8013158:	4603      	mov	r3, r0
 801315a:	2b00      	cmp	r3, #0
 801315c:	f000 823a 	beq.w	80135d4 <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013160:	2311      	movs	r3, #17
 8013162:	e247      	b.n	80135f4 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013164:	2303      	movs	r3, #3
 8013166:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013168:	e234      	b.n	80135d4 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	685b      	ldr	r3, [r3, #4]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d00b      	beq.n	801318a <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	4619      	mov	r1, r3
 8013178:	200d      	movs	r0, #13
 801317a:	f001 ff95 	bl	80150a8 <LoRaMacCryptoSetKey>
 801317e:	4603      	mov	r3, r0
 8013180:	2b00      	cmp	r3, #0
 8013182:	f000 8229 	beq.w	80135d8 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013186:	2311      	movs	r3, #17
 8013188:	e234      	b.n	80135f4 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801318a:	2303      	movs	r3, #3
 801318c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801318e:	e223      	b.n	80135d8 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	685b      	ldr	r3, [r3, #4]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d00b      	beq.n	80131b0 <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	685b      	ldr	r3, [r3, #4]
 801319c:	4619      	mov	r1, r3
 801319e:	200e      	movs	r0, #14
 80131a0:	f001 ff82 	bl	80150a8 <LoRaMacCryptoSetKey>
 80131a4:	4603      	mov	r3, r0
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	f000 8218 	beq.w	80135dc <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80131ac:	2311      	movs	r3, #17
 80131ae:	e221      	b.n	80135f4 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80131b0:	2303      	movs	r3, #3
 80131b2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80131b4:	e212      	b.n	80135dc <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	685b      	ldr	r3, [r3, #4]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d00b      	beq.n	80131d6 <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	4619      	mov	r1, r3
 80131c4:	200f      	movs	r0, #15
 80131c6:	f001 ff6f 	bl	80150a8 <LoRaMacCryptoSetKey>
 80131ca:	4603      	mov	r3, r0
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	f000 8207 	beq.w	80135e0 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80131d2:	2311      	movs	r3, #17
 80131d4:	e20e      	b.n	80135f4 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80131d6:	2303      	movs	r3, #3
 80131d8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80131da:	e201      	b.n	80135e0 <LoRaMacMibSetRequestConfirm+0x708>
 80131dc:	20000704 	.word	0x20000704
 80131e0:	20000c0c 	.word	0x20000c0c
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	791a      	ldrb	r2, [r3, #4]
 80131e8:	4bb2      	ldr	r3, [pc, #712]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80131ea:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80131ee:	4bb2      	ldr	r3, [pc, #712]	@ (80134b8 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80131f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80131f2:	4ab0      	ldr	r2, [pc, #704]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80131f4:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 80131f8:	4610      	mov	r0, r2
 80131fa:	4798      	blx	r3
            Radio.Sleep( );
 80131fc:	4bae      	ldr	r3, [pc, #696]	@ (80134b8 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80131fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013200:	4798      	blx	r3
            break;
 8013202:	e1f6      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	791a      	ldrb	r2, [r3, #4]
 8013208:	4baa      	ldr	r3, [pc, #680]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801320a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 801320e:	e1f0      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	7a1b      	ldrb	r3, [r3, #8]
 8013214:	b25b      	sxtb	r3, r3
 8013216:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013218:	4ba6      	ldr	r3, [pc, #664]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801321a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801321e:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8013220:	4ba4      	ldr	r3, [pc, #656]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013222:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013226:	f107 0108 	add.w	r1, r7, #8
 801322a:	2207      	movs	r2, #7
 801322c:	4618      	mov	r0, r3
 801322e:	f002 fd6b 	bl	8015d08 <RegionVerify>
 8013232:	4603      	mov	r3, r0
 8013234:	f083 0301 	eor.w	r3, r3, #1
 8013238:	b2db      	uxtb	r3, r3
 801323a:	2b00      	cmp	r3, #0
 801323c:	d002      	beq.n	8013244 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801323e:	2303      	movs	r3, #3
 8013240:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8013242:	e1d6      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	685b      	ldr	r3, [r3, #4]
 8013248:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 801324a:	4b9a      	ldr	r3, [pc, #616]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801324c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013250:	f107 0108 	add.w	r1, r7, #8
 8013254:	2200      	movs	r2, #0
 8013256:	4618      	mov	r0, r3
 8013258:	f002 fd56 	bl	8015d08 <RegionVerify>
 801325c:	4603      	mov	r3, r0
 801325e:	f083 0301 	eor.w	r3, r3, #1
 8013262:	b2db      	uxtb	r3, r3
 8013264:	2b00      	cmp	r3, #0
 8013266:	d002      	beq.n	801326e <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013268:	2303      	movs	r3, #3
 801326a:	75fb      	strb	r3, [r7, #23]
            break;
 801326c:	e1c1      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801326e:	4b91      	ldr	r3, [pc, #580]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	336c      	adds	r3, #108	@ 0x6c
 8013274:	3204      	adds	r2, #4
 8013276:	e892 0003 	ldmia.w	r2, {r0, r1}
 801327a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801327e:	e1b8      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	7a1b      	ldrb	r3, [r3, #8]
 8013284:	b25b      	sxtb	r3, r3
 8013286:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013288:	4b8a      	ldr	r3, [pc, #552]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801328a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801328e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013290:	4b88      	ldr	r3, [pc, #544]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013292:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013296:	f107 0108 	add.w	r1, r7, #8
 801329a:	2207      	movs	r2, #7
 801329c:	4618      	mov	r0, r3
 801329e:	f002 fd33 	bl	8015d08 <RegionVerify>
 80132a2:	4603      	mov	r3, r0
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d008      	beq.n	80132ba <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80132a8:	4b82      	ldr	r3, [pc, #520]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80132aa:	687a      	ldr	r2, [r7, #4]
 80132ac:	33b4      	adds	r3, #180	@ 0xb4
 80132ae:	3204      	adds	r2, #4
 80132b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132b4:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80132b8:	e19b      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80132ba:	2303      	movs	r3, #3
 80132bc:	75fb      	strb	r3, [r7, #23]
            break;
 80132be:	e198      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	7a1b      	ldrb	r3, [r3, #8]
 80132c4:	b25b      	sxtb	r3, r3
 80132c6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80132c8:	4b7a      	ldr	r3, [pc, #488]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80132ca:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80132ce:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80132d0:	4b78      	ldr	r3, [pc, #480]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80132d2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80132d6:	f107 0108 	add.w	r1, r7, #8
 80132da:	2207      	movs	r2, #7
 80132dc:	4618      	mov	r0, r3
 80132de:	f002 fd13 	bl	8015d08 <RegionVerify>
 80132e2:	4603      	mov	r3, r0
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d019      	beq.n	801331c <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80132e8:	4b72      	ldr	r3, [pc, #456]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80132ea:	687a      	ldr	r2, [r7, #4]
 80132ec:	3374      	adds	r3, #116	@ 0x74
 80132ee:	3204      	adds	r2, #4
 80132f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132f4:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80132f8:	4b6e      	ldr	r3, [pc, #440]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80132fa:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80132fe:	2b02      	cmp	r3, #2
 8013300:	f040 8170 	bne.w	80135e4 <LoRaMacMibSetRequestConfirm+0x70c>
 8013304:	4b6b      	ldr	r3, [pc, #428]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013306:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 801330a:	2b00      	cmp	r3, #0
 801330c:	f000 816a 	beq.w	80135e4 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8013310:	4b69      	ldr	r3, [pc, #420]	@ (80134b8 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8013312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013314:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013316:	f7fe fbdf 	bl	8011ad8 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801331a:	e163      	b.n	80135e4 <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801331c:	2303      	movs	r3, #3
 801331e:	75fb      	strb	r3, [r7, #23]
            break;
 8013320:	e160      	b.n	80135e4 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	7a1b      	ldrb	r3, [r3, #8]
 8013326:	b25b      	sxtb	r3, r3
 8013328:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801332a:	4b62      	ldr	r3, [pc, #392]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801332c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8013330:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013332:	4b60      	ldr	r3, [pc, #384]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013334:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013338:	f107 0108 	add.w	r1, r7, #8
 801333c:	2207      	movs	r2, #7
 801333e:	4618      	mov	r0, r3
 8013340:	f002 fce2 	bl	8015d08 <RegionVerify>
 8013344:	4603      	mov	r3, r0
 8013346:	2b00      	cmp	r3, #0
 8013348:	d008      	beq.n	801335c <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801334a:	4b5a      	ldr	r3, [pc, #360]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801334c:	687a      	ldr	r2, [r7, #4]
 801334e:	33bc      	adds	r3, #188	@ 0xbc
 8013350:	3204      	adds	r2, #4
 8013352:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013356:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801335a:	e14a      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801335c:	2303      	movs	r3, #3
 801335e:	75fb      	strb	r3, [r7, #23]
            break;
 8013360:	e147      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	685b      	ldr	r3, [r3, #4]
 8013366:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013368:	2301      	movs	r3, #1
 801336a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801336c:	4b51      	ldr	r3, [pc, #324]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801336e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013372:	f107 020c 	add.w	r2, r7, #12
 8013376:	4611      	mov	r1, r2
 8013378:	4618      	mov	r0, r3
 801337a:	f002 fcee 	bl	8015d5a <RegionChanMaskSet>
 801337e:	4603      	mov	r3, r0
 8013380:	f083 0301 	eor.w	r3, r3, #1
 8013384:	b2db      	uxtb	r3, r3
 8013386:	2b00      	cmp	r3, #0
 8013388:	f000 812e 	beq.w	80135e8 <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801338c:	2303      	movs	r3, #3
 801338e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013390:	e12a      	b.n	80135e8 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	685b      	ldr	r3, [r3, #4]
 8013396:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013398:	2300      	movs	r3, #0
 801339a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801339c:	4b45      	ldr	r3, [pc, #276]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801339e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80133a2:	f107 020c 	add.w	r2, r7, #12
 80133a6:	4611      	mov	r1, r2
 80133a8:	4618      	mov	r0, r3
 80133aa:	f002 fcd6 	bl	8015d5a <RegionChanMaskSet>
 80133ae:	4603      	mov	r3, r0
 80133b0:	f083 0301 	eor.w	r3, r3, #1
 80133b4:	b2db      	uxtb	r3, r3
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	f000 8118 	beq.w	80135ec <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133bc:	2303      	movs	r3, #3
 80133be:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80133c0:	e114      	b.n	80135ec <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	791b      	ldrb	r3, [r3, #4]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d009      	beq.n	80133de <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80133ce:	2b0f      	cmp	r3, #15
 80133d0:	d805      	bhi.n	80133de <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	791a      	ldrb	r2, [r3, #4]
 80133d6:	4b37      	ldr	r3, [pc, #220]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80133d8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80133dc:	e109      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133de:	2303      	movs	r3, #3
 80133e0:	75fb      	strb	r3, [r7, #23]
            break;
 80133e2:	e106      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	4a32      	ldr	r2, [pc, #200]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80133ea:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 80133ec:	e101      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	685b      	ldr	r3, [r3, #4]
 80133f2:	4a30      	ldr	r2, [pc, #192]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80133f4:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 80133f6:	e0fc      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	685b      	ldr	r3, [r3, #4]
 80133fc:	4a2d      	ldr	r2, [pc, #180]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80133fe:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8013400:	e0f7      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	685b      	ldr	r3, [r3, #4]
 8013406:	4a2b      	ldr	r2, [pc, #172]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013408:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 801340a:	e0f2      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	685b      	ldr	r3, [r3, #4]
 8013410:	4a28      	ldr	r2, [pc, #160]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013412:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 8013414:	e0ed      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801341c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801341e:	4b25      	ldr	r3, [pc, #148]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013420:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013424:	f107 0108 	add.w	r1, r7, #8
 8013428:	2206      	movs	r2, #6
 801342a:	4618      	mov	r0, r3
 801342c:	f002 fc6c 	bl	8015d08 <RegionVerify>
 8013430:	4603      	mov	r3, r0
 8013432:	2b00      	cmp	r3, #0
 8013434:	d005      	beq.n	8013442 <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8013436:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801343a:	4b1e      	ldr	r3, [pc, #120]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801343c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013440:	e0d7      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013442:	2303      	movs	r3, #3
 8013444:	75fb      	strb	r3, [r7, #23]
            break;
 8013446:	e0d4      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801344e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013450:	4b18      	ldr	r3, [pc, #96]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013452:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8013456:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013458:	4b16      	ldr	r3, [pc, #88]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801345a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801345e:	f107 0108 	add.w	r1, r7, #8
 8013462:	2205      	movs	r2, #5
 8013464:	4618      	mov	r0, r3
 8013466:	f002 fc4f 	bl	8015d08 <RegionVerify>
 801346a:	4603      	mov	r3, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d005      	beq.n	801347c <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013470:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013474:	4b0f      	ldr	r3, [pc, #60]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8013476:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801347a:	e0ba      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801347c:	2303      	movs	r3, #3
 801347e:	75fb      	strb	r3, [r7, #23]
            break;
 8013480:	e0b7      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013488:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 801348a:	4b0a      	ldr	r3, [pc, #40]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801348c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013490:	f107 0108 	add.w	r1, r7, #8
 8013494:	220a      	movs	r2, #10
 8013496:	4618      	mov	r0, r3
 8013498:	f002 fc36 	bl	8015d08 <RegionVerify>
 801349c:	4603      	mov	r3, r0
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d005      	beq.n	80134ae <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80134a2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80134a6:	4b03      	ldr	r3, [pc, #12]	@ (80134b4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80134a8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80134ac:	e0a1      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134ae:	2303      	movs	r3, #3
 80134b0:	75fb      	strb	r3, [r7, #23]
            break;
 80134b2:	e09e      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
 80134b4:	20000c0c 	.word	0x20000c0c
 80134b8:	0801df78 	.word	0x0801df78
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80134c2:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80134c4:	4b4d      	ldr	r3, [pc, #308]	@ (80135fc <LoRaMacMibSetRequestConfirm+0x724>)
 80134c6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80134ca:	f107 0108 	add.w	r1, r7, #8
 80134ce:	2209      	movs	r2, #9
 80134d0:	4618      	mov	r0, r3
 80134d2:	f002 fc19 	bl	8015d08 <RegionVerify>
 80134d6:	4603      	mov	r3, r0
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d005      	beq.n	80134e8 <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80134dc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80134e0:	4b46      	ldr	r3, [pc, #280]	@ (80135fc <LoRaMacMibSetRequestConfirm+0x724>)
 80134e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80134e6:	e084      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134e8:	2303      	movs	r3, #3
 80134ea:	75fb      	strb	r3, [r7, #23]
            break;
 80134ec:	e081      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	685b      	ldr	r3, [r3, #4]
 80134f2:	4a42      	ldr	r2, [pc, #264]	@ (80135fc <LoRaMacMibSetRequestConfirm+0x724>)
 80134f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80134f8:	4b40      	ldr	r3, [pc, #256]	@ (80135fc <LoRaMacMibSetRequestConfirm+0x724>)
 80134fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80134fe:	4a3f      	ldr	r2, [pc, #252]	@ (80135fc <LoRaMacMibSetRequestConfirm+0x724>)
 8013500:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 8013502:	e076      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	791a      	ldrb	r2, [r3, #4]
 8013508:	4b3c      	ldr	r3, [pc, #240]	@ (80135fc <LoRaMacMibSetRequestConfirm+0x724>)
 801350a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 801350e:	4b3b      	ldr	r3, [pc, #236]	@ (80135fc <LoRaMacMibSetRequestConfirm+0x724>)
 8013510:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8013514:	4b39      	ldr	r3, [pc, #228]	@ (80135fc <LoRaMacMibSetRequestConfirm+0x724>)
 8013516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 801351a:	e06a      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	685b      	ldr	r3, [r3, #4]
 8013520:	4a36      	ldr	r2, [pc, #216]	@ (80135fc <LoRaMacMibSetRequestConfirm+0x724>)
 8013522:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8013526:	e064      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	685b      	ldr	r3, [r3, #4]
 801352c:	4a33      	ldr	r2, [pc, #204]	@ (80135fc <LoRaMacMibSetRequestConfirm+0x724>)
 801352e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 8013532:	e05e      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8013534:	f7fe fd2c 	bl	8011f90 <RestoreNvmData>
 8013538:	4603      	mov	r3, r0
 801353a:	75fb      	strb	r3, [r7, #23]
            break;
 801353c:	e059      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	799b      	ldrb	r3, [r3, #6]
 8013542:	2b01      	cmp	r3, #1
 8013544:	d80d      	bhi.n	8013562 <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8013546:	4a2d      	ldr	r2, [pc, #180]	@ (80135fc <LoRaMacMibSetRequestConfirm+0x724>)
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	685b      	ldr	r3, [r3, #4]
 801354c:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	6858      	ldr	r0, [r3, #4]
 8013554:	f001 fce0 	bl	8014f18 <LoRaMacCryptoSetLrWanVersion>
 8013558:	4603      	mov	r3, r0
 801355a:	2b00      	cmp	r3, #0
 801355c:	d048      	beq.n	80135f0 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801355e:	2311      	movs	r3, #17
 8013560:	e048      	b.n	80135f4 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013562:	2303      	movs	r3, #3
 8013564:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013566:	e043      	b.n	80135f0 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	685b      	ldr	r3, [r3, #4]
 801356c:	4a23      	ldr	r2, [pc, #140]	@ (80135fc <LoRaMacMibSetRequestConfirm+0x724>)
 801356e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 8013572:	e03e      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	889a      	ldrh	r2, [r3, #4]
 8013578:	4b20      	ldr	r3, [pc, #128]	@ (80135fc <LoRaMacMibSetRequestConfirm+0x724>)
 801357a:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 801357e:	e038      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	889a      	ldrh	r2, [r3, #4]
 8013584:	4b1d      	ldr	r3, [pc, #116]	@ (80135fc <LoRaMacMibSetRequestConfirm+0x724>)
 8013586:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 801358a:	e032      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	889a      	ldrh	r2, [r3, #4]
 8013590:	4b1a      	ldr	r3, [pc, #104]	@ (80135fc <LoRaMacMibSetRequestConfirm+0x724>)
 8013592:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 8013596:	e02c      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	889a      	ldrh	r2, [r3, #4]
 801359c:	4b17      	ldr	r3, [pc, #92]	@ (80135fc <LoRaMacMibSetRequestConfirm+0x724>)
 801359e:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 80135a2:	e026      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80135a4:	2318      	movs	r3, #24
 80135a6:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80135a8:	e023      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80135aa:	2318      	movs	r3, #24
 80135ac:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80135ae:	e020      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	f000 fc27 	bl	8013e04 <LoRaMacMibClassBSetRequestConfirm>
 80135b6:	4603      	mov	r3, r0
 80135b8:	75fb      	strb	r3, [r7, #23]
            break;
 80135ba:	e01a      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80135bc:	bf00      	nop
 80135be:	e018      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80135c0:	bf00      	nop
 80135c2:	e016      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80135c4:	bf00      	nop
 80135c6:	e014      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80135c8:	bf00      	nop
 80135ca:	e012      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80135cc:	bf00      	nop
 80135ce:	e010      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80135d0:	bf00      	nop
 80135d2:	e00e      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80135d4:	bf00      	nop
 80135d6:	e00c      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80135d8:	bf00      	nop
 80135da:	e00a      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80135dc:	bf00      	nop
 80135de:	e008      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80135e0:	bf00      	nop
 80135e2:	e006      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80135e4:	bf00      	nop
 80135e6:	e004      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80135e8:	bf00      	nop
 80135ea:	e002      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80135ec:	bf00      	nop
 80135ee:	e000      	b.n	80135f2 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80135f0:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 80135f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80135f4:	4618      	mov	r0, r3
 80135f6:	3718      	adds	r7, #24
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}
 80135fc:	20000c0c 	.word	0x20000c0c

08013600 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b086      	sub	sp, #24
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013608:	2302      	movs	r3, #2
 801360a:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801360c:	2300      	movs	r3, #0
 801360e:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d101      	bne.n	801361a <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013616:	2303      	movs	r3, #3
 8013618:	e13a      	b.n	8013890 <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801361a:	f7fc fbe3 	bl	800fde4 <LoRaMacIsBusy>
 801361e:	4603      	mov	r3, r0
 8013620:	2b00      	cmp	r3, #0
 8013622:	d001      	beq.n	8013628 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8013624:	2301      	movs	r3, #1
 8013626:	e133      	b.n	8013890 <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8013628:	f001 f90c 	bl	8014844 <LoRaMacConfirmQueueIsFull>
 801362c:	4603      	mov	r3, r0
 801362e:	2b00      	cmp	r3, #0
 8013630:	d001      	beq.n	8013636 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8013632:	2301      	movs	r3, #1
 8013634:	e12c      	b.n	8013890 <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013636:	f001 f8f9 	bl	801482c <LoRaMacConfirmQueueGetCnt>
 801363a:	4603      	mov	r3, r0
 801363c:	2b00      	cmp	r3, #0
 801363e:	d104      	bne.n	801364a <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8013640:	2214      	movs	r2, #20
 8013642:	2100      	movs	r1, #0
 8013644:	4894      	ldr	r0, [pc, #592]	@ (8013898 <LoRaMacMlmeRequest+0x298>)
 8013646:	f004 ff95 	bl	8018574 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801364a:	4b94      	ldr	r3, [pc, #592]	@ (801389c <LoRaMacMlmeRequest+0x29c>)
 801364c:	2201      	movs	r2, #1
 801364e:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8013652:	4a92      	ldr	r2, [pc, #584]	@ (801389c <LoRaMacMlmeRequest+0x29c>)
 8013654:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8013658:	f043 0304 	orr.w	r3, r3, #4
 801365c:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    queueElement.Request = mlmeRequest->Type;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013666:	2301      	movs	r3, #1
 8013668:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 801366a:	2300      	movs	r3, #0
 801366c:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	3b01      	subs	r3, #1
 8013674:	2b0d      	cmp	r3, #13
 8013676:	f200 80e1 	bhi.w	801383c <LoRaMacMlmeRequest+0x23c>
 801367a:	a201      	add	r2, pc, #4	@ (adr r2, 8013680 <LoRaMacMlmeRequest+0x80>)
 801367c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013680:	080136b9 	.word	0x080136b9
 8013684:	0801383d 	.word	0x0801383d
 8013688:	0801383d 	.word	0x0801383d
 801368c:	0801383d 	.word	0x0801383d
 8013690:	08013731 	.word	0x08013731
 8013694:	0801374f 	.word	0x0801374f
 8013698:	0801375f 	.word	0x0801375f
 801369c:	0801383d 	.word	0x0801383d
 80136a0:	0801383d 	.word	0x0801383d
 80136a4:	0801377b 	.word	0x0801377b
 80136a8:	0801383d 	.word	0x0801383d
 80136ac:	08013811 	.word	0x08013811
 80136b0:	080137b1 	.word	0x080137b1
 80136b4:	080137f3 	.word	0x080137f3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80136b8:	4b78      	ldr	r3, [pc, #480]	@ (801389c <LoRaMacMlmeRequest+0x29c>)
 80136ba:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80136be:	f003 0320 	and.w	r3, r3, #32
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d001      	beq.n	80136ca <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 80136c6:	2301      	movs	r3, #1
 80136c8:	e0e2      	b.n	8013890 <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 80136ca:	2000      	movs	r0, #0
 80136cc:	f7fe f8aa 	bl	8011824 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80136d0:	4b73      	ldr	r3, [pc, #460]	@ (80138a0 <LoRaMacMlmeRequest+0x2a0>)
 80136d2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	795b      	ldrb	r3, [r3, #5]
 80136da:	b25b      	sxtb	r3, r3
 80136dc:	2200      	movs	r2, #0
 80136de:	4619      	mov	r1, r3
 80136e0:	f002 fbfa 	bl	8015ed8 <RegionAlternateDr>
 80136e4:	4603      	mov	r3, r0
 80136e6:	461a      	mov	r2, r3
 80136e8:	4b6d      	ldr	r3, [pc, #436]	@ (80138a0 <LoRaMacMlmeRequest+0x2a0>)
 80136ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	f993 2006 	ldrsb.w	r2, [r3, #6]
 80136f4:	4b6a      	ldr	r3, [pc, #424]	@ (80138a0 <LoRaMacMlmeRequest+0x2a0>)
 80136f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80136fa:	2307      	movs	r3, #7
 80136fc:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 80136fe:	20ff      	movs	r0, #255	@ 0xff
 8013700:	f7fd fe0e 	bl	8011320 <SendReJoinReq>
 8013704:	4603      	mov	r3, r0
 8013706:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8013708:	7dfb      	ldrb	r3, [r7, #23]
 801370a:	2b00      	cmp	r3, #0
 801370c:	f000 8098 	beq.w	8013840 <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8013710:	4b63      	ldr	r3, [pc, #396]	@ (80138a0 <LoRaMacMlmeRequest+0x2a0>)
 8013712:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	795b      	ldrb	r3, [r3, #5]
 801371a:	b25b      	sxtb	r3, r3
 801371c:	2201      	movs	r2, #1
 801371e:	4619      	mov	r1, r3
 8013720:	f002 fbda 	bl	8015ed8 <RegionAlternateDr>
 8013724:	4603      	mov	r3, r0
 8013726:	461a      	mov	r2, r3
 8013728:	4b5d      	ldr	r3, [pc, #372]	@ (80138a0 <LoRaMacMlmeRequest+0x2a0>)
 801372a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 801372e:	e087      	b.n	8013840 <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013730:	2300      	movs	r3, #0
 8013732:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013734:	f107 030c 	add.w	r3, r7, #12
 8013738:	2200      	movs	r2, #0
 801373a:	4619      	mov	r1, r3
 801373c:	2002      	movs	r0, #2
 801373e:	f000 fcd1 	bl	80140e4 <LoRaMacCommandsAddCmd>
 8013742:	4603      	mov	r3, r0
 8013744:	2b00      	cmp	r3, #0
 8013746:	d07d      	beq.n	8013844 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013748:	2313      	movs	r3, #19
 801374a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801374c:	e07a      	b.n	8013844 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	889b      	ldrh	r3, [r3, #4]
 8013752:	4618      	mov	r0, r3
 8013754:	f7fe fbc6 	bl	8011ee4 <SetTxContinuousWave>
 8013758:	4603      	mov	r3, r0
 801375a:	75fb      	strb	r3, [r7, #23]
            break;
 801375c:	e079      	b.n	8013852 <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	8898      	ldrh	r0, [r3, #4]
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	6899      	ldr	r1, [r3, #8]
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801376c:	b2db      	uxtb	r3, r3
 801376e:	461a      	mov	r2, r3
 8013770:	f7fe fbee 	bl	8011f50 <SetTxContinuousWave1>
 8013774:	4603      	mov	r3, r0
 8013776:	75fb      	strb	r3, [r7, #23]
            break;
 8013778:	e06b      	b.n	8013852 <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801377a:	2300      	movs	r3, #0
 801377c:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 801377e:	f107 0308 	add.w	r3, r7, #8
 8013782:	4619      	mov	r1, r3
 8013784:	200d      	movs	r0, #13
 8013786:	f000 fd2d 	bl	80141e4 <LoRaMacCommandsGetCmd>
 801378a:	4603      	mov	r3, r0
 801378c:	2b00      	cmp	r3, #0
 801378e:	d102      	bne.n	8013796 <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 8013790:	2300      	movs	r3, #0
 8013792:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8013794:	e058      	b.n	8013848 <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013796:	f107 030c 	add.w	r3, r7, #12
 801379a:	2200      	movs	r2, #0
 801379c:	4619      	mov	r1, r3
 801379e:	200d      	movs	r0, #13
 80137a0:	f000 fca0 	bl	80140e4 <LoRaMacCommandsAddCmd>
 80137a4:	4603      	mov	r3, r0
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d04e      	beq.n	8013848 <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80137aa:	2313      	movs	r3, #19
 80137ac:	75fb      	strb	r3, [r7, #23]
            break;
 80137ae:	e04b      	b.n	8013848 <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80137b0:	4b3b      	ldr	r3, [pc, #236]	@ (80138a0 <LoRaMacMlmeRequest+0x2a0>)
 80137b2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d148      	bne.n	801384c <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	791b      	ldrb	r3, [r3, #4]
 80137be:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	791b      	ldrb	r3, [r3, #4]
 80137c4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80137c8:	b2db      	uxtb	r3, r3
 80137ca:	4618      	mov	r0, r3
 80137cc:	f000 faef 	bl	8013dae <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80137d0:	7dbb      	ldrb	r3, [r7, #22]
 80137d2:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 80137d4:	2300      	movs	r3, #0
 80137d6:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80137d8:	f107 030c 	add.w	r3, r7, #12
 80137dc:	2201      	movs	r2, #1
 80137de:	4619      	mov	r1, r3
 80137e0:	2010      	movs	r0, #16
 80137e2:	f000 fc7f 	bl	80140e4 <LoRaMacCommandsAddCmd>
 80137e6:	4603      	mov	r3, r0
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d02f      	beq.n	801384c <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80137ec:	2313      	movs	r3, #19
 80137ee:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 80137f0:	e02c      	b.n	801384c <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80137f2:	2300      	movs	r3, #0
 80137f4:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80137f6:	f107 030c 	add.w	r3, r7, #12
 80137fa:	2200      	movs	r2, #0
 80137fc:	4619      	mov	r1, r3
 80137fe:	2012      	movs	r0, #18
 8013800:	f000 fc70 	bl	80140e4 <LoRaMacCommandsAddCmd>
 8013804:	4603      	mov	r3, r0
 8013806:	2b00      	cmp	r3, #0
 8013808:	d022      	beq.n	8013850 <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801380a:	2313      	movs	r3, #19
 801380c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801380e:	e01f      	b.n	8013850 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8013810:	2301      	movs	r3, #1
 8013812:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8013814:	f000 fa81 	bl	8013d1a <LoRaMacClassBIsAcquisitionInProgress>
 8013818:	4603      	mov	r3, r0
 801381a:	f083 0301 	eor.w	r3, r3, #1
 801381e:	b2db      	uxtb	r3, r3
 8013820:	2b00      	cmp	r3, #0
 8013822:	d008      	beq.n	8013836 <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8013824:	2000      	movs	r0, #0
 8013826:	f000 fa5a 	bl	8013cde <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801382a:	2000      	movs	r0, #0
 801382c:	f000 fa7c 	bl	8013d28 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8013830:	2300      	movs	r3, #0
 8013832:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8013834:	e00d      	b.n	8013852 <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 8013836:	2301      	movs	r3, #1
 8013838:	75fb      	strb	r3, [r7, #23]
            break;
 801383a:	e00a      	b.n	8013852 <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 801383c:	bf00      	nop
 801383e:	e008      	b.n	8013852 <LoRaMacMlmeRequest+0x252>
            break;
 8013840:	bf00      	nop
 8013842:	e006      	b.n	8013852 <LoRaMacMlmeRequest+0x252>
            break;
 8013844:	bf00      	nop
 8013846:	e004      	b.n	8013852 <LoRaMacMlmeRequest+0x252>
            break;
 8013848:	bf00      	nop
 801384a:	e002      	b.n	8013852 <LoRaMacMlmeRequest+0x252>
            break;
 801384c:	bf00      	nop
 801384e:	e000      	b.n	8013852 <LoRaMacMlmeRequest+0x252>
            break;
 8013850:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013852:	4b12      	ldr	r3, [pc, #72]	@ (801389c <LoRaMacMlmeRequest+0x29c>)
 8013854:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 801385c:	7dfb      	ldrb	r3, [r7, #23]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d010      	beq.n	8013884 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013862:	f000 ffe3 	bl	801482c <LoRaMacConfirmQueueGetCnt>
 8013866:	4603      	mov	r3, r0
 8013868:	2b00      	cmp	r3, #0
 801386a:	d110      	bne.n	801388e <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 801386c:	4b0b      	ldr	r3, [pc, #44]	@ (801389c <LoRaMacMlmeRequest+0x29c>)
 801386e:	2200      	movs	r2, #0
 8013870:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8013874:	4a09      	ldr	r2, [pc, #36]	@ (801389c <LoRaMacMlmeRequest+0x29c>)
 8013876:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 801387a:	f36f 0382 	bfc	r3, #2, #1
 801387e:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 8013882:	e004      	b.n	801388e <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8013884:	f107 0310 	add.w	r3, r7, #16
 8013888:	4618      	mov	r0, r3
 801388a:	f000 fe7b 	bl	8014584 <LoRaMacConfirmQueueAdd>
    }
    return status;
 801388e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013890:	4618      	mov	r0, r3
 8013892:	3718      	adds	r7, #24
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}
 8013898:	20000b4c 	.word	0x20000b4c
 801389c:	20000704 	.word	0x20000704
 80138a0:	20000c0c 	.word	0x20000c0c

080138a4 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b08c      	sub	sp, #48	@ 0x30
 80138a8:	af02      	add	r7, sp, #8
 80138aa:	6078      	str	r0, [r7, #4]
 80138ac:	460b      	mov	r3, r1
 80138ae:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80138b0:	2302      	movs	r3, #2
 80138b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80138b6:	2300      	movs	r3, #0
 80138b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    void* fBuffer = NULL;
 80138bc:	2300      	movs	r3, #0
 80138be:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80138c0:	2300      	movs	r3, #0
 80138c2:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 80138c4:	2300      	movs	r3, #0
 80138c6:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d101      	bne.n	80138d2 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80138ce:	2303      	movs	r3, #3
 80138d0:	e0d4      	b.n	8013a7c <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 80138d2:	f7fc fa87 	bl	800fde4 <LoRaMacIsBusy>
 80138d6:	4603      	mov	r3, r0
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d001      	beq.n	80138e0 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 80138dc:	2301      	movs	r3, #1
 80138de:	e0cd      	b.n	8013a7c <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 80138e0:	2300      	movs	r3, #0
 80138e2:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80138e4:	2214      	movs	r2, #20
 80138e6:	2100      	movs	r1, #0
 80138e8:	4866      	ldr	r0, [pc, #408]	@ (8013a84 <LoRaMacMcpsRequest+0x1e0>)
 80138ea:	f004 fe43 	bl	8018574 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80138ee:	4b66      	ldr	r3, [pc, #408]	@ (8013a88 <LoRaMacMcpsRequest+0x1e4>)
 80138f0:	2201      	movs	r2, #1
 80138f2:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 80138f6:	4b64      	ldr	r3, [pc, #400]	@ (8013a88 <LoRaMacMcpsRequest+0x1e4>)
 80138f8:	2201      	movs	r2, #1
 80138fa:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e

    switch( mcpsRequest->Type )
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	781b      	ldrb	r3, [r3, #0]
 8013902:	2b03      	cmp	r3, #3
 8013904:	d03d      	beq.n	8013982 <LoRaMacMcpsRequest+0xde>
 8013906:	2b03      	cmp	r3, #3
 8013908:	dc4f      	bgt.n	80139aa <LoRaMacMcpsRequest+0x106>
 801390a:	2b00      	cmp	r3, #0
 801390c:	d002      	beq.n	8013914 <LoRaMacMcpsRequest+0x70>
 801390e:	2b01      	cmp	r3, #1
 8013910:	d019      	beq.n	8013946 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8013912:	e04a      	b.n	80139aa <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8013914:	2301      	movs	r3, #1
 8013916:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8013918:	4b5b      	ldr	r3, [pc, #364]	@ (8013a88 <LoRaMacMcpsRequest+0x1e4>)
 801391a:	2201      	movs	r2, #1
 801391c:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013920:	7b3b      	ldrb	r3, [r7, #12]
 8013922:	2202      	movs	r2, #2
 8013924:	f362 1347 	bfi	r3, r2, #5, #3
 8013928:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	791b      	ldrb	r3, [r3, #4]
 801392e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	689b      	ldr	r3, [r3, #8]
 8013936:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	899b      	ldrh	r3, [r3, #12]
 801393c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	7b9b      	ldrb	r3, [r3, #14]
 8013942:	777b      	strb	r3, [r7, #29]
            break;
 8013944:	e032      	b.n	80139ac <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8013946:	2301      	movs	r3, #1
 8013948:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	7bdb      	ldrb	r3, [r3, #15]
 801394e:	2b08      	cmp	r3, #8
 8013950:	bf28      	it	cs
 8013952:	2308      	movcs	r3, #8
 8013954:	b2da      	uxtb	r2, r3
 8013956:	4b4c      	ldr	r3, [pc, #304]	@ (8013a88 <LoRaMacMcpsRequest+0x1e4>)
 8013958:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 801395c:	7b3b      	ldrb	r3, [r7, #12]
 801395e:	2204      	movs	r2, #4
 8013960:	f362 1347 	bfi	r3, r2, #5, #3
 8013964:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	791b      	ldrb	r3, [r3, #4]
 801396a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	689b      	ldr	r3, [r3, #8]
 8013972:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	899b      	ldrh	r3, [r3, #12]
 8013978:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	7b9b      	ldrb	r3, [r3, #14]
 801397e:	777b      	strb	r3, [r7, #29]
            break;
 8013980:	e014      	b.n	80139ac <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8013982:	2301      	movs	r3, #1
 8013984:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8013986:	4b40      	ldr	r3, [pc, #256]	@ (8013a88 <LoRaMacMcpsRequest+0x1e4>)
 8013988:	2201      	movs	r2, #1
 801398a:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801398e:	7b3b      	ldrb	r3, [r7, #12]
 8013990:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8013994:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	685b      	ldr	r3, [r3, #4]
 801399a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	891b      	ldrh	r3, [r3, #8]
 80139a0:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	7a9b      	ldrb	r3, [r3, #10]
 80139a6:	777b      	strb	r3, [r7, #29]
            break;
 80139a8:	e000      	b.n	80139ac <LoRaMacMcpsRequest+0x108>
            break;
 80139aa:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80139ac:	2302      	movs	r3, #2
 80139ae:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80139b0:	4b36      	ldr	r3, [pc, #216]	@ (8013a8c <LoRaMacMcpsRequest+0x1e8>)
 80139b2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80139b6:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80139b8:	4b34      	ldr	r3, [pc, #208]	@ (8013a8c <LoRaMacMcpsRequest+0x1e8>)
 80139ba:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80139be:	f107 0214 	add.w	r2, r7, #20
 80139c2:	4611      	mov	r1, r2
 80139c4:	4618      	mov	r0, r3
 80139c6:	f002 f964 	bl	8015c92 <RegionGetPhyParam>
 80139ca:	4603      	mov	r3, r0
 80139cc:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80139ce:	693b      	ldr	r3, [r7, #16]
 80139d0:	b25b      	sxtb	r3, r3
 80139d2:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80139d6:	4293      	cmp	r3, r2
 80139d8:	bfb8      	it	lt
 80139da:	4613      	movlt	r3, r2
 80139dc:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 80139de:	7f3b      	ldrb	r3, [r7, #28]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d044      	beq.n	8013a6e <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 80139e4:	4b29      	ldr	r3, [pc, #164]	@ (8013a8c <LoRaMacMcpsRequest+0x1e8>)
 80139e6:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80139ea:	f083 0301 	eor.w	r3, r3, #1
 80139ee:	b2db      	uxtb	r3, r3
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d019      	beq.n	8013a28 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 80139f4:	7f7b      	ldrb	r3, [r7, #29]
 80139f6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80139f8:	4b24      	ldr	r3, [pc, #144]	@ (8013a8c <LoRaMacMcpsRequest+0x1e8>)
 80139fa:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80139fe:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013a00:	4b22      	ldr	r3, [pc, #136]	@ (8013a8c <LoRaMacMcpsRequest+0x1e8>)
 8013a02:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013a06:	f107 0108 	add.w	r1, r7, #8
 8013a0a:	2205      	movs	r2, #5
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f002 f97b 	bl	8015d08 <RegionVerify>
 8013a12:	4603      	mov	r3, r0
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d005      	beq.n	8013a24 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013a18:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8013a8c <LoRaMacMcpsRequest+0x1e8>)
 8013a1e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8013a22:	e001      	b.n	8013a28 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8013a24:	2303      	movs	r3, #3
 8013a26:	e029      	b.n	8013a7c <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8013a28:	8bfa      	ldrh	r2, [r7, #30]
 8013a2a:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8013a2e:	f107 000c 	add.w	r0, r7, #12
 8013a32:	78fb      	ldrb	r3, [r7, #3]
 8013a34:	9300      	str	r3, [sp, #0]
 8013a36:	4613      	mov	r3, r2
 8013a38:	6a3a      	ldr	r2, [r7, #32]
 8013a3a:	f7fd fb93 	bl	8011164 <Send>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if( status == LORAMAC_STATUS_OK )
 8013a44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d10c      	bne.n	8013a66 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	781a      	ldrb	r2, [r3, #0]
 8013a50:	4b0d      	ldr	r3, [pc, #52]	@ (8013a88 <LoRaMacMcpsRequest+0x1e4>)
 8013a52:	f883 2434 	strb.w	r2, [r3, #1076]	@ 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8013a56:	4a0c      	ldr	r2, [pc, #48]	@ (8013a88 <LoRaMacMcpsRequest+0x1e4>)
 8013a58:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8013a5c:	f043 0301 	orr.w	r3, r3, #1
 8013a60:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 8013a64:	e003      	b.n	8013a6e <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8013a66:	4b08      	ldr	r3, [pc, #32]	@ (8013a88 <LoRaMacMcpsRequest+0x1e4>)
 8013a68:	2200      	movs	r2, #0
 8013a6a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013a6e:	4b06      	ldr	r3, [pc, #24]	@ (8013a88 <LoRaMacMcpsRequest+0x1e4>)
 8013a70:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	611a      	str	r2, [r3, #16]

    return status;
 8013a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	3728      	adds	r7, #40	@ 0x28
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}
 8013a84:	20000b38 	.word	0x20000b38
 8013a88:	20000704 	.word	0x20000704
 8013a8c:	20000c0c 	.word	0x20000c0c

08013a90 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b084      	sub	sp, #16
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	4603      	mov	r3, r0
 8013a98:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8013a9a:	79fb      	ldrb	r3, [r7, #7]
 8013a9c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8013a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8013ad4 <LoRaMacTestSetDutyCycleOn+0x44>)
 8013aa0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013aa4:	f107 010c 	add.w	r1, r7, #12
 8013aa8:	220f      	movs	r2, #15
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f002 f92c 	bl	8015d08 <RegionVerify>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d00a      	beq.n	8013acc <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8013ab6:	4a07      	ldr	r2, [pc, #28]	@ (8013ad4 <LoRaMacTestSetDutyCycleOn+0x44>)
 8013ab8:	79fb      	ldrb	r3, [r7, #7]
 8013aba:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8013abe:	4a06      	ldr	r2, [pc, #24]	@ (8013ad8 <LoRaMacTestSetDutyCycleOn+0x48>)
 8013ac0:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8013ac4:	f043 0320 	orr.w	r3, r3, #32
 8013ac8:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 8013acc:	bf00      	nop
 8013ace:	3710      	adds	r7, #16
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}
 8013ad4:	20000c0c 	.word	0x20000c0c
 8013ad8:	20000704 	.word	0x20000704

08013adc <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8013ae0:	f7fe ff5c 	bl	801299c <LoRaMacStop>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d115      	bne.n	8013b16 <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8013aea:	480c      	ldr	r0, [pc, #48]	@ (8013b1c <LoRaMacDeInitialization+0x40>)
 8013aec:	f008 fe9e 	bl	801c82c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8013af0:	480b      	ldr	r0, [pc, #44]	@ (8013b20 <LoRaMacDeInitialization+0x44>)
 8013af2:	f008 fe9b 	bl	801c82c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8013af6:	480b      	ldr	r0, [pc, #44]	@ (8013b24 <LoRaMacDeInitialization+0x48>)
 8013af8:	f008 fe98 	bl	801c82c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8013afc:	480a      	ldr	r0, [pc, #40]	@ (8013b28 <LoRaMacDeInitialization+0x4c>)
 8013afe:	f008 fe95 	bl	801c82c <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8013b02:	f000 f95e 	bl	8013dc2 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8013b06:	2000      	movs	r0, #0
 8013b08:	f7fd fe8c 	bl	8011824 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8013b0c:	4b07      	ldr	r3, [pc, #28]	@ (8013b2c <LoRaMacDeInitialization+0x50>)
 8013b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b10:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8013b12:	2300      	movs	r3, #0
 8013b14:	e000      	b.n	8013b18 <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8013b16:	2301      	movs	r3, #1
    }
}
 8013b18:	4618      	mov	r0, r3
 8013b1a:	bd80      	pop	{r7, pc}
 8013b1c:	20000a6c 	.word	0x20000a6c
 8013b20:	20000a84 	.word	0x20000a84
 8013b24:	20000a9c 	.word	0x20000a9c
 8013b28:	20000af8 	.word	0x20000af8
 8013b2c:	0801df78 	.word	0x0801df78

08013b30 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b08c      	sub	sp, #48	@ 0x30
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	60f8      	str	r0, [r7, #12]
 8013b38:	60b9      	str	r1, [r7, #8]
 8013b3a:	607a      	str	r2, [r7, #4]
 8013b3c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	7c1b      	ldrb	r3, [r3, #16]
 8013b48:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	7c5b      	ldrb	r3, [r3, #17]
 8013b50:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	689a      	ldr	r2, [r3, #8]
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	795b      	ldrb	r3, [r3, #5]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	f000 808b 	beq.w	8013c7c <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8013b66:	2302      	movs	r3, #2
 8013b68:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	7c9b      	ldrb	r3, [r3, #18]
 8013b70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	7cdb      	ldrb	r3, [r3, #19]
 8013b78:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013b7c:	4611      	mov	r1, r2
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f002 f887 	bl	8015c92 <RegionGetPhyParam>
 8013b84:	4603      	mov	r3, r0
 8013b86:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8013b88:	6a3b      	ldr	r3, [r7, #32]
 8013b8a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8013b8e:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 8013b92:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8013b96:	4293      	cmp	r3, r2
 8013b98:	bfb8      	it	lt
 8013b9a:	4613      	movlt	r3, r2
 8013b9c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        if( datarate == minTxDatarate )
 8013ba0:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8013ba4:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	d106      	bne.n	8013bba <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8013bac:	683b      	ldr	r3, [r7, #0]
 8013bae:	2200      	movs	r2, #0
 8013bb0:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013bb8:	e060      	b.n	8013c7c <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	689b      	ldr	r3, [r3, #8]
 8013bbe:	68fa      	ldr	r2, [r7, #12]
 8013bc0:	8992      	ldrh	r2, [r2, #12]
 8013bc2:	4293      	cmp	r3, r2
 8013bc4:	d303      	bcc.n	8013bce <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013bcc:	e002      	b.n	8013bd4 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8013bce:	2300      	movs	r3, #0
 8013bd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	689b      	ldr	r3, [r3, #8]
 8013bd8:	68fa      	ldr	r2, [r7, #12]
 8013bda:	8992      	ldrh	r2, [r2, #12]
 8013bdc:	4611      	mov	r1, r2
 8013bde:	68fa      	ldr	r2, [r7, #12]
 8013be0:	89d2      	ldrh	r2, [r2, #14]
 8013be2:	440a      	add	r2, r1
 8013be4:	4293      	cmp	r3, r2
 8013be6:	d349      	bcc.n	8013c7c <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8013be8:	2308      	movs	r3, #8
 8013bea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	7cdb      	ldrb	r3, [r3, #19]
 8013bf2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013bf6:	4611      	mov	r1, r2
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f002 f84a 	bl	8015c92 <RegionGetPhyParam>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8013c02:	6a3b      	ldr	r3, [r7, #32]
 8013c04:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	689b      	ldr	r3, [r3, #8]
 8013c0c:	68fa      	ldr	r2, [r7, #12]
 8013c0e:	89d2      	ldrh	r2, [r2, #14]
 8013c10:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c14:	fb01 f202 	mul.w	r2, r1, r2
 8013c18:	1a9b      	subs	r3, r3, r2
 8013c1a:	2b01      	cmp	r3, #1
 8013c1c:	d12e      	bne.n	8013c7c <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013c1e:	2322      	movs	r3, #34	@ 0x22
 8013c20:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                    getPhy.Datarate = datarate;
 8013c24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8013c28:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	7c9b      	ldrb	r3, [r3, #18]
 8013c30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	7cdb      	ldrb	r3, [r3, #19]
 8013c38:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013c3c:	4611      	mov	r1, r2
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f002 f827 	bl	8015c92 <RegionGetPhyParam>
 8013c44:	4603      	mov	r3, r0
 8013c46:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8013c48:	6a3b      	ldr	r3, [r7, #32]
 8013c4a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

                    if( datarate == minTxDatarate )
 8013c4e:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8013c52:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d110      	bne.n	8013c7c <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        if( adrNext->UpdateChanMask == true )
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	791b      	ldrb	r3, [r3, #4]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d009      	beq.n	8013c7c <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013c68:	2302      	movs	r3, #2
 8013c6a:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	7cdb      	ldrb	r3, [r3, #19]
 8013c70:	f107 0214 	add.w	r2, r7, #20
 8013c74:	4611      	mov	r1, r2
 8013c76:	4618      	mov	r0, r3
 8013c78:	f002 f834 	bl	8015ce4 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8013c7c:	68bb      	ldr	r3, [r7, #8]
 8013c7e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8013c82:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8013c8a:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8013c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013c90:	4618      	mov	r0, r3
 8013c92:	3730      	adds	r7, #48	@ 0x30
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bd80      	pop	{r7, pc}

08013c98 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b084      	sub	sp, #16
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	60b9      	str	r1, [r7, #8]
 8013ca2:	607a      	str	r2, [r7, #4]
 8013ca4:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	789b      	ldrb	r3, [r3, #2]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d107      	bne.n	8013cbe <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	687a      	ldr	r2, [r7, #4]
 8013cb2:	68b9      	ldr	r1, [r7, #8]
 8013cb4:	68f8      	ldr	r0, [r7, #12]
 8013cb6:	f7ff ff3b 	bl	8013b30 <CalcNextV10X>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	e000      	b.n	8013cc0 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8013cbe:	2300      	movs	r3, #0
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	3710      	adds	r7, #16
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	bd80      	pop	{r7, pc}

08013cc8 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8013cc8:	b480      	push	{r7}
 8013cca:	b085      	sub	sp, #20
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	60f8      	str	r0, [r7, #12]
 8013cd0:	60b9      	str	r1, [r7, #8]
 8013cd2:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013cd4:	bf00      	nop
 8013cd6:	3714      	adds	r7, #20
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bc80      	pop	{r7}
 8013cdc:	4770      	bx	lr

08013cde <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8013cde:	b480      	push	{r7}
 8013ce0:	b083      	sub	sp, #12
 8013ce2:	af00      	add	r7, sp, #0
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013ce8:	bf00      	nop
 8013cea:	370c      	adds	r7, #12
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bc80      	pop	{r7}
 8013cf0:	4770      	bx	lr

08013cf2 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8013cf2:	b480      	push	{r7}
 8013cf4:	b083      	sub	sp, #12
 8013cf6:	af00      	add	r7, sp, #0
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013cfc:	bf00      	nop
 8013cfe:	370c      	adds	r7, #12
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bc80      	pop	{r7}
 8013d04:	4770      	bx	lr

08013d06 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013d06:	b480      	push	{r7}
 8013d08:	b083      	sub	sp, #12
 8013d0a:	af00      	add	r7, sp, #0
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d10:	bf00      	nop
 8013d12:	370c      	adds	r7, #12
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bc80      	pop	{r7}
 8013d18:	4770      	bx	lr

08013d1a <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8013d1a:	b480      	push	{r7}
 8013d1c:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8013d1e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bc80      	pop	{r7}
 8013d26:	4770      	bx	lr

08013d28 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8013d28:	b480      	push	{r7}
 8013d2a:	b083      	sub	sp, #12
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d30:	bf00      	nop
 8013d32:	370c      	adds	r7, #12
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bc80      	pop	{r7}
 8013d38:	4770      	bx	lr

08013d3a <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8013d3a:	b480      	push	{r7}
 8013d3c:	b083      	sub	sp, #12
 8013d3e:	af00      	add	r7, sp, #0
 8013d40:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d42:	bf00      	nop
 8013d44:	370c      	adds	r7, #12
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bc80      	pop	{r7}
 8013d4a:	4770      	bx	lr

08013d4c <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8013d4c:	b480      	push	{r7}
 8013d4e:	b083      	sub	sp, #12
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d54:	bf00      	nop
 8013d56:	370c      	adds	r7, #12
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bc80      	pop	{r7}
 8013d5c:	4770      	bx	lr

08013d5e <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8013d5e:	b480      	push	{r7}
 8013d60:	b083      	sub	sp, #12
 8013d62:	af00      	add	r7, sp, #0
 8013d64:	6078      	str	r0, [r7, #4]
 8013d66:	460b      	mov	r3, r1
 8013d68:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8013d6a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	370c      	adds	r7, #12
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bc80      	pop	{r7}
 8013d74:	4770      	bx	lr

08013d76 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8013d76:	b480      	push	{r7}
 8013d78:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d7a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bc80      	pop	{r7}
 8013d82:	4770      	bx	lr

08013d84 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8013d84:	b480      	push	{r7}
 8013d86:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d88:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bc80      	pop	{r7}
 8013d90:	4770      	bx	lr

08013d92 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8013d92:	b480      	push	{r7}
 8013d94:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d96:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bc80      	pop	{r7}
 8013d9e:	4770      	bx	lr

08013da0 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8013da0:	b480      	push	{r7}
 8013da2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013da4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bc80      	pop	{r7}
 8013dac:	4770      	bx	lr

08013dae <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8013dae:	b480      	push	{r7}
 8013db0:	b083      	sub	sp, #12
 8013db2:	af00      	add	r7, sp, #0
 8013db4:	4603      	mov	r3, r0
 8013db6:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013db8:	bf00      	nop
 8013dba:	370c      	adds	r7, #12
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	bc80      	pop	{r7}
 8013dc0:	4770      	bx	lr

08013dc2 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8013dc2:	b480      	push	{r7}
 8013dc4:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013dc6:	bf00      	nop
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bc80      	pop	{r7}
 8013dcc:	4770      	bx	lr

08013dce <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8013dce:	b480      	push	{r7}
 8013dd0:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013dd2:	bf00      	nop
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bc80      	pop	{r7}
 8013dd8:	4770      	bx	lr

08013dda <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8013dda:	b480      	push	{r7}
 8013ddc:	b083      	sub	sp, #12
 8013dde:	af00      	add	r7, sp, #0
 8013de0:	4603      	mov	r3, r0
 8013de2:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013de4:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	370c      	adds	r7, #12
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bc80      	pop	{r7}
 8013dee:	4770      	bx	lr

08013df0 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8013df0:	b480      	push	{r7}
 8013df2:	b083      	sub	sp, #12
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013df8:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	370c      	adds	r7, #12
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bc80      	pop	{r7}
 8013e02:	4770      	bx	lr

08013e04 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8013e04:	b480      	push	{r7}
 8013e06:	b083      	sub	sp, #12
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013e0c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e0e:	4618      	mov	r0, r3
 8013e10:	370c      	adds	r7, #12
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bc80      	pop	{r7}
 8013e16:	4770      	bx	lr

08013e18 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013e18:	b480      	push	{r7}
 8013e1a:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e1c:	bf00      	nop
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bc80      	pop	{r7}
 8013e22:	4770      	bx	lr

08013e24 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8013e24:	b480      	push	{r7}
 8013e26:	b083      	sub	sp, #12
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	6039      	str	r1, [r7, #0]
 8013e2e:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8013e30:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	370c      	adds	r7, #12
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bc80      	pop	{r7}
 8013e3a:	4770      	bx	lr

08013e3c <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8013e3c:	b480      	push	{r7}
 8013e3e:	b083      	sub	sp, #12
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	4603      	mov	r3, r0
 8013e44:	603a      	str	r2, [r7, #0]
 8013e46:	80fb      	strh	r3, [r7, #6]
 8013e48:	460b      	mov	r3, r1
 8013e4a:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e4c:	bf00      	nop
 8013e4e:	370c      	adds	r7, #12
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bc80      	pop	{r7}
 8013e54:	4770      	bx	lr

08013e56 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8013e56:	b480      	push	{r7}
 8013e58:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e5a:	bf00      	nop
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bc80      	pop	{r7}
 8013e60:	4770      	bx	lr

08013e62 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8013e62:	b480      	push	{r7}
 8013e64:	b083      	sub	sp, #12
 8013e66:	af00      	add	r7, sp, #0
 8013e68:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8013e6a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	370c      	adds	r7, #12
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bc80      	pop	{r7}
 8013e74:	4770      	bx	lr

08013e76 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8013e76:	b480      	push	{r7}
 8013e78:	b083      	sub	sp, #12
 8013e7a:	af00      	add	r7, sp, #0
 8013e7c:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8013e7e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e80:	4618      	mov	r0, r3
 8013e82:	370c      	adds	r7, #12
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bc80      	pop	{r7}
 8013e88:	4770      	bx	lr

08013e8a <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8013e8a:	b480      	push	{r7}
 8013e8c:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e8e:	bf00      	nop
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bc80      	pop	{r7}
 8013e94:	4770      	bx	lr

08013e96 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8013e96:	b480      	push	{r7}
 8013e98:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013e9a:	bf00      	nop
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bc80      	pop	{r7}
 8013ea0:	4770      	bx	lr

08013ea2 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8013ea2:	b480      	push	{r7}
 8013ea4:	b085      	sub	sp, #20
 8013ea6:	af00      	add	r7, sp, #0
 8013ea8:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013eae:	2300      	movs	r3, #0
 8013eb0:	81fb      	strh	r3, [r7, #14]
 8013eb2:	e00a      	b.n	8013eca <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8013eb4:	89fb      	ldrh	r3, [r7, #14]
 8013eb6:	68ba      	ldr	r2, [r7, #8]
 8013eb8:	4413      	add	r3, r2
 8013eba:	781b      	ldrb	r3, [r3, #0]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d001      	beq.n	8013ec4 <IsSlotFree+0x22>
        {
            return false;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	e006      	b.n	8013ed2 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013ec4:	89fb      	ldrh	r3, [r7, #14]
 8013ec6:	3301      	adds	r3, #1
 8013ec8:	81fb      	strh	r3, [r7, #14]
 8013eca:	89fb      	ldrh	r3, [r7, #14]
 8013ecc:	2b0f      	cmp	r3, #15
 8013ece:	d9f1      	bls.n	8013eb4 <IsSlotFree+0x12>
        }
    }
    return true;
 8013ed0:	2301      	movs	r3, #1
}
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	3714      	adds	r7, #20
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	bc80      	pop	{r7}
 8013eda:	4770      	bx	lr

08013edc <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b082      	sub	sp, #8
 8013ee0:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013ee6:	e007      	b.n	8013ef8 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8013ee8:	79fb      	ldrb	r3, [r7, #7]
 8013eea:	3301      	adds	r3, #1
 8013eec:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8013eee:	79fb      	ldrb	r3, [r7, #7]
 8013ef0:	2b0f      	cmp	r3, #15
 8013ef2:	d101      	bne.n	8013ef8 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	e012      	b.n	8013f1e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013ef8:	79fb      	ldrb	r3, [r7, #7]
 8013efa:	011b      	lsls	r3, r3, #4
 8013efc:	3308      	adds	r3, #8
 8013efe:	4a0a      	ldr	r2, [pc, #40]	@ (8013f28 <MallocNewMacCommandSlot+0x4c>)
 8013f00:	4413      	add	r3, r2
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7ff ffcd 	bl	8013ea2 <IsSlotFree>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	f083 0301 	eor.w	r3, r3, #1
 8013f0e:	b2db      	uxtb	r3, r3
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d1e9      	bne.n	8013ee8 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8013f14:	79fb      	ldrb	r3, [r7, #7]
 8013f16:	011b      	lsls	r3, r3, #4
 8013f18:	3308      	adds	r3, #8
 8013f1a:	4a03      	ldr	r2, [pc, #12]	@ (8013f28 <MallocNewMacCommandSlot+0x4c>)
 8013f1c:	4413      	add	r3, r2
}
 8013f1e:	4618      	mov	r0, r3
 8013f20:	3708      	adds	r7, #8
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}
 8013f26:	bf00      	nop
 8013f28:	20001b14 	.word	0x20001b14

08013f2c <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b082      	sub	sp, #8
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d101      	bne.n	8013f3e <FreeMacCommandSlot+0x12>
    {
        return false;
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	e005      	b.n	8013f4a <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8013f3e:	2210      	movs	r2, #16
 8013f40:	2100      	movs	r1, #0
 8013f42:	6878      	ldr	r0, [r7, #4]
 8013f44:	f004 fb16 	bl	8018574 <memset1>

    return true;
 8013f48:	2301      	movs	r3, #1
}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	3708      	adds	r7, #8
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}

08013f52 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8013f52:	b480      	push	{r7}
 8013f54:	b083      	sub	sp, #12
 8013f56:	af00      	add	r7, sp, #0
 8013f58:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d101      	bne.n	8013f64 <LinkedListInit+0x12>
    {
        return false;
 8013f60:	2300      	movs	r3, #0
 8013f62:	e006      	b.n	8013f72 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	2200      	movs	r2, #0
 8013f68:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	605a      	str	r2, [r3, #4]

    return true;
 8013f70:	2301      	movs	r3, #1
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	370c      	adds	r7, #12
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bc80      	pop	{r7}
 8013f7a:	4770      	bx	lr

08013f7c <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8013f7c:	b480      	push	{r7}
 8013f7e:	b083      	sub	sp, #12
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d002      	beq.n	8013f92 <LinkedListAdd+0x16>
 8013f8c:	683b      	ldr	r3, [r7, #0]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d101      	bne.n	8013f96 <LinkedListAdd+0x1a>
    {
        return false;
 8013f92:	2300      	movs	r3, #0
 8013f94:	e015      	b.n	8013fc2 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d102      	bne.n	8013fa4 <LinkedListAdd+0x28>
    {
        list->First = element;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	683a      	ldr	r2, [r7, #0]
 8013fa2:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	685b      	ldr	r3, [r3, #4]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d003      	beq.n	8013fb4 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	685b      	ldr	r3, [r3, #4]
 8013fb0:	683a      	ldr	r2, [r7, #0]
 8013fb2:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	683a      	ldr	r2, [r7, #0]
 8013fbe:	605a      	str	r2, [r3, #4]

    return true;
 8013fc0:	2301      	movs	r3, #1
}
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	370c      	adds	r7, #12
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bc80      	pop	{r7}
 8013fca:	4770      	bx	lr

08013fcc <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8013fcc:	b480      	push	{r7}
 8013fce:	b085      	sub	sp, #20
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
 8013fd4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d002      	beq.n	8013fe2 <LinkedListGetPrevious+0x16>
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d101      	bne.n	8013fe6 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	e016      	b.n	8014014 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013fec:	683a      	ldr	r2, [r7, #0]
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	429a      	cmp	r2, r3
 8013ff2:	d00c      	beq.n	801400e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013ff4:	e002      	b.n	8013ffc <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d007      	beq.n	8014012 <LinkedListGetPrevious+0x46>
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	683a      	ldr	r2, [r7, #0]
 8014008:	429a      	cmp	r2, r3
 801400a:	d1f4      	bne.n	8013ff6 <LinkedListGetPrevious+0x2a>
 801400c:	e001      	b.n	8014012 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801400e:	2300      	movs	r3, #0
 8014010:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8014012:	68fb      	ldr	r3, [r7, #12]
}
 8014014:	4618      	mov	r0, r3
 8014016:	3714      	adds	r7, #20
 8014018:	46bd      	mov	sp, r7
 801401a:	bc80      	pop	{r7}
 801401c:	4770      	bx	lr

0801401e <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801401e:	b580      	push	{r7, lr}
 8014020:	b084      	sub	sp, #16
 8014022:	af00      	add	r7, sp, #0
 8014024:	6078      	str	r0, [r7, #4]
 8014026:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d002      	beq.n	8014034 <LinkedListRemove+0x16>
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d101      	bne.n	8014038 <LinkedListRemove+0x1a>
    {
        return false;
 8014034:	2300      	movs	r3, #0
 8014036:	e020      	b.n	801407a <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014038:	6839      	ldr	r1, [r7, #0]
 801403a:	6878      	ldr	r0, [r7, #4]
 801403c:	f7ff ffc6 	bl	8013fcc <LinkedListGetPrevious>
 8014040:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	683a      	ldr	r2, [r7, #0]
 8014048:	429a      	cmp	r2, r3
 801404a:	d103      	bne.n	8014054 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 801404c:	683b      	ldr	r3, [r7, #0]
 801404e:	681a      	ldr	r2, [r3, #0]
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	685b      	ldr	r3, [r3, #4]
 8014058:	683a      	ldr	r2, [r7, #0]
 801405a:	429a      	cmp	r2, r3
 801405c:	d102      	bne.n	8014064 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	68fa      	ldr	r2, [r7, #12]
 8014062:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d003      	beq.n	8014072 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	681a      	ldr	r2, [r3, #0]
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	2200      	movs	r2, #0
 8014076:	601a      	str	r2, [r3, #0]

    return true;
 8014078:	2301      	movs	r3, #1
}
 801407a:	4618      	mov	r0, r3
 801407c:	3710      	adds	r7, #16
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}

08014082 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8014082:	b480      	push	{r7}
 8014084:	b083      	sub	sp, #12
 8014086:	af00      	add	r7, sp, #0
 8014088:	4603      	mov	r3, r0
 801408a:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 801408c:	79fb      	ldrb	r3, [r7, #7]
 801408e:	2b05      	cmp	r3, #5
 8014090:	d004      	beq.n	801409c <IsSticky+0x1a>
 8014092:	2b05      	cmp	r3, #5
 8014094:	db04      	blt.n	80140a0 <IsSticky+0x1e>
 8014096:	3b08      	subs	r3, #8
 8014098:	2b02      	cmp	r3, #2
 801409a:	d801      	bhi.n	80140a0 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 801409c:	2301      	movs	r3, #1
 801409e:	e000      	b.n	80140a2 <IsSticky+0x20>
        default:
            return false;
 80140a0:	2300      	movs	r3, #0
    }
}
 80140a2:	4618      	mov	r0, r3
 80140a4:	370c      	adds	r7, #12
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bc80      	pop	{r7}
 80140aa:	4770      	bx	lr

080140ac <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 80140ac:	b480      	push	{r7}
 80140ae:	b083      	sub	sp, #12
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	4603      	mov	r3, r0
 80140b4:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 80140b6:	2300      	movs	r3, #0
    }
}
 80140b8:	4618      	mov	r0, r3
 80140ba:	370c      	adds	r7, #12
 80140bc:	46bd      	mov	sp, r7
 80140be:	bc80      	pop	{r7}
 80140c0:	4770      	bx	lr
	...

080140c4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80140c8:	22fc      	movs	r2, #252	@ 0xfc
 80140ca:	2100      	movs	r1, #0
 80140cc:	4804      	ldr	r0, [pc, #16]	@ (80140e0 <LoRaMacCommandsInit+0x1c>)
 80140ce:	f004 fa51 	bl	8018574 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80140d2:	4803      	ldr	r0, [pc, #12]	@ (80140e0 <LoRaMacCommandsInit+0x1c>)
 80140d4:	f7ff ff3d 	bl	8013f52 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80140d8:	2300      	movs	r3, #0
}
 80140da:	4618      	mov	r0, r3
 80140dc:	bd80      	pop	{r7, pc}
 80140de:	bf00      	nop
 80140e0:	20001b14 	.word	0x20001b14

080140e4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b086      	sub	sp, #24
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	4603      	mov	r3, r0
 80140ec:	60b9      	str	r1, [r7, #8]
 80140ee:	607a      	str	r2, [r7, #4]
 80140f0:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80140f2:	68bb      	ldr	r3, [r7, #8]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d101      	bne.n	80140fc <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80140f8:	2301      	movs	r3, #1
 80140fa:	e03b      	b.n	8014174 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80140fc:	f7ff feee 	bl	8013edc <MallocNewMacCommandSlot>
 8014100:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d101      	bne.n	801410c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8014108:	2302      	movs	r3, #2
 801410a:	e033      	b.n	8014174 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 801410c:	6979      	ldr	r1, [r7, #20]
 801410e:	481b      	ldr	r0, [pc, #108]	@ (801417c <LoRaMacCommandsAddCmd+0x98>)
 8014110:	f7ff ff34 	bl	8013f7c <LinkedListAdd>
 8014114:	4603      	mov	r3, r0
 8014116:	f083 0301 	eor.w	r3, r3, #1
 801411a:	b2db      	uxtb	r3, r3
 801411c:	2b00      	cmp	r3, #0
 801411e:	d001      	beq.n	8014124 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014120:	2305      	movs	r3, #5
 8014122:	e027      	b.n	8014174 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	7bfa      	ldrb	r2, [r7, #15]
 8014128:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801412a:	697b      	ldr	r3, [r7, #20]
 801412c:	687a      	ldr	r2, [r7, #4]
 801412e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8014130:	697b      	ldr	r3, [r7, #20]
 8014132:	3305      	adds	r3, #5
 8014134:	687a      	ldr	r2, [r7, #4]
 8014136:	b292      	uxth	r2, r2
 8014138:	68b9      	ldr	r1, [r7, #8]
 801413a:	4618      	mov	r0, r3
 801413c:	f004 f9df 	bl	80184fe <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8014140:	7bfb      	ldrb	r3, [r7, #15]
 8014142:	4618      	mov	r0, r3
 8014144:	f7ff ff9d 	bl	8014082 <IsSticky>
 8014148:	4603      	mov	r3, r0
 801414a:	461a      	mov	r2, r3
 801414c:	697b      	ldr	r3, [r7, #20]
 801414e:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8014150:	7bfb      	ldrb	r3, [r7, #15]
 8014152:	4618      	mov	r0, r3
 8014154:	f7ff ffaa 	bl	80140ac <IsConfirmationRequired>
 8014158:	4603      	mov	r3, r0
 801415a:	461a      	mov	r2, r3
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8014160:	4b06      	ldr	r3, [pc, #24]	@ (801417c <LoRaMacCommandsAddCmd+0x98>)
 8014162:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	4413      	add	r3, r2
 801416a:	3301      	adds	r3, #1
 801416c:	4a03      	ldr	r2, [pc, #12]	@ (801417c <LoRaMacCommandsAddCmd+0x98>)
 801416e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8014172:	2300      	movs	r3, #0
}
 8014174:	4618      	mov	r0, r3
 8014176:	3718      	adds	r7, #24
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}
 801417c:	20001b14 	.word	0x20001b14

08014180 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b082      	sub	sp, #8
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d101      	bne.n	8014192 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801418e:	2301      	movs	r3, #1
 8014190:	e021      	b.n	80141d6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8014192:	6879      	ldr	r1, [r7, #4]
 8014194:	4812      	ldr	r0, [pc, #72]	@ (80141e0 <LoRaMacCommandsRemoveCmd+0x60>)
 8014196:	f7ff ff42 	bl	801401e <LinkedListRemove>
 801419a:	4603      	mov	r3, r0
 801419c:	f083 0301 	eor.w	r3, r3, #1
 80141a0:	b2db      	uxtb	r3, r3
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d001      	beq.n	80141aa <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80141a6:	2303      	movs	r3, #3
 80141a8:	e015      	b.n	80141d6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80141aa:	4b0d      	ldr	r3, [pc, #52]	@ (80141e0 <LoRaMacCommandsRemoveCmd+0x60>)
 80141ac:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	689b      	ldr	r3, [r3, #8]
 80141b4:	1ad3      	subs	r3, r2, r3
 80141b6:	3b01      	subs	r3, #1
 80141b8:	4a09      	ldr	r2, [pc, #36]	@ (80141e0 <LoRaMacCommandsRemoveCmd+0x60>)
 80141ba:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80141be:	6878      	ldr	r0, [r7, #4]
 80141c0:	f7ff feb4 	bl	8013f2c <FreeMacCommandSlot>
 80141c4:	4603      	mov	r3, r0
 80141c6:	f083 0301 	eor.w	r3, r3, #1
 80141ca:	b2db      	uxtb	r3, r3
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d001      	beq.n	80141d4 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80141d0:	2305      	movs	r3, #5
 80141d2:	e000      	b.n	80141d6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80141d4:	2300      	movs	r3, #0
}
 80141d6:	4618      	mov	r0, r3
 80141d8:	3708      	adds	r7, #8
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
 80141de:	bf00      	nop
 80141e0:	20001b14 	.word	0x20001b14

080141e4 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 80141e4:	b480      	push	{r7}
 80141e6:	b085      	sub	sp, #20
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	4603      	mov	r3, r0
 80141ec:	6039      	str	r1, [r7, #0]
 80141ee:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80141f0:	4b0e      	ldr	r3, [pc, #56]	@ (801422c <LoRaMacCommandsGetCmd+0x48>)
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80141f6:	e002      	b.n	80141fe <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d004      	beq.n	801420e <LoRaMacCommandsGetCmd+0x2a>
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	791b      	ldrb	r3, [r3, #4]
 8014208:	79fa      	ldrb	r2, [r7, #7]
 801420a:	429a      	cmp	r2, r3
 801420c:	d1f4      	bne.n	80141f8 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 801420e:	683b      	ldr	r3, [r7, #0]
 8014210:	68fa      	ldr	r2, [r7, #12]
 8014212:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d101      	bne.n	801421e <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801421a:	2303      	movs	r3, #3
 801421c:	e000      	b.n	8014220 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 801421e:	2300      	movs	r3, #0
}
 8014220:	4618      	mov	r0, r3
 8014222:	3714      	adds	r7, #20
 8014224:	46bd      	mov	sp, r7
 8014226:	bc80      	pop	{r7}
 8014228:	4770      	bx	lr
 801422a:	bf00      	nop
 801422c:	20001b14 	.word	0x20001b14

08014230 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b082      	sub	sp, #8
 8014234:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014236:	4b0f      	ldr	r3, [pc, #60]	@ (8014274 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801423c:	e012      	b.n	8014264 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	7b1b      	ldrb	r3, [r3, #12]
 8014242:	f083 0301 	eor.w	r3, r3, #1
 8014246:	b2db      	uxtb	r3, r3
 8014248:	2b00      	cmp	r3, #0
 801424a:	d008      	beq.n	801425e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8014252:	6878      	ldr	r0, [r7, #4]
 8014254:	f7ff ff94 	bl	8014180 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014258:	683b      	ldr	r3, [r7, #0]
 801425a:	607b      	str	r3, [r7, #4]
 801425c:	e002      	b.n	8014264 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d1e9      	bne.n	801423e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801426a:	2300      	movs	r3, #0
}
 801426c:	4618      	mov	r0, r3
 801426e:	3708      	adds	r7, #8
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}
 8014274:	20001b14 	.word	0x20001b14

08014278 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b082      	sub	sp, #8
 801427c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801427e:	4b13      	ldr	r3, [pc, #76]	@ (80142cc <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014284:	e01a      	b.n	80142bc <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	791b      	ldrb	r3, [r3, #4]
 8014290:	4618      	mov	r0, r3
 8014292:	f7ff fef6 	bl	8014082 <IsSticky>
 8014296:	4603      	mov	r3, r0
 8014298:	2b00      	cmp	r3, #0
 801429a:	d00d      	beq.n	80142b8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	791b      	ldrb	r3, [r3, #4]
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7ff ff03 	bl	80140ac <IsConfirmationRequired>
 80142a6:	4603      	mov	r3, r0
 80142a8:	f083 0301 	eor.w	r3, r3, #1
 80142ac:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d002      	beq.n	80142b8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80142b2:	6878      	ldr	r0, [r7, #4]
 80142b4:	f7ff ff64 	bl	8014180 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80142b8:	683b      	ldr	r3, [r7, #0]
 80142ba:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d1e1      	bne.n	8014286 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80142c2:	2300      	movs	r3, #0
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	3708      	adds	r7, #8
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}
 80142cc:	20001b14 	.word	0x20001b14

080142d0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80142d0:	b480      	push	{r7}
 80142d2:	b083      	sub	sp, #12
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d101      	bne.n	80142e2 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80142de:	2301      	movs	r3, #1
 80142e0:	e005      	b.n	80142ee <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80142e2:	4b05      	ldr	r3, [pc, #20]	@ (80142f8 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80142e4:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80142ec:	2300      	movs	r3, #0
}
 80142ee:	4618      	mov	r0, r3
 80142f0:	370c      	adds	r7, #12
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bc80      	pop	{r7}
 80142f6:	4770      	bx	lr
 80142f8:	20001b14 	.word	0x20001b14

080142fc <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b088      	sub	sp, #32
 8014300:	af00      	add	r7, sp, #0
 8014302:	60f8      	str	r0, [r7, #12]
 8014304:	60b9      	str	r1, [r7, #8]
 8014306:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8014308:	4b25      	ldr	r3, [pc, #148]	@ (80143a0 <LoRaMacCommandsSerializeCmds+0xa4>)
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801430e:	2300      	movs	r3, #0
 8014310:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d002      	beq.n	801431e <LoRaMacCommandsSerializeCmds+0x22>
 8014318:	68bb      	ldr	r3, [r7, #8]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d126      	bne.n	801436c <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801431e:	2301      	movs	r3, #1
 8014320:	e039      	b.n	8014396 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014322:	7efb      	ldrb	r3, [r7, #27]
 8014324:	68fa      	ldr	r2, [r7, #12]
 8014326:	1ad2      	subs	r2, r2, r3
 8014328:	69fb      	ldr	r3, [r7, #28]
 801432a:	689b      	ldr	r3, [r3, #8]
 801432c:	3301      	adds	r3, #1
 801432e:	429a      	cmp	r2, r3
 8014330:	d320      	bcc.n	8014374 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8014332:	7efb      	ldrb	r3, [r7, #27]
 8014334:	1c5a      	adds	r2, r3, #1
 8014336:	76fa      	strb	r2, [r7, #27]
 8014338:	461a      	mov	r2, r3
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	4413      	add	r3, r2
 801433e:	69fa      	ldr	r2, [r7, #28]
 8014340:	7912      	ldrb	r2, [r2, #4]
 8014342:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014344:	7efb      	ldrb	r3, [r7, #27]
 8014346:	687a      	ldr	r2, [r7, #4]
 8014348:	18d0      	adds	r0, r2, r3
 801434a:	69fb      	ldr	r3, [r7, #28]
 801434c:	1d59      	adds	r1, r3, #5
 801434e:	69fb      	ldr	r3, [r7, #28]
 8014350:	689b      	ldr	r3, [r3, #8]
 8014352:	b29b      	uxth	r3, r3
 8014354:	461a      	mov	r2, r3
 8014356:	f004 f8d2 	bl	80184fe <memcpy1>
            itr += curElement->PayloadSize;
 801435a:	69fb      	ldr	r3, [r7, #28]
 801435c:	689b      	ldr	r3, [r3, #8]
 801435e:	b2da      	uxtb	r2, r3
 8014360:	7efb      	ldrb	r3, [r7, #27]
 8014362:	4413      	add	r3, r2
 8014364:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8014366:	69fb      	ldr	r3, [r7, #28]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801436c:	69fb      	ldr	r3, [r7, #28]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d1d7      	bne.n	8014322 <LoRaMacCommandsSerializeCmds+0x26>
 8014372:	e009      	b.n	8014388 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8014374:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8014376:	e007      	b.n	8014388 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8014378:	69fb      	ldr	r3, [r7, #28]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801437e:	69f8      	ldr	r0, [r7, #28]
 8014380:	f7ff fefe 	bl	8014180 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014388:	69fb      	ldr	r3, [r7, #28]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d1f4      	bne.n	8014378 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801438e:	68b8      	ldr	r0, [r7, #8]
 8014390:	f7ff ff9e 	bl	80142d0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014394:	2300      	movs	r3, #0
}
 8014396:	4618      	mov	r0, r3
 8014398:	3720      	adds	r7, #32
 801439a:	46bd      	mov	sp, r7
 801439c:	bd80      	pop	{r7, pc}
 801439e:	bf00      	nop
 80143a0:	20001b14 	.word	0x20001b14

080143a4 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80143a4:	b480      	push	{r7}
 80143a6:	b085      	sub	sp, #20
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	4603      	mov	r3, r0
 80143ac:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80143ae:	2300      	movs	r3, #0
 80143b0:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80143b2:	79fb      	ldrb	r3, [r7, #7]
 80143b4:	3b02      	subs	r3, #2
 80143b6:	2b11      	cmp	r3, #17
 80143b8:	d850      	bhi.n	801445c <LoRaMacCommandsGetCmdSize+0xb8>
 80143ba:	a201      	add	r2, pc, #4	@ (adr r2, 80143c0 <LoRaMacCommandsGetCmdSize+0x1c>)
 80143bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143c0:	08014409 	.word	0x08014409
 80143c4:	0801440f 	.word	0x0801440f
 80143c8:	08014415 	.word	0x08014415
 80143cc:	0801441b 	.word	0x0801441b
 80143d0:	08014421 	.word	0x08014421
 80143d4:	08014427 	.word	0x08014427
 80143d8:	0801442d 	.word	0x0801442d
 80143dc:	08014433 	.word	0x08014433
 80143e0:	08014439 	.word	0x08014439
 80143e4:	0801445d 	.word	0x0801445d
 80143e8:	0801445d 	.word	0x0801445d
 80143ec:	0801443f 	.word	0x0801443f
 80143f0:	0801445d 	.word	0x0801445d
 80143f4:	0801445d 	.word	0x0801445d
 80143f8:	08014445 	.word	0x08014445
 80143fc:	0801444b 	.word	0x0801444b
 8014400:	08014451 	.word	0x08014451
 8014404:	08014457 	.word	0x08014457
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8014408:	2303      	movs	r3, #3
 801440a:	73fb      	strb	r3, [r7, #15]
            break;
 801440c:	e027      	b.n	801445e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801440e:	2305      	movs	r3, #5
 8014410:	73fb      	strb	r3, [r7, #15]
            break;
 8014412:	e024      	b.n	801445e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8014414:	2302      	movs	r3, #2
 8014416:	73fb      	strb	r3, [r7, #15]
            break;
 8014418:	e021      	b.n	801445e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801441a:	2305      	movs	r3, #5
 801441c:	73fb      	strb	r3, [r7, #15]
            break;
 801441e:	e01e      	b.n	801445e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014420:	2301      	movs	r3, #1
 8014422:	73fb      	strb	r3, [r7, #15]
            break;
 8014424:	e01b      	b.n	801445e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8014426:	2306      	movs	r3, #6
 8014428:	73fb      	strb	r3, [r7, #15]
            break;
 801442a:	e018      	b.n	801445e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801442c:	2302      	movs	r3, #2
 801442e:	73fb      	strb	r3, [r7, #15]
            break;
 8014430:	e015      	b.n	801445e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8014432:	2302      	movs	r3, #2
 8014434:	73fb      	strb	r3, [r7, #15]
            break;
 8014436:	e012      	b.n	801445e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8014438:	2305      	movs	r3, #5
 801443a:	73fb      	strb	r3, [r7, #15]
            break;
 801443c:	e00f      	b.n	801445e <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801443e:	2306      	movs	r3, #6
 8014440:	73fb      	strb	r3, [r7, #15]
            break;
 8014442:	e00c      	b.n	801445e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8014444:	2301      	movs	r3, #1
 8014446:	73fb      	strb	r3, [r7, #15]
            break;
 8014448:	e009      	b.n	801445e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801444a:	2305      	movs	r3, #5
 801444c:	73fb      	strb	r3, [r7, #15]
            break;
 801444e:	e006      	b.n	801445e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8014450:	2304      	movs	r3, #4
 8014452:	73fb      	strb	r3, [r7, #15]
            break;
 8014454:	e003      	b.n	801445e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8014456:	2304      	movs	r3, #4
 8014458:	73fb      	strb	r3, [r7, #15]
            break;
 801445a:	e000      	b.n	801445e <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 801445c:	bf00      	nop
        }
    }
    return cidSize;
 801445e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014460:	4618      	mov	r0, r3
 8014462:	3714      	adds	r7, #20
 8014464:	46bd      	mov	sp, r7
 8014466:	bc80      	pop	{r7}
 8014468:	4770      	bx	lr
 801446a:	bf00      	nop

0801446c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801446c:	b480      	push	{r7}
 801446e:	b083      	sub	sp, #12
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	4a07      	ldr	r2, [pc, #28]	@ (8014494 <IncreaseBufferPointer+0x28>)
 8014478:	4293      	cmp	r3, r2
 801447a:	d102      	bne.n	8014482 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801447c:	4b06      	ldr	r3, [pc, #24]	@ (8014498 <IncreaseBufferPointer+0x2c>)
 801447e:	607b      	str	r3, [r7, #4]
 8014480:	e002      	b.n	8014488 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	3304      	adds	r3, #4
 8014486:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8014488:	687b      	ldr	r3, [r7, #4]
}
 801448a:	4618      	mov	r0, r3
 801448c:	370c      	adds	r7, #12
 801448e:	46bd      	mov	sp, r7
 8014490:	bc80      	pop	{r7}
 8014492:	4770      	bx	lr
 8014494:	20001c2c 	.word	0x20001c2c
 8014498:	20001c1c 	.word	0x20001c1c

0801449c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801449c:	b480      	push	{r7}
 801449e:	b083      	sub	sp, #12
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	4603      	mov	r3, r0
 80144a4:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80144a6:	79fb      	ldrb	r3, [r7, #7]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d101      	bne.n	80144b0 <IsListEmpty+0x14>
    {
        return true;
 80144ac:	2301      	movs	r3, #1
 80144ae:	e000      	b.n	80144b2 <IsListEmpty+0x16>
    }
    return false;
 80144b0:	2300      	movs	r3, #0
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	370c      	adds	r7, #12
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bc80      	pop	{r7}
 80144ba:	4770      	bx	lr

080144bc <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80144bc:	b480      	push	{r7}
 80144be:	b083      	sub	sp, #12
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	4603      	mov	r3, r0
 80144c4:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80144c6:	79fb      	ldrb	r3, [r7, #7]
 80144c8:	2b04      	cmp	r3, #4
 80144ca:	d901      	bls.n	80144d0 <IsListFull+0x14>
    {
        return true;
 80144cc:	2301      	movs	r3, #1
 80144ce:	e000      	b.n	80144d2 <IsListFull+0x16>
    }
    return false;
 80144d0:	2300      	movs	r3, #0
}
 80144d2:	4618      	mov	r0, r3
 80144d4:	370c      	adds	r7, #12
 80144d6:	46bd      	mov	sp, r7
 80144d8:	bc80      	pop	{r7}
 80144da:	4770      	bx	lr

080144dc <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b086      	sub	sp, #24
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	4603      	mov	r3, r0
 80144e4:	60b9      	str	r1, [r7, #8]
 80144e6:	607a      	str	r2, [r7, #4]
 80144e8:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80144ea:	68bb      	ldr	r3, [r7, #8]
 80144ec:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80144ee:	4b13      	ldr	r3, [pc, #76]	@ (801453c <GetElement+0x60>)
 80144f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80144f4:	4618      	mov	r0, r3
 80144f6:	f7ff ffd1 	bl	801449c <IsListEmpty>
 80144fa:	4603      	mov	r3, r0
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d001      	beq.n	8014504 <GetElement+0x28>
    {
        return NULL;
 8014500:	2300      	movs	r3, #0
 8014502:	e017      	b.n	8014534 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014504:	2300      	movs	r3, #0
 8014506:	74fb      	strb	r3, [r7, #19]
 8014508:	e00d      	b.n	8014526 <GetElement+0x4a>
    {
        if( element->Request == request )
 801450a:	697b      	ldr	r3, [r7, #20]
 801450c:	781b      	ldrb	r3, [r3, #0]
 801450e:	7bfa      	ldrb	r2, [r7, #15]
 8014510:	429a      	cmp	r2, r3
 8014512:	d101      	bne.n	8014518 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8014514:	697b      	ldr	r3, [r7, #20]
 8014516:	e00d      	b.n	8014534 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8014518:	6978      	ldr	r0, [r7, #20]
 801451a:	f7ff ffa7 	bl	801446c <IncreaseBufferPointer>
 801451e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014520:	7cfb      	ldrb	r3, [r7, #19]
 8014522:	3301      	adds	r3, #1
 8014524:	74fb      	strb	r3, [r7, #19]
 8014526:	4b05      	ldr	r3, [pc, #20]	@ (801453c <GetElement+0x60>)
 8014528:	f893 3020 	ldrb.w	r3, [r3, #32]
 801452c:	7cfa      	ldrb	r2, [r7, #19]
 801452e:	429a      	cmp	r2, r3
 8014530:	d3eb      	bcc.n	801450a <GetElement+0x2e>
    }

    return NULL;
 8014532:	2300      	movs	r3, #0
}
 8014534:	4618      	mov	r0, r3
 8014536:	3718      	adds	r7, #24
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}
 801453c:	20001c10 	.word	0x20001c10

08014540 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b082      	sub	sp, #8
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8014548:	4a0c      	ldr	r2, [pc, #48]	@ (801457c <LoRaMacConfirmQueueInit+0x3c>)
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801454e:	4b0b      	ldr	r3, [pc, #44]	@ (801457c <LoRaMacConfirmQueueInit+0x3c>)
 8014550:	2200      	movs	r2, #0
 8014552:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014556:	4b09      	ldr	r3, [pc, #36]	@ (801457c <LoRaMacConfirmQueueInit+0x3c>)
 8014558:	4a09      	ldr	r2, [pc, #36]	@ (8014580 <LoRaMacConfirmQueueInit+0x40>)
 801455a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801455c:	4b07      	ldr	r3, [pc, #28]	@ (801457c <LoRaMacConfirmQueueInit+0x3c>)
 801455e:	4a08      	ldr	r2, [pc, #32]	@ (8014580 <LoRaMacConfirmQueueInit+0x40>)
 8014560:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8014562:	2214      	movs	r2, #20
 8014564:	21ff      	movs	r1, #255	@ 0xff
 8014566:	4806      	ldr	r0, [pc, #24]	@ (8014580 <LoRaMacConfirmQueueInit+0x40>)
 8014568:	f004 f804 	bl	8018574 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801456c:	4b03      	ldr	r3, [pc, #12]	@ (801457c <LoRaMacConfirmQueueInit+0x3c>)
 801456e:	2201      	movs	r2, #1
 8014570:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8014574:	bf00      	nop
 8014576:	3708      	adds	r7, #8
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}
 801457c:	20001c10 	.word	0x20001c10
 8014580:	20001c1c 	.word	0x20001c1c

08014584 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b082      	sub	sp, #8
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801458c:	4b19      	ldr	r3, [pc, #100]	@ (80145f4 <LoRaMacConfirmQueueAdd+0x70>)
 801458e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014592:	4618      	mov	r0, r3
 8014594:	f7ff ff92 	bl	80144bc <IsListFull>
 8014598:	4603      	mov	r3, r0
 801459a:	2b00      	cmp	r3, #0
 801459c:	d001      	beq.n	80145a2 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801459e:	2300      	movs	r3, #0
 80145a0:	e023      	b.n	80145ea <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80145a2:	4b14      	ldr	r3, [pc, #80]	@ (80145f4 <LoRaMacConfirmQueueAdd+0x70>)
 80145a4:	689b      	ldr	r3, [r3, #8]
 80145a6:	687a      	ldr	r2, [r7, #4]
 80145a8:	7812      	ldrb	r2, [r2, #0]
 80145aa:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80145ac:	4b11      	ldr	r3, [pc, #68]	@ (80145f4 <LoRaMacConfirmQueueAdd+0x70>)
 80145ae:	689b      	ldr	r3, [r3, #8]
 80145b0:	687a      	ldr	r2, [r7, #4]
 80145b2:	7852      	ldrb	r2, [r2, #1]
 80145b4:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80145b6:	4b0f      	ldr	r3, [pc, #60]	@ (80145f4 <LoRaMacConfirmQueueAdd+0x70>)
 80145b8:	689b      	ldr	r3, [r3, #8]
 80145ba:	687a      	ldr	r2, [r7, #4]
 80145bc:	78d2      	ldrb	r2, [r2, #3]
 80145be:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 80145c0:	4b0c      	ldr	r3, [pc, #48]	@ (80145f4 <LoRaMacConfirmQueueAdd+0x70>)
 80145c2:	689b      	ldr	r3, [r3, #8]
 80145c4:	2200      	movs	r2, #0
 80145c6:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80145c8:	4b0a      	ldr	r3, [pc, #40]	@ (80145f4 <LoRaMacConfirmQueueAdd+0x70>)
 80145ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80145ce:	3301      	adds	r3, #1
 80145d0:	b2da      	uxtb	r2, r3
 80145d2:	4b08      	ldr	r3, [pc, #32]	@ (80145f4 <LoRaMacConfirmQueueAdd+0x70>)
 80145d4:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80145d8:	4b06      	ldr	r3, [pc, #24]	@ (80145f4 <LoRaMacConfirmQueueAdd+0x70>)
 80145da:	689b      	ldr	r3, [r3, #8]
 80145dc:	4618      	mov	r0, r3
 80145de:	f7ff ff45 	bl	801446c <IncreaseBufferPointer>
 80145e2:	4603      	mov	r3, r0
 80145e4:	4a03      	ldr	r2, [pc, #12]	@ (80145f4 <LoRaMacConfirmQueueAdd+0x70>)
 80145e6:	6093      	str	r3, [r2, #8]

    return true;
 80145e8:	2301      	movs	r3, #1
}
 80145ea:	4618      	mov	r0, r3
 80145ec:	3708      	adds	r7, #8
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd80      	pop	{r7, pc}
 80145f2:	bf00      	nop
 80145f4:	20001c10 	.word	0x20001c10

080145f8 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80145fc:	4b0e      	ldr	r3, [pc, #56]	@ (8014638 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80145fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014602:	4618      	mov	r0, r3
 8014604:	f7ff ff4a 	bl	801449c <IsListEmpty>
 8014608:	4603      	mov	r3, r0
 801460a:	2b00      	cmp	r3, #0
 801460c:	d001      	beq.n	8014612 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801460e:	2300      	movs	r3, #0
 8014610:	e010      	b.n	8014634 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8014612:	4b09      	ldr	r3, [pc, #36]	@ (8014638 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014618:	3b01      	subs	r3, #1
 801461a:	b2da      	uxtb	r2, r3
 801461c:	4b06      	ldr	r3, [pc, #24]	@ (8014638 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801461e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8014622:	4b05      	ldr	r3, [pc, #20]	@ (8014638 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014624:	685b      	ldr	r3, [r3, #4]
 8014626:	4618      	mov	r0, r3
 8014628:	f7ff ff20 	bl	801446c <IncreaseBufferPointer>
 801462c:	4603      	mov	r3, r0
 801462e:	4a02      	ldr	r2, [pc, #8]	@ (8014638 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014630:	6053      	str	r3, [r2, #4]

    return true;
 8014632:	2301      	movs	r3, #1
}
 8014634:	4618      	mov	r0, r3
 8014636:	bd80      	pop	{r7, pc}
 8014638:	20001c10 	.word	0x20001c10

0801463c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b084      	sub	sp, #16
 8014640:	af00      	add	r7, sp, #0
 8014642:	4603      	mov	r3, r0
 8014644:	460a      	mov	r2, r1
 8014646:	71fb      	strb	r3, [r7, #7]
 8014648:	4613      	mov	r3, r2
 801464a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 801464c:	2300      	movs	r3, #0
 801464e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014650:	4b10      	ldr	r3, [pc, #64]	@ (8014694 <LoRaMacConfirmQueueSetStatus+0x58>)
 8014652:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014656:	4618      	mov	r0, r3
 8014658:	f7ff ff20 	bl	801449c <IsListEmpty>
 801465c:	4603      	mov	r3, r0
 801465e:	f083 0301 	eor.w	r3, r3, #1
 8014662:	b2db      	uxtb	r3, r3
 8014664:	2b00      	cmp	r3, #0
 8014666:	d011      	beq.n	801468c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014668:	4b0a      	ldr	r3, [pc, #40]	@ (8014694 <LoRaMacConfirmQueueSetStatus+0x58>)
 801466a:	6859      	ldr	r1, [r3, #4]
 801466c:	4b09      	ldr	r3, [pc, #36]	@ (8014694 <LoRaMacConfirmQueueSetStatus+0x58>)
 801466e:	689a      	ldr	r2, [r3, #8]
 8014670:	79bb      	ldrb	r3, [r7, #6]
 8014672:	4618      	mov	r0, r3
 8014674:	f7ff ff32 	bl	80144dc <GetElement>
 8014678:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d005      	beq.n	801468c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	79fa      	ldrb	r2, [r7, #7]
 8014684:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	2201      	movs	r2, #1
 801468a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801468c:	bf00      	nop
 801468e:	3710      	adds	r7, #16
 8014690:	46bd      	mov	sp, r7
 8014692:	bd80      	pop	{r7, pc}
 8014694:	20001c10 	.word	0x20001c10

08014698 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b084      	sub	sp, #16
 801469c:	af00      	add	r7, sp, #0
 801469e:	4603      	mov	r3, r0
 80146a0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80146a2:	2300      	movs	r3, #0
 80146a4:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80146a6:	4b10      	ldr	r3, [pc, #64]	@ (80146e8 <LoRaMacConfirmQueueGetStatus+0x50>)
 80146a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80146ac:	4618      	mov	r0, r3
 80146ae:	f7ff fef5 	bl	801449c <IsListEmpty>
 80146b2:	4603      	mov	r3, r0
 80146b4:	f083 0301 	eor.w	r3, r3, #1
 80146b8:	b2db      	uxtb	r3, r3
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d00e      	beq.n	80146dc <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80146be:	4b0a      	ldr	r3, [pc, #40]	@ (80146e8 <LoRaMacConfirmQueueGetStatus+0x50>)
 80146c0:	6859      	ldr	r1, [r3, #4]
 80146c2:	4b09      	ldr	r3, [pc, #36]	@ (80146e8 <LoRaMacConfirmQueueGetStatus+0x50>)
 80146c4:	689a      	ldr	r2, [r3, #8]
 80146c6:	79fb      	ldrb	r3, [r7, #7]
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7ff ff07 	bl	80144dc <GetElement>
 80146ce:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d002      	beq.n	80146dc <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	785b      	ldrb	r3, [r3, #1]
 80146da:	e000      	b.n	80146de <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80146dc:	2301      	movs	r3, #1
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3710      	adds	r7, #16
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}
 80146e6:	bf00      	nop
 80146e8:	20001c10 	.word	0x20001c10

080146ec <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b084      	sub	sp, #16
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	4603      	mov	r3, r0
 80146f4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80146f6:	4b16      	ldr	r3, [pc, #88]	@ (8014750 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80146f8:	685b      	ldr	r3, [r3, #4]
 80146fa:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 80146fc:	4a14      	ldr	r2, [pc, #80]	@ (8014750 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80146fe:	79fb      	ldrb	r3, [r7, #7]
 8014700:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014704:	4b12      	ldr	r3, [pc, #72]	@ (8014750 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014706:	f893 3020 	ldrb.w	r3, [r3, #32]
 801470a:	4618      	mov	r0, r3
 801470c:	f7ff fec6 	bl	801449c <IsListEmpty>
 8014710:	4603      	mov	r3, r0
 8014712:	f083 0301 	eor.w	r3, r3, #1
 8014716:	b2db      	uxtb	r3, r3
 8014718:	2b00      	cmp	r3, #0
 801471a:	d015      	beq.n	8014748 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	79fa      	ldrb	r2, [r7, #7]
 8014720:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	78db      	ldrb	r3, [r3, #3]
 8014726:	f083 0301 	eor.w	r3, r3, #1
 801472a:	b2db      	uxtb	r3, r3
 801472c:	2b00      	cmp	r3, #0
 801472e:	d002      	beq.n	8014736 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	2201      	movs	r2, #1
 8014734:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8014736:	68f8      	ldr	r0, [r7, #12]
 8014738:	f7ff fe98 	bl	801446c <IncreaseBufferPointer>
 801473c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801473e:	4b04      	ldr	r3, [pc, #16]	@ (8014750 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014740:	689b      	ldr	r3, [r3, #8]
 8014742:	68fa      	ldr	r2, [r7, #12]
 8014744:	429a      	cmp	r2, r3
 8014746:	d1e9      	bne.n	801471c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8014748:	bf00      	nop
 801474a:	3710      	adds	r7, #16
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}
 8014750:	20001c10 	.word	0x20001c10

08014754 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b082      	sub	sp, #8
 8014758:	af00      	add	r7, sp, #0
 801475a:	4603      	mov	r3, r0
 801475c:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801475e:	4b09      	ldr	r3, [pc, #36]	@ (8014784 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014760:	6859      	ldr	r1, [r3, #4]
 8014762:	4b08      	ldr	r3, [pc, #32]	@ (8014784 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014764:	689a      	ldr	r2, [r3, #8]
 8014766:	79fb      	ldrb	r3, [r7, #7]
 8014768:	4618      	mov	r0, r3
 801476a:	f7ff feb7 	bl	80144dc <GetElement>
 801476e:	4603      	mov	r3, r0
 8014770:	2b00      	cmp	r3, #0
 8014772:	d001      	beq.n	8014778 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8014774:	2301      	movs	r3, #1
 8014776:	e000      	b.n	801477a <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8014778:	2300      	movs	r3, #0
}
 801477a:	4618      	mov	r0, r3
 801477c:	3708      	adds	r7, #8
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}
 8014782:	bf00      	nop
 8014784:	20001c10 	.word	0x20001c10

08014788 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b084      	sub	sp, #16
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014790:	4b25      	ldr	r3, [pc, #148]	@ (8014828 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014796:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8014798:	2300      	movs	r3, #0
 801479a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 801479c:	f107 0308 	add.w	r3, r7, #8
 80147a0:	2204      	movs	r2, #4
 80147a2:	2100      	movs	r1, #0
 80147a4:	4618      	mov	r0, r3
 80147a6:	f003 fee5 	bl	8018574 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 80147aa:	2300      	movs	r3, #0
 80147ac:	73fb      	strb	r3, [r7, #15]
 80147ae:	e032      	b.n	8014816 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80147b0:	4b1d      	ldr	r3, [pc, #116]	@ (8014828 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80147b2:	685b      	ldr	r3, [r3, #4]
 80147b4:	781a      	ldrb	r2, [r3, #0]
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80147ba:	4b1b      	ldr	r3, [pc, #108]	@ (8014828 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80147bc:	685b      	ldr	r3, [r3, #4]
 80147be:	785a      	ldrb	r2, [r3, #1]
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80147c4:	4b18      	ldr	r3, [pc, #96]	@ (8014828 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80147c6:	685b      	ldr	r3, [r3, #4]
 80147c8:	789b      	ldrb	r3, [r3, #2]
 80147ca:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80147cc:	7b7b      	ldrb	r3, [r7, #13]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d005      	beq.n	80147de <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80147d2:	4b15      	ldr	r3, [pc, #84]	@ (8014828 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	689b      	ldr	r3, [r3, #8]
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	4798      	blx	r3
 80147dc:	e00b      	b.n	80147f6 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80147de:	4b12      	ldr	r3, [pc, #72]	@ (8014828 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80147e0:	685b      	ldr	r3, [r3, #4]
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80147e6:	4b10      	ldr	r3, [pc, #64]	@ (8014828 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80147e8:	685b      	ldr	r3, [r3, #4]
 80147ea:	785b      	ldrb	r3, [r3, #1]
 80147ec:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80147ee:	4b0e      	ldr	r3, [pc, #56]	@ (8014828 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80147f0:	685b      	ldr	r3, [r3, #4]
 80147f2:	78db      	ldrb	r3, [r3, #3]
 80147f4:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80147f6:	f7ff feff 	bl	80145f8 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80147fa:	7b7b      	ldrb	r3, [r7, #13]
 80147fc:	f083 0301 	eor.w	r3, r3, #1
 8014800:	b2db      	uxtb	r3, r3
 8014802:	2b00      	cmp	r3, #0
 8014804:	d004      	beq.n	8014810 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8014806:	f107 0308 	add.w	r3, r7, #8
 801480a:	4618      	mov	r0, r3
 801480c:	f7ff feba 	bl	8014584 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8014810:	7bfb      	ldrb	r3, [r7, #15]
 8014812:	3301      	adds	r3, #1
 8014814:	73fb      	strb	r3, [r7, #15]
 8014816:	7bfa      	ldrb	r2, [r7, #15]
 8014818:	7bbb      	ldrb	r3, [r7, #14]
 801481a:	429a      	cmp	r2, r3
 801481c:	d3c8      	bcc.n	80147b0 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 801481e:	bf00      	nop
 8014820:	bf00      	nop
 8014822:	3710      	adds	r7, #16
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	20001c10 	.word	0x20001c10

0801482c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801482c:	b480      	push	{r7}
 801482e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014830:	4b03      	ldr	r3, [pc, #12]	@ (8014840 <LoRaMacConfirmQueueGetCnt+0x14>)
 8014832:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8014836:	4618      	mov	r0, r3
 8014838:	46bd      	mov	sp, r7
 801483a:	bc80      	pop	{r7}
 801483c:	4770      	bx	lr
 801483e:	bf00      	nop
 8014840:	20001c10 	.word	0x20001c10

08014844 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8014844:	b580      	push	{r7, lr}
 8014846:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014848:	4b06      	ldr	r3, [pc, #24]	@ (8014864 <LoRaMacConfirmQueueIsFull+0x20>)
 801484a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801484e:	4618      	mov	r0, r3
 8014850:	f7ff fe34 	bl	80144bc <IsListFull>
 8014854:	4603      	mov	r3, r0
 8014856:	2b00      	cmp	r3, #0
 8014858:	d001      	beq.n	801485e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801485a:	2301      	movs	r3, #1
 801485c:	e000      	b.n	8014860 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801485e:	2300      	movs	r3, #0
    }
}
 8014860:	4618      	mov	r0, r3
 8014862:	bd80      	pop	{r7, pc}
 8014864:	20001c10 	.word	0x20001c10

08014868 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b08e      	sub	sp, #56	@ 0x38
 801486c:	af00      	add	r7, sp, #0
 801486e:	60f8      	str	r0, [r7, #12]
 8014870:	607b      	str	r3, [r7, #4]
 8014872:	460b      	mov	r3, r1
 8014874:	817b      	strh	r3, [r7, #10]
 8014876:	4613      	mov	r3, r2
 8014878:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d101      	bne.n	8014884 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014880:	230a      	movs	r3, #10
 8014882:	e086      	b.n	8014992 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8014884:	2300      	movs	r3, #0
 8014886:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 801488a:	2301      	movs	r3, #1
 801488c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 801488e:	2300      	movs	r3, #0
 8014890:	623b      	str	r3, [r7, #32]
 8014892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014896:	2200      	movs	r2, #0
 8014898:	601a      	str	r2, [r3, #0]
 801489a:	605a      	str	r2, [r3, #4]
 801489c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 801489e:	2300      	movs	r3, #0
 80148a0:	613b      	str	r3, [r7, #16]
 80148a2:	f107 0314 	add.w	r3, r7, #20
 80148a6:	2200      	movs	r2, #0
 80148a8:	601a      	str	r2, [r3, #0]
 80148aa:	605a      	str	r2, [r3, #4]
 80148ac:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80148ae:	2301      	movs	r3, #1
 80148b0:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80148b2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80148b6:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	b2db      	uxtb	r3, r3
 80148bc:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	0a1b      	lsrs	r3, r3, #8
 80148c2:	b2db      	uxtb	r3, r3
 80148c4:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	0c1b      	lsrs	r3, r3, #16
 80148ca:	b2db      	uxtb	r3, r3
 80148cc:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	0e1b      	lsrs	r3, r3, #24
 80148d2:	b2db      	uxtb	r3, r3
 80148d4:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80148d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80148d8:	b2db      	uxtb	r3, r3
 80148da:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80148dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80148de:	0a1b      	lsrs	r3, r3, #8
 80148e0:	b2db      	uxtb	r3, r3
 80148e2:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80148e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80148e6:	0c1b      	lsrs	r3, r3, #16
 80148e8:	b2db      	uxtb	r3, r3
 80148ea:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80148ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80148ee:	0e1b      	lsrs	r3, r3, #24
 80148f0:	b2db      	uxtb	r3, r3
 80148f2:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 80148f4:	e048      	b.n	8014988 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 80148f6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80148f8:	b2db      	uxtb	r3, r3
 80148fa:	77fb      	strb	r3, [r7, #31]
        ctr++;
 80148fc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80148fe:	3301      	adds	r3, #1
 8014900:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8014902:	f107 0320 	add.w	r3, r7, #32
 8014906:	7a7a      	ldrb	r2, [r7, #9]
 8014908:	f107 0010 	add.w	r0, r7, #16
 801490c:	2110      	movs	r1, #16
 801490e:	f7f8 fdbb 	bl	800d488 <SecureElementAesEncrypt>
 8014912:	4603      	mov	r3, r0
 8014914:	2b00      	cmp	r3, #0
 8014916:	d001      	beq.n	801491c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014918:	230f      	movs	r3, #15
 801491a:	e03a      	b.n	8014992 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801491c:	2300      	movs	r3, #0
 801491e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8014922:	e01e      	b.n	8014962 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8014924:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8014928:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801492c:	4413      	add	r3, r2
 801492e:	461a      	mov	r2, r3
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	4413      	add	r3, r2
 8014934:	7819      	ldrb	r1, [r3, #0]
 8014936:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801493a:	3338      	adds	r3, #56	@ 0x38
 801493c:	443b      	add	r3, r7
 801493e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8014942:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8014946:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801494a:	4403      	add	r3, r0
 801494c:	4618      	mov	r0, r3
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	4403      	add	r3, r0
 8014952:	404a      	eors	r2, r1
 8014954:	b2d2      	uxtb	r2, r2
 8014956:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014958:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801495c:	3301      	adds	r3, #1
 801495e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8014962:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014966:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801496a:	2a10      	cmp	r2, #16
 801496c:	bfa8      	it	ge
 801496e:	2210      	movge	r2, #16
 8014970:	b212      	sxth	r2, r2
 8014972:	4293      	cmp	r3, r2
 8014974:	dbd6      	blt.n	8014924 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8014976:	897b      	ldrh	r3, [r7, #10]
 8014978:	3b10      	subs	r3, #16
 801497a:	b29b      	uxth	r3, r3
 801497c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801497e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014982:	3310      	adds	r3, #16
 8014984:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8014988:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801498c:	2b00      	cmp	r3, #0
 801498e:	dcb2      	bgt.n	80148f6 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014990:	2300      	movs	r3, #0
}
 8014992:	4618      	mov	r0, r3
 8014994:	3738      	adds	r7, #56	@ 0x38
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}

0801499a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801499a:	b490      	push	{r4, r7}
 801499c:	b082      	sub	sp, #8
 801499e:	af00      	add	r7, sp, #0
 80149a0:	4604      	mov	r4, r0
 80149a2:	4608      	mov	r0, r1
 80149a4:	4611      	mov	r1, r2
 80149a6:	461a      	mov	r2, r3
 80149a8:	4623      	mov	r3, r4
 80149aa:	80fb      	strh	r3, [r7, #6]
 80149ac:	4603      	mov	r3, r0
 80149ae:	717b      	strb	r3, [r7, #5]
 80149b0:	460b      	mov	r3, r1
 80149b2:	713b      	strb	r3, [r7, #4]
 80149b4:	4613      	mov	r3, r2
 80149b6:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80149b8:	69bb      	ldr	r3, [r7, #24]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d101      	bne.n	80149c2 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80149be:	230a      	movs	r3, #10
 80149c0:	e04e      	b.n	8014a60 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80149c2:	69bb      	ldr	r3, [r7, #24]
 80149c4:	2249      	movs	r2, #73	@ 0x49
 80149c6:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 80149c8:	69bb      	ldr	r3, [r7, #24]
 80149ca:	3301      	adds	r3, #1
 80149cc:	2200      	movs	r2, #0
 80149ce:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80149d0:	69bb      	ldr	r3, [r7, #24]
 80149d2:	3302      	adds	r3, #2
 80149d4:	2200      	movs	r2, #0
 80149d6:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80149d8:	69bb      	ldr	r3, [r7, #24]
 80149da:	3303      	adds	r3, #3
 80149dc:	2200      	movs	r2, #0
 80149de:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80149e0:	69bb      	ldr	r3, [r7, #24]
 80149e2:	3304      	adds	r3, #4
 80149e4:	2200      	movs	r2, #0
 80149e6:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80149e8:	69bb      	ldr	r3, [r7, #24]
 80149ea:	3305      	adds	r3, #5
 80149ec:	78fa      	ldrb	r2, [r7, #3]
 80149ee:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80149f0:	69bb      	ldr	r3, [r7, #24]
 80149f2:	3306      	adds	r3, #6
 80149f4:	693a      	ldr	r2, [r7, #16]
 80149f6:	b2d2      	uxtb	r2, r2
 80149f8:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80149fa:	693b      	ldr	r3, [r7, #16]
 80149fc:	0a1a      	lsrs	r2, r3, #8
 80149fe:	69bb      	ldr	r3, [r7, #24]
 8014a00:	3307      	adds	r3, #7
 8014a02:	b2d2      	uxtb	r2, r2
 8014a04:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8014a06:	693b      	ldr	r3, [r7, #16]
 8014a08:	0c1a      	lsrs	r2, r3, #16
 8014a0a:	69bb      	ldr	r3, [r7, #24]
 8014a0c:	3308      	adds	r3, #8
 8014a0e:	b2d2      	uxtb	r2, r2
 8014a10:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8014a12:	693b      	ldr	r3, [r7, #16]
 8014a14:	0e1a      	lsrs	r2, r3, #24
 8014a16:	69bb      	ldr	r3, [r7, #24]
 8014a18:	3309      	adds	r3, #9
 8014a1a:	b2d2      	uxtb	r2, r2
 8014a1c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8014a1e:	69bb      	ldr	r3, [r7, #24]
 8014a20:	330a      	adds	r3, #10
 8014a22:	697a      	ldr	r2, [r7, #20]
 8014a24:	b2d2      	uxtb	r2, r2
 8014a26:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014a28:	697b      	ldr	r3, [r7, #20]
 8014a2a:	0a1a      	lsrs	r2, r3, #8
 8014a2c:	69bb      	ldr	r3, [r7, #24]
 8014a2e:	330b      	adds	r3, #11
 8014a30:	b2d2      	uxtb	r2, r2
 8014a32:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8014a34:	697b      	ldr	r3, [r7, #20]
 8014a36:	0c1a      	lsrs	r2, r3, #16
 8014a38:	69bb      	ldr	r3, [r7, #24]
 8014a3a:	330c      	adds	r3, #12
 8014a3c:	b2d2      	uxtb	r2, r2
 8014a3e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	0e1a      	lsrs	r2, r3, #24
 8014a44:	69bb      	ldr	r3, [r7, #24]
 8014a46:	330d      	adds	r3, #13
 8014a48:	b2d2      	uxtb	r2, r2
 8014a4a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8014a4c:	69bb      	ldr	r3, [r7, #24]
 8014a4e:	330e      	adds	r3, #14
 8014a50:	2200      	movs	r2, #0
 8014a52:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8014a54:	69bb      	ldr	r3, [r7, #24]
 8014a56:	330f      	adds	r3, #15
 8014a58:	88fa      	ldrh	r2, [r7, #6]
 8014a5a:	b2d2      	uxtb	r2, r2
 8014a5c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014a5e:	2300      	movs	r3, #0
}
 8014a60:	4618      	mov	r0, r3
 8014a62:	3708      	adds	r7, #8
 8014a64:	46bd      	mov	sp, r7
 8014a66:	bc90      	pop	{r4, r7}
 8014a68:	4770      	bx	lr

08014a6a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8014a6a:	b590      	push	{r4, r7, lr}
 8014a6c:	b08b      	sub	sp, #44	@ 0x2c
 8014a6e:	af04      	add	r7, sp, #16
 8014a70:	6078      	str	r0, [r7, #4]
 8014a72:	4608      	mov	r0, r1
 8014a74:	4611      	mov	r1, r2
 8014a76:	461a      	mov	r2, r3
 8014a78:	4603      	mov	r3, r0
 8014a7a:	807b      	strh	r3, [r7, #2]
 8014a7c:	460b      	mov	r3, r1
 8014a7e:	707b      	strb	r3, [r7, #1]
 8014a80:	4613      	mov	r3, r2
 8014a82:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d002      	beq.n	8014a90 <ComputeCmacB0+0x26>
 8014a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d101      	bne.n	8014a94 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014a90:	230a      	movs	r3, #10
 8014a92:	e024      	b.n	8014ade <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014a94:	887b      	ldrh	r3, [r7, #2]
 8014a96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014a9a:	d901      	bls.n	8014aa0 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014a9c:	230e      	movs	r3, #14
 8014a9e:	e01e      	b.n	8014ade <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014aa0:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8014aa4:	783a      	ldrb	r2, [r7, #0]
 8014aa6:	7879      	ldrb	r1, [r7, #1]
 8014aa8:	8878      	ldrh	r0, [r7, #2]
 8014aaa:	f107 0308 	add.w	r3, r7, #8
 8014aae:	9302      	str	r3, [sp, #8]
 8014ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ab2:	9301      	str	r3, [sp, #4]
 8014ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ab6:	9300      	str	r3, [sp, #0]
 8014ab8:	4623      	mov	r3, r4
 8014aba:	f7ff ff6e 	bl	801499a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8014abe:	887a      	ldrh	r2, [r7, #2]
 8014ac0:	7879      	ldrb	r1, [r7, #1]
 8014ac2:	f107 0008 	add.w	r0, r7, #8
 8014ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ac8:	9300      	str	r3, [sp, #0]
 8014aca:	460b      	mov	r3, r1
 8014acc:	6879      	ldr	r1, [r7, #4]
 8014ace:	f7f8 fc95 	bl	800d3fc <SecureElementComputeAesCmac>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d001      	beq.n	8014adc <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014ad8:	230f      	movs	r3, #15
 8014ada:	e000      	b.n	8014ade <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014adc:	2300      	movs	r3, #0
}
 8014ade:	4618      	mov	r0, r3
 8014ae0:	371c      	adds	r7, #28
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bd90      	pop	{r4, r7, pc}

08014ae6 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014ae6:	b590      	push	{r4, r7, lr}
 8014ae8:	b0cd      	sub	sp, #308	@ 0x134
 8014aea:	af04      	add	r7, sp, #16
 8014aec:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8014af0:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8014af4:	6020      	str	r0, [r4, #0]
 8014af6:	460c      	mov	r4, r1
 8014af8:	4610      	mov	r0, r2
 8014afa:	4619      	mov	r1, r3
 8014afc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014b00:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014b04:	4622      	mov	r2, r4
 8014b06:	801a      	strh	r2, [r3, #0]
 8014b08:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014b0c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8014b10:	4602      	mov	r2, r0
 8014b12:	701a      	strb	r2, [r3, #0]
 8014b14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014b18:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014b1c:	460a      	mov	r2, r1
 8014b1e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8014b20:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014b24:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d101      	bne.n	8014b32 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014b2e:	230a      	movs	r3, #10
 8014b30:	e063      	b.n	8014bfa <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014b32:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014b36:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014b3a:	881b      	ldrh	r3, [r3, #0]
 8014b3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014b40:	d901      	bls.n	8014b46 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014b42:	230e      	movs	r3, #14
 8014b44:	e059      	b.n	8014bfa <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8014b46:	f107 030c 	add.w	r3, r7, #12
 8014b4a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8014b4e:	2100      	movs	r1, #0
 8014b50:	4618      	mov	r0, r3
 8014b52:	f003 fd0f 	bl	8018574 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014b56:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 8014b5a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014b5e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014b62:	781a      	ldrb	r2, [r3, #0]
 8014b64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014b68:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8014b6c:	7819      	ldrb	r1, [r3, #0]
 8014b6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014b72:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014b76:	8818      	ldrh	r0, [r3, #0]
 8014b78:	f107 030c 	add.w	r3, r7, #12
 8014b7c:	9302      	str	r3, [sp, #8]
 8014b7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014b82:	9301      	str	r3, [sp, #4]
 8014b84:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b88:	9300      	str	r3, [sp, #0]
 8014b8a:	4623      	mov	r3, r4
 8014b8c:	f7ff ff05 	bl	801499a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8014b90:	f107 030c 	add.w	r3, r7, #12
 8014b94:	3310      	adds	r3, #16
 8014b96:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8014b9a:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8014b9e:	8812      	ldrh	r2, [r2, #0]
 8014ba0:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8014ba4:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8014ba8:	6809      	ldr	r1, [r1, #0]
 8014baa:	4618      	mov	r0, r3
 8014bac:	f003 fca7 	bl	80184fe <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8014bb0:	2306      	movs	r3, #6
 8014bb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8014bb6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014bba:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014bbe:	881b      	ldrh	r3, [r3, #0]
 8014bc0:	3310      	adds	r3, #16
 8014bc2:	4619      	mov	r1, r3
 8014bc4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014bc8:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8014bcc:	781b      	ldrb	r3, [r3, #0]
 8014bce:	f107 000c 	add.w	r0, r7, #12
 8014bd2:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8014bd6:	f7f8 fc2b 	bl	800d430 <SecureElementVerifyAesCmac>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014be0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d101      	bne.n	8014bec <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014be8:	2300      	movs	r3, #0
 8014bea:	e006      	b.n	8014bfa <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8014bec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8014bf0:	2b01      	cmp	r3, #1
 8014bf2:	d101      	bne.n	8014bf8 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	e000      	b.n	8014bfa <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014bf8:	230f      	movs	r3, #15
}
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8014c00:	46bd      	mov	sp, r7
 8014c02:	bd90      	pop	{r4, r7, pc}

08014c04 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014c04:	b480      	push	{r7}
 8014c06:	b085      	sub	sp, #20
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	6039      	str	r1, [r7, #0]
 8014c0e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014c10:	2300      	movs	r3, #0
 8014c12:	73fb      	strb	r3, [r7, #15]
 8014c14:	e011      	b.n	8014c3a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8014c16:	7bfb      	ldrb	r3, [r7, #15]
 8014c18:	4a0c      	ldr	r2, [pc, #48]	@ (8014c4c <GetKeyAddrItem+0x48>)
 8014c1a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8014c1e:	79fa      	ldrb	r2, [r7, #7]
 8014c20:	429a      	cmp	r2, r3
 8014c22:	d107      	bne.n	8014c34 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8014c24:	7bfb      	ldrb	r3, [r7, #15]
 8014c26:	009b      	lsls	r3, r3, #2
 8014c28:	4a08      	ldr	r2, [pc, #32]	@ (8014c4c <GetKeyAddrItem+0x48>)
 8014c2a:	441a      	add	r2, r3
 8014c2c:	683b      	ldr	r3, [r7, #0]
 8014c2e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8014c30:	2300      	movs	r3, #0
 8014c32:	e006      	b.n	8014c42 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014c34:	7bfb      	ldrb	r3, [r7, #15]
 8014c36:	3301      	adds	r3, #1
 8014c38:	73fb      	strb	r3, [r7, #15]
 8014c3a:	7bfb      	ldrb	r3, [r7, #15]
 8014c3c:	2b01      	cmp	r3, #1
 8014c3e:	d9ea      	bls.n	8014c16 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8014c40:	230c      	movs	r3, #12
}
 8014c42:	4618      	mov	r0, r3
 8014c44:	3714      	adds	r7, #20
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bc80      	pop	{r7}
 8014c4a:	4770      	bx	lr
 8014c4c:	2000010c 	.word	0x2000010c

08014c50 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b088      	sub	sp, #32
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	60b9      	str	r1, [r7, #8]
 8014c58:	607a      	str	r2, [r7, #4]
 8014c5a:	461a      	mov	r2, r3
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	73fb      	strb	r3, [r7, #15]
 8014c60:	4613      	mov	r3, r2
 8014c62:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8014c64:	2300      	movs	r3, #0
 8014c66:	613b      	str	r3, [r7, #16]
 8014c68:	f107 0314 	add.w	r3, r7, #20
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	601a      	str	r2, [r3, #0]
 8014c70:	605a      	str	r2, [r3, #4]
 8014c72:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8014c74:	7bfb      	ldrb	r3, [r7, #15]
 8014c76:	2b08      	cmp	r3, #8
 8014c78:	d002      	beq.n	8014c80 <DeriveSessionKey10x+0x30>
 8014c7a:	2b09      	cmp	r3, #9
 8014c7c:	d003      	beq.n	8014c86 <DeriveSessionKey10x+0x36>
 8014c7e:	e005      	b.n	8014c8c <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8014c80:	2301      	movs	r3, #1
 8014c82:	743b      	strb	r3, [r7, #16]
            break;
 8014c84:	e004      	b.n	8014c90 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8014c86:	2302      	movs	r3, #2
 8014c88:	743b      	strb	r3, [r7, #16]
            break;
 8014c8a:	e001      	b.n	8014c90 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014c8c:	230b      	movs	r3, #11
 8014c8e:	e02a      	b.n	8014ce6 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	b2db      	uxtb	r3, r3
 8014c94:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8014c96:	68bb      	ldr	r3, [r7, #8]
 8014c98:	0a1b      	lsrs	r3, r3, #8
 8014c9a:	b2db      	uxtb	r3, r3
 8014c9c:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8014c9e:	68bb      	ldr	r3, [r7, #8]
 8014ca0:	0c1b      	lsrs	r3, r3, #16
 8014ca2:	b2db      	uxtb	r3, r3
 8014ca4:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	b2db      	uxtb	r3, r3
 8014caa:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	0a1b      	lsrs	r3, r3, #8
 8014cb0:	b2db      	uxtb	r3, r3
 8014cb2:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	0c1b      	lsrs	r3, r3, #16
 8014cb8:	b2db      	uxtb	r3, r3
 8014cba:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8014cbc:	89bb      	ldrh	r3, [r7, #12]
 8014cbe:	b2db      	uxtb	r3, r3
 8014cc0:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8014cc2:	89bb      	ldrh	r3, [r7, #12]
 8014cc4:	0a1b      	lsrs	r3, r3, #8
 8014cc6:	b29b      	uxth	r3, r3
 8014cc8:	b2db      	uxtb	r3, r3
 8014cca:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014ccc:	7bfa      	ldrb	r2, [r7, #15]
 8014cce:	f107 0310 	add.w	r3, r7, #16
 8014cd2:	2101      	movs	r1, #1
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f7f8 fc57 	bl	800d588 <SecureElementDeriveAndStoreKey>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d001      	beq.n	8014ce4 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014ce0:	230f      	movs	r3, #15
 8014ce2:	e000      	b.n	8014ce6 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014ce4:	2300      	movs	r3, #0
}
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	3720      	adds	r7, #32
 8014cea:	46bd      	mov	sp, r7
 8014cec:	bd80      	pop	{r7, pc}
	...

08014cf0 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8014cf0:	b480      	push	{r7}
 8014cf2:	b083      	sub	sp, #12
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	6039      	str	r1, [r7, #0]
 8014cfa:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8014cfc:	683b      	ldr	r3, [r7, #0]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d101      	bne.n	8014d06 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014d02:	230a      	movs	r3, #10
 8014d04:	e029      	b.n	8014d5a <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8014d06:	79fb      	ldrb	r3, [r7, #7]
 8014d08:	3b01      	subs	r3, #1
 8014d0a:	2b03      	cmp	r3, #3
 8014d0c:	d822      	bhi.n	8014d54 <GetLastFcntDown+0x64>
 8014d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8014d14 <GetLastFcntDown+0x24>)
 8014d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d14:	08014d25 	.word	0x08014d25
 8014d18:	08014d31 	.word	0x08014d31
 8014d1c:	08014d3d 	.word	0x08014d3d
 8014d20:	08014d49 	.word	0x08014d49
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8014d24:	4b0f      	ldr	r3, [pc, #60]	@ (8014d64 <GetLastFcntDown+0x74>)
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	691a      	ldr	r2, [r3, #16]
 8014d2a:	683b      	ldr	r3, [r7, #0]
 8014d2c:	601a      	str	r2, [r3, #0]
            break;
 8014d2e:	e013      	b.n	8014d58 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8014d30:	4b0c      	ldr	r3, [pc, #48]	@ (8014d64 <GetLastFcntDown+0x74>)
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	695a      	ldr	r2, [r3, #20]
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	601a      	str	r2, [r3, #0]
            break;
 8014d3a:	e00d      	b.n	8014d58 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8014d3c:	4b09      	ldr	r3, [pc, #36]	@ (8014d64 <GetLastFcntDown+0x74>)
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	699a      	ldr	r2, [r3, #24]
 8014d42:	683b      	ldr	r3, [r7, #0]
 8014d44:	601a      	str	r2, [r3, #0]
            break;
 8014d46:	e007      	b.n	8014d58 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8014d48:	4b06      	ldr	r3, [pc, #24]	@ (8014d64 <GetLastFcntDown+0x74>)
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	69da      	ldr	r2, [r3, #28]
 8014d4e:	683b      	ldr	r3, [r7, #0]
 8014d50:	601a      	str	r2, [r3, #0]
            break;
 8014d52:	e001      	b.n	8014d58 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8014d54:	2305      	movs	r3, #5
 8014d56:	e000      	b.n	8014d5a <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014d58:	2300      	movs	r3, #0
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	370c      	adds	r7, #12
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bc80      	pop	{r7}
 8014d62:	4770      	bx	lr
 8014d64:	20001c34 	.word	0x20001c34

08014d68 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b084      	sub	sp, #16
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	4603      	mov	r3, r0
 8014d70:	6039      	str	r1, [r7, #0]
 8014d72:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8014d74:	2300      	movs	r3, #0
 8014d76:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8014d78:	f107 020c 	add.w	r2, r7, #12
 8014d7c:	79fb      	ldrb	r3, [r7, #7]
 8014d7e:	4611      	mov	r1, r2
 8014d80:	4618      	mov	r0, r3
 8014d82:	f7ff ffb5 	bl	8014cf0 <GetLastFcntDown>
 8014d86:	4603      	mov	r3, r0
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d001      	beq.n	8014d90 <CheckFCntDown+0x28>
    {
        return false;
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	e00a      	b.n	8014da6 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	683a      	ldr	r2, [r7, #0]
 8014d94:	429a      	cmp	r2, r3
 8014d96:	d803      	bhi.n	8014da0 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8014d98:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8014d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014d9e:	d101      	bne.n	8014da4 <CheckFCntDown+0x3c>
    {
        return true;
 8014da0:	2301      	movs	r3, #1
 8014da2:	e000      	b.n	8014da6 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8014da4:	2300      	movs	r3, #0
    }
}
 8014da6:	4618      	mov	r0, r3
 8014da8:	3710      	adds	r7, #16
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}
	...

08014db0 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014db0:	b480      	push	{r7}
 8014db2:	b083      	sub	sp, #12
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	4603      	mov	r3, r0
 8014db8:	6039      	str	r1, [r7, #0]
 8014dba:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8014dbc:	79fb      	ldrb	r3, [r7, #7]
 8014dbe:	3b01      	subs	r3, #1
 8014dc0:	2b03      	cmp	r3, #3
 8014dc2:	d82b      	bhi.n	8014e1c <UpdateFCntDown+0x6c>
 8014dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8014dcc <UpdateFCntDown+0x1c>)
 8014dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dca:	bf00      	nop
 8014dcc:	08014ddd 	.word	0x08014ddd
 8014dd0:	08014def 	.word	0x08014def
 8014dd4:	08014e01 	.word	0x08014e01
 8014dd8:	08014e13 	.word	0x08014e13
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8014ddc:	4b12      	ldr	r3, [pc, #72]	@ (8014e28 <UpdateFCntDown+0x78>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	683a      	ldr	r2, [r7, #0]
 8014de2:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8014de4:	4b10      	ldr	r3, [pc, #64]	@ (8014e28 <UpdateFCntDown+0x78>)
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	683a      	ldr	r2, [r7, #0]
 8014dea:	621a      	str	r2, [r3, #32]
            break;
 8014dec:	e017      	b.n	8014e1e <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8014dee:	4b0e      	ldr	r3, [pc, #56]	@ (8014e28 <UpdateFCntDown+0x78>)
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	683a      	ldr	r2, [r7, #0]
 8014df4:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8014df6:	4b0c      	ldr	r3, [pc, #48]	@ (8014e28 <UpdateFCntDown+0x78>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	683a      	ldr	r2, [r7, #0]
 8014dfc:	621a      	str	r2, [r3, #32]
            break;
 8014dfe:	e00e      	b.n	8014e1e <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8014e00:	4b09      	ldr	r3, [pc, #36]	@ (8014e28 <UpdateFCntDown+0x78>)
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	683a      	ldr	r2, [r7, #0]
 8014e06:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8014e08:	4b07      	ldr	r3, [pc, #28]	@ (8014e28 <UpdateFCntDown+0x78>)
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	683a      	ldr	r2, [r7, #0]
 8014e0e:	621a      	str	r2, [r3, #32]
            break;
 8014e10:	e005      	b.n	8014e1e <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8014e12:	4b05      	ldr	r3, [pc, #20]	@ (8014e28 <UpdateFCntDown+0x78>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	683a      	ldr	r2, [r7, #0]
 8014e18:	61da      	str	r2, [r3, #28]
            break;
 8014e1a:	e000      	b.n	8014e1e <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8014e1c:	bf00      	nop
    }
}
 8014e1e:	bf00      	nop
 8014e20:	370c      	adds	r7, #12
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bc80      	pop	{r7}
 8014e26:	4770      	bx	lr
 8014e28:	20001c34 	.word	0x20001c34

08014e2c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8014e2c:	b480      	push	{r7}
 8014e2e:	b083      	sub	sp, #12
 8014e30:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8014e32:	4b18      	ldr	r3, [pc, #96]	@ (8014e94 <ResetFCnts+0x68>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	2200      	movs	r2, #0
 8014e38:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014e3a:	4b16      	ldr	r3, [pc, #88]	@ (8014e94 <ResetFCnts+0x68>)
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014e42:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014e44:	4b13      	ldr	r3, [pc, #76]	@ (8014e94 <ResetFCnts+0x68>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014e4c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014e4e:	4b11      	ldr	r3, [pc, #68]	@ (8014e94 <ResetFCnts+0x68>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014e56:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8014e58:	4b0e      	ldr	r3, [pc, #56]	@ (8014e94 <ResetFCnts+0x68>)
 8014e5a:	681a      	ldr	r2, [r3, #0]
 8014e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8014e94 <ResetFCnts+0x68>)
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	6992      	ldr	r2, [r2, #24]
 8014e62:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014e64:	2300      	movs	r3, #0
 8014e66:	607b      	str	r3, [r7, #4]
 8014e68:	e00b      	b.n	8014e82 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8014e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8014e94 <ResetFCnts+0x68>)
 8014e6c:	681a      	ldr	r2, [r3, #0]
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	3306      	adds	r3, #6
 8014e72:	009b      	lsls	r3, r3, #2
 8014e74:	4413      	add	r3, r2
 8014e76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014e7a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	3301      	adds	r3, #1
 8014e80:	607b      	str	r3, [r7, #4]
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	ddf0      	ble.n	8014e6a <ResetFCnts+0x3e>
    }
}
 8014e88:	bf00      	nop
 8014e8a:	bf00      	nop
 8014e8c:	370c      	adds	r7, #12
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bc80      	pop	{r7}
 8014e92:	4770      	bx	lr
 8014e94:	20001c34 	.word	0x20001c34

08014e98 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8014e98:	b480      	push	{r7}
 8014e9a:	b083      	sub	sp, #12
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8014ea0:	4b06      	ldr	r3, [pc, #24]	@ (8014ebc <IsJoinNonce10xOk+0x24>)
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	689b      	ldr	r3, [r3, #8]
 8014ea6:	687a      	ldr	r2, [r7, #4]
 8014ea8:	429a      	cmp	r2, r3
 8014eaa:	bf8c      	ite	hi
 8014eac:	2301      	movhi	r3, #1
 8014eae:	2300      	movls	r3, #0
 8014eb0:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	370c      	adds	r7, #12
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bc80      	pop	{r7}
 8014eba:	4770      	bx	lr
 8014ebc:	20001c34 	.word	0x20001c34

08014ec0 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b082      	sub	sp, #8
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d101      	bne.n	8014ed2 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8014ece:	2309      	movs	r3, #9
 8014ed0:	e01c      	b.n	8014f0c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8014ed2:	4a10      	ldr	r2, [pc, #64]	@ (8014f14 <LoRaMacCryptoInit+0x54>)
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8014ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8014f14 <LoRaMacCryptoInit+0x54>)
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	2228      	movs	r2, #40	@ 0x28
 8014ede:	2100      	movs	r1, #0
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f003 fb47 	bl	8018574 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8014ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8014f14 <LoRaMacCryptoInit+0x54>)
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	2201      	movs	r2, #1
 8014eec:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8014eee:	4b09      	ldr	r3, [pc, #36]	@ (8014f14 <LoRaMacCryptoInit+0x54>)
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	2201      	movs	r2, #1
 8014ef4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8014ef6:	4b07      	ldr	r3, [pc, #28]	@ (8014f14 <LoRaMacCryptoInit+0x54>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	2201      	movs	r2, #1
 8014efc:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8014efe:	4b05      	ldr	r3, [pc, #20]	@ (8014f14 <LoRaMacCryptoInit+0x54>)
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	2200      	movs	r2, #0
 8014f04:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8014f06:	f7ff ff91 	bl	8014e2c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8014f0a:	2300      	movs	r3, #0
}
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	3708      	adds	r7, #8
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bd80      	pop	{r7, pc}
 8014f14:	20001c34 	.word	0x20001c34

08014f18 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8014f18:	b480      	push	{r7}
 8014f1a:	b083      	sub	sp, #12
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8014f20:	4b04      	ldr	r3, [pc, #16]	@ (8014f34 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	687a      	ldr	r2, [r7, #4]
 8014f26:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8014f28:	2300      	movs	r3, #0
}
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	370c      	adds	r7, #12
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bc80      	pop	{r7}
 8014f32:	4770      	bx	lr
 8014f34:	20001c34 	.word	0x20001c34

08014f38 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8014f38:	b480      	push	{r7}
 8014f3a:	b083      	sub	sp, #12
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d101      	bne.n	8014f4a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014f46:	230a      	movs	r3, #10
 8014f48:	e006      	b.n	8014f58 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8014f4a:	4b06      	ldr	r3, [pc, #24]	@ (8014f64 <LoRaMacCryptoGetFCntUp+0x2c>)
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	68db      	ldr	r3, [r3, #12]
 8014f50:	1c5a      	adds	r2, r3, #1
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014f56:	2300      	movs	r3, #0
}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	370c      	adds	r7, #12
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bc80      	pop	{r7}
 8014f60:	4770      	bx	lr
 8014f62:	bf00      	nop
 8014f64:	20001c34 	.word	0x20001c34

08014f68 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8014f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014f6c:	b08a      	sub	sp, #40	@ 0x28
 8014f6e:	af00      	add	r7, sp, #0
 8014f70:	613a      	str	r2, [r7, #16]
 8014f72:	60fb      	str	r3, [r7, #12]
 8014f74:	4603      	mov	r3, r0
 8014f76:	75fb      	strb	r3, [r7, #23]
 8014f78:	460b      	mov	r3, r1
 8014f7a:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8014f80:	2300      	movs	r3, #0
 8014f82:	627b      	str	r3, [r7, #36]	@ 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8014f84:	2313      	movs	r3, #19
 8014f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if( currentDown == NULL )
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d101      	bne.n	8014f94 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014f90:	230a      	movs	r3, #10
 8014f92:	e057      	b.n	8015044 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8014f94:	f107 021c 	add.w	r2, r7, #28
 8014f98:	7dfb      	ldrb	r3, [r7, #23]
 8014f9a:	4611      	mov	r1, r2
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	f7ff fea7 	bl	8014cf0 <GetLastFcntDown>
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8014fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d002      	beq.n	8014fb6 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8014fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014fb4:	e046      	b.n	8015044 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8014fb6:	69fb      	ldr	r3, [r7, #28]
 8014fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014fbc:	d103      	bne.n	8014fc6 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	693a      	ldr	r2, [r7, #16]
 8014fc2:	601a      	str	r2, [r3, #0]
 8014fc4:	e01e      	b.n	8015004 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8014fc6:	69fb      	ldr	r3, [r7, #28]
 8014fc8:	b29b      	uxth	r3, r3
 8014fca:	693a      	ldr	r2, [r7, #16]
 8014fcc:	1ad3      	subs	r3, r2, r3
 8014fce:	627b      	str	r3, [r7, #36]	@ 0x24

        if( fCntDiff > 0 )
 8014fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	dd05      	ble.n	8014fe2 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8014fd6:	69fa      	ldr	r2, [r7, #28]
 8014fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fda:	441a      	add	r2, r3
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	601a      	str	r2, [r3, #0]
 8014fe0:	e010      	b.n	8015004 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8014fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d104      	bne.n	8014ff2 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8014fe8:	69fa      	ldr	r2, [r7, #28]
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8014fee:	2307      	movs	r3, #7
 8014ff0:	e028      	b.n	8015044 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8014ff2:	69fb      	ldr	r3, [r7, #28]
 8014ff4:	0c1b      	lsrs	r3, r3, #16
 8014ff6:	041b      	lsls	r3, r3, #16
 8014ff8:	693a      	ldr	r2, [r7, #16]
 8014ffa:	4413      	add	r3, r2
 8014ffc:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8015004:	4b12      	ldr	r3, [pc, #72]	@ (8015050 <LoRaMacCryptoGetFCntDown+0xe8>)
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	789b      	ldrb	r3, [r3, #2]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d119      	bne.n	8015042 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	2200      	movs	r2, #0
 8015014:	603b      	str	r3, [r7, #0]
 8015016:	607a      	str	r2, [r7, #4]
 8015018:	69fb      	ldr	r3, [r7, #28]
 801501a:	2200      	movs	r2, #0
 801501c:	469a      	mov	sl, r3
 801501e:	4693      	mov	fp, r2
 8015020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015024:	4611      	mov	r1, r2
 8015026:	ebb1 040a 	subs.w	r4, r1, sl
 801502a:	eb63 050b 	sbc.w	r5, r3, fp
 801502e:	8abb      	ldrh	r3, [r7, #20]
 8015030:	2200      	movs	r2, #0
 8015032:	4698      	mov	r8, r3
 8015034:	4691      	mov	r9, r2
 8015036:	4544      	cmp	r4, r8
 8015038:	eb75 0309 	sbcs.w	r3, r5, r9
 801503c:	db01      	blt.n	8015042 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 801503e:	2308      	movs	r3, #8
 8015040:	e000      	b.n	8015044 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015042:	2300      	movs	r3, #0
}
 8015044:	4618      	mov	r0, r3
 8015046:	3728      	adds	r7, #40	@ 0x28
 8015048:	46bd      	mov	sp, r7
 801504a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801504e:	bf00      	nop
 8015050:	20001c34 	.word	0x20001c34

08015054 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8015054:	b480      	push	{r7}
 8015056:	b085      	sub	sp, #20
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d101      	bne.n	8015066 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015062:	230a      	movs	r3, #10
 8015064:	e019      	b.n	801509a <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015066:	2300      	movs	r3, #0
 8015068:	60fb      	str	r3, [r7, #12]
 801506a:	e012      	b.n	8015092 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 801506c:	4b0d      	ldr	r3, [pc, #52]	@ (80150a4 <LoRaMacCryptoSetMulticastReference+0x50>)
 801506e:	6819      	ldr	r1, [r3, #0]
 8015070:	68fa      	ldr	r2, [r7, #12]
 8015072:	4613      	mov	r3, r2
 8015074:	005b      	lsls	r3, r3, #1
 8015076:	4413      	add	r3, r2
 8015078:	011b      	lsls	r3, r3, #4
 801507a:	461a      	mov	r2, r3
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	4413      	add	r3, r2
 8015080:	68fa      	ldr	r2, [r7, #12]
 8015082:	3206      	adds	r2, #6
 8015084:	0092      	lsls	r2, r2, #2
 8015086:	440a      	add	r2, r1
 8015088:	3204      	adds	r2, #4
 801508a:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	3301      	adds	r3, #1
 8015090:	60fb      	str	r3, [r7, #12]
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	2b00      	cmp	r3, #0
 8015096:	dde9      	ble.n	801506c <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015098:	2300      	movs	r3, #0
}
 801509a:	4618      	mov	r0, r3
 801509c:	3714      	adds	r7, #20
 801509e:	46bd      	mov	sp, r7
 80150a0:	bc80      	pop	{r7}
 80150a2:	4770      	bx	lr
 80150a4:	20001c34 	.word	0x20001c34

080150a8 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b082      	sub	sp, #8
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	4603      	mov	r3, r0
 80150b0:	6039      	str	r1, [r7, #0]
 80150b2:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80150b4:	79fb      	ldrb	r3, [r7, #7]
 80150b6:	6839      	ldr	r1, [r7, #0]
 80150b8:	4618      	mov	r0, r3
 80150ba:	f7f8 f941 	bl	800d340 <SecureElementSetKey>
 80150be:	4603      	mov	r3, r0
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d001      	beq.n	80150c8 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80150c4:	230f      	movs	r3, #15
 80150c6:	e021      	b.n	801510c <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 80150c8:	79fb      	ldrb	r3, [r7, #7]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d11d      	bne.n	801510a <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80150ce:	4b11      	ldr	r3, [pc, #68]	@ (8015114 <LoRaMacCryptoSetKey+0x6c>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	789b      	ldrb	r3, [r3, #2]
 80150d4:	210b      	movs	r1, #11
 80150d6:	4618      	mov	r0, r3
 80150d8:	f000 fa5c 	bl	8015594 <LoRaMacCryptoDeriveLifeTimeKey>
 80150dc:	4603      	mov	r3, r0
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d001      	beq.n	80150e6 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80150e2:	230f      	movs	r3, #15
 80150e4:	e012      	b.n	801510c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80150e6:	210c      	movs	r1, #12
 80150e8:	2000      	movs	r0, #0
 80150ea:	f000 fa53 	bl	8015594 <LoRaMacCryptoDeriveLifeTimeKey>
 80150ee:	4603      	mov	r3, r0
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d001      	beq.n	80150f8 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80150f4:	230f      	movs	r3, #15
 80150f6:	e009      	b.n	801510c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80150f8:	210a      	movs	r1, #10
 80150fa:	2000      	movs	r0, #0
 80150fc:	f000 fa4a 	bl	8015594 <LoRaMacCryptoDeriveLifeTimeKey>
 8015100:	4603      	mov	r3, r0
 8015102:	2b00      	cmp	r3, #0
 8015104:	d001      	beq.n	801510a <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015106:	230f      	movs	r3, #15
 8015108:	e000      	b.n	801510c <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801510a:	2300      	movs	r3, #0
}
 801510c:	4618      	mov	r0, r3
 801510e:	3708      	adds	r7, #8
 8015110:	46bd      	mov	sp, r7
 8015112:	bd80      	pop	{r7, pc}
 8015114:	20001c34 	.word	0x20001c34

08015118 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b086      	sub	sp, #24
 801511c:	af02      	add	r7, sp, #8
 801511e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d101      	bne.n	801512a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015126:	230a      	movs	r3, #10
 8015128:	e033      	b.n	8015192 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801512a:	2301      	movs	r3, #1
 801512c:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 801512e:	2300      	movs	r3, #0
 8015130:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8015132:	f107 0308 	add.w	r3, r7, #8
 8015136:	4618      	mov	r0, r3
 8015138:	f7f8 fadc 	bl	800d6f4 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 801513c:	68ba      	ldr	r2, [r7, #8]
 801513e:	4b17      	ldr	r3, [pc, #92]	@ (801519c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	b292      	uxth	r2, r2
 8015144:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8015146:	4b15      	ldr	r3, [pc, #84]	@ (801519c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	889a      	ldrh	r2, [r3, #4]
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015150:	6878      	ldr	r0, [r7, #4]
 8015152:	f000 fc17 	bl	8015984 <LoRaMacSerializerJoinRequest>
 8015156:	4603      	mov	r3, r0
 8015158:	2b00      	cmp	r3, #0
 801515a:	d001      	beq.n	8015160 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801515c:	2311      	movs	r3, #17
 801515e:	e018      	b.n	8015192 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	6819      	ldr	r1, [r3, #0]
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	3318      	adds	r3, #24
 8015168:	7bfa      	ldrb	r2, [r7, #15]
 801516a:	9300      	str	r3, [sp, #0]
 801516c:	4613      	mov	r3, r2
 801516e:	2213      	movs	r2, #19
 8015170:	2000      	movs	r0, #0
 8015172:	f7f8 f943 	bl	800d3fc <SecureElementComputeAesCmac>
 8015176:	4603      	mov	r3, r0
 8015178:	2b00      	cmp	r3, #0
 801517a:	d001      	beq.n	8015180 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801517c:	230f      	movs	r3, #15
 801517e:	e008      	b.n	8015192 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015180:	6878      	ldr	r0, [r7, #4]
 8015182:	f000 fbff 	bl	8015984 <LoRaMacSerializerJoinRequest>
 8015186:	4603      	mov	r3, r0
 8015188:	2b00      	cmp	r3, #0
 801518a:	d001      	beq.n	8015190 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801518c:	2311      	movs	r3, #17
 801518e:	e000      	b.n	8015192 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015190:	2300      	movs	r3, #0
}
 8015192:	4618      	mov	r0, r3
 8015194:	3710      	adds	r7, #16
 8015196:	46bd      	mov	sp, r7
 8015198:	bd80      	pop	{r7, pc}
 801519a:	bf00      	nop
 801519c:	20001c34 	.word	0x20001c34

080151a0 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80151a0:	b590      	push	{r4, r7, lr}
 80151a2:	b097      	sub	sp, #92	@ 0x5c
 80151a4:	af04      	add	r7, sp, #16
 80151a6:	4603      	mov	r3, r0
 80151a8:	60b9      	str	r1, [r7, #8]
 80151aa:	607a      	str	r2, [r7, #4]
 80151ac:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d002      	beq.n	80151ba <LoRaMacCryptoHandleJoinAccept+0x1a>
 80151b4:	68bb      	ldr	r3, [r7, #8]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d101      	bne.n	80151be <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80151ba:	230a      	movs	r3, #10
 80151bc:	e0d3      	b.n	8015366 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80151be:	2313      	movs	r3, #19
 80151c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80151c4:	2300      	movs	r3, #0
 80151c6:	617b      	str	r3, [r7, #20]
 80151c8:	f107 0318 	add.w	r3, r7, #24
 80151cc:	221d      	movs	r2, #29
 80151ce:	2100      	movs	r1, #0
 80151d0:	4618      	mov	r0, r3
 80151d2:	f007 ffad 	bl	801d130 <memset>
    uint8_t versionMinor         = 0;
 80151d6:	2300      	movs	r3, #0
 80151d8:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80151da:	4b65      	ldr	r3, [pc, #404]	@ (8015370 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	889b      	ldrh	r3, [r3, #4]
 80151e0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	681c      	ldr	r4, [r3, #0]
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	791b      	ldrb	r3, [r3, #4]
 80151ec:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 80151f0:	7bf8      	ldrb	r0, [r7, #15]
 80151f2:	f107 0213 	add.w	r2, r7, #19
 80151f6:	9202      	str	r2, [sp, #8]
 80151f8:	f107 0214 	add.w	r2, r7, #20
 80151fc:	9201      	str	r2, [sp, #4]
 80151fe:	9300      	str	r3, [sp, #0]
 8015200:	4623      	mov	r3, r4
 8015202:	460a      	mov	r2, r1
 8015204:	68b9      	ldr	r1, [r7, #8]
 8015206:	f7f8 f9ff 	bl	800d608 <SecureElementProcessJoinAccept>
 801520a:	4603      	mov	r3, r0
 801520c:	2b00      	cmp	r3, #0
 801520e:	d001      	beq.n	8015214 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015210:	230f      	movs	r3, #15
 8015212:	e0a8      	b.n	8015366 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	6818      	ldr	r0, [r3, #0]
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	791b      	ldrb	r3, [r3, #4]
 801521c:	461a      	mov	r2, r3
 801521e:	f107 0314 	add.w	r3, r7, #20
 8015222:	4619      	mov	r1, r3
 8015224:	f003 f96b 	bl	80184fe <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015228:	6878      	ldr	r0, [r7, #4]
 801522a:	f000 f9ee 	bl	801560a <LoRaMacParserJoinAccept>
 801522e:	4603      	mov	r3, r0
 8015230:	2b00      	cmp	r3, #0
 8015232:	d001      	beq.n	8015238 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015234:	2310      	movs	r3, #16
 8015236:	e096      	b.n	8015366 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8015238:	2300      	movs	r3, #0
 801523a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	799b      	ldrb	r3, [r3, #6]
 8015242:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	79db      	ldrb	r3, [r3, #7]
 8015248:	021b      	lsls	r3, r3, #8
 801524a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801524c:	4313      	orrs	r3, r2
 801524e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	7a1b      	ldrb	r3, [r3, #8]
 8015254:	041b      	lsls	r3, r3, #16
 8015256:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015258:	4313      	orrs	r3, r2
 801525a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 801525c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801525e:	f7ff fe1b 	bl	8014e98 <IsJoinNonce10xOk>
 8015262:	4603      	mov	r3, r0
 8015264:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 8015268:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801526c:	2b00      	cmp	r3, #0
 801526e:	d010      	beq.n	8015292 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8015270:	4b3f      	ldr	r3, [pc, #252]	@ (8015370 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015276:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8015278:	7cfb      	ldrb	r3, [r7, #19]
 801527a:	210b      	movs	r1, #11
 801527c:	4618      	mov	r0, r3
 801527e:	f000 f989 	bl	8015594 <LoRaMacCryptoDeriveLifeTimeKey>
 8015282:	4603      	mov	r3, r0
 8015284:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015288:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801528c:	2b00      	cmp	r3, #0
 801528e:	d005      	beq.n	801529c <LoRaMacCryptoHandleJoinAccept+0xfc>
 8015290:	e001      	b.n	8015296 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8015292:	2303      	movs	r3, #3
 8015294:	e067      	b.n	8015366 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8015296:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801529a:	e064      	b.n	8015366 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 801529c:	210c      	movs	r1, #12
 801529e:	2000      	movs	r0, #0
 80152a0:	f000 f978 	bl	8015594 <LoRaMacCryptoDeriveLifeTimeKey>
 80152a4:	4603      	mov	r3, r0
 80152a6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80152aa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d002      	beq.n	80152b8 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 80152b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80152b6:	e056      	b.n	8015366 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 80152b8:	210a      	movs	r1, #10
 80152ba:	2000      	movs	r0, #0
 80152bc:	f000 f96a 	bl	8015594 <LoRaMacCryptoDeriveLifeTimeKey>
 80152c0:	4603      	mov	r3, r0
 80152c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80152c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d002      	beq.n	80152d4 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 80152ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80152d2:	e048      	b.n	8015366 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	7a5b      	ldrb	r3, [r3, #9]
 80152d8:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	7a9b      	ldrb	r3, [r3, #10]
 80152de:	021b      	lsls	r3, r3, #8
 80152e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80152e2:	4313      	orrs	r3, r2
 80152e4:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	7adb      	ldrb	r3, [r3, #11]
 80152ea:	041b      	lsls	r3, r3, #16
 80152ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80152ee:	4313      	orrs	r3, r2
 80152f0:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80152f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80152f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80152f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80152fa:	2009      	movs	r0, #9
 80152fc:	f7ff fca8 	bl	8014c50 <DeriveSessionKey10x>
 8015300:	4603      	mov	r3, r0
 8015302:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015306:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801530a:	2b00      	cmp	r3, #0
 801530c:	d002      	beq.n	8015314 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 801530e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015312:	e028      	b.n	8015366 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8015314:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015318:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801531a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801531c:	2008      	movs	r0, #8
 801531e:	f7ff fc97 	bl	8014c50 <DeriveSessionKey10x>
 8015322:	4603      	mov	r3, r0
 8015324:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015328:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801532c:	2b00      	cmp	r3, #0
 801532e:	d002      	beq.n	8015336 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8015330:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015334:	e017      	b.n	8015366 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8015336:	4b0e      	ldr	r3, [pc, #56]	@ (8015370 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	7cfa      	ldrb	r2, [r7, #19]
 801533c:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 801533e:	4b0c      	ldr	r3, [pc, #48]	@ (8015370 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	2200      	movs	r2, #0
 8015344:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015346:	4b0a      	ldr	r3, [pc, #40]	@ (8015370 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801534e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015350:	4b07      	ldr	r3, [pc, #28]	@ (8015370 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015358:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801535a:	4b05      	ldr	r3, [pc, #20]	@ (8015370 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015362:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8015364:	2300      	movs	r3, #0
}
 8015366:	4618      	mov	r0, r3
 8015368:	374c      	adds	r7, #76	@ 0x4c
 801536a:	46bd      	mov	sp, r7
 801536c:	bd90      	pop	{r4, r7, pc}
 801536e:	bf00      	nop
 8015370:	20001c34 	.word	0x20001c34

08015374 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8015374:	b590      	push	{r4, r7, lr}
 8015376:	b08b      	sub	sp, #44	@ 0x2c
 8015378:	af04      	add	r7, sp, #16
 801537a:	60f8      	str	r0, [r7, #12]
 801537c:	607b      	str	r3, [r7, #4]
 801537e:	460b      	mov	r3, r1
 8015380:	72fb      	strb	r3, [r7, #11]
 8015382:	4613      	mov	r3, r2
 8015384:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015386:	2313      	movs	r3, #19
 8015388:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801538a:	2309      	movs	r3, #9
 801538c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d101      	bne.n	8015398 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015394:	230a      	movs	r3, #10
 8015396:	e05e      	b.n	8015456 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8015398:	4b31      	ldr	r3, [pc, #196]	@ (8015460 <LoRaMacCryptoSecureMessage+0xec>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	68db      	ldr	r3, [r3, #12]
 801539e:	68fa      	ldr	r2, [r7, #12]
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d201      	bcs.n	80153a8 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80153a4:	2306      	movs	r3, #6
 80153a6:	e056      	b.n	8015456 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d101      	bne.n	80153b6 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80153b2:	2308      	movs	r3, #8
 80153b4:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80153b6:	4b2a      	ldr	r3, [pc, #168]	@ (8015460 <LoRaMacCryptoSecureMessage+0xec>)
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	68db      	ldr	r3, [r3, #12]
 80153bc:	68fa      	ldr	r2, [r7, #12]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d916      	bls.n	80153f0 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80153cc:	b219      	sxth	r1, r3
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	689c      	ldr	r4, [r3, #8]
 80153d2:	7dfa      	ldrb	r2, [r7, #23]
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	9301      	str	r3, [sp, #4]
 80153d8:	2300      	movs	r3, #0
 80153da:	9300      	str	r3, [sp, #0]
 80153dc:	4623      	mov	r3, r4
 80153de:	f7ff fa43 	bl	8014868 <PayloadEncrypt>
 80153e2:	4603      	mov	r3, r0
 80153e4:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80153e6:	7dbb      	ldrb	r3, [r7, #22]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d001      	beq.n	80153f0 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80153ec:	7dbb      	ldrb	r3, [r7, #22]
 80153ee:	e032      	b.n	8015456 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f000 fb49 	bl	8015a88 <LoRaMacSerializerData>
 80153f6:	4603      	mov	r3, r0
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d001      	beq.n	8015400 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80153fc:	2311      	movs	r3, #17
 80153fe:	e02a      	b.n	8015456 <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015400:	2308      	movs	r3, #8
 8015402:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	6818      	ldr	r0, [r3, #0]
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	791b      	ldrb	r3, [r3, #4]
 801540c:	3b04      	subs	r3, #4
 801540e:	b299      	uxth	r1, r3
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	689b      	ldr	r3, [r3, #8]
 8015414:	687a      	ldr	r2, [r7, #4]
 8015416:	322c      	adds	r2, #44	@ 0x2c
 8015418:	7dfc      	ldrb	r4, [r7, #23]
 801541a:	9203      	str	r2, [sp, #12]
 801541c:	68fa      	ldr	r2, [r7, #12]
 801541e:	9202      	str	r2, [sp, #8]
 8015420:	9301      	str	r3, [sp, #4]
 8015422:	2300      	movs	r3, #0
 8015424:	9300      	str	r3, [sp, #0]
 8015426:	2300      	movs	r3, #0
 8015428:	4622      	mov	r2, r4
 801542a:	f7ff fb1e 	bl	8014a6a <ComputeCmacB0>
 801542e:	4603      	mov	r3, r0
 8015430:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015432:	7dbb      	ldrb	r3, [r7, #22]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d001      	beq.n	801543c <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8015438:	7dbb      	ldrb	r3, [r7, #22]
 801543a:	e00c      	b.n	8015456 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801543c:	6878      	ldr	r0, [r7, #4]
 801543e:	f000 fb23 	bl	8015a88 <LoRaMacSerializerData>
 8015442:	4603      	mov	r3, r0
 8015444:	2b00      	cmp	r3, #0
 8015446:	d001      	beq.n	801544c <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015448:	2311      	movs	r3, #17
 801544a:	e004      	b.n	8015456 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801544c:	4b04      	ldr	r3, [pc, #16]	@ (8015460 <LoRaMacCryptoSecureMessage+0xec>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	68fa      	ldr	r2, [r7, #12]
 8015452:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8015454:	2300      	movs	r3, #0
}
 8015456:	4618      	mov	r0, r3
 8015458:	371c      	adds	r7, #28
 801545a:	46bd      	mov	sp, r7
 801545c:	bd90      	pop	{r4, r7, pc}
 801545e:	bf00      	nop
 8015460:	20001c34 	.word	0x20001c34

08015464 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8015464:	b590      	push	{r4, r7, lr}
 8015466:	b08b      	sub	sp, #44	@ 0x2c
 8015468:	af04      	add	r7, sp, #16
 801546a:	60b9      	str	r1, [r7, #8]
 801546c:	607b      	str	r3, [r7, #4]
 801546e:	4603      	mov	r3, r0
 8015470:	73fb      	strb	r3, [r7, #15]
 8015472:	4613      	mov	r3, r2
 8015474:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8015476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015478:	2b00      	cmp	r3, #0
 801547a:	d101      	bne.n	8015480 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801547c:	230a      	movs	r3, #10
 801547e:	e083      	b.n	8015588 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8015480:	7bbb      	ldrb	r3, [r7, #14]
 8015482:	6879      	ldr	r1, [r7, #4]
 8015484:	4618      	mov	r0, r3
 8015486:	f7ff fc6f 	bl	8014d68 <CheckFCntDown>
 801548a:	4603      	mov	r3, r0
 801548c:	f083 0301 	eor.w	r3, r3, #1
 8015490:	b2db      	uxtb	r3, r3
 8015492:	2b00      	cmp	r3, #0
 8015494:	d001      	beq.n	801549a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015496:	2306      	movs	r3, #6
 8015498:	e076      	b.n	8015588 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801549a:	2313      	movs	r3, #19
 801549c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801549e:	2309      	movs	r3, #9
 80154a0:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80154a2:	2308      	movs	r3, #8
 80154a4:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80154a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80154a8:	f000 f97a 	bl	80157a0 <LoRaMacParserData>
 80154ac:	4603      	mov	r3, r0
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d001      	beq.n	80154b6 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80154b2:	2310      	movs	r3, #16
 80154b4:	e068      	b.n	8015588 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80154b6:	f107 0210 	add.w	r2, r7, #16
 80154ba:	7bfb      	ldrb	r3, [r7, #15]
 80154bc:	4611      	mov	r1, r2
 80154be:	4618      	mov	r0, r3
 80154c0:	f7ff fba0 	bl	8014c04 <GetKeyAddrItem>
 80154c4:	4603      	mov	r3, r0
 80154c6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80154c8:	7d7b      	ldrb	r3, [r7, #21]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d001      	beq.n	80154d2 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80154ce:	7d7b      	ldrb	r3, [r7, #21]
 80154d0:	e05a      	b.n	8015588 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80154d2:	693b      	ldr	r3, [r7, #16]
 80154d4:	785b      	ldrb	r3, [r3, #1]
 80154d6:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80154d8:	693b      	ldr	r3, [r7, #16]
 80154da:	789b      	ldrb	r3, [r3, #2]
 80154dc:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80154de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154e0:	689b      	ldr	r3, [r3, #8]
 80154e2:	68ba      	ldr	r2, [r7, #8]
 80154e4:	429a      	cmp	r2, r3
 80154e6:	d001      	beq.n	80154ec <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80154e8:	2302      	movs	r3, #2
 80154ea:	e04d      	b.n	8015588 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80154ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154ee:	7b1b      	ldrb	r3, [r3, #12]
 80154f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80154f4:	b2db      	uxtb	r3, r3
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	bf14      	ite	ne
 80154fa:	2301      	movne	r3, #1
 80154fc:	2300      	moveq	r3, #0
 80154fe:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8015500:	4b23      	ldr	r3, [pc, #140]	@ (8015590 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	789b      	ldrb	r3, [r3, #2]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d101      	bne.n	801550e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801550a:	2300      	movs	r3, #0
 801550c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801550e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015510:	6818      	ldr	r0, [r3, #0]
 8015512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015514:	791b      	ldrb	r3, [r3, #4]
 8015516:	3b04      	subs	r3, #4
 8015518:	b299      	uxth	r1, r3
 801551a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801551e:	7dbc      	ldrb	r4, [r7, #22]
 8015520:	7d3a      	ldrb	r2, [r7, #20]
 8015522:	9303      	str	r3, [sp, #12]
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	9302      	str	r3, [sp, #8]
 8015528:	68bb      	ldr	r3, [r7, #8]
 801552a:	9301      	str	r3, [sp, #4]
 801552c:	2301      	movs	r3, #1
 801552e:	9300      	str	r3, [sp, #0]
 8015530:	4623      	mov	r3, r4
 8015532:	f7ff fad8 	bl	8014ae6 <VerifyCmacB0>
 8015536:	4603      	mov	r3, r0
 8015538:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801553a:	7d7b      	ldrb	r3, [r7, #21]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d001      	beq.n	8015544 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8015540:	7d7b      	ldrb	r3, [r7, #21]
 8015542:	e021      	b.n	8015588 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8015544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015546:	f893 3020 	ldrb.w	r3, [r3, #32]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d101      	bne.n	8015552 <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801554e:	2308      	movs	r3, #8
 8015550:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8015552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015554:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015558:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801555c:	b219      	sxth	r1, r3
 801555e:	7dfa      	ldrb	r2, [r7, #23]
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	9301      	str	r3, [sp, #4]
 8015564:	2301      	movs	r3, #1
 8015566:	9300      	str	r3, [sp, #0]
 8015568:	68bb      	ldr	r3, [r7, #8]
 801556a:	f7ff f97d 	bl	8014868 <PayloadEncrypt>
 801556e:	4603      	mov	r3, r0
 8015570:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015572:	7d7b      	ldrb	r3, [r7, #21]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d001      	beq.n	801557c <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8015578:	7d7b      	ldrb	r3, [r7, #21]
 801557a:	e005      	b.n	8015588 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 801557c:	7bbb      	ldrb	r3, [r7, #14]
 801557e:	6879      	ldr	r1, [r7, #4]
 8015580:	4618      	mov	r0, r3
 8015582:	f7ff fc15 	bl	8014db0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8015586:	2300      	movs	r3, #0
}
 8015588:	4618      	mov	r0, r3
 801558a:	371c      	adds	r7, #28
 801558c:	46bd      	mov	sp, r7
 801558e:	bd90      	pop	{r4, r7, pc}
 8015590:	20001c34 	.word	0x20001c34

08015594 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b088      	sub	sp, #32
 8015598:	af00      	add	r7, sp, #0
 801559a:	4603      	mov	r3, r0
 801559c:	460a      	mov	r2, r1
 801559e:	71fb      	strb	r3, [r7, #7]
 80155a0:	4613      	mov	r3, r2
 80155a2:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 80155a4:	2300      	movs	r3, #0
 80155a6:	60fb      	str	r3, [r7, #12]
 80155a8:	f107 0310 	add.w	r3, r7, #16
 80155ac:	2200      	movs	r2, #0
 80155ae:	601a      	str	r2, [r3, #0]
 80155b0:	605a      	str	r2, [r3, #4]
 80155b2:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 80155b4:	2300      	movs	r3, #0
 80155b6:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 80155b8:	79bb      	ldrb	r3, [r7, #6]
 80155ba:	2b0c      	cmp	r3, #12
 80155bc:	d00b      	beq.n	80155d6 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 80155be:	2b0c      	cmp	r3, #12
 80155c0:	dc0f      	bgt.n	80155e2 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 80155c2:	2b0a      	cmp	r3, #10
 80155c4:	d00a      	beq.n	80155dc <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 80155c6:	2b0b      	cmp	r3, #11
 80155c8:	d10b      	bne.n	80155e2 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 80155ca:	79fb      	ldrb	r3, [r7, #7]
 80155cc:	2b01      	cmp	r3, #1
 80155ce:	d10a      	bne.n	80155e6 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 80155d0:	2320      	movs	r3, #32
 80155d2:	733b      	strb	r3, [r7, #12]
            }
            break;
 80155d4:	e007      	b.n	80155e6 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 80155d6:	230b      	movs	r3, #11
 80155d8:	77fb      	strb	r3, [r7, #31]
            break;
 80155da:	e005      	b.n	80155e8 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 80155dc:	2330      	movs	r3, #48	@ 0x30
 80155de:	733b      	strb	r3, [r7, #12]
            break;
 80155e0:	e002      	b.n	80155e8 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80155e2:	230b      	movs	r3, #11
 80155e4:	e00d      	b.n	8015602 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 80155e6:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 80155e8:	79ba      	ldrb	r2, [r7, #6]
 80155ea:	7ff9      	ldrb	r1, [r7, #31]
 80155ec:	f107 030c 	add.w	r3, r7, #12
 80155f0:	4618      	mov	r0, r3
 80155f2:	f7f7 ffc9 	bl	800d588 <SecureElementDeriveAndStoreKey>
 80155f6:	4603      	mov	r3, r0
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d001      	beq.n	8015600 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80155fc:	230f      	movs	r3, #15
 80155fe:	e000      	b.n	8015602 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015600:	2300      	movs	r3, #0
}
 8015602:	4618      	mov	r0, r3
 8015604:	3720      	adds	r7, #32
 8015606:	46bd      	mov	sp, r7
 8015608:	bd80      	pop	{r7, pc}

0801560a <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801560a:	b580      	push	{r7, lr}
 801560c:	b084      	sub	sp, #16
 801560e:	af00      	add	r7, sp, #0
 8015610:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d003      	beq.n	8015620 <LoRaMacParserJoinAccept+0x16>
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d101      	bne.n	8015624 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015620:	2302      	movs	r3, #2
 8015622:	e0b9      	b.n	8015798 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8015624:	2300      	movs	r3, #0
 8015626:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	681a      	ldr	r2, [r3, #0]
 801562c:	89fb      	ldrh	r3, [r7, #14]
 801562e:	1c59      	adds	r1, r3, #1
 8015630:	81f9      	strh	r1, [r7, #14]
 8015632:	4413      	add	r3, r2
 8015634:	781a      	ldrb	r2, [r3, #0]
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	1d98      	adds	r0, r3, #6
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	681a      	ldr	r2, [r3, #0]
 8015642:	89fb      	ldrh	r3, [r7, #14]
 8015644:	4413      	add	r3, r2
 8015646:	2203      	movs	r2, #3
 8015648:	4619      	mov	r1, r3
 801564a:	f002 ff58 	bl	80184fe <memcpy1>
    bufItr = bufItr + 3;
 801564e:	89fb      	ldrh	r3, [r7, #14]
 8015650:	3303      	adds	r3, #3
 8015652:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	f103 0009 	add.w	r0, r3, #9
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	681a      	ldr	r2, [r3, #0]
 801565e:	89fb      	ldrh	r3, [r7, #14]
 8015660:	4413      	add	r3, r2
 8015662:	2203      	movs	r2, #3
 8015664:	4619      	mov	r1, r3
 8015666:	f002 ff4a 	bl	80184fe <memcpy1>
    bufItr = bufItr + 3;
 801566a:	89fb      	ldrh	r3, [r7, #14]
 801566c:	3303      	adds	r3, #3
 801566e:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	681a      	ldr	r2, [r3, #0]
 8015674:	89fb      	ldrh	r3, [r7, #14]
 8015676:	1c59      	adds	r1, r3, #1
 8015678:	81f9      	strh	r1, [r7, #14]
 801567a:	4413      	add	r3, r2
 801567c:	781b      	ldrb	r3, [r3, #0]
 801567e:	461a      	mov	r2, r3
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	681a      	ldr	r2, [r3, #0]
 8015688:	89fb      	ldrh	r3, [r7, #14]
 801568a:	1c59      	adds	r1, r3, #1
 801568c:	81f9      	strh	r1, [r7, #14]
 801568e:	4413      	add	r3, r2
 8015690:	781b      	ldrb	r3, [r3, #0]
 8015692:	021a      	lsls	r2, r3, #8
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	68db      	ldr	r3, [r3, #12]
 8015698:	431a      	orrs	r2, r3
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681a      	ldr	r2, [r3, #0]
 80156a2:	89fb      	ldrh	r3, [r7, #14]
 80156a4:	1c59      	adds	r1, r3, #1
 80156a6:	81f9      	strh	r1, [r7, #14]
 80156a8:	4413      	add	r3, r2
 80156aa:	781b      	ldrb	r3, [r3, #0]
 80156ac:	041a      	lsls	r2, r3, #16
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	68db      	ldr	r3, [r3, #12]
 80156b2:	431a      	orrs	r2, r3
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	681a      	ldr	r2, [r3, #0]
 80156bc:	89fb      	ldrh	r3, [r7, #14]
 80156be:	1c59      	adds	r1, r3, #1
 80156c0:	81f9      	strh	r1, [r7, #14]
 80156c2:	4413      	add	r3, r2
 80156c4:	781b      	ldrb	r3, [r3, #0]
 80156c6:	061a      	lsls	r2, r3, #24
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	68db      	ldr	r3, [r3, #12]
 80156cc:	431a      	orrs	r2, r3
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	681a      	ldr	r2, [r3, #0]
 80156d6:	89fb      	ldrh	r3, [r7, #14]
 80156d8:	1c59      	adds	r1, r3, #1
 80156da:	81f9      	strh	r1, [r7, #14]
 80156dc:	4413      	add	r3, r2
 80156de:	781a      	ldrb	r2, [r3, #0]
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	681a      	ldr	r2, [r3, #0]
 80156e8:	89fb      	ldrh	r3, [r7, #14]
 80156ea:	1c59      	adds	r1, r3, #1
 80156ec:	81f9      	strh	r1, [r7, #14]
 80156ee:	4413      	add	r3, r2
 80156f0:	781a      	ldrb	r2, [r3, #0]
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	791b      	ldrb	r3, [r3, #4]
 80156fa:	1f1a      	subs	r2, r3, #4
 80156fc:	89fb      	ldrh	r3, [r7, #14]
 80156fe:	1ad3      	subs	r3, r2, r3
 8015700:	2b10      	cmp	r3, #16
 8015702:	d10e      	bne.n	8015722 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	f103 0012 	add.w	r0, r3, #18
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	681a      	ldr	r2, [r3, #0]
 801570e:	89fb      	ldrh	r3, [r7, #14]
 8015710:	4413      	add	r3, r2
 8015712:	2210      	movs	r2, #16
 8015714:	4619      	mov	r1, r3
 8015716:	f002 fef2 	bl	80184fe <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801571a:	89fb      	ldrh	r3, [r7, #14]
 801571c:	3310      	adds	r3, #16
 801571e:	81fb      	strh	r3, [r7, #14]
 8015720:	e008      	b.n	8015734 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	791b      	ldrb	r3, [r3, #4]
 8015726:	1f1a      	subs	r2, r3, #4
 8015728:	89fb      	ldrh	r3, [r7, #14]
 801572a:	1ad3      	subs	r3, r2, r3
 801572c:	2b00      	cmp	r3, #0
 801572e:	dd01      	ble.n	8015734 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8015730:	2301      	movs	r3, #1
 8015732:	e031      	b.n	8015798 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	681a      	ldr	r2, [r3, #0]
 8015738:	89fb      	ldrh	r3, [r7, #14]
 801573a:	1c59      	adds	r1, r3, #1
 801573c:	81f9      	strh	r1, [r7, #14]
 801573e:	4413      	add	r3, r2
 8015740:	781b      	ldrb	r3, [r3, #0]
 8015742:	461a      	mov	r2, r3
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	681a      	ldr	r2, [r3, #0]
 801574c:	89fb      	ldrh	r3, [r7, #14]
 801574e:	1c59      	adds	r1, r3, #1
 8015750:	81f9      	strh	r1, [r7, #14]
 8015752:	4413      	add	r3, r2
 8015754:	781b      	ldrb	r3, [r3, #0]
 8015756:	021a      	lsls	r2, r3, #8
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801575c:	431a      	orrs	r2, r3
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	681a      	ldr	r2, [r3, #0]
 8015766:	89fb      	ldrh	r3, [r7, #14]
 8015768:	1c59      	adds	r1, r3, #1
 801576a:	81f9      	strh	r1, [r7, #14]
 801576c:	4413      	add	r3, r2
 801576e:	781b      	ldrb	r3, [r3, #0]
 8015770:	041a      	lsls	r2, r3, #16
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015776:	431a      	orrs	r2, r3
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	681a      	ldr	r2, [r3, #0]
 8015780:	89fb      	ldrh	r3, [r7, #14]
 8015782:	1c59      	adds	r1, r3, #1
 8015784:	81f9      	strh	r1, [r7, #14]
 8015786:	4413      	add	r3, r2
 8015788:	781b      	ldrb	r3, [r3, #0]
 801578a:	061a      	lsls	r2, r3, #24
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015790:	431a      	orrs	r2, r3
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8015796:	2300      	movs	r3, #0
}
 8015798:	4618      	mov	r0, r3
 801579a:	3710      	adds	r7, #16
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}

080157a0 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b084      	sub	sp, #16
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d003      	beq.n	80157b6 <LoRaMacParserData+0x16>
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d101      	bne.n	80157ba <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80157b6:	2302      	movs	r3, #2
 80157b8:	e0e0      	b.n	801597c <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 80157ba:	2300      	movs	r3, #0
 80157bc:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	681a      	ldr	r2, [r3, #0]
 80157c2:	89fb      	ldrh	r3, [r7, #14]
 80157c4:	1c59      	adds	r1, r3, #1
 80157c6:	81f9      	strh	r1, [r7, #14]
 80157c8:	4413      	add	r3, r2
 80157ca:	781a      	ldrb	r2, [r3, #0]
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	681a      	ldr	r2, [r3, #0]
 80157d4:	89fb      	ldrh	r3, [r7, #14]
 80157d6:	1c59      	adds	r1, r3, #1
 80157d8:	81f9      	strh	r1, [r7, #14]
 80157da:	4413      	add	r3, r2
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	461a      	mov	r2, r3
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	681a      	ldr	r2, [r3, #0]
 80157e8:	89fb      	ldrh	r3, [r7, #14]
 80157ea:	1c59      	adds	r1, r3, #1
 80157ec:	81f9      	strh	r1, [r7, #14]
 80157ee:	4413      	add	r3, r2
 80157f0:	781b      	ldrb	r3, [r3, #0]
 80157f2:	021a      	lsls	r2, r3, #8
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	689b      	ldr	r3, [r3, #8]
 80157f8:	431a      	orrs	r2, r3
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	681a      	ldr	r2, [r3, #0]
 8015802:	89fb      	ldrh	r3, [r7, #14]
 8015804:	1c59      	adds	r1, r3, #1
 8015806:	81f9      	strh	r1, [r7, #14]
 8015808:	4413      	add	r3, r2
 801580a:	781b      	ldrb	r3, [r3, #0]
 801580c:	041a      	lsls	r2, r3, #16
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	689b      	ldr	r3, [r3, #8]
 8015812:	431a      	orrs	r2, r3
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	681a      	ldr	r2, [r3, #0]
 801581c:	89fb      	ldrh	r3, [r7, #14]
 801581e:	1c59      	adds	r1, r3, #1
 8015820:	81f9      	strh	r1, [r7, #14]
 8015822:	4413      	add	r3, r2
 8015824:	781b      	ldrb	r3, [r3, #0]
 8015826:	061a      	lsls	r2, r3, #24
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	689b      	ldr	r3, [r3, #8]
 801582c:	431a      	orrs	r2, r3
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	681a      	ldr	r2, [r3, #0]
 8015836:	89fb      	ldrh	r3, [r7, #14]
 8015838:	1c59      	adds	r1, r3, #1
 801583a:	81f9      	strh	r1, [r7, #14]
 801583c:	4413      	add	r3, r2
 801583e:	781a      	ldrb	r2, [r3, #0]
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	681a      	ldr	r2, [r3, #0]
 8015848:	89fb      	ldrh	r3, [r7, #14]
 801584a:	1c59      	adds	r1, r3, #1
 801584c:	81f9      	strh	r1, [r7, #14]
 801584e:	4413      	add	r3, r2
 8015850:	781b      	ldrb	r3, [r3, #0]
 8015852:	461a      	mov	r2, r3
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	681a      	ldr	r2, [r3, #0]
 801585c:	89fb      	ldrh	r3, [r7, #14]
 801585e:	1c59      	adds	r1, r3, #1
 8015860:	81f9      	strh	r1, [r7, #14]
 8015862:	4413      	add	r3, r2
 8015864:	781b      	ldrb	r3, [r3, #0]
 8015866:	0219      	lsls	r1, r3, #8
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	89db      	ldrh	r3, [r3, #14]
 801586c:	b21a      	sxth	r2, r3
 801586e:	b20b      	sxth	r3, r1
 8015870:	4313      	orrs	r3, r2
 8015872:	b21b      	sxth	r3, r3
 8015874:	b29a      	uxth	r2, r3
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	f103 0010 	add.w	r0, r3, #16
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	681a      	ldr	r2, [r3, #0]
 8015884:	89fb      	ldrh	r3, [r7, #14]
 8015886:	18d1      	adds	r1, r2, r3
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	7b1b      	ldrb	r3, [r3, #12]
 801588c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015890:	b2db      	uxtb	r3, r3
 8015892:	461a      	mov	r2, r3
 8015894:	f002 fe33 	bl	80184fe <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	7b1b      	ldrb	r3, [r3, #12]
 801589c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80158a0:	b2db      	uxtb	r3, r3
 80158a2:	461a      	mov	r2, r3
 80158a4:	89fb      	ldrh	r3, [r7, #14]
 80158a6:	4413      	add	r3, r2
 80158a8:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	2200      	movs	r2, #0
 80158ae:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	2200      	movs	r2, #0
 80158b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	791b      	ldrb	r3, [r3, #4]
 80158be:	461a      	mov	r2, r3
 80158c0:	89fb      	ldrh	r3, [r7, #14]
 80158c2:	1ad3      	subs	r3, r2, r3
 80158c4:	2b04      	cmp	r3, #4
 80158c6:	dd27      	ble.n	8015918 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	681a      	ldr	r2, [r3, #0]
 80158cc:	89fb      	ldrh	r3, [r7, #14]
 80158ce:	1c59      	adds	r1, r3, #1
 80158d0:	81f9      	strh	r1, [r7, #14]
 80158d2:	4413      	add	r3, r2
 80158d4:	781a      	ldrb	r2, [r3, #0]
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	791a      	ldrb	r2, [r3, #4]
 80158e0:	89fb      	ldrh	r3, [r7, #14]
 80158e2:	b2db      	uxtb	r3, r3
 80158e4:	1ad3      	subs	r3, r2, r3
 80158e6:	b2db      	uxtb	r3, r3
 80158e8:	3b04      	subs	r3, #4
 80158ea:	b2da      	uxtb	r2, r3
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	681a      	ldr	r2, [r3, #0]
 80158fa:	89fb      	ldrh	r3, [r7, #14]
 80158fc:	18d1      	adds	r1, r2, r3
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015904:	461a      	mov	r2, r3
 8015906:	f002 fdfa 	bl	80184fe <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015910:	461a      	mov	r2, r3
 8015912:	89fb      	ldrh	r3, [r7, #14]
 8015914:	4413      	add	r3, r2
 8015916:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	681a      	ldr	r2, [r3, #0]
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	791b      	ldrb	r3, [r3, #4]
 8015920:	3b04      	subs	r3, #4
 8015922:	4413      	add	r3, r2
 8015924:	781b      	ldrb	r3, [r3, #0]
 8015926:	461a      	mov	r2, r3
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	6819      	ldr	r1, [r3, #0]
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	791b      	ldrb	r3, [r3, #4]
 8015938:	3b03      	subs	r3, #3
 801593a:	440b      	add	r3, r1
 801593c:	781b      	ldrb	r3, [r3, #0]
 801593e:	021b      	lsls	r3, r3, #8
 8015940:	431a      	orrs	r2, r3
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	6819      	ldr	r1, [r3, #0]
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	791b      	ldrb	r3, [r3, #4]
 8015952:	3b02      	subs	r3, #2
 8015954:	440b      	add	r3, r1
 8015956:	781b      	ldrb	r3, [r3, #0]
 8015958:	041b      	lsls	r3, r3, #16
 801595a:	431a      	orrs	r2, r3
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	6819      	ldr	r1, [r3, #0]
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	791b      	ldrb	r3, [r3, #4]
 801596c:	3b01      	subs	r3, #1
 801596e:	440b      	add	r3, r1
 8015970:	781b      	ldrb	r3, [r3, #0]
 8015972:	061b      	lsls	r3, r3, #24
 8015974:	431a      	orrs	r2, r3
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801597a:	2300      	movs	r3, #0
}
 801597c:	4618      	mov	r0, r3
 801597e:	3710      	adds	r7, #16
 8015980:	46bd      	mov	sp, r7
 8015982:	bd80      	pop	{r7, pc}

08015984 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b084      	sub	sp, #16
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d003      	beq.n	801599a <LoRaMacSerializerJoinRequest+0x16>
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d101      	bne.n	801599e <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801599a:	2301      	movs	r3, #1
 801599c:	e070      	b.n	8015a80 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 801599e:	2300      	movs	r3, #0
 80159a0:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	791b      	ldrb	r3, [r3, #4]
 80159a6:	2b16      	cmp	r3, #22
 80159a8:	d801      	bhi.n	80159ae <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80159aa:	2302      	movs	r3, #2
 80159ac:	e068      	b.n	8015a80 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	681a      	ldr	r2, [r3, #0]
 80159b2:	89fb      	ldrh	r3, [r7, #14]
 80159b4:	1c59      	adds	r1, r3, #1
 80159b6:	81f9      	strh	r1, [r7, #14]
 80159b8:	4413      	add	r3, r2
 80159ba:	687a      	ldr	r2, [r7, #4]
 80159bc:	7952      	ldrb	r2, [r2, #5]
 80159be:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	681a      	ldr	r2, [r3, #0]
 80159c4:	89fb      	ldrh	r3, [r7, #14]
 80159c6:	18d0      	adds	r0, r2, r3
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	3306      	adds	r3, #6
 80159cc:	2208      	movs	r2, #8
 80159ce:	4619      	mov	r1, r3
 80159d0:	f002 fdb0 	bl	8018534 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80159d4:	89fb      	ldrh	r3, [r7, #14]
 80159d6:	3308      	adds	r3, #8
 80159d8:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	681a      	ldr	r2, [r3, #0]
 80159de:	89fb      	ldrh	r3, [r7, #14]
 80159e0:	18d0      	adds	r0, r2, r3
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	330e      	adds	r3, #14
 80159e6:	2208      	movs	r2, #8
 80159e8:	4619      	mov	r1, r3
 80159ea:	f002 fda3 	bl	8018534 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80159ee:	89fb      	ldrh	r3, [r7, #14]
 80159f0:	3308      	adds	r3, #8
 80159f2:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	8ad9      	ldrh	r1, [r3, #22]
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	681a      	ldr	r2, [r3, #0]
 80159fc:	89fb      	ldrh	r3, [r7, #14]
 80159fe:	1c58      	adds	r0, r3, #1
 8015a00:	81f8      	strh	r0, [r7, #14]
 8015a02:	4413      	add	r3, r2
 8015a04:	b2ca      	uxtb	r2, r1
 8015a06:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	8adb      	ldrh	r3, [r3, #22]
 8015a0c:	0a1b      	lsrs	r3, r3, #8
 8015a0e:	b299      	uxth	r1, r3
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	681a      	ldr	r2, [r3, #0]
 8015a14:	89fb      	ldrh	r3, [r7, #14]
 8015a16:	1c58      	adds	r0, r3, #1
 8015a18:	81f8      	strh	r0, [r7, #14]
 8015a1a:	4413      	add	r3, r2
 8015a1c:	b2ca      	uxtb	r2, r1
 8015a1e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	6999      	ldr	r1, [r3, #24]
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	681a      	ldr	r2, [r3, #0]
 8015a28:	89fb      	ldrh	r3, [r7, #14]
 8015a2a:	1c58      	adds	r0, r3, #1
 8015a2c:	81f8      	strh	r0, [r7, #14]
 8015a2e:	4413      	add	r3, r2
 8015a30:	b2ca      	uxtb	r2, r1
 8015a32:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	699b      	ldr	r3, [r3, #24]
 8015a38:	0a19      	lsrs	r1, r3, #8
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	681a      	ldr	r2, [r3, #0]
 8015a3e:	89fb      	ldrh	r3, [r7, #14]
 8015a40:	1c58      	adds	r0, r3, #1
 8015a42:	81f8      	strh	r0, [r7, #14]
 8015a44:	4413      	add	r3, r2
 8015a46:	b2ca      	uxtb	r2, r1
 8015a48:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	699b      	ldr	r3, [r3, #24]
 8015a4e:	0c19      	lsrs	r1, r3, #16
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681a      	ldr	r2, [r3, #0]
 8015a54:	89fb      	ldrh	r3, [r7, #14]
 8015a56:	1c58      	adds	r0, r3, #1
 8015a58:	81f8      	strh	r0, [r7, #14]
 8015a5a:	4413      	add	r3, r2
 8015a5c:	b2ca      	uxtb	r2, r1
 8015a5e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	699b      	ldr	r3, [r3, #24]
 8015a64:	0e19      	lsrs	r1, r3, #24
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	681a      	ldr	r2, [r3, #0]
 8015a6a:	89fb      	ldrh	r3, [r7, #14]
 8015a6c:	1c58      	adds	r0, r3, #1
 8015a6e:	81f8      	strh	r0, [r7, #14]
 8015a70:	4413      	add	r3, r2
 8015a72:	b2ca      	uxtb	r2, r1
 8015a74:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015a76:	89fb      	ldrh	r3, [r7, #14]
 8015a78:	b2da      	uxtb	r2, r3
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015a7e:	2300      	movs	r3, #0
}
 8015a80:	4618      	mov	r0, r3
 8015a82:	3710      	adds	r7, #16
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bd80      	pop	{r7, pc}

08015a88 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b084      	sub	sp, #16
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d003      	beq.n	8015a9e <LoRaMacSerializerData+0x16>
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d101      	bne.n	8015aa2 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015a9e:	2301      	movs	r3, #1
 8015aa0:	e0e3      	b.n	8015c6a <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8015aa6:	2308      	movs	r3, #8
 8015aa8:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	7b1b      	ldrb	r3, [r3, #12]
 8015aae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015ab2:	b2db      	uxtb	r3, r3
 8015ab4:	461a      	mov	r2, r3
 8015ab6:	89bb      	ldrh	r3, [r7, #12]
 8015ab8:	4413      	add	r3, r2
 8015aba:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d002      	beq.n	8015acc <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8015ac6:	89bb      	ldrh	r3, [r7, #12]
 8015ac8:	3301      	adds	r3, #1
 8015aca:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015ad2:	461a      	mov	r2, r3
 8015ad4:	89bb      	ldrh	r3, [r7, #12]
 8015ad6:	4413      	add	r3, r2
 8015ad8:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8015ada:	89bb      	ldrh	r3, [r7, #12]
 8015adc:	3304      	adds	r3, #4
 8015ade:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	791b      	ldrb	r3, [r3, #4]
 8015ae4:	461a      	mov	r2, r3
 8015ae6:	89bb      	ldrh	r3, [r7, #12]
 8015ae8:	4293      	cmp	r3, r2
 8015aea:	d901      	bls.n	8015af0 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015aec:	2302      	movs	r3, #2
 8015aee:	e0bc      	b.n	8015c6a <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	681a      	ldr	r2, [r3, #0]
 8015af4:	89fb      	ldrh	r3, [r7, #14]
 8015af6:	1c59      	adds	r1, r3, #1
 8015af8:	81f9      	strh	r1, [r7, #14]
 8015afa:	4413      	add	r3, r2
 8015afc:	687a      	ldr	r2, [r7, #4]
 8015afe:	7952      	ldrb	r2, [r2, #5]
 8015b00:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	6899      	ldr	r1, [r3, #8]
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	681a      	ldr	r2, [r3, #0]
 8015b0a:	89fb      	ldrh	r3, [r7, #14]
 8015b0c:	1c58      	adds	r0, r3, #1
 8015b0e:	81f8      	strh	r0, [r7, #14]
 8015b10:	4413      	add	r3, r2
 8015b12:	b2ca      	uxtb	r2, r1
 8015b14:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	689b      	ldr	r3, [r3, #8]
 8015b1a:	0a19      	lsrs	r1, r3, #8
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	681a      	ldr	r2, [r3, #0]
 8015b20:	89fb      	ldrh	r3, [r7, #14]
 8015b22:	1c58      	adds	r0, r3, #1
 8015b24:	81f8      	strh	r0, [r7, #14]
 8015b26:	4413      	add	r3, r2
 8015b28:	b2ca      	uxtb	r2, r1
 8015b2a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	689b      	ldr	r3, [r3, #8]
 8015b30:	0c19      	lsrs	r1, r3, #16
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	681a      	ldr	r2, [r3, #0]
 8015b36:	89fb      	ldrh	r3, [r7, #14]
 8015b38:	1c58      	adds	r0, r3, #1
 8015b3a:	81f8      	strh	r0, [r7, #14]
 8015b3c:	4413      	add	r3, r2
 8015b3e:	b2ca      	uxtb	r2, r1
 8015b40:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	689b      	ldr	r3, [r3, #8]
 8015b46:	0e19      	lsrs	r1, r3, #24
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	681a      	ldr	r2, [r3, #0]
 8015b4c:	89fb      	ldrh	r3, [r7, #14]
 8015b4e:	1c58      	adds	r0, r3, #1
 8015b50:	81f8      	strh	r0, [r7, #14]
 8015b52:	4413      	add	r3, r2
 8015b54:	b2ca      	uxtb	r2, r1
 8015b56:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	681a      	ldr	r2, [r3, #0]
 8015b5c:	89fb      	ldrh	r3, [r7, #14]
 8015b5e:	1c59      	adds	r1, r3, #1
 8015b60:	81f9      	strh	r1, [r7, #14]
 8015b62:	4413      	add	r3, r2
 8015b64:	687a      	ldr	r2, [r7, #4]
 8015b66:	7b12      	ldrb	r2, [r2, #12]
 8015b68:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	89d9      	ldrh	r1, [r3, #14]
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	681a      	ldr	r2, [r3, #0]
 8015b72:	89fb      	ldrh	r3, [r7, #14]
 8015b74:	1c58      	adds	r0, r3, #1
 8015b76:	81f8      	strh	r0, [r7, #14]
 8015b78:	4413      	add	r3, r2
 8015b7a:	b2ca      	uxtb	r2, r1
 8015b7c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	89db      	ldrh	r3, [r3, #14]
 8015b82:	0a1b      	lsrs	r3, r3, #8
 8015b84:	b299      	uxth	r1, r3
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	681a      	ldr	r2, [r3, #0]
 8015b8a:	89fb      	ldrh	r3, [r7, #14]
 8015b8c:	1c58      	adds	r0, r3, #1
 8015b8e:	81f8      	strh	r0, [r7, #14]
 8015b90:	4413      	add	r3, r2
 8015b92:	b2ca      	uxtb	r2, r1
 8015b94:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	681a      	ldr	r2, [r3, #0]
 8015b9a:	89fb      	ldrh	r3, [r7, #14]
 8015b9c:	18d0      	adds	r0, r2, r3
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	f103 0110 	add.w	r1, r3, #16
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	7b1b      	ldrb	r3, [r3, #12]
 8015ba8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015bac:	b2db      	uxtb	r3, r3
 8015bae:	461a      	mov	r2, r3
 8015bb0:	f002 fca5 	bl	80184fe <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	7b1b      	ldrb	r3, [r3, #12]
 8015bb8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015bbc:	b2db      	uxtb	r3, r3
 8015bbe:	461a      	mov	r2, r3
 8015bc0:	89fb      	ldrh	r3, [r7, #14]
 8015bc2:	4413      	add	r3, r2
 8015bc4:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d009      	beq.n	8015be4 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	681a      	ldr	r2, [r3, #0]
 8015bd4:	89fb      	ldrh	r3, [r7, #14]
 8015bd6:	1c59      	adds	r1, r3, #1
 8015bd8:	81f9      	strh	r1, [r7, #14]
 8015bda:	4413      	add	r3, r2
 8015bdc:	687a      	ldr	r2, [r7, #4]
 8015bde:	f892 2020 	ldrb.w	r2, [r2, #32]
 8015be2:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	681a      	ldr	r2, [r3, #0]
 8015be8:	89fb      	ldrh	r3, [r7, #14]
 8015bea:	18d0      	adds	r0, r2, r3
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015bf6:	461a      	mov	r2, r3
 8015bf8:	f002 fc81 	bl	80184fe <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015c02:	461a      	mov	r2, r3
 8015c04:	89fb      	ldrh	r3, [r7, #14]
 8015c06:	4413      	add	r3, r2
 8015c08:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	681a      	ldr	r2, [r3, #0]
 8015c12:	89fb      	ldrh	r3, [r7, #14]
 8015c14:	1c58      	adds	r0, r3, #1
 8015c16:	81f8      	strh	r0, [r7, #14]
 8015c18:	4413      	add	r3, r2
 8015c1a:	b2ca      	uxtb	r2, r1
 8015c1c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c22:	0a19      	lsrs	r1, r3, #8
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681a      	ldr	r2, [r3, #0]
 8015c28:	89fb      	ldrh	r3, [r7, #14]
 8015c2a:	1c58      	adds	r0, r3, #1
 8015c2c:	81f8      	strh	r0, [r7, #14]
 8015c2e:	4413      	add	r3, r2
 8015c30:	b2ca      	uxtb	r2, r1
 8015c32:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c38:	0c19      	lsrs	r1, r3, #16
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	681a      	ldr	r2, [r3, #0]
 8015c3e:	89fb      	ldrh	r3, [r7, #14]
 8015c40:	1c58      	adds	r0, r3, #1
 8015c42:	81f8      	strh	r0, [r7, #14]
 8015c44:	4413      	add	r3, r2
 8015c46:	b2ca      	uxtb	r2, r1
 8015c48:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c4e:	0e19      	lsrs	r1, r3, #24
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	681a      	ldr	r2, [r3, #0]
 8015c54:	89fb      	ldrh	r3, [r7, #14]
 8015c56:	1c58      	adds	r0, r3, #1
 8015c58:	81f8      	strh	r0, [r7, #14]
 8015c5a:	4413      	add	r3, r2
 8015c5c:	b2ca      	uxtb	r2, r1
 8015c5e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015c60:	89fb      	ldrh	r3, [r7, #14]
 8015c62:	b2da      	uxtb	r2, r3
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015c68:	2300      	movs	r3, #0
}
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	3710      	adds	r7, #16
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bd80      	pop	{r7, pc}

08015c72 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8015c72:	b480      	push	{r7}
 8015c74:	b083      	sub	sp, #12
 8015c76:	af00      	add	r7, sp, #0
 8015c78:	4603      	mov	r3, r0
 8015c7a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015c7c:	79fb      	ldrb	r3, [r7, #7]
 8015c7e:	2b01      	cmp	r3, #1
 8015c80:	d101      	bne.n	8015c86 <RegionIsActive+0x14>
    {
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
 8015c82:	2301      	movs	r3, #1
 8015c84:	e000      	b.n	8015c88 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8015c86:	2300      	movs	r3, #0
        }
    }
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	370c      	adds	r7, #12
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bc80      	pop	{r7}
 8015c90:	4770      	bx	lr

08015c92 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8015c92:	b580      	push	{r7, lr}
 8015c94:	b084      	sub	sp, #16
 8015c96:	af00      	add	r7, sp, #0
 8015c98:	4603      	mov	r3, r0
 8015c9a:	6039      	str	r1, [r7, #0]
 8015c9c:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	60bb      	str	r3, [r7, #8]
    switch( region )
 8015ca2:	79fb      	ldrb	r3, [r7, #7]
 8015ca4:	2b01      	cmp	r3, #1
 8015ca6:	d105      	bne.n	8015cb4 <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
 8015ca8:	6838      	ldr	r0, [r7, #0]
 8015caa:	f000 f9ff 	bl	80160ac <RegionAU915GetPhyParam>
 8015cae:	4603      	mov	r3, r0
 8015cb0:	60fb      	str	r3, [r7, #12]
 8015cb2:	e001      	b.n	8015cb8 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8015cb4:	68bb      	ldr	r3, [r7, #8]
 8015cb6:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	4618      	mov	r0, r3
 8015cbc:	3710      	adds	r7, #16
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}

08015cc2 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8015cc2:	b580      	push	{r7, lr}
 8015cc4:	b082      	sub	sp, #8
 8015cc6:	af00      	add	r7, sp, #0
 8015cc8:	4603      	mov	r3, r0
 8015cca:	6039      	str	r1, [r7, #0]
 8015ccc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015cce:	79fb      	ldrb	r3, [r7, #7]
 8015cd0:	2b01      	cmp	r3, #1
 8015cd2:	d103      	bne.n	8015cdc <RegionSetBandTxDone+0x1a>
    {
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
 8015cd4:	6838      	ldr	r0, [r7, #0]
 8015cd6:	f000 fb7d 	bl	80163d4 <RegionAU915SetBandTxDone>
 8015cda:	e000      	b.n	8015cde <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8015cdc:	bf00      	nop
        }
    }
}
 8015cde:	3708      	adds	r7, #8
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	bd80      	pop	{r7, pc}

08015ce4 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b082      	sub	sp, #8
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	4603      	mov	r3, r0
 8015cec:	6039      	str	r1, [r7, #0]
 8015cee:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015cf0:	79fb      	ldrb	r3, [r7, #7]
 8015cf2:	2b01      	cmp	r3, #1
 8015cf4:	d103      	bne.n	8015cfe <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
 8015cf6:	6838      	ldr	r0, [r7, #0]
 8015cf8:	f000 fb98 	bl	801642c <RegionAU915InitDefaults>
 8015cfc:	e000      	b.n	8015d00 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8015cfe:	bf00      	nop
        }
    }
}
 8015d00:	bf00      	nop
 8015d02:	3708      	adds	r7, #8
 8015d04:	46bd      	mov	sp, r7
 8015d06:	bd80      	pop	{r7, pc}

08015d08 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b082      	sub	sp, #8
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	4603      	mov	r3, r0
 8015d10:	6039      	str	r1, [r7, #0]
 8015d12:	71fb      	strb	r3, [r7, #7]
 8015d14:	4613      	mov	r3, r2
 8015d16:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8015d18:	79fb      	ldrb	r3, [r7, #7]
 8015d1a:	2b01      	cmp	r3, #1
 8015d1c:	d106      	bne.n	8015d2c <RegionVerify+0x24>
    {
        AS923_VERIFY( );
        AU915_VERIFY( );
 8015d1e:	79bb      	ldrb	r3, [r7, #6]
 8015d20:	4619      	mov	r1, r3
 8015d22:	6838      	ldr	r0, [r7, #0]
 8015d24:	f000 fcb4 	bl	8016690 <RegionAU915Verify>
 8015d28:	4603      	mov	r3, r0
 8015d2a:	e000      	b.n	8015d2e <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8015d2c:	2300      	movs	r3, #0
        }
    }
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3708      	adds	r7, #8
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}

08015d36 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8015d36:	b580      	push	{r7, lr}
 8015d38:	b082      	sub	sp, #8
 8015d3a:	af00      	add	r7, sp, #0
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	6039      	str	r1, [r7, #0]
 8015d40:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015d42:	79fb      	ldrb	r3, [r7, #7]
 8015d44:	2b01      	cmp	r3, #1
 8015d46:	d103      	bne.n	8015d50 <RegionApplyCFList+0x1a>
    {
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
 8015d48:	6838      	ldr	r0, [r7, #0]
 8015d4a:	f000 fd2f 	bl	80167ac <RegionAU915ApplyCFList>
 8015d4e:	e000      	b.n	8015d52 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8015d50:	bf00      	nop
        }
    }
}
 8015d52:	bf00      	nop
 8015d54:	3708      	adds	r7, #8
 8015d56:	46bd      	mov	sp, r7
 8015d58:	bd80      	pop	{r7, pc}

08015d5a <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8015d5a:	b580      	push	{r7, lr}
 8015d5c:	b082      	sub	sp, #8
 8015d5e:	af00      	add	r7, sp, #0
 8015d60:	4603      	mov	r3, r0
 8015d62:	6039      	str	r1, [r7, #0]
 8015d64:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015d66:	79fb      	ldrb	r3, [r7, #7]
 8015d68:	2b01      	cmp	r3, #1
 8015d6a:	d104      	bne.n	8015d76 <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
 8015d6c:	6838      	ldr	r0, [r7, #0]
 8015d6e:	f000 fd91 	bl	8016894 <RegionAU915ChanMaskSet>
 8015d72:	4603      	mov	r3, r0
 8015d74:	e000      	b.n	8015d78 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8015d76:	2300      	movs	r3, #0
        }
    }
}
 8015d78:	4618      	mov	r0, r3
 8015d7a:	3708      	adds	r7, #8
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	bd80      	pop	{r7, pc}

08015d80 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b082      	sub	sp, #8
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	603b      	str	r3, [r7, #0]
 8015d88:	4603      	mov	r3, r0
 8015d8a:	71fb      	strb	r3, [r7, #7]
 8015d8c:	460b      	mov	r3, r1
 8015d8e:	71bb      	strb	r3, [r7, #6]
 8015d90:	4613      	mov	r3, r2
 8015d92:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015d94:	79fb      	ldrb	r3, [r7, #7]
 8015d96:	2b01      	cmp	r3, #1
 8015d98:	d107      	bne.n	8015daa <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8015d9a:	7979      	ldrb	r1, [r7, #5]
 8015d9c:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8015da0:	693b      	ldr	r3, [r7, #16]
 8015da2:	683a      	ldr	r2, [r7, #0]
 8015da4:	f000 fdd0 	bl	8016948 <RegionAU915ComputeRxWindowParameters>
 8015da8:	e000      	b.n	8015dac <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8015daa:	bf00      	nop
        }
    }
}
 8015dac:	bf00      	nop
 8015dae:	3708      	adds	r7, #8
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}

08015db4 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b084      	sub	sp, #16
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	4603      	mov	r3, r0
 8015dbc:	60b9      	str	r1, [r7, #8]
 8015dbe:	607a      	str	r2, [r7, #4]
 8015dc0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015dc2:	7bfb      	ldrb	r3, [r7, #15]
 8015dc4:	2b01      	cmp	r3, #1
 8015dc6:	d105      	bne.n	8015dd4 <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
 8015dc8:	6879      	ldr	r1, [r7, #4]
 8015dca:	68b8      	ldr	r0, [r7, #8]
 8015dcc:	f000 fe06 	bl	80169dc <RegionAU915RxConfig>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	e000      	b.n	8015dd6 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8015dd4:	2300      	movs	r3, #0
        }
    }
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3710      	adds	r7, #16
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}

08015dde <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015dde:	b580      	push	{r7, lr}
 8015de0:	b084      	sub	sp, #16
 8015de2:	af00      	add	r7, sp, #0
 8015de4:	60b9      	str	r1, [r7, #8]
 8015de6:	607a      	str	r2, [r7, #4]
 8015de8:	603b      	str	r3, [r7, #0]
 8015dea:	4603      	mov	r3, r0
 8015dec:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015dee:	7bfb      	ldrb	r3, [r7, #15]
 8015df0:	2b01      	cmp	r3, #1
 8015df2:	d106      	bne.n	8015e02 <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
 8015df4:	683a      	ldr	r2, [r7, #0]
 8015df6:	6879      	ldr	r1, [r7, #4]
 8015df8:	68b8      	ldr	r0, [r7, #8]
 8015dfa:	f000 fe73 	bl	8016ae4 <RegionAU915TxConfig>
 8015dfe:	4603      	mov	r3, r0
 8015e00:	e000      	b.n	8015e04 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8015e02:	2300      	movs	r3, #0
        }
    }
}
 8015e04:	4618      	mov	r0, r3
 8015e06:	3710      	adds	r7, #16
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	bd80      	pop	{r7, pc}

08015e0c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b086      	sub	sp, #24
 8015e10:	af02      	add	r7, sp, #8
 8015e12:	60b9      	str	r1, [r7, #8]
 8015e14:	607a      	str	r2, [r7, #4]
 8015e16:	603b      	str	r3, [r7, #0]
 8015e18:	4603      	mov	r3, r0
 8015e1a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015e1c:	7bfb      	ldrb	r3, [r7, #15]
 8015e1e:	2b01      	cmp	r3, #1
 8015e20:	d109      	bne.n	8015e36 <RegionLinkAdrReq+0x2a>
    {
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
 8015e22:	69fb      	ldr	r3, [r7, #28]
 8015e24:	9300      	str	r3, [sp, #0]
 8015e26:	69bb      	ldr	r3, [r7, #24]
 8015e28:	683a      	ldr	r2, [r7, #0]
 8015e2a:	6879      	ldr	r1, [r7, #4]
 8015e2c:	68b8      	ldr	r0, [r7, #8]
 8015e2e:	f000 fefd 	bl	8016c2c <RegionAU915LinkAdrReq>
 8015e32:	4603      	mov	r3, r0
 8015e34:	e000      	b.n	8015e38 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8015e36:	2300      	movs	r3, #0
        }
    }
}
 8015e38:	4618      	mov	r0, r3
 8015e3a:	3710      	adds	r7, #16
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	bd80      	pop	{r7, pc}

08015e40 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b082      	sub	sp, #8
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	4603      	mov	r3, r0
 8015e48:	6039      	str	r1, [r7, #0]
 8015e4a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015e4c:	79fb      	ldrb	r3, [r7, #7]
 8015e4e:	2b01      	cmp	r3, #1
 8015e50:	d104      	bne.n	8015e5c <RegionRxParamSetupReq+0x1c>
    {
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
 8015e52:	6838      	ldr	r0, [r7, #0]
 8015e54:	f001 f90e 	bl	8017074 <RegionAU915RxParamSetupReq>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	e000      	b.n	8015e5e <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015e5c:	2300      	movs	r3, #0
        }
    }
}
 8015e5e:	4618      	mov	r0, r3
 8015e60:	3708      	adds	r7, #8
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd80      	pop	{r7, pc}

08015e66 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8015e66:	b580      	push	{r7, lr}
 8015e68:	b082      	sub	sp, #8
 8015e6a:	af00      	add	r7, sp, #0
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	6039      	str	r1, [r7, #0]
 8015e70:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015e72:	79fb      	ldrb	r3, [r7, #7]
 8015e74:	2b01      	cmp	r3, #1
 8015e76:	d104      	bne.n	8015e82 <RegionNewChannelReq+0x1c>
    {
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
 8015e78:	6838      	ldr	r0, [r7, #0]
 8015e7a:	f001 f941 	bl	8017100 <RegionAU915NewChannelReq>
 8015e7e:	4603      	mov	r3, r0
 8015e80:	e000      	b.n	8015e84 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015e82:	2300      	movs	r3, #0
        }
    }
}
 8015e84:	4618      	mov	r0, r3
 8015e86:	3708      	adds	r7, #8
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	bd80      	pop	{r7, pc}

08015e8c <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b082      	sub	sp, #8
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	4603      	mov	r3, r0
 8015e94:	6039      	str	r1, [r7, #0]
 8015e96:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015e98:	79fb      	ldrb	r3, [r7, #7]
 8015e9a:	2b01      	cmp	r3, #1
 8015e9c:	d104      	bne.n	8015ea8 <RegionTxParamSetupReq+0x1c>
    {
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
 8015e9e:	6838      	ldr	r0, [r7, #0]
 8015ea0:	f001 f939 	bl	8017116 <RegionAU915TxParamSetupReq>
 8015ea4:	4603      	mov	r3, r0
 8015ea6:	e000      	b.n	8015eaa <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015ea8:	2300      	movs	r3, #0
        }
    }
}
 8015eaa:	4618      	mov	r0, r3
 8015eac:	3708      	adds	r7, #8
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}

08015eb2 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8015eb2:	b580      	push	{r7, lr}
 8015eb4:	b082      	sub	sp, #8
 8015eb6:	af00      	add	r7, sp, #0
 8015eb8:	4603      	mov	r3, r0
 8015eba:	6039      	str	r1, [r7, #0]
 8015ebc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015ebe:	79fb      	ldrb	r3, [r7, #7]
 8015ec0:	2b01      	cmp	r3, #1
 8015ec2:	d104      	bne.n	8015ece <RegionDlChannelReq+0x1c>
    {
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
 8015ec4:	6838      	ldr	r0, [r7, #0]
 8015ec6:	f001 f930 	bl	801712a <RegionAU915DlChannelReq>
 8015eca:	4603      	mov	r3, r0
 8015ecc:	e000      	b.n	8015ed0 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015ece:	2300      	movs	r3, #0
        }
    }
}
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	3708      	adds	r7, #8
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	bd80      	pop	{r7, pc}

08015ed8 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b082      	sub	sp, #8
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	4603      	mov	r3, r0
 8015ee0:	71fb      	strb	r3, [r7, #7]
 8015ee2:	460b      	mov	r3, r1
 8015ee4:	71bb      	strb	r3, [r7, #6]
 8015ee6:	4613      	mov	r3, r2
 8015ee8:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015eea:	79fb      	ldrb	r3, [r7, #7]
 8015eec:	2b01      	cmp	r3, #1
 8015eee:	d108      	bne.n	8015f02 <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
 8015ef0:	797a      	ldrb	r2, [r7, #5]
 8015ef2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015ef6:	4611      	mov	r1, r2
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f001 f921 	bl	8017140 <RegionAU915AlternateDr>
 8015efe:	4603      	mov	r3, r0
 8015f00:	e000      	b.n	8015f04 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8015f02:	2300      	movs	r3, #0
        }
    }
}
 8015f04:	4618      	mov	r0, r3
 8015f06:	3708      	adds	r7, #8
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	bd80      	pop	{r7, pc}

08015f0c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b084      	sub	sp, #16
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	60b9      	str	r1, [r7, #8]
 8015f14:	607a      	str	r2, [r7, #4]
 8015f16:	603b      	str	r3, [r7, #0]
 8015f18:	4603      	mov	r3, r0
 8015f1a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015f1c:	7bfb      	ldrb	r3, [r7, #15]
 8015f1e:	2b01      	cmp	r3, #1
 8015f20:	d107      	bne.n	8015f32 <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
 8015f22:	69bb      	ldr	r3, [r7, #24]
 8015f24:	683a      	ldr	r2, [r7, #0]
 8015f26:	6879      	ldr	r1, [r7, #4]
 8015f28:	68b8      	ldr	r0, [r7, #8]
 8015f2a:	f001 f945 	bl	80171b8 <RegionAU915NextChannel>
 8015f2e:	4603      	mov	r3, r0
 8015f30:	e000      	b.n	8015f34 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8015f32:	2309      	movs	r3, #9
        }
    }
}
 8015f34:	4618      	mov	r0, r3
 8015f36:	3710      	adds	r7, #16
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	bd80      	pop	{r7, pc}

08015f3c <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b082      	sub	sp, #8
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	4603      	mov	r3, r0
 8015f44:	6039      	str	r1, [r7, #0]
 8015f46:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015f48:	79fb      	ldrb	r3, [r7, #7]
 8015f4a:	2b01      	cmp	r3, #1
 8015f4c:	d103      	bne.n	8015f56 <RegionSetContinuousWave+0x1a>
    {
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
 8015f4e:	6838      	ldr	r0, [r7, #0]
 8015f50:	f001 fa26 	bl	80173a0 <RegionAU915SetContinuousWave>
 8015f54:	e000      	b.n	8015f58 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8015f56:	bf00      	nop
        }
    }
}
 8015f58:	bf00      	nop
 8015f5a:	3708      	adds	r7, #8
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd80      	pop	{r7, pc}

08015f60 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015f60:	b590      	push	{r4, r7, lr}
 8015f62:	b083      	sub	sp, #12
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	4604      	mov	r4, r0
 8015f68:	4608      	mov	r0, r1
 8015f6a:	4611      	mov	r1, r2
 8015f6c:	461a      	mov	r2, r3
 8015f6e:	4623      	mov	r3, r4
 8015f70:	71fb      	strb	r3, [r7, #7]
 8015f72:	4603      	mov	r3, r0
 8015f74:	71bb      	strb	r3, [r7, #6]
 8015f76:	460b      	mov	r3, r1
 8015f78:	717b      	strb	r3, [r7, #5]
 8015f7a:	4613      	mov	r3, r2
 8015f7c:	713b      	strb	r3, [r7, #4]
    switch( region )
 8015f7e:	79fb      	ldrb	r3, [r7, #7]
 8015f80:	2b01      	cmp	r3, #1
 8015f82:	d109      	bne.n	8015f98 <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
 8015f84:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015f88:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015f8c:	79bb      	ldrb	r3, [r7, #6]
 8015f8e:	4618      	mov	r0, r3
 8015f90:	f001 fa54 	bl	801743c <RegionAU915ApplyDrOffset>
 8015f94:	4603      	mov	r3, r0
 8015f96:	e000      	b.n	8015f9a <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8015f98:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	370c      	adds	r7, #12
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	bd90      	pop	{r4, r7, pc}
	...

08015fa4 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8015fa4:	b480      	push	{r7}
 8015fa6:	b083      	sub	sp, #12
 8015fa8:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8015faa:	4b04      	ldr	r3, [pc, #16]	@ (8015fbc <RegionGetVersion+0x18>)
 8015fac:	607b      	str	r3, [r7, #4]

    return version;
 8015fae:	687b      	ldr	r3, [r7, #4]
}
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	370c      	adds	r7, #12
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	bc80      	pop	{r7}
 8015fb8:	4770      	bx	lr
 8015fba:	bf00      	nop
 8015fbc:	01010003 	.word	0x01010003

08015fc0 <VerifyRfFreq>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static bool VerifyRfFreq( uint32_t freq )
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b082      	sub	sp, #8
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8015fc8:	4b18      	ldr	r3, [pc, #96]	@ (801602c <VerifyRfFreq+0x6c>)
 8015fca:	6a1b      	ldr	r3, [r3, #32]
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	4798      	blx	r3
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	f083 0301 	eor.w	r3, r3, #1
 8015fd6:	b2db      	uxtb	r3, r3
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d001      	beq.n	8015fe0 <VerifyRfFreq+0x20>
    {
        return false;
 8015fdc:	2300      	movs	r3, #0
 8015fde:	e021      	b.n	8016024 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	4a13      	ldr	r2, [pc, #76]	@ (8016030 <VerifyRfFreq+0x70>)
 8015fe4:	4293      	cmp	r3, r2
 8015fe6:	d910      	bls.n	801600a <VerifyRfFreq+0x4a>
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	4a12      	ldr	r2, [pc, #72]	@ (8016034 <VerifyRfFreq+0x74>)
 8015fec:	4293      	cmp	r3, r2
 8015fee:	d80c      	bhi.n	801600a <VerifyRfFreq+0x4a>
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) AU915_FIRST_RX1_CHANNEL ) % ( uint32_t ) AU915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8015ff0:	687a      	ldr	r2, [r7, #4]
 8015ff2:	4b11      	ldr	r3, [pc, #68]	@ (8016038 <VerifyRfFreq+0x78>)
 8015ff4:	4413      	add	r3, r2
 8015ff6:	4a11      	ldr	r2, [pc, #68]	@ (801603c <VerifyRfFreq+0x7c>)
 8015ff8:	fba2 1203 	umull	r1, r2, r2, r3
 8015ffc:	0c92      	lsrs	r2, r2, #18
 8015ffe:	4910      	ldr	r1, [pc, #64]	@ (8016040 <VerifyRfFreq+0x80>)
 8016000:	fb01 f202 	mul.w	r2, r1, r2
 8016004:	1a9a      	subs	r2, r3, r2
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
 8016006:	2a00      	cmp	r2, #0
 8016008:	d001      	beq.n	801600e <VerifyRfFreq+0x4e>
    {
        return false;
 801600a:	2300      	movs	r3, #0
 801600c:	e00a      	b.n	8016024 <VerifyRfFreq+0x64>
    }

    // Tx frequencies for 125kHz
    // Also includes the range for 500kHz channels
    if( ( freq < 915200000 ) ||  ( freq > 927800000 ) )
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	4a0c      	ldr	r2, [pc, #48]	@ (8016044 <VerifyRfFreq+0x84>)
 8016012:	4293      	cmp	r3, r2
 8016014:	d903      	bls.n	801601e <VerifyRfFreq+0x5e>
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	4a0b      	ldr	r2, [pc, #44]	@ (8016048 <VerifyRfFreq+0x88>)
 801601a:	4293      	cmp	r3, r2
 801601c:	d901      	bls.n	8016022 <VerifyRfFreq+0x62>
    {
        return false;
 801601e:	2300      	movs	r3, #0
 8016020:	e000      	b.n	8016024 <VerifyRfFreq+0x64>
    }
    return true;
 8016022:	2301      	movs	r3, #1
}
 8016024:	4618      	mov	r0, r3
 8016026:	3708      	adds	r7, #8
 8016028:	46bd      	mov	sp, r7
 801602a:	bd80      	pop	{r7, pc}
 801602c:	0801df78 	.word	0x0801df78
 8016030:	3708709f 	.word	0x3708709f
 8016034:	374886e0 	.word	0x374886e0
 8016038:	c8f78f60 	.word	0xc8f78f60
 801603c:	6fd91d85 	.word	0x6fd91d85
 8016040:	000927c0 	.word	0x000927c0
 8016044:	368cd7ff 	.word	0x368cd7ff
 8016048:	374d1ac0 	.word	0x374d1ac0

0801604c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801604c:	b590      	push	{r4, r7, lr}
 801604e:	b089      	sub	sp, #36	@ 0x24
 8016050:	af04      	add	r7, sp, #16
 8016052:	4603      	mov	r3, r0
 8016054:	460a      	mov	r2, r1
 8016056:	71fb      	strb	r3, [r7, #7]
 8016058:	4613      	mov	r3, r2
 801605a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesAU915[datarate];
 801605c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016060:	4a0f      	ldr	r2, [pc, #60]	@ (80160a0 <GetTimeOnAir+0x54>)
 8016062:	5cd3      	ldrb	r3, [r2, r3]
 8016064:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAU915 );
 8016066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801606a:	490e      	ldr	r1, [pc, #56]	@ (80160a4 <GetTimeOnAir+0x58>)
 801606c:	4618      	mov	r0, r3
 801606e:	f002 f997 	bl	80183a0 <RegionCommonGetBandwidth>
 8016072:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8016074:	4b0c      	ldr	r3, [pc, #48]	@ (80160a8 <GetTimeOnAir+0x5c>)
 8016076:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016078:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801607c:	88bb      	ldrh	r3, [r7, #4]
 801607e:	b2db      	uxtb	r3, r3
 8016080:	2101      	movs	r1, #1
 8016082:	9103      	str	r1, [sp, #12]
 8016084:	9302      	str	r3, [sp, #8]
 8016086:	2300      	movs	r3, #0
 8016088:	9301      	str	r3, [sp, #4]
 801608a:	2308      	movs	r3, #8
 801608c:	9300      	str	r3, [sp, #0]
 801608e:	2301      	movs	r3, #1
 8016090:	68b9      	ldr	r1, [r7, #8]
 8016092:	2001      	movs	r0, #1
 8016094:	47a0      	blx	r4
 8016096:	4603      	mov	r3, r0
}
 8016098:	4618      	mov	r0, r3
 801609a:	3714      	adds	r7, #20
 801609c:	46bd      	mov	sp, r7
 801609e:	bd90      	pop	{r4, r7, pc}
 80160a0:	0801debc 	.word	0x0801debc
 80160a4:	0801decc 	.word	0x0801decc
 80160a8:	0801df78 	.word	0x0801df78

080160ac <RegionAU915GetPhyParam>:
#endif /* REGION_AU915 */

PhyParam_t RegionAU915GetPhyParam( GetPhyParams_t* getPhy )
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b088      	sub	sp, #32
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80160b4:	2300      	movs	r3, #0
 80160b6:	61bb      	str	r3, [r7, #24]

#if defined( REGION_AU915 )
    switch( getPhy->Attribute )
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	781b      	ldrb	r3, [r3, #0]
 80160bc:	3b01      	subs	r3, #1
 80160be:	2b38      	cmp	r3, #56	@ 0x38
 80160c0:	f200 8167 	bhi.w	8016392 <RegionAU915GetPhyParam+0x2e6>
 80160c4:	a201      	add	r2, pc, #4	@ (adr r2, 80160cc <RegionAU915GetPhyParam+0x20>)
 80160c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160ca:	bf00      	nop
 80160cc:	080161b1 	.word	0x080161b1
 80160d0:	080161c5 	.word	0x080161c5
 80160d4:	08016393 	.word	0x08016393
 80160d8:	08016393 	.word	0x08016393
 80160dc:	08016393 	.word	0x08016393
 80160e0:	080161d9 	.word	0x080161d9
 80160e4:	08016393 	.word	0x08016393
 80160e8:	0801621f 	.word	0x0801621f
 80160ec:	08016393 	.word	0x08016393
 80160f0:	08016225 	.word	0x08016225
 80160f4:	0801622b 	.word	0x0801622b
 80160f8:	08016231 	.word	0x08016231
 80160fc:	08016237 	.word	0x08016237
 8016100:	0801625f 	.word	0x0801625f
 8016104:	08016287 	.word	0x08016287
 8016108:	0801628d 	.word	0x0801628d
 801610c:	08016295 	.word	0x08016295
 8016110:	0801629d 	.word	0x0801629d
 8016114:	080162a5 	.word	0x080162a5
 8016118:	080162ad 	.word	0x080162ad
 801611c:	080162b5 	.word	0x080162b5
 8016120:	080162bd 	.word	0x080162bd
 8016124:	080162d1 	.word	0x080162d1
 8016128:	080162d7 	.word	0x080162d7
 801612c:	080162dd 	.word	0x080162dd
 8016130:	080162e3 	.word	0x080162e3
 8016134:	080162ef 	.word	0x080162ef
 8016138:	080162fb 	.word	0x080162fb
 801613c:	08016301 	.word	0x08016301
 8016140:	08016309 	.word	0x08016309
 8016144:	0801630f 	.word	0x0801630f
 8016148:	08016315 	.word	0x08016315
 801614c:	0801631b 	.word	0x0801631b
 8016150:	080161df 	.word	0x080161df
 8016154:	08016393 	.word	0x08016393
 8016158:	08016393 	.word	0x08016393
 801615c:	08016393 	.word	0x08016393
 8016160:	08016393 	.word	0x08016393
 8016164:	08016393 	.word	0x08016393
 8016168:	08016393 	.word	0x08016393
 801616c:	08016393 	.word	0x08016393
 8016170:	08016393 	.word	0x08016393
 8016174:	08016393 	.word	0x08016393
 8016178:	08016393 	.word	0x08016393
 801617c:	08016393 	.word	0x08016393
 8016180:	08016393 	.word	0x08016393
 8016184:	08016393 	.word	0x08016393
 8016188:	08016321 	.word	0x08016321
 801618c:	08016335 	.word	0x08016335
 8016190:	08016343 	.word	0x08016343
 8016194:	08016349 	.word	0x08016349
 8016198:	08016393 	.word	0x08016393
 801619c:	0801634f 	.word	0x0801634f
 80161a0:	08016363 	.word	0x08016363
 80161a4:	08016369 	.word	0x08016369
 80161a8:	0801636f 	.word	0x0801636f
 80161ac:	0801637f 	.word	0x0801637f
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0)
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	78db      	ldrb	r3, [r3, #3]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d102      	bne.n	80161be <RegionAU915GetPhyParam+0x112>
            {
                phyParam.Value = AU915_RX_MIN_DATARATE;
 80161b8:	2308      	movs	r3, #8
 80161ba:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
            }
            break;
 80161bc:	e0ea      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
 80161be:	2302      	movs	r3, #2
 80161c0:	61bb      	str	r3, [r7, #24]
            break;
 80161c2:	e0e7      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0)
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	789b      	ldrb	r3, [r3, #2]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d102      	bne.n	80161d2 <RegionAU915GetPhyParam+0x126>
            {
                phyParam.Value = AU915_TX_MIN_DATARATE;
 80161cc:	2300      	movs	r3, #0
 80161ce:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
            }
            break;
 80161d0:	e0e0      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
 80161d2:	2302      	movs	r3, #2
 80161d4:	61bb      	str	r3, [r7, #24]
            break;
 80161d6:	e0dd      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AU915_DEFAULT_DATARATE;
 80161d8:	2302      	movs	r3, #2
 80161da:	61bb      	str	r3, [r7, #24]
            break;
 80161dc:	e0da      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80161e4:	733b      	strb	r3, [r7, #12]
 80161e6:	2306      	movs	r3, #6
 80161e8:	737b      	strb	r3, [r7, #13]
                .MaxDr = ( int8_t )AU915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AU915_TX_MIN_DATARATE : AU915_DWELL_LIMIT_DATARATE ),
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	789b      	ldrb	r3, [r3, #2]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d101      	bne.n	80161f6 <RegionAU915GetPhyParam+0x14a>
 80161f2:	2300      	movs	r3, #0
 80161f4:	e000      	b.n	80161f8 <RegionAU915GetPhyParam+0x14c>
 80161f6:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80161f8:	73bb      	strb	r3, [r7, #14]
 80161fa:	2348      	movs	r3, #72	@ 0x48
 80161fc:	73fb      	strb	r3, [r7, #15]
                .NbChannels = AU915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80161fe:	4b69      	ldr	r3, [pc, #420]	@ (80163a4 <RegionAU915GetPhyParam+0x2f8>)
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016206:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8016208:	4b66      	ldr	r3, [pc, #408]	@ (80163a4 <RegionAU915GetPhyParam+0x2f8>)
 801620a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801620c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801620e:	f107 030c 	add.w	r3, r7, #12
 8016212:	4618      	mov	r0, r3
 8016214:	f002 f871 	bl	80182fa <RegionCommonGetNextLowerTxDr>
 8016218:	4603      	mov	r3, r0
 801621a:	61bb      	str	r3, [r7, #24]
            break;
 801621c:	e0ba      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AU915_MAX_TX_POWER;
 801621e:	2300      	movs	r3, #0
 8016220:	61bb      	str	r3, [r7, #24]
            break;
 8016222:	e0b7      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AU915_DEFAULT_TX_POWER;
 8016224:	2300      	movs	r3, #0
 8016226:	61bb      	str	r3, [r7, #24]
            break;
 8016228:	e0b4      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801622a:	2340      	movs	r3, #64	@ 0x40
 801622c:	61bb      	str	r3, [r7, #24]
            break;
 801622e:	e0b1      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8016230:	2320      	movs	r3, #32
 8016232:	61bb      	str	r3, [r7, #24]
            break;
 8016234:	e0ae      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	789b      	ldrb	r3, [r3, #2]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d107      	bne.n	801624e <RegionAU915GetPhyParam+0x1a2>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016244:	461a      	mov	r2, r3
 8016246:	4b58      	ldr	r3, [pc, #352]	@ (80163a8 <RegionAU915GetPhyParam+0x2fc>)
 8016248:	5c9b      	ldrb	r3, [r3, r2]
 801624a:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
            }
            break;
 801624c:	e0a2      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016254:	461a      	mov	r2, r3
 8016256:	4b55      	ldr	r3, [pc, #340]	@ (80163ac <RegionAU915GetPhyParam+0x300>)
 8016258:	5c9b      	ldrb	r3, [r3, r2]
 801625a:	61bb      	str	r3, [r7, #24]
            break;
 801625c:	e09a      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0)
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	789b      	ldrb	r3, [r3, #2]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d107      	bne.n	8016276 <RegionAU915GetPhyParam+0x1ca>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801626c:	461a      	mov	r2, r3
 801626e:	4b50      	ldr	r3, [pc, #320]	@ (80163b0 <RegionAU915GetPhyParam+0x304>)
 8016270:	5c9b      	ldrb	r3, [r3, r2]
 8016272:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
            }
            break;
 8016274:	e08e      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801627c:	461a      	mov	r2, r3
 801627e:	4b4d      	ldr	r3, [pc, #308]	@ (80163b4 <RegionAU915GetPhyParam+0x308>)
 8016280:	5c9b      	ldrb	r3, [r3, r2]
 8016282:	61bb      	str	r3, [r7, #24]
            break;
 8016284:	e086      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AU915_DUTY_CYCLE_ENABLED;
 8016286:	2300      	movs	r3, #0
 8016288:	61bb      	str	r3, [r7, #24]
            break;
 801628a:	e083      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AU915_MAX_RX_WINDOW;
 801628c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8016290:	61bb      	str	r3, [r7, #24]
            break;
 8016292:	e07f      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8016294:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016298:	61bb      	str	r3, [r7, #24]
            break;
 801629a:	e07b      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801629c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80162a0:	61bb      	str	r3, [r7, #24]
            break;
 80162a2:	e077      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80162a4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80162a8:	61bb      	str	r3, [r7, #24]
            break;
 80162aa:	e073      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80162ac:	f241 7370 	movw	r3, #6000	@ 0x1770
 80162b0:	61bb      	str	r3, [r7, #24]
            break;
 80162b2:	e06f      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80162b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80162b8:	61bb      	str	r3, [r7, #24]
            break;
 80162ba:	e06b      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80162bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80162c0:	483d      	ldr	r0, [pc, #244]	@ (80163b8 <RegionAU915GetPhyParam+0x30c>)
 80162c2:	f002 f905 	bl	80184d0 <randr>
 80162c6:	4603      	mov	r3, r0
 80162c8:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80162cc:	61bb      	str	r3, [r7, #24]
            break;
 80162ce:	e061      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80162d0:	2300      	movs	r3, #0
 80162d2:	61bb      	str	r3, [r7, #24]
            break;
 80162d4:	e05e      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AU915_RX_WND_2_FREQ;
 80162d6:	4b39      	ldr	r3, [pc, #228]	@ (80163bc <RegionAU915GetPhyParam+0x310>)
 80162d8:	61bb      	str	r3, [r7, #24]
            break;
 80162da:	e05b      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AU915_RX_WND_2_DR;
 80162dc:	2308      	movs	r3, #8
 80162de:	61bb      	str	r3, [r7, #24]
            break;
 80162e0:	e058      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80162e2:	4b30      	ldr	r3, [pc, #192]	@ (80163a4 <RegionAU915GetPhyParam+0x2f8>)
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80162ea:	61bb      	str	r3, [r7, #24]
            break;
 80162ec:	e052      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80162ee:	4b2d      	ldr	r3, [pc, #180]	@ (80163a4 <RegionAU915GetPhyParam+0x2f8>)
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 80162f6:	61bb      	str	r3, [r7, #24]
            break;
 80162f8:	e04c      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AU915_MAX_NB_CHANNELS;
 80162fa:	2348      	movs	r3, #72	@ 0x48
 80162fc:	61bb      	str	r3, [r7, #24]
            break;
 80162fe:	e049      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8016300:	4b28      	ldr	r3, [pc, #160]	@ (80163a4 <RegionAU915GetPhyParam+0x2f8>)
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	61bb      	str	r3, [r7, #24]
            break;
 8016306:	e045      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AU915_DEFAULT_UPLINK_DWELL_TIME;
 8016308:	2301      	movs	r3, #1
 801630a:	61bb      	str	r3, [r7, #24]
            break;
 801630c:	e042      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801630e:	2300      	movs	r3, #0
 8016310:	61bb      	str	r3, [r7, #24]
            break;
 8016312:	e03f      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 8016314:	4b2a      	ldr	r3, [pc, #168]	@ (80163c0 <RegionAU915GetPhyParam+0x314>)
 8016316:	61bb      	str	r3, [r7, #24]
            break;
 8016318:	e03c      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 801631a:	4b2a      	ldr	r3, [pc, #168]	@ (80163c4 <RegionAU915GetPhyParam+0x318>)
 801631c:	61bb      	str	r3, [r7, #24]
            break;
 801631e:	e039      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	791b      	ldrb	r3, [r3, #4]
 8016324:	4a28      	ldr	r2, [pc, #160]	@ (80163c8 <RegionAU915GetPhyParam+0x31c>)
 8016326:	4925      	ldr	r1, [pc, #148]	@ (80163bc <RegionAU915GetPhyParam+0x310>)
 8016328:	4618      	mov	r0, r3
 801632a:	f001 f958 	bl	80175de <RegionBaseUSCalcDownlinkFrequency>
 801632e:	4603      	mov	r3, r0
 8016330:	61bb      	str	r3, [r7, #24]
                                                                AU915_BEACON_CHANNEL_FREQ,
                                                                AU915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8016332:	e02f      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AU915_BEACON_SIZE;
 8016334:	2313      	movs	r3, #19
 8016336:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = AU915_RFU1_SIZE;
 8016338:	2303      	movs	r3, #3
 801633a:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = AU915_RFU2_SIZE;
 801633c:	2301      	movs	r3, #1
 801633e:	76bb      	strb	r3, [r7, #26]
            break;
 8016340:	e028      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AU915_BEACON_CHANNEL_DR;
 8016342:	2308      	movs	r3, #8
 8016344:	61bb      	str	r3, [r7, #24]
            break;
 8016346:	e025      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = AU915_BEACON_NB_CHANNELS;
 8016348:	2308      	movs	r3, #8
 801634a:	61bb      	str	r3, [r7, #24]
            break;
 801634c:	e022      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	791b      	ldrb	r3, [r3, #4]
 8016352:	4a1d      	ldr	r2, [pc, #116]	@ (80163c8 <RegionAU915GetPhyParam+0x31c>)
 8016354:	4919      	ldr	r1, [pc, #100]	@ (80163bc <RegionAU915GetPhyParam+0x310>)
 8016356:	4618      	mov	r0, r3
 8016358:	f001 f941 	bl	80175de <RegionBaseUSCalcDownlinkFrequency>
 801635c:	4603      	mov	r3, r0
 801635e:	61bb      	str	r3, [r7, #24]
                                                                AU915_PING_SLOT_CHANNEL_FREQ,
                                                                AU915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8016360:	e018      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AU915_PING_SLOT_CHANNEL_DR;
 8016362:	2308      	movs	r3, #8
 8016364:	61bb      	str	r3, [r7, #24]
            break;
 8016366:	e015      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = AU915_BEACON_NB_CHANNELS;
 8016368:	2308      	movs	r3, #8
 801636a:	61bb      	str	r3, [r7, #24]
            break;
 801636c:	e012      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesAU915[getPhy->Datarate];
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016374:	461a      	mov	r2, r3
 8016376:	4b15      	ldr	r3, [pc, #84]	@ (80163cc <RegionAU915GetPhyParam+0x320>)
 8016378:	5c9b      	ldrb	r3, [r3, r2]
 801637a:	61bb      	str	r3, [r7, #24]
            break;
 801637c:	e00a      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAU915 );
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016384:	4912      	ldr	r1, [pc, #72]	@ (80163d0 <RegionAU915GetPhyParam+0x324>)
 8016386:	4618      	mov	r0, r3
 8016388:	f002 f80a 	bl	80183a0 <RegionCommonGetBandwidth>
 801638c:	4603      	mov	r3, r0
 801638e:	61bb      	str	r3, [r7, #24]
            break;
 8016390:	e000      	b.n	8016394 <RegionAU915GetPhyParam+0x2e8>
        }
        default:
        {
            break;
 8016392:	bf00      	nop
        }
    }

#endif /* REGION_AU915 */
    return phyParam;
 8016394:	69bb      	ldr	r3, [r7, #24]
 8016396:	61fb      	str	r3, [r7, #28]
 8016398:	69fb      	ldr	r3, [r7, #28]
}
 801639a:	4618      	mov	r0, r3
 801639c:	3720      	adds	r7, #32
 801639e:	46bd      	mov	sp, r7
 80163a0:	bd80      	pop	{r7, pc}
 80163a2:	bf00      	nop
 80163a4:	20001c3c 	.word	0x20001c3c
 80163a8:	0801df38 	.word	0x0801df38
 80163ac:	0801df58 	.word	0x0801df58
 80163b0:	0801df48 	.word	0x0801df48
 80163b4:	0801df68 	.word	0x0801df68
 80163b8:	fffffc18 	.word	0xfffffc18
 80163bc:	370870a0 	.word	0x370870a0
 80163c0:	41f00000 	.word	0x41f00000
 80163c4:	4009999a 	.word	0x4009999a
 80163c8:	000927c0 	.word	0x000927c0
 80163cc:	0801debc 	.word	0x0801debc
 80163d0:	0801decc 	.word	0x0801decc

080163d4 <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80163d4:	b590      	push	{r4, r7, lr}
 80163d6:	b085      	sub	sp, #20
 80163d8:	af02      	add	r7, sp, #8
 80163da:	6078      	str	r0, [r7, #4]
#if defined( REGION_AU915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80163dc:	4b11      	ldr	r3, [pc, #68]	@ (8016424 <RegionAU915SetBandTxDone+0x50>)
 80163de:	681a      	ldr	r2, [r3, #0]
 80163e0:	4b11      	ldr	r3, [pc, #68]	@ (8016428 <RegionAU915SetBandTxDone+0x54>)
 80163e2:	6819      	ldr	r1, [r3, #0]
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	781b      	ldrb	r3, [r3, #0]
 80163e8:	4618      	mov	r0, r3
 80163ea:	4603      	mov	r3, r0
 80163ec:	005b      	lsls	r3, r3, #1
 80163ee:	4403      	add	r3, r0
 80163f0:	009b      	lsls	r3, r3, #2
 80163f2:	440b      	add	r3, r1
 80163f4:	3309      	adds	r3, #9
 80163f6:	781b      	ldrb	r3, [r3, #0]
 80163f8:	4619      	mov	r1, r3
 80163fa:	460b      	mov	r3, r1
 80163fc:	005b      	lsls	r3, r3, #1
 80163fe:	440b      	add	r3, r1
 8016400:	00db      	lsls	r3, r3, #3
 8016402:	18d0      	adds	r0, r2, r3
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	6899      	ldr	r1, [r3, #8]
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	785c      	ldrb	r4, [r3, #1]
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	691a      	ldr	r2, [r3, #16]
 8016410:	9200      	str	r2, [sp, #0]
 8016412:	68db      	ldr	r3, [r3, #12]
 8016414:	4622      	mov	r2, r4
 8016416:	f001 fb59 	bl	8017acc <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AU915 */
}
 801641a:	bf00      	nop
 801641c:	370c      	adds	r7, #12
 801641e:	46bd      	mov	sp, r7
 8016420:	bd90      	pop	{r4, r7, pc}
 8016422:	bf00      	nop
 8016424:	20001c38 	.word	0x20001c38
 8016428:	20001c3c 	.word	0x20001c3c

0801642c <RegionAU915InitDefaults>:

void RegionAU915InitDefaults( InitDefaultsParams_t* params )
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b08a      	sub	sp, #40	@ 0x28
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
#if defined( REGION_AU915 )
    Band_t bands[AU915_MAX_NB_BANDS] =
 8016434:	2301      	movs	r3, #1
 8016436:	81bb      	strh	r3, [r7, #12]
 8016438:	2300      	movs	r3, #0
 801643a:	73bb      	strb	r3, [r7, #14]
 801643c:	2300      	movs	r3, #0
 801643e:	613b      	str	r3, [r7, #16]
 8016440:	2300      	movs	r3, #0
 8016442:	617b      	str	r3, [r7, #20]
 8016444:	2300      	movs	r3, #0
 8016446:	61bb      	str	r3, [r7, #24]
 8016448:	2300      	movs	r3, #0
 801644a:	61fb      	str	r3, [r7, #28]
 801644c:	2300      	movs	r3, #0
 801644e:	f887 3020 	strb.w	r3, [r7, #32]
    {
        AU915_BAND0
    };

    switch( params->Type )
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	7a1b      	ldrb	r3, [r3, #8]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d007      	beq.n	801646a <RegionAU915InitDefaults+0x3e>
 801645a:	2b00      	cmp	r3, #0
 801645c:	f2c0 8106 	blt.w	801666c <RegionAU915InitDefaults+0x240>
 8016460:	3b01      	subs	r3, #1
 8016462:	2b01      	cmp	r3, #1
 8016464:	f200 8102 	bhi.w	801666c <RegionAU915InitDefaults+0x240>
 8016468:	e0ce      	b.n	8016608 <RegionAU915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	2b00      	cmp	r3, #0
 8016470:	f000 80fe 	beq.w	8016670 <RegionAU915InitDefaults+0x244>
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	685b      	ldr	r3, [r3, #4]
 8016478:	2b00      	cmp	r3, #0
 801647a:	f000 80f9 	beq.w	8016670 <RegionAU915InitDefaults+0x244>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	4a7d      	ldr	r2, [pc, #500]	@ (8016678 <RegionAU915InitDefaults+0x24c>)
 8016484:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	685b      	ldr	r3, [r3, #4]
 801648a:	4a7c      	ldr	r2, [pc, #496]	@ (801667c <RegionAU915InitDefaults+0x250>)
 801648c:	6013      	str	r3, [r2, #0]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
#endif /* REGION_VERSION */

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801648e:	4b7a      	ldr	r3, [pc, #488]	@ (8016678 <RegionAU915InitDefaults+0x24c>)
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	2200      	movs	r2, #0
 8016494:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8016498:	4b77      	ldr	r3, [pc, #476]	@ (8016678 <RegionAU915InitDefaults+0x24c>)
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	2200      	movs	r2, #0
 801649e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

            // Default bands
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 80164a2:	4b75      	ldr	r3, [pc, #468]	@ (8016678 <RegionAU915InitDefaults+0x24c>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	4618      	mov	r0, r3
 80164a8:	f107 030c 	add.w	r3, r7, #12
 80164ac:	2218      	movs	r2, #24
 80164ae:	4619      	mov	r1, r3
 80164b0:	f002 f825 	bl	80184fe <memcpy1>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
#endif /* REGION_VERSION */

            // Channels
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 80164b4:	2300      	movs	r3, #0
 80164b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80164ba:	e02e      	b.n	801651a <RegionAU915InitDefaults+0xee>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 915200000 + i * 200000;
 80164bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80164c0:	4a6f      	ldr	r2, [pc, #444]	@ (8016680 <RegionAU915InitDefaults+0x254>)
 80164c2:	fb03 f202 	mul.w	r2, r3, r2
 80164c6:	4b6f      	ldr	r3, [pc, #444]	@ (8016684 <RegionAU915InitDefaults+0x258>)
 80164c8:	4413      	add	r3, r2
 80164ca:	4a6c      	ldr	r2, [pc, #432]	@ (801667c <RegionAU915InitDefaults+0x250>)
 80164cc:	6811      	ldr	r1, [r2, #0]
 80164ce:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80164d2:	4618      	mov	r0, r3
 80164d4:	4613      	mov	r3, r2
 80164d6:	005b      	lsls	r3, r3, #1
 80164d8:	4413      	add	r3, r2
 80164da:	009b      	lsls	r3, r3, #2
 80164dc:	440b      	add	r3, r1
 80164de:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80164e0:	4b66      	ldr	r3, [pc, #408]	@ (801667c <RegionAU915InitDefaults+0x250>)
 80164e2:	6819      	ldr	r1, [r3, #0]
 80164e4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80164e8:	4613      	mov	r3, r2
 80164ea:	005b      	lsls	r3, r3, #1
 80164ec:	4413      	add	r3, r2
 80164ee:	009b      	lsls	r3, r3, #2
 80164f0:	440b      	add	r3, r1
 80164f2:	3308      	adds	r3, #8
 80164f4:	2250      	movs	r2, #80	@ 0x50
 80164f6:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80164f8:	4b60      	ldr	r3, [pc, #384]	@ (801667c <RegionAU915InitDefaults+0x250>)
 80164fa:	6819      	ldr	r1, [r3, #0]
 80164fc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8016500:	4613      	mov	r3, r2
 8016502:	005b      	lsls	r3, r3, #1
 8016504:	4413      	add	r3, r2
 8016506:	009b      	lsls	r3, r3, #2
 8016508:	440b      	add	r3, r1
 801650a:	3309      	adds	r3, #9
 801650c:	2200      	movs	r2, #0
 801650e:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 8016510:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016514:	3301      	adds	r3, #1
 8016516:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801651a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801651e:	2b3f      	cmp	r3, #63	@ 0x3f
 8016520:	d9cc      	bls.n	80164bc <RegionAU915InitDefaults+0x90>
            }
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 8016522:	2340      	movs	r3, #64	@ 0x40
 8016524:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016528:	e02f      	b.n	801658a <RegionAU915InitDefaults+0x15e>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 915900000 + ( i - ( AU915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801652a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801652e:	3b40      	subs	r3, #64	@ 0x40
 8016530:	4a55      	ldr	r2, [pc, #340]	@ (8016688 <RegionAU915InitDefaults+0x25c>)
 8016532:	fb03 f202 	mul.w	r2, r3, r2
 8016536:	4b55      	ldr	r3, [pc, #340]	@ (801668c <RegionAU915InitDefaults+0x260>)
 8016538:	4413      	add	r3, r2
 801653a:	4a50      	ldr	r2, [pc, #320]	@ (801667c <RegionAU915InitDefaults+0x250>)
 801653c:	6811      	ldr	r1, [r2, #0]
 801653e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8016542:	4618      	mov	r0, r3
 8016544:	4613      	mov	r3, r2
 8016546:	005b      	lsls	r3, r3, #1
 8016548:	4413      	add	r3, r2
 801654a:	009b      	lsls	r3, r3, #2
 801654c:	440b      	add	r3, r1
 801654e:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 8016550:	4b4a      	ldr	r3, [pc, #296]	@ (801667c <RegionAU915InitDefaults+0x250>)
 8016552:	6819      	ldr	r1, [r3, #0]
 8016554:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8016558:	4613      	mov	r3, r2
 801655a:	005b      	lsls	r3, r3, #1
 801655c:	4413      	add	r3, r2
 801655e:	009b      	lsls	r3, r3, #2
 8016560:	440b      	add	r3, r1
 8016562:	3308      	adds	r3, #8
 8016564:	2266      	movs	r2, #102	@ 0x66
 8016566:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8016568:	4b44      	ldr	r3, [pc, #272]	@ (801667c <RegionAU915InitDefaults+0x250>)
 801656a:	6819      	ldr	r1, [r3, #0]
 801656c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8016570:	4613      	mov	r3, r2
 8016572:	005b      	lsls	r3, r3, #1
 8016574:	4413      	add	r3, r2
 8016576:	009b      	lsls	r3, r3, #2
 8016578:	440b      	add	r3, r1
 801657a:	3309      	adds	r3, #9
 801657c:	2200      	movs	r2, #0
 801657e:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 8016580:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016584:	3301      	adds	r3, #1
 8016586:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801658a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801658e:	2b47      	cmp	r3, #71	@ 0x47
 8016590:	d9cb      	bls.n	801652a <RegionAU915InitDefaults+0xfe>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8016592:	4b3a      	ldr	r3, [pc, #232]	@ (801667c <RegionAU915InitDefaults+0x250>)
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801659a:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801659e:	4b37      	ldr	r3, [pc, #220]	@ (801667c <RegionAU915InitDefaults+0x250>)
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80165a6:	f8a3 248e 	strh.w	r2, [r3, #1166]	@ 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 80165aa:	4b34      	ldr	r3, [pc, #208]	@ (801667c <RegionAU915InitDefaults+0x250>)
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80165b2:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 80165b6:	4b31      	ldr	r3, [pc, #196]	@ (801667c <RegionAU915InitDefaults+0x250>)
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80165be:	f8a3 2492 	strh.w	r2, [r3, #1170]	@ 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 80165c2:	4b2e      	ldr	r3, [pc, #184]	@ (801667c <RegionAU915InitDefaults+0x250>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	22ff      	movs	r2, #255	@ 0xff
 80165c8:	f8a3 2494 	strh.w	r2, [r3, #1172]	@ 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80165cc:	4b2b      	ldr	r3, [pc, #172]	@ (801667c <RegionAU915InitDefaults+0x250>)
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	2200      	movs	r2, #0
 80165d2:	f8a3 2496 	strh.w	r2, [r3, #1174]	@ 0x496
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80165d6:	4b29      	ldr	r3, [pc, #164]	@ (801667c <RegionAU915InitDefaults+0x250>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 80165de:	4b27      	ldr	r3, [pc, #156]	@ (801667c <RegionAU915InitDefaults+0x250>)
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 80165e6:	2206      	movs	r2, #6
 80165e8:	4619      	mov	r1, r3
 80165ea:	f001 fa49 	bl	8017a80 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80165ee:	4b22      	ldr	r3, [pc, #136]	@ (8016678 <RegionAU915InitDefaults+0x24c>)
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80165f6:	4b21      	ldr	r3, [pc, #132]	@ (801667c <RegionAU915InitDefaults+0x250>)
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80165fe:	2206      	movs	r2, #6
 8016600:	4619      	mov	r1, r3
 8016602:	f001 fa3d 	bl	8017a80 <RegionCommonChanMaskCopy>
            break;
 8016606:	e034      	b.n	8016672 <RegionAU915InitDefaults+0x246>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016608:	4b1c      	ldr	r3, [pc, #112]	@ (801667c <RegionAU915InitDefaults+0x250>)
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8016610:	4b1a      	ldr	r3, [pc, #104]	@ (801667c <RegionAU915InitDefaults+0x250>)
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8016618:	2206      	movs	r2, #6
 801661a:	4619      	mov	r1, r3
 801661c:	f001 fa30 	bl	8017a80 <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8016620:	2300      	movs	r3, #0
 8016622:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8016626:	e01c      	b.n	8016662 <RegionAU915InitDefaults+0x236>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8016628:	4b13      	ldr	r3, [pc, #76]	@ (8016678 <RegionAU915InitDefaults+0x24c>)
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8016630:	3248      	adds	r2, #72	@ 0x48
 8016632:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8016636:	4b11      	ldr	r3, [pc, #68]	@ (801667c <RegionAU915InitDefaults+0x250>)
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 801663e:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016642:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8016646:	4b0c      	ldr	r3, [pc, #48]	@ (8016678 <RegionAU915InitDefaults+0x24c>)
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 801664e:	4001      	ands	r1, r0
 8016650:	b289      	uxth	r1, r1
 8016652:	3248      	adds	r2, #72	@ 0x48
 8016654:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8016658:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801665c:	3301      	adds	r3, #1
 801665e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8016662:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8016666:	2b05      	cmp	r3, #5
 8016668:	d9de      	bls.n	8016628 <RegionAU915InitDefaults+0x1fc>
            }
            break;
 801666a:	e002      	b.n	8016672 <RegionAU915InitDefaults+0x246>
        }
        default:
        {
            break;
 801666c:	bf00      	nop
 801666e:	e000      	b.n	8016672 <RegionAU915InitDefaults+0x246>
                return;
 8016670:	bf00      	nop
        }
    }
#endif /* REGION_AU915 */
}
 8016672:	3728      	adds	r7, #40	@ 0x28
 8016674:	46bd      	mov	sp, r7
 8016676:	bd80      	pop	{r7, pc}
 8016678:	20001c38 	.word	0x20001c38
 801667c:	20001c3c 	.word	0x20001c3c
 8016680:	00030d40 	.word	0x00030d40
 8016684:	368cd800 	.word	0x368cd800
 8016688:	00186a00 	.word	0x00186a00
 801668c:	36978660 	.word	0x36978660

08016690 <RegionAU915Verify>:

bool RegionAU915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b082      	sub	sp, #8
 8016694:	af00      	add	r7, sp, #0
 8016696:	6078      	str	r0, [r7, #4]
 8016698:	460b      	mov	r3, r1
 801669a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_AU915 )
    switch( phyAttribute )
 801669c:	78fb      	ldrb	r3, [r7, #3]
 801669e:	2b0f      	cmp	r3, #15
 80166a0:	d87e      	bhi.n	80167a0 <RegionAU915Verify+0x110>
 80166a2:	a201      	add	r2, pc, #4	@ (adr r2, 80166a8 <RegionAU915Verify+0x18>)
 80166a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166a8:	080166e9 	.word	0x080166e9
 80166ac:	080167a1 	.word	0x080167a1
 80166b0:	080167a1 	.word	0x080167a1
 80166b4:	080167a1 	.word	0x080167a1
 80166b8:	080167a1 	.word	0x080167a1
 80166bc:	080166f7 	.word	0x080166f7
 80166c0:	080166f7 	.word	0x080166f7
 80166c4:	0801673b 	.word	0x0801673b
 80166c8:	080167a1 	.word	0x080167a1
 80166cc:	0801677f 	.word	0x0801677f
 80166d0:	0801677f 	.word	0x0801677f
 80166d4:	080167a1 	.word	0x080167a1
 80166d8:	080167a1 	.word	0x080167a1
 80166dc:	080167a1 	.word	0x080167a1
 80166e0:	080167a1 	.word	0x080167a1
 80166e4:	0801679d 	.word	0x0801679d
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	4618      	mov	r0, r3
 80166ee:	f7ff fc67 	bl	8015fc0 <VerifyRfFreq>
 80166f2:	4603      	mov	r3, r0
 80166f4:	e055      	b.n	80167a2 <RegionAU915Verify+0x112>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	789b      	ldrb	r3, [r3, #2]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d10e      	bne.n	801671c <RegionAU915Verify+0x8c>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_TX_MIN_DATARATE, AU915_TX_MAX_DATARATE );
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	f993 3000 	ldrsb.w	r3, [r3]
 8016704:	2206      	movs	r2, #6
 8016706:	2100      	movs	r1, #0
 8016708:	4618      	mov	r0, r3
 801670a:	f001 f93c 	bl	8017986 <RegionCommonValueInRange>
 801670e:	4603      	mov	r3, r0
 8016710:	2b00      	cmp	r3, #0
 8016712:	bf14      	ite	ne
 8016714:	2301      	movne	r3, #1
 8016716:	2300      	moveq	r3, #0
 8016718:	b2db      	uxtb	r3, r3
 801671a:	e042      	b.n	80167a2 <RegionAU915Verify+0x112>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_TX_MAX_DATARATE );
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	f993 3000 	ldrsb.w	r3, [r3]
 8016722:	2206      	movs	r2, #6
 8016724:	2102      	movs	r1, #2
 8016726:	4618      	mov	r0, r3
 8016728:	f001 f92d 	bl	8017986 <RegionCommonValueInRange>
 801672c:	4603      	mov	r3, r0
 801672e:	2b00      	cmp	r3, #0
 8016730:	bf14      	ite	ne
 8016732:	2301      	movne	r3, #1
 8016734:	2300      	moveq	r3, #0
 8016736:	b2db      	uxtb	r3, r3
 8016738:	e033      	b.n	80167a2 <RegionAU915Verify+0x112>
            }
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	789b      	ldrb	r3, [r3, #2]
 801673e:	2b00      	cmp	r3, #0
 8016740:	d10e      	bne.n	8016760 <RegionAU915Verify+0xd0>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	f993 3000 	ldrsb.w	r3, [r3]
 8016748:	220d      	movs	r2, #13
 801674a:	2108      	movs	r1, #8
 801674c:	4618      	mov	r0, r3
 801674e:	f001 f91a 	bl	8017986 <RegionCommonValueInRange>
 8016752:	4603      	mov	r3, r0
 8016754:	2b00      	cmp	r3, #0
 8016756:	bf14      	ite	ne
 8016758:	2301      	movne	r3, #1
 801675a:	2300      	moveq	r3, #0
 801675c:	b2db      	uxtb	r3, r3
 801675e:	e020      	b.n	80167a2 <RegionAU915Verify+0x112>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_RX_MAX_DATARATE );
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	f993 3000 	ldrsb.w	r3, [r3]
 8016766:	220d      	movs	r2, #13
 8016768:	2102      	movs	r1, #2
 801676a:	4618      	mov	r0, r3
 801676c:	f001 f90b 	bl	8017986 <RegionCommonValueInRange>
 8016770:	4603      	mov	r3, r0
 8016772:	2b00      	cmp	r3, #0
 8016774:	bf14      	ite	ne
 8016776:	2301      	movne	r3, #1
 8016778:	2300      	moveq	r3, #0
 801677a:	b2db      	uxtb	r3, r3
 801677c:	e011      	b.n	80167a2 <RegionAU915Verify+0x112>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	f993 3000 	ldrsb.w	r3, [r3]
 8016784:	220e      	movs	r2, #14
 8016786:	2100      	movs	r1, #0
 8016788:	4618      	mov	r0, r3
 801678a:	f001 f8fc 	bl	8017986 <RegionCommonValueInRange>
 801678e:	4603      	mov	r3, r0
 8016790:	2b00      	cmp	r3, #0
 8016792:	bf14      	ite	ne
 8016794:	2301      	movne	r3, #1
 8016796:	2300      	moveq	r3, #0
 8016798:	b2db      	uxtb	r3, r3
 801679a:	e002      	b.n	80167a2 <RegionAU915Verify+0x112>
        }
        case PHY_DUTY_CYCLE:
        {
            return AU915_DUTY_CYCLE_ENABLED;
 801679c:	2300      	movs	r3, #0
 801679e:	e000      	b.n	80167a2 <RegionAU915Verify+0x112>
        }
        default:
            return false;
 80167a0:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_AU915 */
}
 80167a2:	4618      	mov	r0, r3
 80167a4:	3708      	adds	r7, #8
 80167a6:	46bd      	mov	sp, r7
 80167a8:	bd80      	pop	{r7, pc}
 80167aa:	bf00      	nop

080167ac <RegionAU915ApplyCFList>:

void RegionAU915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80167ac:	b480      	push	{r7}
 80167ae:	b085      	sub	sp, #20
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
#if defined( REGION_AU915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	791b      	ldrb	r3, [r3, #4]
 80167b8:	2b10      	cmp	r3, #16
 80167ba:	d160      	bne.n	801687e <RegionAU915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	330f      	adds	r3, #15
 80167c2:	781b      	ldrb	r3, [r3, #0]
 80167c4:	2b01      	cmp	r3, #1
 80167c6:	d15c      	bne.n	8016882 <RegionAU915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80167c8:	2300      	movs	r3, #0
 80167ca:	73fb      	strb	r3, [r7, #15]
 80167cc:	2300      	movs	r3, #0
 80167ce:	73bb      	strb	r3, [r7, #14]
 80167d0:	e051      	b.n	8016876 <RegionAU915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	681a      	ldr	r2, [r3, #0]
 80167d6:	7bbb      	ldrb	r3, [r7, #14]
 80167d8:	4413      	add	r3, r2
 80167da:	7819      	ldrb	r1, [r3, #0]
 80167dc:	4b2b      	ldr	r3, [pc, #172]	@ (801688c <RegionAU915ApplyCFList+0xe0>)
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	7bfa      	ldrb	r2, [r7, #15]
 80167e2:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 80167e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 80167ea:	4b28      	ldr	r3, [pc, #160]	@ (801688c <RegionAU915ApplyCFList+0xe0>)
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	7bfa      	ldrb	r2, [r7, #15]
 80167f0:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 80167f4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	681a      	ldr	r2, [r3, #0]
 80167fc:	7bbb      	ldrb	r3, [r7, #14]
 80167fe:	3301      	adds	r3, #1
 8016800:	4413      	add	r3, r2
 8016802:	781b      	ldrb	r3, [r3, #0]
 8016804:	021b      	lsls	r3, r3, #8
 8016806:	b299      	uxth	r1, r3
 8016808:	4b20      	ldr	r3, [pc, #128]	@ (801688c <RegionAU915ApplyCFList+0xe0>)
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	7bfa      	ldrb	r2, [r7, #15]
 801680e:	4301      	orrs	r1, r0
 8016810:	b289      	uxth	r1, r1
 8016812:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016816:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801681a:	7bfb      	ldrb	r3, [r7, #15]
 801681c:	2b04      	cmp	r3, #4
 801681e:	d10f      	bne.n	8016840 <RegionAU915ApplyCFList+0x94>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8016820:	4b1a      	ldr	r3, [pc, #104]	@ (801688c <RegionAU915ApplyCFList+0xe0>)
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	7bfa      	ldrb	r2, [r7, #15]
 8016826:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 801682a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801682e:	4b17      	ldr	r3, [pc, #92]	@ (801688c <RegionAU915ApplyCFList+0xe0>)
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	7bfa      	ldrb	r2, [r7, #15]
 8016834:	b2c9      	uxtb	r1, r1
 8016836:	b289      	uxth	r1, r1
 8016838:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 801683c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8016840:	4b13      	ldr	r3, [pc, #76]	@ (8016890 <RegionAU915ApplyCFList+0xe4>)
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	7bfa      	ldrb	r2, [r7, #15]
 8016846:	3248      	adds	r2, #72	@ 0x48
 8016848:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801684c:	4b0f      	ldr	r3, [pc, #60]	@ (801688c <RegionAU915ApplyCFList+0xe0>)
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	7bfa      	ldrb	r2, [r7, #15]
 8016852:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016856:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801685a:	4b0d      	ldr	r3, [pc, #52]	@ (8016890 <RegionAU915ApplyCFList+0xe4>)
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	7bfa      	ldrb	r2, [r7, #15]
 8016860:	4001      	ands	r1, r0
 8016862:	b289      	uxth	r1, r1
 8016864:	3248      	adds	r2, #72	@ 0x48
 8016866:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801686a:	7bfb      	ldrb	r3, [r7, #15]
 801686c:	3301      	adds	r3, #1
 801686e:	73fb      	strb	r3, [r7, #15]
 8016870:	7bbb      	ldrb	r3, [r7, #14]
 8016872:	3302      	adds	r3, #2
 8016874:	73bb      	strb	r3, [r7, #14]
 8016876:	7bfb      	ldrb	r3, [r7, #15]
 8016878:	2b04      	cmp	r3, #4
 801687a:	d9aa      	bls.n	80167d2 <RegionAU915ApplyCFList+0x26>
 801687c:	e002      	b.n	8016884 <RegionAU915ApplyCFList+0xd8>
        return;
 801687e:	bf00      	nop
 8016880:	e000      	b.n	8016884 <RegionAU915ApplyCFList+0xd8>
        return;
 8016882:	bf00      	nop
    }
#endif /* REGION_AU915 */
}
 8016884:	3714      	adds	r7, #20
 8016886:	46bd      	mov	sp, r7
 8016888:	bc80      	pop	{r7}
 801688a:	4770      	bx	lr
 801688c:	20001c3c 	.word	0x20001c3c
 8016890:	20001c38 	.word	0x20001c38

08016894 <RegionAU915ChanMaskSet>:

bool RegionAU915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b084      	sub	sp, #16
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
#if defined( REGION_AU915 )
    switch( chanMaskSet->ChannelsMaskType )
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	791b      	ldrb	r3, [r3, #4]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d002      	beq.n	80168aa <RegionAU915ChanMaskSet+0x16>
 80168a4:	2b01      	cmp	r3, #1
 80168a6:	d038      	beq.n	801691a <RegionAU915ChanMaskSet+0x86>
 80168a8:	e042      	b.n	8016930 <RegionAU915ChanMaskSet+0x9c>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80168aa:	4b25      	ldr	r3, [pc, #148]	@ (8016940 <RegionAU915ChanMaskSet+0xac>)
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	2206      	movs	r2, #6
 80168b8:	4619      	mov	r1, r3
 80168ba:	f001 f8e1 	bl	8017a80 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 80168be:	4b20      	ldr	r3, [pc, #128]	@ (8016940 <RegionAU915ChanMaskSet+0xac>)
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	f8b3 2494 	ldrh.w	r2, [r3, #1172]	@ 0x494
 80168c6:	4b1e      	ldr	r3, [pc, #120]	@ (8016940 <RegionAU915ChanMaskSet+0xac>)
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	b2d2      	uxtb	r2, r2
 80168cc:	b292      	uxth	r2, r2
 80168ce:	f8a3 2494 	strh.w	r2, [r3, #1172]	@ 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80168d2:	4b1b      	ldr	r3, [pc, #108]	@ (8016940 <RegionAU915ChanMaskSet+0xac>)
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	2200      	movs	r2, #0
 80168d8:	f8a3 2496 	strh.w	r2, [r3, #1174]	@ 0x496

            for( uint8_t i = 0; i < 6; i++ )
 80168dc:	2300      	movs	r3, #0
 80168de:	73fb      	strb	r3, [r7, #15]
 80168e0:	e017      	b.n	8016912 <RegionAU915ChanMaskSet+0x7e>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80168e2:	4b18      	ldr	r3, [pc, #96]	@ (8016944 <RegionAU915ChanMaskSet+0xb0>)
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	7bfa      	ldrb	r2, [r7, #15]
 80168e8:	3248      	adds	r2, #72	@ 0x48
 80168ea:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80168ee:	4b14      	ldr	r3, [pc, #80]	@ (8016940 <RegionAU915ChanMaskSet+0xac>)
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	7bfa      	ldrb	r2, [r7, #15]
 80168f4:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 80168f8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80168fc:	4b11      	ldr	r3, [pc, #68]	@ (8016944 <RegionAU915ChanMaskSet+0xb0>)
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	7bfa      	ldrb	r2, [r7, #15]
 8016902:	4001      	ands	r1, r0
 8016904:	b289      	uxth	r1, r1
 8016906:	3248      	adds	r2, #72	@ 0x48
 8016908:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 801690c:	7bfb      	ldrb	r3, [r7, #15]
 801690e:	3301      	adds	r3, #1
 8016910:	73fb      	strb	r3, [r7, #15]
 8016912:	7bfb      	ldrb	r3, [r7, #15]
 8016914:	2b05      	cmp	r3, #5
 8016916:	d9e4      	bls.n	80168e2 <RegionAU915ChanMaskSet+0x4e>
            }
            break;
 8016918:	e00c      	b.n	8016934 <RegionAU915ChanMaskSet+0xa0>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801691a:	4b09      	ldr	r3, [pc, #36]	@ (8016940 <RegionAU915ChanMaskSet+0xac>)
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	f203 408c 	addw	r0, r3, #1164	@ 0x48c
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	2206      	movs	r2, #6
 8016928:	4619      	mov	r1, r3
 801692a:	f001 f8a9 	bl	8017a80 <RegionCommonChanMaskCopy>
            break;
 801692e:	e001      	b.n	8016934 <RegionAU915ChanMaskSet+0xa0>
        }
        default:
            return false;
 8016930:	2300      	movs	r3, #0
 8016932:	e000      	b.n	8016936 <RegionAU915ChanMaskSet+0xa2>
    }
    return true;
 8016934:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AU915 */
}
 8016936:	4618      	mov	r0, r3
 8016938:	3710      	adds	r7, #16
 801693a:	46bd      	mov	sp, r7
 801693c:	bd80      	pop	{r7, pc}
 801693e:	bf00      	nop
 8016940:	20001c3c 	.word	0x20001c3c
 8016944:	20001c38 	.word	0x20001c38

08016948 <RegionAU915ComputeRxWindowParameters>:

void RegionAU915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b088      	sub	sp, #32
 801694c:	af02      	add	r7, sp, #8
 801694e:	60ba      	str	r2, [r7, #8]
 8016950:	607b      	str	r3, [r7, #4]
 8016952:	4603      	mov	r3, r0
 8016954:	73fb      	strb	r3, [r7, #15]
 8016956:	460b      	mov	r3, r1
 8016958:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_AU915 )
    uint32_t tSymbolInUs = 0;
 801695a:	2300      	movs	r3, #0
 801695c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 801695e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016962:	2b0d      	cmp	r3, #13
 8016964:	bfa8      	it	ge
 8016966:	230d      	movge	r3, #13
 8016968:	b25a      	sxtb	r2, r3
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAU915 );
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016974:	4916      	ldr	r1, [pc, #88]	@ (80169d0 <RegionAU915ComputeRxWindowParameters+0x88>)
 8016976:	4618      	mov	r0, r3
 8016978:	f001 fd12 	bl	80183a0 <RegionCommonGetBandwidth>
 801697c:	4603      	mov	r3, r0
 801697e:	b2da      	uxtb	r2, r3
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801698a:	461a      	mov	r2, r3
 801698c:	4b11      	ldr	r3, [pc, #68]	@ (80169d4 <RegionAU915ComputeRxWindowParameters+0x8c>)
 801698e:	5c9a      	ldrb	r2, [r3, r2]
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016996:	4619      	mov	r1, r3
 8016998:	4b0d      	ldr	r3, [pc, #52]	@ (80169d0 <RegionAU915ComputeRxWindowParameters+0x88>)
 801699a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801699e:	4619      	mov	r1, r3
 80169a0:	4610      	mov	r0, r2
 80169a2:	f001 fa8b 	bl	8017ebc <RegionCommonComputeSymbolTimeLoRa>
 80169a6:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80169a8:	4b0b      	ldr	r3, [pc, #44]	@ (80169d8 <RegionAU915ComputeRxWindowParameters+0x90>)
 80169aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80169ac:	4798      	blx	r3
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	3308      	adds	r3, #8
 80169b2:	687a      	ldr	r2, [r7, #4]
 80169b4:	320c      	adds	r2, #12
 80169b6:	7bb9      	ldrb	r1, [r7, #14]
 80169b8:	9201      	str	r2, [sp, #4]
 80169ba:	9300      	str	r3, [sp, #0]
 80169bc:	4603      	mov	r3, r0
 80169be:	68ba      	ldr	r2, [r7, #8]
 80169c0:	6978      	ldr	r0, [r7, #20]
 80169c2:	f001 fa91 	bl	8017ee8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AU915 */
}
 80169c6:	bf00      	nop
 80169c8:	3718      	adds	r7, #24
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bd80      	pop	{r7, pc}
 80169ce:	bf00      	nop
 80169d0:	0801decc 	.word	0x0801decc
 80169d4:	0801debc 	.word	0x0801debc
 80169d8:	0801df78 	.word	0x0801df78

080169dc <RegionAU915RxConfig>:

bool RegionAU915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80169dc:	b590      	push	{r4, r7, lr}
 80169de:	b091      	sub	sp, #68	@ 0x44
 80169e0:	af0a      	add	r7, sp, #40	@ 0x28
 80169e2:	6078      	str	r0, [r7, #4]
 80169e4:	6039      	str	r1, [r7, #0]
#if defined( REGION_AU915 )
    int8_t dr = rxConfig->Datarate;
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	785b      	ldrb	r3, [r3, #1]
 80169ea:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80169ec:	2300      	movs	r3, #0
 80169ee:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 80169f0:	2300      	movs	r3, #0
 80169f2:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	685b      	ldr	r3, [r3, #4]
 80169f8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80169fa:	4b34      	ldr	r3, [pc, #208]	@ (8016acc <RegionAU915RxConfig+0xf0>)
 80169fc:	685b      	ldr	r3, [r3, #4]
 80169fe:	4798      	blx	r3
 8016a00:	4603      	mov	r3, r0
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d001      	beq.n	8016a0a <RegionAU915RxConfig+0x2e>
    {
        return false;
 8016a06:	2300      	movs	r3, #0
 8016a08:	e05c      	b.n	8016ac4 <RegionAU915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	7cdb      	ldrb	r3, [r3, #19]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d109      	bne.n	8016a26 <RegionAU915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = AU915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * AU915_STEPWIDTH_RX1_CHANNEL;
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	781b      	ldrb	r3, [r3, #0]
 8016a16:	f003 0307 	and.w	r3, r3, #7
 8016a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8016ad0 <RegionAU915RxConfig+0xf4>)
 8016a1c:	fb03 f202 	mul.w	r2, r3, r2
 8016a20:	4b2c      	ldr	r3, [pc, #176]	@ (8016ad4 <RegionAU915RxConfig+0xf8>)
 8016a22:	4413      	add	r3, r2
 8016a24:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAU915[dr];
 8016a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a2a:	4a2b      	ldr	r2, [pc, #172]	@ (8016ad8 <RegionAU915RxConfig+0xfc>)
 8016a2c:	5cd3      	ldrb	r3, [r2, r3]
 8016a2e:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8016a30:	4b26      	ldr	r3, [pc, #152]	@ (8016acc <RegionAU915RxConfig+0xf0>)
 8016a32:	68db      	ldr	r3, [r3, #12]
 8016a34:	6938      	ldr	r0, [r7, #16]
 8016a36:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016a38:	4b24      	ldr	r3, [pc, #144]	@ (8016acc <RegionAU915RxConfig+0xf0>)
 8016a3a:	699c      	ldr	r4, [r3, #24]
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	789b      	ldrb	r3, [r3, #2]
 8016a40:	4618      	mov	r0, r3
 8016a42:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	689b      	ldr	r3, [r3, #8]
 8016a4a:	b29b      	uxth	r3, r3
 8016a4c:	687a      	ldr	r2, [r7, #4]
 8016a4e:	7c92      	ldrb	r2, [r2, #18]
 8016a50:	9209      	str	r2, [sp, #36]	@ 0x24
 8016a52:	2201      	movs	r2, #1
 8016a54:	9208      	str	r2, [sp, #32]
 8016a56:	2200      	movs	r2, #0
 8016a58:	9207      	str	r2, [sp, #28]
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	9206      	str	r2, [sp, #24]
 8016a5e:	2200      	movs	r2, #0
 8016a60:	9205      	str	r2, [sp, #20]
 8016a62:	2200      	movs	r2, #0
 8016a64:	9204      	str	r2, [sp, #16]
 8016a66:	2200      	movs	r2, #0
 8016a68:	9203      	str	r2, [sp, #12]
 8016a6a:	9302      	str	r3, [sp, #8]
 8016a6c:	2308      	movs	r3, #8
 8016a6e:	9301      	str	r3, [sp, #4]
 8016a70:	2300      	movs	r3, #0
 8016a72:	9300      	str	r3, [sp, #0]
 8016a74:	2301      	movs	r3, #1
 8016a76:	460a      	mov	r2, r1
 8016a78:	4601      	mov	r1, r0
 8016a7a:	2001      	movs	r0, #1
 8016a7c:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	7c5b      	ldrb	r3, [r3, #17]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d005      	beq.n	8016a92 <RegionAU915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AU915[dr];
 8016a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a8a:	4a14      	ldr	r2, [pc, #80]	@ (8016adc <RegionAU915RxConfig+0x100>)
 8016a8c:	5cd3      	ldrb	r3, [r2, r3]
 8016a8e:	75fb      	strb	r3, [r7, #23]
 8016a90:	e004      	b.n	8016a9c <RegionAU915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 8016a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a96:	4a12      	ldr	r2, [pc, #72]	@ (8016ae0 <RegionAU915RxConfig+0x104>)
 8016a98:	5cd3      	ldrb	r3, [r2, r3]
 8016a9a:	75fb      	strb	r3, [r7, #23]
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8016a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8016acc <RegionAU915RxConfig+0xf0>)
 8016a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016aa0:	7dfa      	ldrb	r2, [r7, #23]
 8016aa2:	320d      	adds	r2, #13
 8016aa4:	b2d2      	uxtb	r2, r2
 8016aa6:	4611      	mov	r1, r2
 8016aa8:	2001      	movs	r0, #1
 8016aaa:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	7cdb      	ldrb	r3, [r3, #19]
 8016ab0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016ab4:	6939      	ldr	r1, [r7, #16]
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	f001 fc90 	bl	80183dc <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8016abc:	683b      	ldr	r3, [r7, #0]
 8016abe:	7bfa      	ldrb	r2, [r7, #15]
 8016ac0:	701a      	strb	r2, [r3, #0]
    return true;
 8016ac2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AU915 */
}
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	371c      	adds	r7, #28
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	bd90      	pop	{r4, r7, pc}
 8016acc:	0801df78 	.word	0x0801df78
 8016ad0:	000927c0 	.word	0x000927c0
 8016ad4:	370870a0 	.word	0x370870a0
 8016ad8:	0801debc 	.word	0x0801debc
 8016adc:	0801df48 	.word	0x0801df48
 8016ae0:	0801df38 	.word	0x0801df38

08016ae4 <RegionAU915TxConfig>:

bool RegionAU915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016ae4:	b590      	push	{r4, r7, lr}
 8016ae6:	b093      	sub	sp, #76	@ 0x4c
 8016ae8:	af0a      	add	r7, sp, #40	@ 0x28
 8016aea:	60f8      	str	r0, [r7, #12]
 8016aec:	60b9      	str	r1, [r7, #8]
 8016aee:	607a      	str	r2, [r7, #4]
#if defined( REGION_AU915 )
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016af6:	461a      	mov	r2, r3
 8016af8:	4b47      	ldr	r3, [pc, #284]	@ (8016c18 <RegionAU915TxConfig+0x134>)
 8016afa:	5c9b      	ldrb	r3, [r3, r2]
 8016afc:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016b04:	4b45      	ldr	r3, [pc, #276]	@ (8016c1c <RegionAU915TxConfig+0x138>)
 8016b06:	681a      	ldr	r2, [r3, #0]
 8016b08:	4b45      	ldr	r3, [pc, #276]	@ (8016c20 <RegionAU915TxConfig+0x13c>)
 8016b0a:	6819      	ldr	r1, [r3, #0]
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	781b      	ldrb	r3, [r3, #0]
 8016b10:	461c      	mov	r4, r3
 8016b12:	4623      	mov	r3, r4
 8016b14:	005b      	lsls	r3, r3, #1
 8016b16:	4423      	add	r3, r4
 8016b18:	009b      	lsls	r3, r3, #2
 8016b1a:	440b      	add	r3, r1
 8016b1c:	3309      	adds	r3, #9
 8016b1e:	781b      	ldrb	r3, [r3, #0]
 8016b20:	4619      	mov	r1, r3
 8016b22:	460b      	mov	r3, r1
 8016b24:	005b      	lsls	r3, r3, #1
 8016b26:	440b      	add	r3, r1
 8016b28:	00db      	lsls	r3, r3, #3
 8016b2a:	4413      	add	r3, r2
 8016b2c:	3302      	adds	r3, #2
 8016b2e:	f993 3000 	ldrsb.w	r3, [r3]
 8016b32:	4619      	mov	r1, r3
 8016b34:	f001 fc1f 	bl	8018376 <RegionCommonLimitTxPower>
 8016b38:	4603      	mov	r3, r0
 8016b3a:	77bb      	strb	r3, [r7, #30]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAU915 );
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016b42:	4938      	ldr	r1, [pc, #224]	@ (8016c24 <RegionAU915TxConfig+0x140>)
 8016b44:	4618      	mov	r0, r3
 8016b46:	f001 fc2b 	bl	80183a0 <RegionCommonGetBandwidth>
 8016b4a:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	6859      	ldr	r1, [r3, #4]
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	689a      	ldr	r2, [r3, #8]
 8016b58:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f001 fa7b 	bl	8018058 <RegionCommonComputeTxPower>
 8016b62:	4603      	mov	r3, r0
 8016b64:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8016b66:	4b30      	ldr	r3, [pc, #192]	@ (8016c28 <RegionAU915TxConfig+0x144>)
 8016b68:	68da      	ldr	r2, [r3, #12]
 8016b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8016c20 <RegionAU915TxConfig+0x13c>)
 8016b6c:	6819      	ldr	r1, [r3, #0]
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	781b      	ldrb	r3, [r3, #0]
 8016b72:	4618      	mov	r0, r3
 8016b74:	4603      	mov	r3, r0
 8016b76:	005b      	lsls	r3, r3, #1
 8016b78:	4403      	add	r3, r0
 8016b7a:	009b      	lsls	r3, r3, #2
 8016b7c:	440b      	add	r3, r1
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	4618      	mov	r0, r3
 8016b82:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8016b84:	4b28      	ldr	r3, [pc, #160]	@ (8016c28 <RegionAU915TxConfig+0x144>)
 8016b86:	69dc      	ldr	r4, [r3, #28]
 8016b88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016b8c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016b90:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8016b94:	9208      	str	r2, [sp, #32]
 8016b96:	2200      	movs	r2, #0
 8016b98:	9207      	str	r2, [sp, #28]
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	9206      	str	r2, [sp, #24]
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	9205      	str	r2, [sp, #20]
 8016ba2:	2201      	movs	r2, #1
 8016ba4:	9204      	str	r2, [sp, #16]
 8016ba6:	2200      	movs	r2, #0
 8016ba8:	9203      	str	r2, [sp, #12]
 8016baa:	2208      	movs	r2, #8
 8016bac:	9202      	str	r2, [sp, #8]
 8016bae:	2201      	movs	r2, #1
 8016bb0:	9201      	str	r2, [sp, #4]
 8016bb2:	9300      	str	r3, [sp, #0]
 8016bb4:	69bb      	ldr	r3, [r7, #24]
 8016bb6:	2200      	movs	r2, #0
 8016bb8:	2001      	movs	r0, #1
 8016bba:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8016bbc:	4b18      	ldr	r3, [pc, #96]	@ (8016c20 <RegionAU915TxConfig+0x13c>)
 8016bbe:	681a      	ldr	r2, [r3, #0]
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	781b      	ldrb	r3, [r3, #0]
 8016bc4:	4619      	mov	r1, r3
 8016bc6:	460b      	mov	r3, r1
 8016bc8:	005b      	lsls	r3, r3, #1
 8016bca:	440b      	add	r3, r1
 8016bcc:	009b      	lsls	r3, r3, #2
 8016bce:	4413      	add	r3, r2
 8016bd0:	681a      	ldr	r2, [r3, #0]
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016bd8:	4619      	mov	r1, r3
 8016bda:	4610      	mov	r0, r2
 8016bdc:	f001 fc30 	bl	8018440 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8016be0:	4b11      	ldr	r3, [pc, #68]	@ (8016c28 <RegionAU915TxConfig+0x144>)
 8016be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016be4:	68fa      	ldr	r2, [r7, #12]
 8016be6:	8992      	ldrh	r2, [r2, #12]
 8016be8:	b2d2      	uxtb	r2, r2
 8016bea:	4611      	mov	r1, r2
 8016bec:	2001      	movs	r0, #1
 8016bee:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	899b      	ldrh	r3, [r3, #12]
 8016bfa:	4619      	mov	r1, r3
 8016bfc:	4610      	mov	r0, r2
 8016bfe:	f7ff fa25 	bl	801604c <GetTimeOnAir>
 8016c02:	4602      	mov	r2, r0
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8016c08:	68bb      	ldr	r3, [r7, #8]
 8016c0a:	7fba      	ldrb	r2, [r7, #30]
 8016c0c:	701a      	strb	r2, [r3, #0]
    return true;
 8016c0e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AU915 */
}
 8016c10:	4618      	mov	r0, r3
 8016c12:	3724      	adds	r7, #36	@ 0x24
 8016c14:	46bd      	mov	sp, r7
 8016c16:	bd90      	pop	{r4, r7, pc}
 8016c18:	0801debc 	.word	0x0801debc
 8016c1c:	20001c38 	.word	0x20001c38
 8016c20:	20001c3c 	.word	0x20001c3c
 8016c24:	0801decc 	.word	0x0801decc
 8016c28:	0801df78 	.word	0x0801df78

08016c2c <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016c2c:	b590      	push	{r4, r7, lr}
 8016c2e:	b097      	sub	sp, #92	@ 0x5c
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	60f8      	str	r0, [r7, #12]
 8016c34:	60b9      	str	r1, [r7, #8]
 8016c36:	607a      	str	r2, [r7, #4]
 8016c38:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8016c3a:	2307      	movs	r3, #7
 8016c3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
#if defined( REGION_AU915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8016c40:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8016c44:	2200      	movs	r2, #0
 8016c46:	601a      	str	r2, [r3, #0]
 8016c48:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    uint8_t bytesProcessed = 0;
 8016c50:	2300      	movs	r3, #0
 8016c52:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8016c56:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	601a      	str	r2, [r3, #0]
 8016c5e:	605a      	str	r2, [r3, #4]
 8016c60:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, 6 );
 8016c62:	4b97      	ldr	r3, [pc, #604]	@ (8016ec0 <RegionAU915LinkAdrReq+0x294>)
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	f503 6190 	add.w	r1, r3, #1152	@ 0x480
 8016c6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8016c6e:	2206      	movs	r2, #6
 8016c70:	4618      	mov	r0, r3
 8016c72:	f000 ff05 	bl	8017a80 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016c76:	e11b      	b.n	8016eb0 <RegionAU915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	685a      	ldr	r2, [r3, #4]
 8016c7c:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8016c80:	4413      	add	r3, r2
 8016c82:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8016c86:	4611      	mov	r1, r2
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f001 f83d 	bl	8017d08 <RegionCommonParseLinkAdrReq>
 8016c8e:	4603      	mov	r3, r0
 8016c90:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        if( nextIndex == 0 )
 8016c94:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	f000 8113 	beq.w	8016ec4 <RegionAU915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016c9e:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8016ca2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8016ca6:	4413      	add	r3, r2
 8016ca8:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016cac:	2307      	movs	r3, #7
 8016cae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 8016cb2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8016cb6:	2b06      	cmp	r3, #6
 8016cb8:	d116      	bne.n	8016ce8 <RegionAU915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8016cba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016cbe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0xFFFF;
 8016cc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016cc6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0xFFFF;
 8016cca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016cce:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0xFFFF;
 8016cd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016cd6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8016cda:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8016cde:	b2db      	uxtb	r3, r3
 8016ce0:	b29b      	uxth	r3, r3
 8016ce2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016ce6:	e0e3      	b.n	8016eb0 <RegionAU915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8016ce8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8016cec:	2b07      	cmp	r3, #7
 8016cee:	d112      	bne.n	8016d16 <RegionAU915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0x0000;
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0x0000;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0x0000;
 8016d02:	2300      	movs	r3, #0
 8016d04:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8016d08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8016d0c:	b2db      	uxtb	r3, r3
 8016d0e:	b29b      	uxth	r3, r3
 8016d10:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016d14:	e0cc      	b.n	8016eb0 <RegionAU915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8016d16:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8016d1a:	2b05      	cmp	r3, #5
 8016d1c:	f040 80bf 	bne.w	8016e9e <RegionAU915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8016d20:	2301      	movs	r3, #1
 8016d22:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 8016d26:	2300      	movs	r3, #0
 8016d28:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8016d32:	e0ae      	b.n	8016e92 <RegionAU915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8016d34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8016d38:	b2da      	uxtb	r2, r3
 8016d3a:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8016d3e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016d42:	fa01 f303 	lsl.w	r3, r1, r3
 8016d46:	4013      	ands	r3, r2
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d04d      	beq.n	8016de8 <RegionAU915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8016d4c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016d50:	f003 0301 	and.w	r3, r3, #1
 8016d54:	b2db      	uxtb	r3, r3
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d120      	bne.n	8016d9c <RegionAU915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 8016d5a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016d5e:	005b      	lsls	r3, r3, #1
 8016d60:	3358      	adds	r3, #88	@ 0x58
 8016d62:	443b      	add	r3, r7
 8016d64:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8016d68:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016d6c:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 8016d70:	b292      	uxth	r2, r2
 8016d72:	005b      	lsls	r3, r3, #1
 8016d74:	3358      	adds	r3, #88	@ 0x58
 8016d76:	443b      	add	r3, r7
 8016d78:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8016d7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016d80:	b21a      	sxth	r2, r3
 8016d82:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8016d86:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8016d8e:	b21b      	sxth	r3, r3
 8016d90:	4313      	orrs	r3, r2
 8016d92:	b21b      	sxth	r3, r3
 8016d94:	b29b      	uxth	r3, r3
 8016d96:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016d9a:	e075      	b.n	8016e88 <RegionAU915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8016d9c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016da0:	005b      	lsls	r3, r3, #1
 8016da2:	3358      	adds	r3, #88	@ 0x58
 8016da4:	443b      	add	r3, r7
 8016da6:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8016daa:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016dae:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 8016db2:	b292      	uxth	r2, r2
 8016db4:	005b      	lsls	r3, r3, #1
 8016db6:	3358      	adds	r3, #88	@ 0x58
 8016db8:	443b      	add	r3, r7
 8016dba:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8016dbe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016dc2:	b21a      	sxth	r2, r3
 8016dc4:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8016dc8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8016dd0:	b21b      	sxth	r3, r3
 8016dd2:	4313      	orrs	r3, r2
 8016dd4:	b21b      	sxth	r3, r3
 8016dd6:	b29b      	uxth	r3, r3
 8016dd8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8016ddc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016de0:	3301      	adds	r3, #1
 8016de2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8016de6:	e04f      	b.n	8016e88 <RegionAU915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8016de8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016dec:	f003 0301 	and.w	r3, r3, #1
 8016df0:	b2db      	uxtb	r3, r3
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d122      	bne.n	8016e3c <RegionAU915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 8016df6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016dfa:	005b      	lsls	r3, r3, #1
 8016dfc:	3358      	adds	r3, #88	@ 0x58
 8016dfe:	443b      	add	r3, r7
 8016e00:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8016e04:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016e08:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8016e0c:	b292      	uxth	r2, r2
 8016e0e:	005b      	lsls	r3, r3, #1
 8016e10:	3358      	adds	r3, #88	@ 0x58
 8016e12:	443b      	add	r3, r7
 8016e14:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8016e18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016e1c:	b21a      	sxth	r2, r3
 8016e1e:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8016e22:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016e26:	fa01 f303 	lsl.w	r3, r1, r3
 8016e2a:	b21b      	sxth	r3, r3
 8016e2c:	43db      	mvns	r3, r3
 8016e2e:	b21b      	sxth	r3, r3
 8016e30:	4013      	ands	r3, r2
 8016e32:	b21b      	sxth	r3, r3
 8016e34:	b29b      	uxth	r3, r3
 8016e36:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016e3a:	e025      	b.n	8016e88 <RegionAU915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8016e3c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016e40:	005b      	lsls	r3, r3, #1
 8016e42:	3358      	adds	r3, #88	@ 0x58
 8016e44:	443b      	add	r3, r7
 8016e46:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8016e4a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016e4e:	b2d2      	uxtb	r2, r2
 8016e50:	b292      	uxth	r2, r2
 8016e52:	005b      	lsls	r3, r3, #1
 8016e54:	3358      	adds	r3, #88	@ 0x58
 8016e56:	443b      	add	r3, r7
 8016e58:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8016e5c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016e60:	b21a      	sxth	r2, r3
 8016e62:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8016e66:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8016e6e:	b21b      	sxth	r3, r3
 8016e70:	43db      	mvns	r3, r3
 8016e72:	b21b      	sxth	r3, r3
 8016e74:	4013      	ands	r3, r2
 8016e76:	b21b      	sxth	r3, r3
 8016e78:	b29b      	uxth	r3, r3
 8016e7a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8016e7e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8016e82:	3301      	adds	r3, #1
 8016e84:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8016e88:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016e8c:	3301      	adds	r3, #1
 8016e8e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8016e92:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016e96:	2b07      	cmp	r3, #7
 8016e98:	f67f af4c 	bls.w	8016d34 <RegionAU915LinkAdrReq+0x108>
 8016e9c:	e008      	b.n	8016eb0 <RegionAU915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8016e9e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8016ea2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8016ea6:	005b      	lsls	r3, r3, #1
 8016ea8:	3358      	adds	r3, #88	@ 0x58
 8016eaa:	443b      	add	r3, r7
 8016eac:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	7a1b      	ldrb	r3, [r3, #8]
 8016eb4:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8016eb8:	429a      	cmp	r2, r3
 8016eba:	f4ff aedd 	bcc.w	8016c78 <RegionAU915LinkAdrReq+0x4c>
 8016ebe:	e002      	b.n	8016ec6 <RegionAU915LinkAdrReq+0x29a>
 8016ec0:	20001c3c 	.word	0x20001c3c
            break; // break loop, since no more request has been found
 8016ec4:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8016ec6:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8016eca:	2b05      	cmp	r3, #5
 8016ecc:	dc0f      	bgt.n	8016eee <RegionAU915LinkAdrReq+0x2c2>
 8016ece:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8016ed2:	2204      	movs	r2, #4
 8016ed4:	2100      	movs	r1, #0
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f000 fda6 	bl	8017a28 <RegionCommonCountChannels>
 8016edc:	4603      	mov	r3, r0
 8016ede:	2b01      	cmp	r3, #1
 8016ee0:	d805      	bhi.n	8016eee <RegionAU915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8016ee2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016ee6:	f023 0301 	bic.w	r3, r3, #1
 8016eea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8016eee:	2302      	movs	r3, #2
 8016ef0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	7a5b      	ldrb	r3, [r3, #9]
 8016ef8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    phyParam = RegionAU915GetPhyParam( &getPhy );
 8016efc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7ff f8d3 	bl	80160ac <RegionAU915GetPhyParam>
 8016f06:	4603      	mov	r3, r0
 8016f08:	637b      	str	r3, [r7, #52]	@ 0x34

    linkAdrVerifyParams.Status = status;
 8016f0a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016f0e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	7a9b      	ldrb	r3, [r3, #10]
 8016f14:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8016f16:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8016f1a:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8016f1c:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 8016f20:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8016f22:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8016f26:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8016f2e:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8016f36:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	7b5b      	ldrb	r3, [r3, #13]
 8016f3c:	b25b      	sxtb	r3, r3
 8016f3e:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 8016f40:	2348      	movs	r3, #72	@ 0x48
 8016f42:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8016f46:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8016f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8016f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f4e:	b25b      	sxtb	r3, r3
 8016f50:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 8016f54:	2306      	movs	r3, #6
 8016f56:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8016f5a:	4b44      	ldr	r3, [pc, #272]	@ (801706c <RegionAU915LinkAdrReq+0x440>)
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 8016f60:	230e      	movs	r3, #14
 8016f62:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
 8016f66:	2300      	movs	r3, #0
 8016f68:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016f72:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8016f76:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8016f7a:	1c9a      	adds	r2, r3, #2
 8016f7c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8016f80:	1c59      	adds	r1, r3, #1
 8016f82:	f107 0014 	add.w	r0, r7, #20
 8016f86:	4623      	mov	r3, r4
 8016f88:	f000 ff0f 	bl	8017daa <RegionCommonLinkAdrReqVerifyParams>
 8016f8c:	4603      	mov	r3, r0
 8016f8e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016f92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016f96:	2b07      	cmp	r3, #7
 8016f98:	d151      	bne.n	801703e <RegionAU915LinkAdrReq+0x412>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8016f9a:	4b34      	ldr	r3, [pc, #208]	@ (801706c <RegionAU915LinkAdrReq+0x440>)
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8016fa2:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8016fa6:	2206      	movs	r2, #6
 8016fa8:	4618      	mov	r0, r3
 8016faa:	f000 fd69 	bl	8017a80 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8016fae:	4b30      	ldr	r3, [pc, #192]	@ (8017070 <RegionAU915LinkAdrReq+0x444>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	f8b3 1090 	ldrh.w	r1, [r3, #144]	@ 0x90
 8016fb6:	4b2d      	ldr	r3, [pc, #180]	@ (801706c <RegionAU915LinkAdrReq+0x440>)
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 8016fbe:	4b2c      	ldr	r3, [pc, #176]	@ (8017070 <RegionAU915LinkAdrReq+0x444>)
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	400a      	ands	r2, r1
 8016fc4:	b292      	uxth	r2, r2
 8016fc6:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8016fca:	4b29      	ldr	r3, [pc, #164]	@ (8017070 <RegionAU915LinkAdrReq+0x444>)
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	f8b3 1092 	ldrh.w	r1, [r3, #146]	@ 0x92
 8016fd2:	4b26      	ldr	r3, [pc, #152]	@ (801706c <RegionAU915LinkAdrReq+0x440>)
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	f8b3 2482 	ldrh.w	r2, [r3, #1154]	@ 0x482
 8016fda:	4b25      	ldr	r3, [pc, #148]	@ (8017070 <RegionAU915LinkAdrReq+0x444>)
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	400a      	ands	r2, r1
 8016fe0:	b292      	uxth	r2, r2
 8016fe2:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8016fe6:	4b22      	ldr	r3, [pc, #136]	@ (8017070 <RegionAU915LinkAdrReq+0x444>)
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	f8b3 1094 	ldrh.w	r1, [r3, #148]	@ 0x94
 8016fee:	4b1f      	ldr	r3, [pc, #124]	@ (801706c <RegionAU915LinkAdrReq+0x440>)
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	f8b3 2484 	ldrh.w	r2, [r3, #1156]	@ 0x484
 8016ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8017070 <RegionAU915LinkAdrReq+0x444>)
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	400a      	ands	r2, r1
 8016ffc:	b292      	uxth	r2, r2
 8016ffe:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8017002:	4b1b      	ldr	r3, [pc, #108]	@ (8017070 <RegionAU915LinkAdrReq+0x444>)
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	f8b3 1096 	ldrh.w	r1, [r3, #150]	@ 0x96
 801700a:	4b18      	ldr	r3, [pc, #96]	@ (801706c <RegionAU915LinkAdrReq+0x440>)
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	f8b3 2486 	ldrh.w	r2, [r3, #1158]	@ 0x486
 8017012:	4b17      	ldr	r3, [pc, #92]	@ (8017070 <RegionAU915LinkAdrReq+0x444>)
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	400a      	ands	r2, r1
 8017018:	b292      	uxth	r2, r2
 801701a:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801701e:	4b13      	ldr	r3, [pc, #76]	@ (801706c <RegionAU915LinkAdrReq+0x440>)
 8017020:	681a      	ldr	r2, [r3, #0]
 8017022:	4b13      	ldr	r3, [pc, #76]	@ (8017070 <RegionAU915LinkAdrReq+0x444>)
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	@ 0x488
 801702a:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801702e:	4b0f      	ldr	r3, [pc, #60]	@ (801706c <RegionAU915LinkAdrReq+0x440>)
 8017030:	681a      	ldr	r2, [r3, #0]
 8017032:	4b0f      	ldr	r3, [pc, #60]	@ (8017070 <RegionAU915LinkAdrReq+0x444>)
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	f8b2 248a 	ldrh.w	r2, [r2, #1162]	@ 0x48a
 801703a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801703e:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 8017042:	68bb      	ldr	r3, [r7, #8]
 8017044:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8017046:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801704e:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8017052:	683b      	ldr	r3, [r7, #0]
 8017054:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017056:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017058:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 801705c:	701a      	strb	r2, [r3, #0]

#endif /* REGION_AU915 */
    return status;
 801705e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8017062:	4618      	mov	r0, r3
 8017064:	375c      	adds	r7, #92	@ 0x5c
 8017066:	46bd      	mov	sp, r7
 8017068:	bd90      	pop	{r4, r7, pc}
 801706a:	bf00      	nop
 801706c:	20001c3c 	.word	0x20001c3c
 8017070:	20001c38 	.word	0x20001c38

08017074 <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017074:	b580      	push	{r7, lr}
 8017076:	b084      	sub	sp, #16
 8017078:	af00      	add	r7, sp, #0
 801707a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801707c:	2307      	movs	r3, #7
 801707e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_AU915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	685b      	ldr	r3, [r3, #4]
 8017084:	4618      	mov	r0, r3
 8017086:	f7fe ff9b 	bl	8015fc0 <VerifyRfFreq>
 801708a:	4603      	mov	r3, r0
 801708c:	f083 0301 	eor.w	r3, r3, #1
 8017090:	b2db      	uxtb	r3, r3
 8017092:	2b00      	cmp	r3, #0
 8017094:	d003      	beq.n	801709e <RegionAU915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8017096:	7bfb      	ldrb	r3, [r7, #15]
 8017098:	f023 0301 	bic.w	r3, r3, #1
 801709c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	f993 3000 	ldrsb.w	r3, [r3]
 80170a4:	220d      	movs	r2, #13
 80170a6:	2108      	movs	r1, #8
 80170a8:	4618      	mov	r0, r3
 80170aa:	f000 fc6c 	bl	8017986 <RegionCommonValueInRange>
 80170ae:	4603      	mov	r3, r0
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d103      	bne.n	80170bc <RegionAU915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 80170b4:	7bfb      	ldrb	r3, [r7, #15]
 80170b6:	f023 0302 	bic.w	r3, r3, #2
 80170ba:	73fb      	strb	r3, [r7, #15]
    }
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	f993 3000 	ldrsb.w	r3, [r3]
 80170c2:	2b07      	cmp	r3, #7
 80170c4:	d004      	beq.n	80170d0 <RegionAU915RxParamSetupReq+0x5c>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 80170cc:	2b0d      	cmp	r3, #13
 80170ce:	dd03      	ble.n	80170d8 <RegionAU915RxParamSetupReq+0x64>
    {
        status &= 0xFD; // Datarate KO
 80170d0:	7bfb      	ldrb	r3, [r7, #15]
 80170d2:	f023 0302 	bic.w	r3, r3, #2
 80170d6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET ) == false )
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80170de:	2205      	movs	r2, #5
 80170e0:	2100      	movs	r1, #0
 80170e2:	4618      	mov	r0, r3
 80170e4:	f000 fc4f 	bl	8017986 <RegionCommonValueInRange>
 80170e8:	4603      	mov	r3, r0
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d103      	bne.n	80170f6 <RegionAU915RxParamSetupReq+0x82>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80170ee:	7bfb      	ldrb	r3, [r7, #15]
 80170f0:	f023 0304 	bic.w	r3, r3, #4
 80170f4:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_AU915 */
    return status;
 80170f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80170f8:	4618      	mov	r0, r3
 80170fa:	3710      	adds	r7, #16
 80170fc:	46bd      	mov	sp, r7
 80170fe:	bd80      	pop	{r7, pc}

08017100 <RegionAU915NewChannelReq>:

int8_t RegionAU915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8017100:	b480      	push	{r7}
 8017102:	b083      	sub	sp, #12
 8017104:	af00      	add	r7, sp, #0
 8017106:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017108:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801710c:	4618      	mov	r0, r3
 801710e:	370c      	adds	r7, #12
 8017110:	46bd      	mov	sp, r7
 8017112:	bc80      	pop	{r7}
 8017114:	4770      	bx	lr

08017116 <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8017116:	b480      	push	{r7}
 8017118:	b083      	sub	sp, #12
 801711a:	af00      	add	r7, sp, #0
 801711c:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 801711e:	2300      	movs	r3, #0
}
 8017120:	4618      	mov	r0, r3
 8017122:	370c      	adds	r7, #12
 8017124:	46bd      	mov	sp, r7
 8017126:	bc80      	pop	{r7}
 8017128:	4770      	bx	lr

0801712a <RegionAU915DlChannelReq>:

int8_t RegionAU915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801712a:	b480      	push	{r7}
 801712c:	b083      	sub	sp, #12
 801712e:	af00      	add	r7, sp, #0
 8017130:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017132:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8017136:	4618      	mov	r0, r3
 8017138:	370c      	adds	r7, #12
 801713a:	46bd      	mov	sp, r7
 801713c:	bc80      	pop	{r7}
 801713e:	4770      	bx	lr

08017140 <RegionAU915AlternateDr>:

int8_t RegionAU915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8017140:	b480      	push	{r7}
 8017142:	b083      	sub	sp, #12
 8017144:	af00      	add	r7, sp, #0
 8017146:	4603      	mov	r3, r0
 8017148:	460a      	mov	r2, r1
 801714a:	71fb      	strb	r3, [r7, #7]
 801714c:	4613      	mov	r3, r2
 801714e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_AU915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_2 and then one 500kHz DR_6 channel
    if( type == ALTERNATE_DR )
 8017150:	79bb      	ldrb	r3, [r7, #6]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d108      	bne.n	8017168 <RegionAU915AlternateDr+0x28>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8017156:	4b16      	ldr	r3, [pc, #88]	@ (80171b0 <RegionAU915AlternateDr+0x70>)
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 801715e:	3201      	adds	r2, #1
 8017160:	b2d2      	uxtb	r2, r2
 8017162:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
 8017166:	e007      	b.n	8017178 <RegionAU915AlternateDr+0x38>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8017168:	4b11      	ldr	r3, [pc, #68]	@ (80171b0 <RegionAU915AlternateDr+0x70>)
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8017170:	3a01      	subs	r2, #1
 8017172:	b2d2      	uxtb	r2, r2
 8017174:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8017178:	4b0d      	ldr	r3, [pc, #52]	@ (80171b0 <RegionAU915AlternateDr+0x70>)
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8017180:	4b0c      	ldr	r3, [pc, #48]	@ (80171b4 <RegionAU915AlternateDr+0x74>)
 8017182:	fba3 1302 	umull	r1, r3, r3, r2
 8017186:	0859      	lsrs	r1, r3, #1
 8017188:	460b      	mov	r3, r1
 801718a:	00db      	lsls	r3, r3, #3
 801718c:	440b      	add	r3, r1
 801718e:	1ad3      	subs	r3, r2, r3
 8017190:	b2db      	uxtb	r3, r3
 8017192:	2b00      	cmp	r3, #0
 8017194:	d102      	bne.n	801719c <RegionAU915AlternateDr+0x5c>
    {
        // Use DR_6 every 9th times.
        currentDr = DR_6;
 8017196:	2306      	movs	r3, #6
 8017198:	71fb      	strb	r3, [r7, #7]
 801719a:	e001      	b.n	80171a0 <RegionAU915AlternateDr+0x60>
    }
    else
    {
        currentDr = DR_2;
 801719c:	2302      	movs	r3, #2
 801719e:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 80171a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_AU915 */
}
 80171a4:	4618      	mov	r0, r3
 80171a6:	370c      	adds	r7, #12
 80171a8:	46bd      	mov	sp, r7
 80171aa:	bc80      	pop	{r7}
 80171ac:	4770      	bx	lr
 80171ae:	bf00      	nop
 80171b0:	20001c38 	.word	0x20001c38
 80171b4:	38e38e39 	.word	0x38e38e39

080171b8 <RegionAU915NextChannel>:

LoRaMacStatus_t RegionAU915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80171b8:	b580      	push	{r7, lr}
 80171ba:	b0a8      	sub	sp, #160	@ 0xa0
 80171bc:	af02      	add	r7, sp, #8
 80171be:	60f8      	str	r0, [r7, #12]
 80171c0:	60b9      	str	r1, [r7, #8]
 80171c2:	607a      	str	r2, [r7, #4]
 80171c4:	603b      	str	r3, [r7, #0]
#if defined( REGION_AU915 )
    uint8_t nbEnabledChannels = 0;
 80171c6:	2300      	movs	r3, #0
 80171c8:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
    uint8_t nbRestrictedChannels = 0;
 80171cc:	2300      	movs	r3, #0
 80171ce:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 80171d2:	2300      	movs	r3, #0
 80171d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80171d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80171da:	2244      	movs	r2, #68	@ 0x44
 80171dc:	2100      	movs	r1, #0
 80171de:	4618      	mov	r0, r3
 80171e0:	f005 ffa6 	bl	801d130 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80171e4:	230c      	movs	r3, #12
 80171e6:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 80171ea:	4b6b      	ldr	r3, [pc, #428]	@ (8017398 <RegionAU915NextChannel+0x1e0>)
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	3390      	adds	r3, #144	@ 0x90
 80171f0:	2204      	movs	r2, #4
 80171f2:	2100      	movs	r1, #0
 80171f4:	4618      	mov	r0, r3
 80171f6:	f000 fc17 	bl	8017a28 <RegionCommonCountChannels>
 80171fa:	4603      	mov	r3, r0
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d110      	bne.n	8017222 <RegionAU915NextChannel+0x6a>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8017200:	4b65      	ldr	r3, [pc, #404]	@ (8017398 <RegionAU915NextChannel+0x1e0>)
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8017208:	4b64      	ldr	r3, [pc, #400]	@ (801739c <RegionAU915NextChannel+0x1e4>)
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8017210:	2204      	movs	r2, #4
 8017212:	4619      	mov	r1, r3
 8017214:	f000 fc34 	bl	8017a80 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8017218:	4b5f      	ldr	r3, [pc, #380]	@ (8017398 <RegionAU915NextChannel+0x1e0>)
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	2200      	movs	r2, #0
 801721e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_6 )
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017228:	2b05      	cmp	r3, #5
 801722a:	dd0e      	ble.n	801724a <RegionAU915NextChannel+0x92>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801722c:	4b5a      	ldr	r3, [pc, #360]	@ (8017398 <RegionAU915NextChannel+0x1e0>)
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8017234:	b2db      	uxtb	r3, r3
 8017236:	2b00      	cmp	r3, #0
 8017238:	d107      	bne.n	801724a <RegionAU915NextChannel+0x92>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801723a:	4b58      	ldr	r3, [pc, #352]	@ (801739c <RegionAU915NextChannel+0x1e4>)
 801723c:	681a      	ldr	r2, [r3, #0]
 801723e:	4b56      	ldr	r3, [pc, #344]	@ (8017398 <RegionAU915NextChannel+0x1e0>)
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	@ 0x488
 8017246:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	7a5b      	ldrb	r3, [r3, #9]
 801724e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017256:	b2db      	uxtb	r3, r3
 8017258:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801725a:	4b4f      	ldr	r3, [pc, #316]	@ (8017398 <RegionAU915NextChannel+0x1e0>)
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	3390      	adds	r3, #144	@ 0x90
 8017260:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8017262:	4b4e      	ldr	r3, [pc, #312]	@ (801739c <RegionAU915NextChannel+0x1e4>)
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8017268:	4b4b      	ldr	r3, [pc, #300]	@ (8017398 <RegionAU915NextChannel+0x1e0>)
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AU915_MAX_NB_CHANNELS;
 801726e:	2348      	movs	r3, #72	@ 0x48
 8017270:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = NULL;
 8017272:	2300      	movs	r3, #0
 8017274:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	685b      	ldr	r3, [r3, #4]
 8017280:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	7a9b      	ldrb	r3, [r3, #10]
 8017286:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = AU915_MAX_NB_BANDS;
 801728a:	2301      	movs	r3, #1
 801728c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8017290:	68fa      	ldr	r2, [r7, #12]
 8017292:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8017296:	320c      	adds	r2, #12
 8017298:	e892 0003 	ldmia.w	r2, {r0, r1}
 801729c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	7d1b      	ldrb	r3, [r3, #20]
 80172a4:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	8adb      	ldrh	r3, [r3, #22]
 80172b2:	4619      	mov	r1, r3
 80172b4:	4610      	mov	r0, r2
 80172b6:	f7fe fec9 	bl	801604c <GetTimeOnAir>
 80172ba:	4603      	mov	r3, r0
 80172bc:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80172be:	f107 0314 	add.w	r3, r7, #20
 80172c2:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80172c4:	f107 0195 	add.w	r1, r7, #149	@ 0x95
 80172c8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80172cc:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	9301      	str	r3, [sp, #4]
 80172d4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80172d8:	9300      	str	r3, [sp, #0]
 80172da:	460b      	mov	r3, r1
 80172dc:	6839      	ldr	r1, [r7, #0]
 80172de:	f000 ffaa 	bl	8018236 <RegionCommonIdentifyChannels>
 80172e2:	4603      	mov	r3, r0
 80172e4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80172e8:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d14d      	bne.n	801738c <RegionAU915NextChannel+0x1d4>
    {
        if( nextChanParams->Joined == true )
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	7a5b      	ldrb	r3, [r3, #9]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d00e      	beq.n	8017316 <RegionAU915NextChannel+0x15e>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80172f8:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80172fc:	3b01      	subs	r3, #1
 80172fe:	4619      	mov	r1, r3
 8017300:	2000      	movs	r0, #0
 8017302:	f001 f8e5 	bl	80184d0 <randr>
 8017306:	4603      	mov	r3, r0
 8017308:	3398      	adds	r3, #152	@ 0x98
 801730a:	443b      	add	r3, r7
 801730c:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8017310:	68bb      	ldr	r3, [r7, #8]
 8017312:	701a      	strb	r2, [r3, #0]
 8017314:	e030      	b.n	8017378 <RegionAU915NextChannel+0x1c0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR2
            if( nextChanParams->Datarate == DR_2 )
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801731c:	2b02      	cmp	r3, #2
 801731e:	d10f      	bne.n	8017340 <RegionAU915NextChannel+0x188>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8017320:	4b1d      	ldr	r3, [pc, #116]	@ (8017398 <RegionAU915NextChannel+0x1e0>)
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	f103 0090 	add.w	r0, r3, #144	@ 0x90
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8017328:	4b1b      	ldr	r3, [pc, #108]	@ (8017398 <RegionAU915NextChannel+0x1e0>)
 801732a:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801732c:	339c      	adds	r3, #156	@ 0x9c
 801732e:	68ba      	ldr	r2, [r7, #8]
 8017330:	4619      	mov	r1, r3
 8017332:	f000 f8e3 	bl	80174fc <RegionBaseUSComputeNext125kHzJoinChannel>
 8017336:	4603      	mov	r3, r0
 8017338:	2b03      	cmp	r3, #3
 801733a:	d11d      	bne.n	8017378 <RegionAU915NextChannel+0x1c0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801733c:	2303      	movs	r3, #3
 801733e:	e027      	b.n	8017390 <RegionAU915NextChannel+0x1d8>
            }
            // 500kHz Channels (64 - 71) DR6
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8017340:	2300      	movs	r3, #0
 8017342:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8017346:	e004      	b.n	8017352 <RegionAU915NextChannel+0x19a>
                {
                    i++;
 8017348:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801734c:	3301      	adds	r3, #1
 801734e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8017352:	4b11      	ldr	r3, [pc, #68]	@ (8017398 <RegionAU915NextChannel+0x1e0>)
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 801735a:	b2da      	uxtb	r2, r3
 801735c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8017360:	fa42 f303 	asr.w	r3, r2, r3
 8017364:	f003 0301 	and.w	r3, r3, #1
 8017368:	2b00      	cmp	r3, #0
 801736a:	d0ed      	beq.n	8017348 <RegionAU915NextChannel+0x190>
                }
                *channel = 64 + i;
 801736c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8017370:	3340      	adds	r3, #64	@ 0x40
 8017372:	b2da      	uxtb	r2, r3
 8017374:	68bb      	ldr	r3, [r7, #8]
 8017376:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS );
 8017378:	4b07      	ldr	r3, [pc, #28]	@ (8017398 <RegionAU915NextChannel+0x1e0>)
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8017380:	68bb      	ldr	r3, [r7, #8]
 8017382:	781b      	ldrb	r3, [r3, #0]
 8017384:	2248      	movs	r2, #72	@ 0x48
 8017386:	4619      	mov	r1, r3
 8017388:	f000 fb1a 	bl	80179c0 <RegionCommonChanDisable>
    }
    return status;
 801738c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AU915 */
}
 8017390:	4618      	mov	r0, r3
 8017392:	3798      	adds	r7, #152	@ 0x98
 8017394:	46bd      	mov	sp, r7
 8017396:	bd80      	pop	{r7, pc}
 8017398:	20001c38 	.word	0x20001c38
 801739c:	20001c3c 	.word	0x20001c3c

080173a0 <RegionAU915SetContinuousWave>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionAU915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80173a0:	b590      	push	{r4, r7, lr}
 80173a2:	b085      	sub	sp, #20
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
#if defined( REGION_AU915 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80173ae:	4b20      	ldr	r3, [pc, #128]	@ (8017430 <RegionAU915SetContinuousWave+0x90>)
 80173b0:	681a      	ldr	r2, [r3, #0]
 80173b2:	4b20      	ldr	r3, [pc, #128]	@ (8017434 <RegionAU915SetContinuousWave+0x94>)
 80173b4:	6819      	ldr	r1, [r3, #0]
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	781b      	ldrb	r3, [r3, #0]
 80173ba:	461c      	mov	r4, r3
 80173bc:	4623      	mov	r3, r4
 80173be:	005b      	lsls	r3, r3, #1
 80173c0:	4423      	add	r3, r4
 80173c2:	009b      	lsls	r3, r3, #2
 80173c4:	440b      	add	r3, r1
 80173c6:	3309      	adds	r3, #9
 80173c8:	781b      	ldrb	r3, [r3, #0]
 80173ca:	4619      	mov	r1, r3
 80173cc:	460b      	mov	r3, r1
 80173ce:	005b      	lsls	r3, r3, #1
 80173d0:	440b      	add	r3, r1
 80173d2:	00db      	lsls	r3, r3, #3
 80173d4:	4413      	add	r3, r2
 80173d6:	3302      	adds	r3, #2
 80173d8:	f993 3000 	ldrsb.w	r3, [r3]
 80173dc:	4619      	mov	r1, r3
 80173de:	f000 ffca 	bl	8018376 <RegionCommonLimitTxPower>
 80173e2:	4603      	mov	r3, r0
 80173e4:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80173e6:	2300      	movs	r3, #0
 80173e8:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80173ea:	4b12      	ldr	r3, [pc, #72]	@ (8017434 <RegionAU915SetContinuousWave+0x94>)
 80173ec:	681a      	ldr	r2, [r3, #0]
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	781b      	ldrb	r3, [r3, #0]
 80173f2:	4619      	mov	r1, r3
 80173f4:	460b      	mov	r3, r1
 80173f6:	005b      	lsls	r3, r3, #1
 80173f8:	440b      	add	r3, r1
 80173fa:	009b      	lsls	r3, r3, #2
 80173fc:	4413      	add	r3, r2
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	6859      	ldr	r1, [r3, #4]
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	689a      	ldr	r2, [r3, #8]
 801740a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801740e:	4618      	mov	r0, r3
 8017410:	f000 fe22 	bl	8018058 <RegionCommonComputeTxPower>
 8017414:	4603      	mov	r3, r0
 8017416:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8017418:	4b07      	ldr	r3, [pc, #28]	@ (8017438 <RegionAU915SetContinuousWave+0x98>)
 801741a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801741c:	687a      	ldr	r2, [r7, #4]
 801741e:	8992      	ldrh	r2, [r2, #12]
 8017420:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8017424:	68b8      	ldr	r0, [r7, #8]
 8017426:	4798      	blx	r3
#endif /* REGION_AU915 */
}
 8017428:	bf00      	nop
 801742a:	3714      	adds	r7, #20
 801742c:	46bd      	mov	sp, r7
 801742e:	bd90      	pop	{r4, r7, pc}
 8017430:	20001c38 	.word	0x20001c38
 8017434:	20001c3c 	.word	0x20001c3c
 8017438:	0801df78 	.word	0x0801df78

0801743c <RegionAU915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionAU915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801743c:	b480      	push	{r7}
 801743e:	b085      	sub	sp, #20
 8017440:	af00      	add	r7, sp, #0
 8017442:	4603      	mov	r3, r0
 8017444:	71fb      	strb	r3, [r7, #7]
 8017446:	460b      	mov	r3, r1
 8017448:	71bb      	strb	r3, [r7, #6]
 801744a:	4613      	mov	r3, r2
 801744c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_AU915 )
    int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 801744e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017452:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017456:	480d      	ldr	r0, [pc, #52]	@ (801748c <RegionAU915ApplyDrOffset+0x50>)
 8017458:	4613      	mov	r3, r2
 801745a:	005b      	lsls	r3, r3, #1
 801745c:	4413      	add	r3, r2
 801745e:	005b      	lsls	r3, r3, #1
 8017460:	4403      	add	r3, r0
 8017462:	440b      	add	r3, r1
 8017464:	781b      	ldrb	r3, [r3, #0]
 8017466:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8017468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801746c:	2b00      	cmp	r3, #0
 801746e:	da07      	bge.n	8017480 <RegionAU915ApplyDrOffset+0x44>
    {
        if( downlinkDwellTime == 0 )
 8017470:	79fb      	ldrb	r3, [r7, #7]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d102      	bne.n	801747c <RegionAU915ApplyDrOffset+0x40>
        {
            datarate = AU915_TX_MIN_DATARATE;
 8017476:	2300      	movs	r3, #0
 8017478:	73fb      	strb	r3, [r7, #15]
 801747a:	e001      	b.n	8017480 <RegionAU915ApplyDrOffset+0x44>
        }
        else
        {
            datarate = AU915_DWELL_LIMIT_DATARATE;
 801747c:	2302      	movs	r3, #2
 801747e:	73fb      	strb	r3, [r7, #15]
        }
    }
    return datarate;
 8017480:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_AU915 */
}
 8017482:	4618      	mov	r0, r3
 8017484:	3714      	adds	r7, #20
 8017486:	46bd      	mov	sp, r7
 8017488:	bc80      	pop	{r7}
 801748a:	4770      	bx	lr
 801748c:	0801df0c 	.word	0x0801df0c

08017490 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8017490:	b480      	push	{r7}
 8017492:	b087      	sub	sp, #28
 8017494:	af00      	add	r7, sp, #0
 8017496:	4603      	mov	r3, r0
 8017498:	60b9      	str	r1, [r7, #8]
 801749a:	607a      	str	r2, [r7, #4]
 801749c:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 801749e:	68bb      	ldr	r3, [r7, #8]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d002      	beq.n	80174aa <FindAvailable125kHzChannels+0x1a>
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d101      	bne.n	80174ae <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80174aa:	2303      	movs	r3, #3
 80174ac:	e021      	b.n	80174f2 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	2200      	movs	r2, #0
 80174b2:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80174b4:	2300      	movs	r3, #0
 80174b6:	75fb      	strb	r3, [r7, #23]
 80174b8:	e017      	b.n	80174ea <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 80174ba:	89fa      	ldrh	r2, [r7, #14]
 80174bc:	7dfb      	ldrb	r3, [r7, #23]
 80174be:	fa42 f303 	asr.w	r3, r2, r3
 80174c2:	f003 0301 	and.w	r3, r3, #1
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d00c      	beq.n	80174e4 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	781b      	ldrb	r3, [r3, #0]
 80174ce:	461a      	mov	r2, r3
 80174d0:	68bb      	ldr	r3, [r7, #8]
 80174d2:	4413      	add	r3, r2
 80174d4:	7dfa      	ldrb	r2, [r7, #23]
 80174d6:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	781b      	ldrb	r3, [r3, #0]
 80174dc:	3301      	adds	r3, #1
 80174de:	b2da      	uxtb	r2, r3
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80174e4:	7dfb      	ldrb	r3, [r7, #23]
 80174e6:	3301      	adds	r3, #1
 80174e8:	75fb      	strb	r3, [r7, #23]
 80174ea:	7dfb      	ldrb	r3, [r7, #23]
 80174ec:	2b07      	cmp	r3, #7
 80174ee:	d9e4      	bls.n	80174ba <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 80174f0:	2300      	movs	r3, #0
}
 80174f2:	4618      	mov	r0, r3
 80174f4:	371c      	adds	r7, #28
 80174f6:	46bd      	mov	sp, r7
 80174f8:	bc80      	pop	{r7}
 80174fa:	4770      	bx	lr

080174fc <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 80174fc:	b590      	push	{r4, r7, lr}
 80174fe:	b089      	sub	sp, #36	@ 0x24
 8017500:	af00      	add	r7, sp, #0
 8017502:	60f8      	str	r0, [r7, #12]
 8017504:	60b9      	str	r1, [r7, #8]
 8017506:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8017508:	2300      	movs	r3, #0
 801750a:	617b      	str	r3, [r7, #20]
 801750c:	2300      	movs	r3, #0
 801750e:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8017510:	2300      	movs	r3, #0
 8017512:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	2b00      	cmp	r3, #0
 8017518:	d005      	beq.n	8017526 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801751a:	68bb      	ldr	r3, [r7, #8]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d002      	beq.n	8017526 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d101      	bne.n	801752a <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017526:	2303      	movs	r3, #3
 8017528:	e055      	b.n	80175d6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 801752a:	68bb      	ldr	r3, [r7, #8]
 801752c:	781b      	ldrb	r3, [r3, #0]
 801752e:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8017530:	7f7b      	ldrb	r3, [r7, #29]
 8017532:	085b      	lsrs	r3, r3, #1
 8017534:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8017536:	7f7b      	ldrb	r3, [r7, #29]
 8017538:	f003 0301 	and.w	r3, r3, #1
 801753c:	b2db      	uxtb	r3, r3
 801753e:	2b00      	cmp	r3, #0
 8017540:	d107      	bne.n	8017552 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8017542:	7f3b      	ldrb	r3, [r7, #28]
 8017544:	005b      	lsls	r3, r3, #1
 8017546:	68fa      	ldr	r2, [r7, #12]
 8017548:	4413      	add	r3, r2
 801754a:	881b      	ldrh	r3, [r3, #0]
 801754c:	b2db      	uxtb	r3, r3
 801754e:	83fb      	strh	r3, [r7, #30]
 8017550:	e006      	b.n	8017560 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8017552:	7f3b      	ldrb	r3, [r7, #28]
 8017554:	005b      	lsls	r3, r3, #1
 8017556:	68fa      	ldr	r2, [r7, #12]
 8017558:	4413      	add	r3, r2
 801755a:	881b      	ldrh	r3, [r3, #0]
 801755c:	0a1b      	lsrs	r3, r3, #8
 801755e:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8017560:	f107 0213 	add.w	r2, r7, #19
 8017564:	f107 0114 	add.w	r1, r7, #20
 8017568:	8bfb      	ldrh	r3, [r7, #30]
 801756a:	4618      	mov	r0, r3
 801756c:	f7ff ff90 	bl	8017490 <FindAvailable125kHzChannels>
 8017570:	4603      	mov	r3, r0
 8017572:	2b03      	cmp	r3, #3
 8017574:	d101      	bne.n	801757a <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8017576:	2303      	movs	r3, #3
 8017578:	e02d      	b.n	80175d6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 801757a:	7cfb      	ldrb	r3, [r7, #19]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d011      	beq.n	80175a4 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8017580:	7f7b      	ldrb	r3, [r7, #29]
 8017582:	00db      	lsls	r3, r3, #3
 8017584:	b2dc      	uxtb	r4, r3
 8017586:	7cfb      	ldrb	r3, [r7, #19]
 8017588:	3b01      	subs	r3, #1
 801758a:	4619      	mov	r1, r3
 801758c:	2000      	movs	r0, #0
 801758e:	f000 ff9f 	bl	80184d0 <randr>
 8017592:	4603      	mov	r3, r0
 8017594:	3320      	adds	r3, #32
 8017596:	443b      	add	r3, r7
 8017598:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801759c:	4423      	add	r3, r4
 801759e:	b2da      	uxtb	r2, r3
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 80175a4:	7f7b      	ldrb	r3, [r7, #29]
 80175a6:	3301      	adds	r3, #1
 80175a8:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 80175aa:	7f7b      	ldrb	r3, [r7, #29]
 80175ac:	2b07      	cmp	r3, #7
 80175ae:	d901      	bls.n	80175b4 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 80175b0:	2300      	movs	r3, #0
 80175b2:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 80175b4:	7cfb      	ldrb	r3, [r7, #19]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d104      	bne.n	80175c4 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 80175ba:	68bb      	ldr	r3, [r7, #8]
 80175bc:	781b      	ldrb	r3, [r3, #0]
 80175be:	7f7a      	ldrb	r2, [r7, #29]
 80175c0:	429a      	cmp	r2, r3
 80175c2:	d1b5      	bne.n	8017530 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 80175c4:	7cfb      	ldrb	r3, [r7, #19]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d004      	beq.n	80175d4 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 80175ca:	68bb      	ldr	r3, [r7, #8]
 80175cc:	7f7a      	ldrb	r2, [r7, #29]
 80175ce:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80175d0:	2300      	movs	r3, #0
 80175d2:	e000      	b.n	80175d6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 80175d4:	2303      	movs	r3, #3
}
 80175d6:	4618      	mov	r0, r3
 80175d8:	3724      	adds	r7, #36	@ 0x24
 80175da:	46bd      	mov	sp, r7
 80175dc:	bd90      	pop	{r4, r7, pc}

080175de <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 80175de:	b480      	push	{r7}
 80175e0:	b085      	sub	sp, #20
 80175e2:	af00      	add	r7, sp, #0
 80175e4:	4603      	mov	r3, r0
 80175e6:	60b9      	str	r1, [r7, #8]
 80175e8:	607a      	str	r2, [r7, #4]
 80175ea:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 80175ec:	7bfb      	ldrb	r3, [r7, #15]
 80175ee:	687a      	ldr	r2, [r7, #4]
 80175f0:	fb03 f202 	mul.w	r2, r3, r2
 80175f4:	68bb      	ldr	r3, [r7, #8]
 80175f6:	4413      	add	r3, r2
}
 80175f8:	4618      	mov	r0, r3
 80175fa:	3714      	adds	r7, #20
 80175fc:	46bd      	mov	sp, r7
 80175fe:	bc80      	pop	{r7}
 8017600:	4770      	bx	lr

08017602 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017602:	b480      	push	{r7}
 8017604:	b087      	sub	sp, #28
 8017606:	af00      	add	r7, sp, #0
 8017608:	60f8      	str	r0, [r7, #12]
 801760a:	4608      	mov	r0, r1
 801760c:	4639      	mov	r1, r7
 801760e:	e881 000c 	stmia.w	r1, {r2, r3}
 8017612:	4603      	mov	r3, r0
 8017614:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	881b      	ldrh	r3, [r3, #0]
 801761a:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801761c:	7afb      	ldrb	r3, [r7, #11]
 801761e:	f083 0301 	eor.w	r3, r3, #1
 8017622:	b2db      	uxtb	r3, r3
 8017624:	2b00      	cmp	r3, #0
 8017626:	d01b      	beq.n	8017660 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017628:	f242 7310 	movw	r3, #10000	@ 0x2710
 801762c:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801762e:	683b      	ldr	r3, [r7, #0]
 8017630:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8017634:	d202      	bcs.n	801763c <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8017636:	2364      	movs	r3, #100	@ 0x64
 8017638:	82bb      	strh	r3, [r7, #20]
 801763a:	e00b      	b.n	8017654 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801763c:	683b      	ldr	r3, [r7, #0]
 801763e:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8017642:	4293      	cmp	r3, r2
 8017644:	d803      	bhi.n	801764e <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8017646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801764a:	82bb      	strh	r3, [r7, #20]
 801764c:	e002      	b.n	8017654 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801764e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8017652:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8017654:	8aba      	ldrh	r2, [r7, #20]
 8017656:	8afb      	ldrh	r3, [r7, #22]
 8017658:	4293      	cmp	r3, r2
 801765a:	bf38      	it	cc
 801765c:	4613      	movcc	r3, r2
 801765e:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8017660:	8afb      	ldrh	r3, [r7, #22]
 8017662:	2b00      	cmp	r3, #0
 8017664:	d101      	bne.n	801766a <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8017666:	2301      	movs	r3, #1
 8017668:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 801766a:	8afb      	ldrh	r3, [r7, #22]
}
 801766c:	4618      	mov	r0, r3
 801766e:	371c      	adds	r7, #28
 8017670:	46bd      	mov	sp, r7
 8017672:	bc80      	pop	{r7}
 8017674:	4770      	bx	lr
	...

08017678 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8017678:	b580      	push	{r7, lr}
 801767a:	b08e      	sub	sp, #56	@ 0x38
 801767c:	af02      	add	r7, sp, #8
 801767e:	60f8      	str	r0, [r7, #12]
 8017680:	4608      	mov	r0, r1
 8017682:	4639      	mov	r1, r7
 8017684:	e881 000c 	stmia.w	r1, {r2, r3}
 8017688:	4603      	mov	r3, r0
 801768a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	881b      	ldrh	r3, [r3, #0]
 8017690:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017692:	4b4b      	ldr	r3, [pc, #300]	@ (80177c0 <SetMaxTimeCredits+0x148>)
 8017694:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8017696:	463b      	mov	r3, r7
 8017698:	e893 0003 	ldmia.w	r3, {r0, r1}
 801769c:	f004 fbb8 	bl	801be10 <SysTimeToMs>
 80176a0:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 80176a2:	f107 0314 	add.w	r3, r7, #20
 80176a6:	2200      	movs	r2, #0
 80176a8:	601a      	str	r2, [r3, #0]
 80176aa:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80176ac:	7af9      	ldrb	r1, [r7, #11]
 80176ae:	463b      	mov	r3, r7
 80176b0:	cb0c      	ldmia	r3, {r2, r3}
 80176b2:	68f8      	ldr	r0, [r7, #12]
 80176b4:	f7ff ffa5 	bl	8017602 <GetDutyCycle>
 80176b8:	4603      	mov	r3, r0
 80176ba:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 80176bc:	7afb      	ldrb	r3, [r7, #11]
 80176be:	f083 0301 	eor.w	r3, r3, #1
 80176c2:	b2db      	uxtb	r3, r3
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d062      	beq.n	801778e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80176c8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80176ca:	2b64      	cmp	r3, #100	@ 0x64
 80176cc:	d105      	bne.n	80176da <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80176ce:	4b3c      	ldr	r3, [pc, #240]	@ (80177c0 <SetMaxTimeCredits+0x148>)
 80176d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80176d6:	609a      	str	r2, [r3, #8]
 80176d8:	e00b      	b.n	80176f2 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80176da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80176dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80176e0:	d105      	bne.n	80176ee <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80176e2:	4b38      	ldr	r3, [pc, #224]	@ (80177c4 <SetMaxTimeCredits+0x14c>)
 80176e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80176ea:	609a      	str	r2, [r3, #8]
 80176ec:	e001      	b.n	80176f2 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80176ee:	4b36      	ldr	r3, [pc, #216]	@ (80177c8 <SetMaxTimeCredits+0x150>)
 80176f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	689a      	ldr	r2, [r3, #8]
 80176f6:	f107 031c 	add.w	r3, r7, #28
 80176fa:	4611      	mov	r1, r2
 80176fc:	4618      	mov	r0, r3
 80176fe:	f004 fbaf 	bl	801be60 <SysTimeFromMs>
 8017702:	f107 0014 	add.w	r0, r7, #20
 8017706:	6a3b      	ldr	r3, [r7, #32]
 8017708:	9300      	str	r3, [sp, #0]
 801770a:	69fb      	ldr	r3, [r7, #28]
 801770c:	463a      	mov	r2, r7
 801770e:	ca06      	ldmia	r2, {r1, r2}
 8017710:	f004 fabf 	bl	801bc92 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017714:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8017718:	f083 0301 	eor.w	r3, r3, #1
 801771c:	b2db      	uxtb	r3, r3
 801771e:	2b00      	cmp	r3, #0
 8017720:	d006      	beq.n	8017730 <SetMaxTimeCredits+0xb8>
 8017722:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017726:	f083 0301 	eor.w	r3, r3, #1
 801772a:	b2db      	uxtb	r3, r3
 801772c:	2b00      	cmp	r3, #0
 801772e:	d108      	bne.n	8017742 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017734:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017736:	429a      	cmp	r2, r3
 8017738:	d103      	bne.n	8017742 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 801773a:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 801773c:	4a23      	ldr	r2, [pc, #140]	@ (80177cc <SetMaxTimeCredits+0x154>)
 801773e:	4293      	cmp	r3, r2
 8017740:	d92f      	bls.n	80177a2 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017746:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017748:	683b      	ldr	r3, [r7, #0]
 801774a:	4a21      	ldr	r2, [pc, #132]	@ (80177d0 <SetMaxTimeCredits+0x158>)
 801774c:	4293      	cmp	r3, r2
 801774e:	d928      	bls.n	80177a2 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8017750:	683b      	ldr	r3, [r7, #0]
 8017752:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8017756:	3b30      	subs	r3, #48	@ 0x30
 8017758:	4a1e      	ldr	r2, [pc, #120]	@ (80177d4 <SetMaxTimeCredits+0x15c>)
 801775a:	fba2 2303 	umull	r2, r3, r2, r3
 801775e:	0c1b      	lsrs	r3, r3, #16
 8017760:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8017762:	697b      	ldr	r3, [r7, #20]
 8017764:	4a1c      	ldr	r2, [pc, #112]	@ (80177d8 <SetMaxTimeCredits+0x160>)
 8017766:	fb02 f303 	mul.w	r3, r2, r3
 801776a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801776c:	697b      	ldr	r3, [r7, #20]
 801776e:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 8017772:	3330      	adds	r3, #48	@ 0x30
 8017774:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8017776:	2300      	movs	r3, #0
 8017778:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801777a:	f107 0314 	add.w	r3, r7, #20
 801777e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017782:	f004 fb45 	bl	801be10 <SysTimeToMs>
 8017786:	4602      	mov	r2, r0
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	609a      	str	r2, [r3, #8]
 801778c:	e009      	b.n	80177a2 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801778e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8017792:	f083 0301 	eor.w	r3, r3, #1
 8017796:	b2db      	uxtb	r3, r3
 8017798:	2b00      	cmp	r3, #0
 801779a:	d002      	beq.n	80177a2 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80177a0:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	685b      	ldr	r3, [r3, #4]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d102      	bne.n	80177b0 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80177ae:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80177b4:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80177b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 80177b8:	4618      	mov	r0, r3
 80177ba:	3730      	adds	r7, #48	@ 0x30
 80177bc:	46bd      	mov	sp, r7
 80177be:	bd80      	pop	{r7, pc}
 80177c0:	001b7740 	.word	0x001b7740
 80177c4:	0112a880 	.word	0x0112a880
 80177c8:	02932e00 	.word	0x02932e00
 80177cc:	0001517f 	.word	0x0001517f
 80177d0:	0001ec2f 	.word	0x0001ec2f
 80177d4:	c22e4507 	.word	0xc22e4507
 80177d8:	00015180 	.word	0x00015180

080177dc <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b086      	sub	sp, #24
 80177e0:	af02      	add	r7, sp, #8
 80177e2:	6078      	str	r0, [r7, #4]
 80177e4:	4608      	mov	r0, r1
 80177e6:	4611      	mov	r1, r2
 80177e8:	461a      	mov	r2, r3
 80177ea:	4603      	mov	r3, r0
 80177ec:	70fb      	strb	r3, [r7, #3]
 80177ee:	460b      	mov	r3, r1
 80177f0:	70bb      	strb	r3, [r7, #2]
 80177f2:	4613      	mov	r3, r2
 80177f4:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80177f6:	78f9      	ldrb	r1, [r7, #3]
 80177f8:	787b      	ldrb	r3, [r7, #1]
 80177fa:	9301      	str	r3, [sp, #4]
 80177fc:	78bb      	ldrb	r3, [r7, #2]
 80177fe:	9300      	str	r3, [sp, #0]
 8017800:	f107 0318 	add.w	r3, r7, #24
 8017804:	cb0c      	ldmia	r3, {r2, r3}
 8017806:	6878      	ldr	r0, [r7, #4]
 8017808:	f7ff ff36 	bl	8017678 <SetMaxTimeCredits>
 801780c:	4603      	mov	r3, r0
 801780e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8017810:	78fb      	ldrb	r3, [r7, #3]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d00a      	beq.n	801782c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	685b      	ldr	r3, [r3, #4]
 801781a:	4618      	mov	r0, r3
 801781c:	f005 f932 	bl	801ca84 <UTIL_TIMER_GetElapsedTime>
 8017820:	4602      	mov	r2, r0
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	68db      	ldr	r3, [r3, #12]
 8017826:	441a      	add	r2, r3
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	68da      	ldr	r2, [r3, #12]
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	691b      	ldr	r3, [r3, #16]
 8017834:	429a      	cmp	r2, r3
 8017836:	d903      	bls.n	8017840 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	691a      	ldr	r2, [r3, #16]
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	6a3a      	ldr	r2, [r7, #32]
 8017844:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8017846:	89fb      	ldrh	r3, [r7, #14]
}
 8017848:	4618      	mov	r0, r3
 801784a:	3710      	adds	r7, #16
 801784c:	46bd      	mov	sp, r7
 801784e:	bd80      	pop	{r7, pc}

08017850 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017850:	b480      	push	{r7}
 8017852:	b085      	sub	sp, #20
 8017854:	af00      	add	r7, sp, #0
 8017856:	4603      	mov	r3, r0
 8017858:	460a      	mov	r2, r1
 801785a:	80fb      	strh	r3, [r7, #6]
 801785c:	4613      	mov	r3, r2
 801785e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8017860:	2300      	movs	r3, #0
 8017862:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8017864:	2300      	movs	r3, #0
 8017866:	73bb      	strb	r3, [r7, #14]
 8017868:	e011      	b.n	801788e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801786a:	88fa      	ldrh	r2, [r7, #6]
 801786c:	7bbb      	ldrb	r3, [r7, #14]
 801786e:	2101      	movs	r1, #1
 8017870:	fa01 f303 	lsl.w	r3, r1, r3
 8017874:	401a      	ands	r2, r3
 8017876:	7bbb      	ldrb	r3, [r7, #14]
 8017878:	2101      	movs	r1, #1
 801787a:	fa01 f303 	lsl.w	r3, r1, r3
 801787e:	429a      	cmp	r2, r3
 8017880:	d102      	bne.n	8017888 <CountChannels+0x38>
        {
            nbActiveBits++;
 8017882:	7bfb      	ldrb	r3, [r7, #15]
 8017884:	3301      	adds	r3, #1
 8017886:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8017888:	7bbb      	ldrb	r3, [r7, #14]
 801788a:	3301      	adds	r3, #1
 801788c:	73bb      	strb	r3, [r7, #14]
 801788e:	7bba      	ldrb	r2, [r7, #14]
 8017890:	797b      	ldrb	r3, [r7, #5]
 8017892:	429a      	cmp	r2, r3
 8017894:	d3e9      	bcc.n	801786a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8017896:	7bfb      	ldrb	r3, [r7, #15]
}
 8017898:	4618      	mov	r0, r3
 801789a:	3714      	adds	r7, #20
 801789c:	46bd      	mov	sp, r7
 801789e:	bc80      	pop	{r7}
 80178a0:	4770      	bx	lr

080178a2 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80178a2:	b580      	push	{r7, lr}
 80178a4:	b084      	sub	sp, #16
 80178a6:	af00      	add	r7, sp, #0
 80178a8:	6039      	str	r1, [r7, #0]
 80178aa:	4611      	mov	r1, r2
 80178ac:	461a      	mov	r2, r3
 80178ae:	4603      	mov	r3, r0
 80178b0:	71fb      	strb	r3, [r7, #7]
 80178b2:	460b      	mov	r3, r1
 80178b4:	71bb      	strb	r3, [r7, #6]
 80178b6:	4613      	mov	r3, r2
 80178b8:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80178ba:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80178be:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80178c2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80178c6:	4618      	mov	r0, r3
 80178c8:	f000 f85d 	bl	8017986 <RegionCommonValueInRange>
 80178cc:	4603      	mov	r3, r0
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d101      	bne.n	80178d6 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80178d2:	2300      	movs	r3, #0
 80178d4:	e053      	b.n	801797e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80178d6:	2300      	movs	r3, #0
 80178d8:	73fb      	strb	r3, [r7, #15]
 80178da:	2300      	movs	r3, #0
 80178dc:	73bb      	strb	r3, [r7, #14]
 80178de:	e049      	b.n	8017974 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80178e0:	2300      	movs	r3, #0
 80178e2:	737b      	strb	r3, [r7, #13]
 80178e4:	e03d      	b.n	8017962 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80178e6:	7bbb      	ldrb	r3, [r7, #14]
 80178e8:	005b      	lsls	r3, r3, #1
 80178ea:	683a      	ldr	r2, [r7, #0]
 80178ec:	4413      	add	r3, r2
 80178ee:	881b      	ldrh	r3, [r3, #0]
 80178f0:	461a      	mov	r2, r3
 80178f2:	7b7b      	ldrb	r3, [r7, #13]
 80178f4:	fa42 f303 	asr.w	r3, r2, r3
 80178f8:	f003 0301 	and.w	r3, r3, #1
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d02d      	beq.n	801795c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017900:	7bfa      	ldrb	r2, [r7, #15]
 8017902:	7b7b      	ldrb	r3, [r7, #13]
 8017904:	4413      	add	r3, r2
 8017906:	461a      	mov	r2, r3
 8017908:	4613      	mov	r3, r2
 801790a:	005b      	lsls	r3, r3, #1
 801790c:	4413      	add	r3, r2
 801790e:	009b      	lsls	r3, r3, #2
 8017910:	461a      	mov	r2, r3
 8017912:	69fb      	ldr	r3, [r7, #28]
 8017914:	4413      	add	r3, r2
 8017916:	7a1b      	ldrb	r3, [r3, #8]
 8017918:	f343 0303 	sbfx	r3, r3, #0, #4
 801791c:	b25b      	sxtb	r3, r3
 801791e:	f003 030f 	and.w	r3, r3, #15
 8017922:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8017924:	7bfa      	ldrb	r2, [r7, #15]
 8017926:	7b7b      	ldrb	r3, [r7, #13]
 8017928:	4413      	add	r3, r2
 801792a:	461a      	mov	r2, r3
 801792c:	4613      	mov	r3, r2
 801792e:	005b      	lsls	r3, r3, #1
 8017930:	4413      	add	r3, r2
 8017932:	009b      	lsls	r3, r3, #2
 8017934:	461a      	mov	r2, r3
 8017936:	69fb      	ldr	r3, [r7, #28]
 8017938:	4413      	add	r3, r2
 801793a:	7a1b      	ldrb	r3, [r3, #8]
 801793c:	f343 1303 	sbfx	r3, r3, #4, #4
 8017940:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017942:	f003 030f 	and.w	r3, r3, #15
 8017946:	b25a      	sxtb	r2, r3
 8017948:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801794c:	4618      	mov	r0, r3
 801794e:	f000 f81a 	bl	8017986 <RegionCommonValueInRange>
 8017952:	4603      	mov	r3, r0
 8017954:	2b01      	cmp	r3, #1
 8017956:	d101      	bne.n	801795c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8017958:	2301      	movs	r3, #1
 801795a:	e010      	b.n	801797e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 801795c:	7b7b      	ldrb	r3, [r7, #13]
 801795e:	3301      	adds	r3, #1
 8017960:	737b      	strb	r3, [r7, #13]
 8017962:	7b7b      	ldrb	r3, [r7, #13]
 8017964:	2b0f      	cmp	r3, #15
 8017966:	d9be      	bls.n	80178e6 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017968:	7bfb      	ldrb	r3, [r7, #15]
 801796a:	3310      	adds	r3, #16
 801796c:	73fb      	strb	r3, [r7, #15]
 801796e:	7bbb      	ldrb	r3, [r7, #14]
 8017970:	3301      	adds	r3, #1
 8017972:	73bb      	strb	r3, [r7, #14]
 8017974:	7bfa      	ldrb	r2, [r7, #15]
 8017976:	79fb      	ldrb	r3, [r7, #7]
 8017978:	429a      	cmp	r2, r3
 801797a:	d3b1      	bcc.n	80178e0 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 801797c:	2300      	movs	r3, #0
}
 801797e:	4618      	mov	r0, r3
 8017980:	3710      	adds	r7, #16
 8017982:	46bd      	mov	sp, r7
 8017984:	bd80      	pop	{r7, pc}

08017986 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8017986:	b480      	push	{r7}
 8017988:	b083      	sub	sp, #12
 801798a:	af00      	add	r7, sp, #0
 801798c:	4603      	mov	r3, r0
 801798e:	71fb      	strb	r3, [r7, #7]
 8017990:	460b      	mov	r3, r1
 8017992:	71bb      	strb	r3, [r7, #6]
 8017994:	4613      	mov	r3, r2
 8017996:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8017998:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801799c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80179a0:	429a      	cmp	r2, r3
 80179a2:	db07      	blt.n	80179b4 <RegionCommonValueInRange+0x2e>
 80179a4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80179a8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80179ac:	429a      	cmp	r2, r3
 80179ae:	dc01      	bgt.n	80179b4 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80179b0:	2301      	movs	r3, #1
 80179b2:	e000      	b.n	80179b6 <RegionCommonValueInRange+0x30>
    }
    return 0;
 80179b4:	2300      	movs	r3, #0
}
 80179b6:	4618      	mov	r0, r3
 80179b8:	370c      	adds	r7, #12
 80179ba:	46bd      	mov	sp, r7
 80179bc:	bc80      	pop	{r7}
 80179be:	4770      	bx	lr

080179c0 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80179c0:	b480      	push	{r7}
 80179c2:	b085      	sub	sp, #20
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
 80179c8:	460b      	mov	r3, r1
 80179ca:	70fb      	strb	r3, [r7, #3]
 80179cc:	4613      	mov	r3, r2
 80179ce:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80179d0:	78fb      	ldrb	r3, [r7, #3]
 80179d2:	091b      	lsrs	r3, r3, #4
 80179d4:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80179d6:	78bb      	ldrb	r3, [r7, #2]
 80179d8:	091b      	lsrs	r3, r3, #4
 80179da:	b2db      	uxtb	r3, r3
 80179dc:	7bfa      	ldrb	r2, [r7, #15]
 80179de:	429a      	cmp	r2, r3
 80179e0:	d803      	bhi.n	80179ea <RegionCommonChanDisable+0x2a>
 80179e2:	78fa      	ldrb	r2, [r7, #3]
 80179e4:	78bb      	ldrb	r3, [r7, #2]
 80179e6:	429a      	cmp	r2, r3
 80179e8:	d301      	bcc.n	80179ee <RegionCommonChanDisable+0x2e>
    {
        return false;
 80179ea:	2300      	movs	r3, #0
 80179ec:	e017      	b.n	8017a1e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80179ee:	7bfb      	ldrb	r3, [r7, #15]
 80179f0:	005b      	lsls	r3, r3, #1
 80179f2:	687a      	ldr	r2, [r7, #4]
 80179f4:	4413      	add	r3, r2
 80179f6:	881b      	ldrh	r3, [r3, #0]
 80179f8:	b21a      	sxth	r2, r3
 80179fa:	78fb      	ldrb	r3, [r7, #3]
 80179fc:	f003 030f 	and.w	r3, r3, #15
 8017a00:	2101      	movs	r1, #1
 8017a02:	fa01 f303 	lsl.w	r3, r1, r3
 8017a06:	b21b      	sxth	r3, r3
 8017a08:	43db      	mvns	r3, r3
 8017a0a:	b21b      	sxth	r3, r3
 8017a0c:	4013      	ands	r3, r2
 8017a0e:	b219      	sxth	r1, r3
 8017a10:	7bfb      	ldrb	r3, [r7, #15]
 8017a12:	005b      	lsls	r3, r3, #1
 8017a14:	687a      	ldr	r2, [r7, #4]
 8017a16:	4413      	add	r3, r2
 8017a18:	b28a      	uxth	r2, r1
 8017a1a:	801a      	strh	r2, [r3, #0]

    return true;
 8017a1c:	2301      	movs	r3, #1
}
 8017a1e:	4618      	mov	r0, r3
 8017a20:	3714      	adds	r7, #20
 8017a22:	46bd      	mov	sp, r7
 8017a24:	bc80      	pop	{r7}
 8017a26:	4770      	bx	lr

08017a28 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b084      	sub	sp, #16
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
 8017a30:	460b      	mov	r3, r1
 8017a32:	70fb      	strb	r3, [r7, #3]
 8017a34:	4613      	mov	r3, r2
 8017a36:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8017a38:	2300      	movs	r3, #0
 8017a3a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d101      	bne.n	8017a46 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8017a42:	2300      	movs	r3, #0
 8017a44:	e018      	b.n	8017a78 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017a46:	78fb      	ldrb	r3, [r7, #3]
 8017a48:	73bb      	strb	r3, [r7, #14]
 8017a4a:	e010      	b.n	8017a6e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017a4c:	7bbb      	ldrb	r3, [r7, #14]
 8017a4e:	005b      	lsls	r3, r3, #1
 8017a50:	687a      	ldr	r2, [r7, #4]
 8017a52:	4413      	add	r3, r2
 8017a54:	881b      	ldrh	r3, [r3, #0]
 8017a56:	2110      	movs	r1, #16
 8017a58:	4618      	mov	r0, r3
 8017a5a:	f7ff fef9 	bl	8017850 <CountChannels>
 8017a5e:	4603      	mov	r3, r0
 8017a60:	461a      	mov	r2, r3
 8017a62:	7bfb      	ldrb	r3, [r7, #15]
 8017a64:	4413      	add	r3, r2
 8017a66:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017a68:	7bbb      	ldrb	r3, [r7, #14]
 8017a6a:	3301      	adds	r3, #1
 8017a6c:	73bb      	strb	r3, [r7, #14]
 8017a6e:	7bba      	ldrb	r2, [r7, #14]
 8017a70:	78bb      	ldrb	r3, [r7, #2]
 8017a72:	429a      	cmp	r2, r3
 8017a74:	d3ea      	bcc.n	8017a4c <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8017a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a78:	4618      	mov	r0, r3
 8017a7a:	3710      	adds	r7, #16
 8017a7c:	46bd      	mov	sp, r7
 8017a7e:	bd80      	pop	{r7, pc}

08017a80 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017a80:	b480      	push	{r7}
 8017a82:	b087      	sub	sp, #28
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	60f8      	str	r0, [r7, #12]
 8017a88:	60b9      	str	r1, [r7, #8]
 8017a8a:	4613      	mov	r3, r2
 8017a8c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d016      	beq.n	8017ac2 <RegionCommonChanMaskCopy+0x42>
 8017a94:	68bb      	ldr	r3, [r7, #8]
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d013      	beq.n	8017ac2 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	75fb      	strb	r3, [r7, #23]
 8017a9e:	e00c      	b.n	8017aba <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017aa0:	7dfb      	ldrb	r3, [r7, #23]
 8017aa2:	005b      	lsls	r3, r3, #1
 8017aa4:	68ba      	ldr	r2, [r7, #8]
 8017aa6:	441a      	add	r2, r3
 8017aa8:	7dfb      	ldrb	r3, [r7, #23]
 8017aaa:	005b      	lsls	r3, r3, #1
 8017aac:	68f9      	ldr	r1, [r7, #12]
 8017aae:	440b      	add	r3, r1
 8017ab0:	8812      	ldrh	r2, [r2, #0]
 8017ab2:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017ab4:	7dfb      	ldrb	r3, [r7, #23]
 8017ab6:	3301      	adds	r3, #1
 8017ab8:	75fb      	strb	r3, [r7, #23]
 8017aba:	7dfa      	ldrb	r2, [r7, #23]
 8017abc:	79fb      	ldrb	r3, [r7, #7]
 8017abe:	429a      	cmp	r2, r3
 8017ac0:	d3ee      	bcc.n	8017aa0 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8017ac2:	bf00      	nop
 8017ac4:	371c      	adds	r7, #28
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	bc80      	pop	{r7}
 8017aca:	4770      	bx	lr

08017acc <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017acc:	b082      	sub	sp, #8
 8017ace:	b580      	push	{r7, lr}
 8017ad0:	b086      	sub	sp, #24
 8017ad2:	af00      	add	r7, sp, #0
 8017ad4:	60f8      	str	r0, [r7, #12]
 8017ad6:	60b9      	str	r1, [r7, #8]
 8017ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8017ada:	4613      	mov	r3, r2
 8017adc:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017ade:	79f9      	ldrb	r1, [r7, #7]
 8017ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017ae4:	cb0c      	ldmia	r3, {r2, r3}
 8017ae6:	68f8      	ldr	r0, [r7, #12]
 8017ae8:	f7ff fd8b 	bl	8017602 <GetDutyCycle>
 8017aec:	4603      	mov	r3, r0
 8017aee:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	68da      	ldr	r2, [r3, #12]
 8017af4:	8afb      	ldrh	r3, [r7, #22]
 8017af6:	68b9      	ldr	r1, [r7, #8]
 8017af8:	fb01 f303 	mul.w	r3, r1, r3
 8017afc:	429a      	cmp	r2, r3
 8017afe:	d909      	bls.n	8017b14 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	68da      	ldr	r2, [r3, #12]
 8017b04:	8afb      	ldrh	r3, [r7, #22]
 8017b06:	68b9      	ldr	r1, [r7, #8]
 8017b08:	fb01 f303 	mul.w	r3, r1, r3
 8017b0c:	1ad2      	subs	r2, r2, r3
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8017b12:	e002      	b.n	8017b1a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	2200      	movs	r2, #0
 8017b18:	60da      	str	r2, [r3, #12]
}
 8017b1a:	bf00      	nop
 8017b1c:	3718      	adds	r7, #24
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8017b24:	b002      	add	sp, #8
 8017b26:	4770      	bx	lr

08017b28 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8017b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b2a:	b08f      	sub	sp, #60	@ 0x3c
 8017b2c:	af04      	add	r7, sp, #16
 8017b2e:	6039      	str	r1, [r7, #0]
 8017b30:	4611      	mov	r1, r2
 8017b32:	461a      	mov	r2, r3
 8017b34:	4603      	mov	r3, r0
 8017b36:	71fb      	strb	r3, [r7, #7]
 8017b38:	460b      	mov	r3, r1
 8017b3a:	71bb      	strb	r3, [r7, #6]
 8017b3c:	4613      	mov	r3, r2
 8017b3e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8017b40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017b44:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017b46:	f004 ff8b 	bl	801ca60 <UTIL_TIMER_GetCurrentTime>
 8017b4a:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8017b50:	2301      	movs	r3, #1
 8017b52:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8017b54:	2300      	movs	r3, #0
 8017b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8017b5a:	2300      	movs	r3, #0
 8017b5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8017b60:	e0ba      	b.n	8017cd8 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8017b62:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017b66:	4613      	mov	r3, r2
 8017b68:	005b      	lsls	r3, r3, #1
 8017b6a:	4413      	add	r3, r2
 8017b6c:	00db      	lsls	r3, r3, #3
 8017b6e:	461a      	mov	r2, r3
 8017b70:	683b      	ldr	r3, [r7, #0]
 8017b72:	189c      	adds	r4, r3, r2
 8017b74:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8017b78:	797a      	ldrb	r2, [r7, #5]
 8017b7a:	79fd      	ldrb	r5, [r7, #7]
 8017b7c:	69fb      	ldr	r3, [r7, #28]
 8017b7e:	9302      	str	r3, [sp, #8]
 8017b80:	46ec      	mov	ip, sp
 8017b82:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8017b86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017b8a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017b8e:	4633      	mov	r3, r6
 8017b90:	4629      	mov	r1, r5
 8017b92:	4620      	mov	r0, r4
 8017b94:	f7ff fe22 	bl	80177dc <UpdateTimeCredits>
 8017b98:	4603      	mov	r3, r0
 8017b9a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8017b9c:	8afa      	ldrh	r2, [r7, #22]
 8017b9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017ba0:	fb02 f303 	mul.w	r3, r2, r3
 8017ba4:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8017ba6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017baa:	4613      	mov	r3, r2
 8017bac:	005b      	lsls	r3, r3, #1
 8017bae:	4413      	add	r3, r2
 8017bb0:	00db      	lsls	r3, r3, #3
 8017bb2:	461a      	mov	r2, r3
 8017bb4:	683b      	ldr	r3, [r7, #0]
 8017bb6:	4413      	add	r3, r2
 8017bb8:	68db      	ldr	r3, [r3, #12]
 8017bba:	69ba      	ldr	r2, [r7, #24]
 8017bbc:	429a      	cmp	r2, r3
 8017bbe:	d908      	bls.n	8017bd2 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017bc0:	797b      	ldrb	r3, [r7, #5]
 8017bc2:	f083 0301 	eor.w	r3, r3, #1
 8017bc6:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d013      	beq.n	8017bf4 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017bcc:	79fb      	ldrb	r3, [r7, #7]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d010      	beq.n	8017bf4 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8017bd2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017bd6:	4613      	mov	r3, r2
 8017bd8:	005b      	lsls	r3, r3, #1
 8017bda:	4413      	add	r3, r2
 8017bdc:	00db      	lsls	r3, r3, #3
 8017bde:	461a      	mov	r2, r3
 8017be0:	683b      	ldr	r3, [r7, #0]
 8017be2:	4413      	add	r3, r2
 8017be4:	2201      	movs	r2, #1
 8017be6:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017be8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017bec:	3301      	adds	r3, #1
 8017bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017bf2:	e06c      	b.n	8017cce <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8017bf4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017bf8:	4613      	mov	r3, r2
 8017bfa:	005b      	lsls	r3, r3, #1
 8017bfc:	4413      	add	r3, r2
 8017bfe:	00db      	lsls	r3, r3, #3
 8017c00:	461a      	mov	r2, r3
 8017c02:	683b      	ldr	r3, [r7, #0]
 8017c04:	4413      	add	r3, r2
 8017c06:	2200      	movs	r2, #0
 8017c08:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8017c0a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017c0e:	4613      	mov	r3, r2
 8017c10:	005b      	lsls	r3, r3, #1
 8017c12:	4413      	add	r3, r2
 8017c14:	00db      	lsls	r3, r3, #3
 8017c16:	461a      	mov	r2, r3
 8017c18:	683b      	ldr	r3, [r7, #0]
 8017c1a:	4413      	add	r3, r2
 8017c1c:	691b      	ldr	r3, [r3, #16]
 8017c1e:	69ba      	ldr	r2, [r7, #24]
 8017c20:	429a      	cmp	r2, r3
 8017c22:	d815      	bhi.n	8017c50 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017c24:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017c28:	4613      	mov	r3, r2
 8017c2a:	005b      	lsls	r3, r3, #1
 8017c2c:	4413      	add	r3, r2
 8017c2e:	00db      	lsls	r3, r3, #3
 8017c30:	461a      	mov	r2, r3
 8017c32:	683b      	ldr	r3, [r7, #0]
 8017c34:	4413      	add	r3, r2
 8017c36:	68db      	ldr	r3, [r3, #12]
 8017c38:	69ba      	ldr	r2, [r7, #24]
 8017c3a:	1ad3      	subs	r3, r2, r3
 8017c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017c3e:	4293      	cmp	r3, r2
 8017c40:	bf28      	it	cs
 8017c42:	4613      	movcs	r3, r2
 8017c44:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8017c46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017c4a:	3301      	adds	r3, #1
 8017c4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8017c50:	79fb      	ldrb	r3, [r7, #7]
 8017c52:	f083 0301 	eor.w	r3, r3, #1
 8017c56:	b2db      	uxtb	r3, r3
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d038      	beq.n	8017cce <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	60fb      	str	r3, [r7, #12]
 8017c60:	2300      	movs	r3, #0
 8017c62:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017c64:	8afb      	ldrh	r3, [r7, #22]
 8017c66:	2b64      	cmp	r3, #100	@ 0x64
 8017c68:	d103      	bne.n	8017c72 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8017c6a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8017c6e:	60fb      	str	r3, [r7, #12]
 8017c70:	e009      	b.n	8017c86 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017c72:	8afb      	ldrh	r3, [r7, #22]
 8017c74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8017c78:	d103      	bne.n	8017c82 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8017c7a:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 8017c7e:	60fb      	str	r3, [r7, #12]
 8017c80:	e001      	b.n	8017c86 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017c82:	4b1e      	ldr	r3, [pc, #120]	@ (8017cfc <RegionCommonUpdateBandTimeOff+0x1d4>)
 8017c84:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017c86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c88:	4a1c      	ldr	r2, [pc, #112]	@ (8017cfc <RegionCommonUpdateBandTimeOff+0x1d4>)
 8017c8a:	4293      	cmp	r3, r2
 8017c8c:	d90e      	bls.n	8017cac <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8017c8e:	68fa      	ldr	r2, [r7, #12]
 8017c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c92:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8017c96:	3b30      	subs	r3, #48	@ 0x30
 8017c98:	4919      	ldr	r1, [pc, #100]	@ (8017d00 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8017c9a:	fba1 1303 	umull	r1, r3, r1, r3
 8017c9e:	0c1b      	lsrs	r3, r3, #16
 8017ca0:	3301      	adds	r3, #1
 8017ca2:	4918      	ldr	r1, [pc, #96]	@ (8017d04 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8017ca4:	fb01 f303 	mul.w	r3, r1, r3
 8017ca8:	4413      	add	r3, r2
 8017caa:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8017cac:	f107 000c 	add.w	r0, r7, #12
 8017cb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017cb2:	9300      	str	r3, [sp, #0]
 8017cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cb6:	f107 020c 	add.w	r2, r7, #12
 8017cba:	ca06      	ldmia	r2, {r1, r2}
 8017cbc:	f003 ffe9 	bl	801bc92 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8017cc0:	f107 030c 	add.w	r3, r7, #12
 8017cc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017cc8:	f004 f8a2 	bl	801be10 <SysTimeToMs>
 8017ccc:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8017cce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017cd2:	3301      	adds	r3, #1
 8017cd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8017cd8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017cdc:	79bb      	ldrb	r3, [r7, #6]
 8017cde:	429a      	cmp	r2, r3
 8017ce0:	f4ff af3f 	bcc.w	8017b62 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8017ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d102      	bne.n	8017cf2 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017cec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017cf0:	e000      	b.n	8017cf4 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8017cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	372c      	adds	r7, #44	@ 0x2c
 8017cf8:	46bd      	mov	sp, r7
 8017cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cfc:	0001ec30 	.word	0x0001ec30
 8017d00:	c22e4507 	.word	0xc22e4507
 8017d04:	00015180 	.word	0x00015180

08017d08 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8017d08:	b480      	push	{r7}
 8017d0a:	b085      	sub	sp, #20
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	6078      	str	r0, [r7, #4]
 8017d10:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8017d12:	2300      	movs	r3, #0
 8017d14:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	781b      	ldrb	r3, [r3, #0]
 8017d1a:	2b03      	cmp	r3, #3
 8017d1c:	d13f      	bne.n	8017d9e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	3301      	adds	r3, #1
 8017d22:	781b      	ldrb	r3, [r3, #0]
 8017d24:	b25a      	sxtb	r2, r3
 8017d26:	683b      	ldr	r3, [r7, #0]
 8017d28:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8017d2a:	683b      	ldr	r3, [r7, #0]
 8017d2c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017d30:	f003 030f 	and.w	r3, r3, #15
 8017d34:	b25a      	sxtb	r2, r3
 8017d36:	683b      	ldr	r3, [r7, #0]
 8017d38:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8017d3a:	683b      	ldr	r3, [r7, #0]
 8017d3c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017d40:	b2db      	uxtb	r3, r3
 8017d42:	091b      	lsrs	r3, r3, #4
 8017d44:	b2db      	uxtb	r3, r3
 8017d46:	b25a      	sxtb	r2, r3
 8017d48:	683b      	ldr	r3, [r7, #0]
 8017d4a:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	3302      	adds	r3, #2
 8017d50:	781b      	ldrb	r3, [r3, #0]
 8017d52:	461a      	mov	r2, r3
 8017d54:	683b      	ldr	r3, [r7, #0]
 8017d56:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017d58:	683b      	ldr	r3, [r7, #0]
 8017d5a:	889b      	ldrh	r3, [r3, #4]
 8017d5c:	b21a      	sxth	r2, r3
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	3303      	adds	r3, #3
 8017d62:	781b      	ldrb	r3, [r3, #0]
 8017d64:	021b      	lsls	r3, r3, #8
 8017d66:	b21b      	sxth	r3, r3
 8017d68:	4313      	orrs	r3, r2
 8017d6a:	b21b      	sxth	r3, r3
 8017d6c:	b29a      	uxth	r2, r3
 8017d6e:	683b      	ldr	r3, [r7, #0]
 8017d70:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	791a      	ldrb	r2, [r3, #4]
 8017d76:	683b      	ldr	r3, [r7, #0]
 8017d78:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017d7a:	683b      	ldr	r3, [r7, #0]
 8017d7c:	781b      	ldrb	r3, [r3, #0]
 8017d7e:	091b      	lsrs	r3, r3, #4
 8017d80:	b2db      	uxtb	r3, r3
 8017d82:	f003 0307 	and.w	r3, r3, #7
 8017d86:	b2da      	uxtb	r2, r3
 8017d88:	683b      	ldr	r3, [r7, #0]
 8017d8a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017d8c:	683b      	ldr	r3, [r7, #0]
 8017d8e:	781b      	ldrb	r3, [r3, #0]
 8017d90:	f003 030f 	and.w	r3, r3, #15
 8017d94:	b2da      	uxtb	r2, r3
 8017d96:	683b      	ldr	r3, [r7, #0]
 8017d98:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017d9a:	2305      	movs	r3, #5
 8017d9c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8017d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017da0:	4618      	mov	r0, r3
 8017da2:	3714      	adds	r7, #20
 8017da4:	46bd      	mov	sp, r7
 8017da6:	bc80      	pop	{r7}
 8017da8:	4770      	bx	lr

08017daa <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017daa:	b5b0      	push	{r4, r5, r7, lr}
 8017dac:	b088      	sub	sp, #32
 8017dae:	af02      	add	r7, sp, #8
 8017db0:	60f8      	str	r0, [r7, #12]
 8017db2:	60b9      	str	r1, [r7, #8]
 8017db4:	607a      	str	r2, [r7, #4]
 8017db6:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	791b      	ldrb	r3, [r3, #4]
 8017dbc:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	799b      	ldrb	r3, [r3, #6]
 8017dc2:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	79db      	ldrb	r3, [r3, #7]
 8017dc8:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	7a1b      	ldrb	r3, [r3, #8]
 8017dce:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	795b      	ldrb	r3, [r3, #5]
 8017dd4:	f083 0301 	eor.w	r3, r3, #1
 8017dd8:	b2db      	uxtb	r3, r3
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d008      	beq.n	8017df0 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	7adb      	ldrb	r3, [r3, #11]
 8017de2:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	7a5b      	ldrb	r3, [r3, #9]
 8017de8:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	7a9b      	ldrb	r3, [r3, #10]
 8017dee:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8017df0:	7dfb      	ldrb	r3, [r7, #23]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d04a      	beq.n	8017e8c <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8017df6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8017dfa:	2b0f      	cmp	r3, #15
 8017dfc:	d103      	bne.n	8017e06 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	7a5b      	ldrb	r3, [r3, #9]
 8017e02:	75bb      	strb	r3, [r7, #22]
 8017e04:	e01d      	b.n	8017e42 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	7b18      	ldrb	r0, [r3, #12]
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	6919      	ldr	r1, [r3, #16]
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8017e1a:	68fa      	ldr	r2, [r7, #12]
 8017e1c:	6992      	ldr	r2, [r2, #24]
 8017e1e:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8017e22:	9201      	str	r2, [sp, #4]
 8017e24:	9300      	str	r3, [sp, #0]
 8017e26:	462b      	mov	r3, r5
 8017e28:	4622      	mov	r2, r4
 8017e2a:	f7ff fd3a 	bl	80178a2 <RegionCommonChanVerifyDr>
 8017e2e:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8017e30:	f083 0301 	eor.w	r3, r3, #1
 8017e34:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d003      	beq.n	8017e42 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8017e3a:	7dfb      	ldrb	r3, [r7, #23]
 8017e3c:	f023 0302 	bic.w	r3, r3, #2
 8017e40:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8017e42:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017e46:	2b0f      	cmp	r3, #15
 8017e48:	d103      	bne.n	8017e52 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	7a9b      	ldrb	r3, [r3, #10]
 8017e4e:	757b      	strb	r3, [r7, #21]
 8017e50:	e01c      	b.n	8017e8c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8017e5e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017e62:	4618      	mov	r0, r3
 8017e64:	f7ff fd8f 	bl	8017986 <RegionCommonValueInRange>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d10e      	bne.n	8017e8c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8017e74:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8017e78:	429a      	cmp	r2, r3
 8017e7a:	da03      	bge.n	8017e84 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	7f5b      	ldrb	r3, [r3, #29]
 8017e80:	757b      	strb	r3, [r7, #21]
 8017e82:	e003      	b.n	8017e8c <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017e84:	7dfb      	ldrb	r3, [r7, #23]
 8017e86:	f023 0304 	bic.w	r3, r3, #4
 8017e8a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017e8c:	7dfb      	ldrb	r3, [r7, #23]
 8017e8e:	2b07      	cmp	r3, #7
 8017e90:	d105      	bne.n	8017e9e <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8017e92:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d101      	bne.n	8017e9e <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8017e9a:	2301      	movs	r3, #1
 8017e9c:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8017e9e:	68bb      	ldr	r3, [r7, #8]
 8017ea0:	7dba      	ldrb	r2, [r7, #22]
 8017ea2:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	7d7a      	ldrb	r2, [r7, #21]
 8017ea8:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017eaa:	7d3a      	ldrb	r2, [r7, #20]
 8017eac:	683b      	ldr	r3, [r7, #0]
 8017eae:	701a      	strb	r2, [r3, #0]

    return status;
 8017eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	3718      	adds	r7, #24
 8017eb6:	46bd      	mov	sp, r7
 8017eb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017ebc <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8017ebc:	b480      	push	{r7}
 8017ebe:	b083      	sub	sp, #12
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	4603      	mov	r3, r0
 8017ec4:	6039      	str	r1, [r7, #0]
 8017ec6:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8017ec8:	79fb      	ldrb	r3, [r7, #7]
 8017eca:	4a06      	ldr	r2, [pc, #24]	@ (8017ee4 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8017ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8017ed0:	461a      	mov	r2, r3
 8017ed2:	683b      	ldr	r3, [r7, #0]
 8017ed4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017ed8:	4618      	mov	r0, r3
 8017eda:	370c      	adds	r7, #12
 8017edc:	46bd      	mov	sp, r7
 8017ede:	bc80      	pop	{r7}
 8017ee0:	4770      	bx	lr
 8017ee2:	bf00      	nop
 8017ee4:	000f4240 	.word	0x000f4240

08017ee8 <RegionCommonComputeRxWindowParameters>:
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8017ee8:	b480      	push	{r7}
 8017eea:	b085      	sub	sp, #20
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	60f8      	str	r0, [r7, #12]
 8017ef0:	607a      	str	r2, [r7, #4]
 8017ef2:	603b      	str	r3, [r7, #0]
 8017ef4:	460b      	mov	r3, r1
 8017ef6:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8017ef8:	7afa      	ldrb	r2, [r7, #11]
 8017efa:	7afb      	ldrb	r3, [r7, #11]
 8017efc:	3b04      	subs	r3, #4
 8017efe:	4619      	mov	r1, r3
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	fb03 f101 	mul.w	r1, r3, r1
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8017f0c:	fb00 f303 	mul.w	r3, r0, r3
 8017f10:	440b      	add	r3, r1
 8017f12:	005b      	lsls	r3, r3, #1
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d013      	beq.n	8017f40 <RegionCommonComputeRxWindowParameters+0x58>
 8017f18:	7afb      	ldrb	r3, [r7, #11]
 8017f1a:	3b04      	subs	r3, #4
 8017f1c:	4619      	mov	r1, r3
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	fb03 f101 	mul.w	r1, r3, r1
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8017f2a:	fb00 f303 	mul.w	r3, r0, r3
 8017f2e:	440b      	add	r3, r1
 8017f30:	0059      	lsls	r1, r3, #1
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	440b      	add	r3, r1
 8017f36:	1e59      	subs	r1, r3, #1
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8017f3e:	e00f      	b.n	8017f60 <RegionCommonComputeRxWindowParameters+0x78>
 8017f40:	7afb      	ldrb	r3, [r7, #11]
 8017f42:	3b04      	subs	r3, #4
 8017f44:	4619      	mov	r1, r3
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	fb03 f101 	mul.w	r1, r3, r1
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8017f52:	fb00 f303 	mul.w	r3, r0, r3
 8017f56:	440b      	add	r3, r1
 8017f58:	0059      	lsls	r1, r3, #1
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8017f60:	429a      	cmp	r2, r3
 8017f62:	bf38      	it	cc
 8017f64:	461a      	movcc	r2, r3
 8017f66:	69bb      	ldr	r3, [r7, #24]
 8017f68:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	009b      	lsls	r3, r3, #2
 8017f6e:	4619      	mov	r1, r3
 8017f70:	69bb      	ldr	r3, [r7, #24]
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	68fa      	ldr	r2, [r7, #12]
 8017f76:	fb02 f303 	mul.w	r3, r2, r3
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d007      	beq.n	8017f8e <RegionCommonComputeRxWindowParameters+0xa6>
 8017f7e:	69bb      	ldr	r3, [r7, #24]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	68fa      	ldr	r2, [r7, #12]
 8017f84:	fb02 f303 	mul.w	r3, r2, r3
 8017f88:	3301      	adds	r3, #1
 8017f8a:	085b      	lsrs	r3, r3, #1
 8017f8c:	e005      	b.n	8017f9a <RegionCommonComputeRxWindowParameters+0xb2>
 8017f8e:	69bb      	ldr	r3, [r7, #24]
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	68fa      	ldr	r2, [r7, #12]
 8017f94:	fb02 f303 	mul.w	r3, r2, r3
 8017f98:	085b      	lsrs	r3, r3, #1
 8017f9a:	1acb      	subs	r3, r1, r3
 8017f9c:	683a      	ldr	r2, [r7, #0]
 8017f9e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017fa2:	fb01 f202 	mul.w	r2, r1, r2
 8017fa6:	1a9b      	subs	r3, r3, r2
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	dd27      	ble.n	8017ffc <RegionCommonComputeRxWindowParameters+0x114>
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	009b      	lsls	r3, r3, #2
 8017fb0:	4619      	mov	r1, r3
 8017fb2:	69bb      	ldr	r3, [r7, #24]
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	68fa      	ldr	r2, [r7, #12]
 8017fb8:	fb02 f303 	mul.w	r3, r2, r3
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d007      	beq.n	8017fd0 <RegionCommonComputeRxWindowParameters+0xe8>
 8017fc0:	69bb      	ldr	r3, [r7, #24]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	68fa      	ldr	r2, [r7, #12]
 8017fc6:	fb02 f303 	mul.w	r3, r2, r3
 8017fca:	3301      	adds	r3, #1
 8017fcc:	085b      	lsrs	r3, r3, #1
 8017fce:	e005      	b.n	8017fdc <RegionCommonComputeRxWindowParameters+0xf4>
 8017fd0:	69bb      	ldr	r3, [r7, #24]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	68fa      	ldr	r2, [r7, #12]
 8017fd6:	fb02 f303 	mul.w	r3, r2, r3
 8017fda:	085b      	lsrs	r3, r3, #1
 8017fdc:	1acb      	subs	r3, r1, r3
 8017fde:	683a      	ldr	r2, [r7, #0]
 8017fe0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017fe4:	fb01 f202 	mul.w	r2, r1, r2
 8017fe8:	1a9b      	subs	r3, r3, r2
 8017fea:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8017fee:	4a19      	ldr	r2, [pc, #100]	@ (8018054 <RegionCommonComputeRxWindowParameters+0x16c>)
 8017ff0:	fb82 1203 	smull	r1, r2, r2, r3
 8017ff4:	1192      	asrs	r2, r2, #6
 8017ff6:	17db      	asrs	r3, r3, #31
 8017ff8:	1ad3      	subs	r3, r2, r3
 8017ffa:	e024      	b.n	8018046 <RegionCommonComputeRxWindowParameters+0x15e>
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	009b      	lsls	r3, r3, #2
 8018000:	4619      	mov	r1, r3
 8018002:	69bb      	ldr	r3, [r7, #24]
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	68fa      	ldr	r2, [r7, #12]
 8018008:	fb02 f303 	mul.w	r3, r2, r3
 801800c:	2b00      	cmp	r3, #0
 801800e:	d007      	beq.n	8018020 <RegionCommonComputeRxWindowParameters+0x138>
 8018010:	69bb      	ldr	r3, [r7, #24]
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	68fa      	ldr	r2, [r7, #12]
 8018016:	fb02 f303 	mul.w	r3, r2, r3
 801801a:	3301      	adds	r3, #1
 801801c:	085b      	lsrs	r3, r3, #1
 801801e:	e005      	b.n	801802c <RegionCommonComputeRxWindowParameters+0x144>
 8018020:	69bb      	ldr	r3, [r7, #24]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	68fa      	ldr	r2, [r7, #12]
 8018026:	fb02 f303 	mul.w	r3, r2, r3
 801802a:	085b      	lsrs	r3, r3, #1
 801802c:	1acb      	subs	r3, r1, r3
 801802e:	683a      	ldr	r2, [r7, #0]
 8018030:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8018034:	fb01 f202 	mul.w	r2, r1, r2
 8018038:	1a9b      	subs	r3, r3, r2
 801803a:	4a06      	ldr	r2, [pc, #24]	@ (8018054 <RegionCommonComputeRxWindowParameters+0x16c>)
 801803c:	fb82 1203 	smull	r1, r2, r2, r3
 8018040:	1192      	asrs	r2, r2, #6
 8018042:	17db      	asrs	r3, r3, #31
 8018044:	1ad3      	subs	r3, r2, r3
 8018046:	69fa      	ldr	r2, [r7, #28]
 8018048:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801804a:	bf00      	nop
 801804c:	3714      	adds	r7, #20
 801804e:	46bd      	mov	sp, r7
 8018050:	bc80      	pop	{r7}
 8018052:	4770      	bx	lr
 8018054:	10624dd3 	.word	0x10624dd3

08018058 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8018058:	b580      	push	{r7, lr}
 801805a:	b086      	sub	sp, #24
 801805c:	af00      	add	r7, sp, #0
 801805e:	4603      	mov	r3, r0
 8018060:	60b9      	str	r1, [r7, #8]
 8018062:	607a      	str	r2, [r7, #4]
 8018064:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8018066:	2300      	movs	r3, #0
 8018068:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801806a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801806e:	005b      	lsls	r3, r3, #1
 8018070:	4618      	mov	r0, r3
 8018072:	f7e8 fc5f 	bl	8000934 <__aeabi_ui2f>
 8018076:	4603      	mov	r3, r0
 8018078:	4619      	mov	r1, r3
 801807a:	68b8      	ldr	r0, [r7, #8]
 801807c:	f7e8 fba8 	bl	80007d0 <__aeabi_fsub>
 8018080:	4603      	mov	r3, r0
 8018082:	6879      	ldr	r1, [r7, #4]
 8018084:	4618      	mov	r0, r3
 8018086:	f7e8 fba3 	bl	80007d0 <__aeabi_fsub>
 801808a:	4603      	mov	r3, r0
 801808c:	4618      	mov	r0, r3
 801808e:	f7e8 fa93 	bl	80005b8 <__aeabi_f2d>
 8018092:	4602      	mov	r2, r0
 8018094:	460b      	mov	r3, r1
 8018096:	4610      	mov	r0, r2
 8018098:	4619      	mov	r1, r3
 801809a:	f005 f875 	bl	801d188 <floor>
 801809e:	4602      	mov	r2, r0
 80180a0:	460b      	mov	r3, r1
 80180a2:	4610      	mov	r0, r2
 80180a4:	4619      	mov	r1, r3
 80180a6:	f7e8 fb67 	bl	8000778 <__aeabi_d2iz>
 80180aa:	4603      	mov	r3, r0
 80180ac:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80180ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80180b2:	4618      	mov	r0, r3
 80180b4:	3718      	adds	r7, #24
 80180b6:	46bd      	mov	sp, r7
 80180b8:	bd80      	pop	{r7, pc}

080180ba <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80180ba:	b590      	push	{r4, r7, lr}
 80180bc:	b087      	sub	sp, #28
 80180be:	af00      	add	r7, sp, #0
 80180c0:	60f8      	str	r0, [r7, #12]
 80180c2:	60b9      	str	r1, [r7, #8]
 80180c4:	607a      	str	r2, [r7, #4]
 80180c6:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80180c8:	2300      	movs	r3, #0
 80180ca:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80180cc:	2300      	movs	r3, #0
 80180ce:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80180d0:	2300      	movs	r3, #0
 80180d2:	757b      	strb	r3, [r7, #21]
 80180d4:	2300      	movs	r3, #0
 80180d6:	753b      	strb	r3, [r7, #20]
 80180d8:	e09c      	b.n	8018214 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80180da:	2300      	movs	r3, #0
 80180dc:	74fb      	strb	r3, [r7, #19]
 80180de:	e08f      	b.n	8018200 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	685a      	ldr	r2, [r3, #4]
 80180e4:	7d3b      	ldrb	r3, [r7, #20]
 80180e6:	005b      	lsls	r3, r3, #1
 80180e8:	4413      	add	r3, r2
 80180ea:	881b      	ldrh	r3, [r3, #0]
 80180ec:	461a      	mov	r2, r3
 80180ee:	7cfb      	ldrb	r3, [r7, #19]
 80180f0:	fa42 f303 	asr.w	r3, r2, r3
 80180f4:	f003 0301 	and.w	r3, r3, #1
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d07e      	beq.n	80181fa <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	689a      	ldr	r2, [r3, #8]
 8018100:	7d79      	ldrb	r1, [r7, #21]
 8018102:	7cfb      	ldrb	r3, [r7, #19]
 8018104:	440b      	add	r3, r1
 8018106:	4619      	mov	r1, r3
 8018108:	460b      	mov	r3, r1
 801810a:	005b      	lsls	r3, r3, #1
 801810c:	440b      	add	r3, r1
 801810e:	009b      	lsls	r3, r3, #2
 8018110:	4413      	add	r3, r2
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	2b00      	cmp	r3, #0
 8018116:	d06b      	beq.n	80181f0 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	781b      	ldrb	r3, [r3, #0]
 801811c:	f083 0301 	eor.w	r3, r3, #1
 8018120:	b2db      	uxtb	r3, r3
 8018122:	2b00      	cmp	r3, #0
 8018124:	d011      	beq.n	801814a <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801812a:	2b00      	cmp	r3, #0
 801812c:	d00d      	beq.n	801814a <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	695a      	ldr	r2, [r3, #20]
 8018132:	7d3b      	ldrb	r3, [r7, #20]
 8018134:	005b      	lsls	r3, r3, #1
 8018136:	4413      	add	r3, r2
 8018138:	881b      	ldrh	r3, [r3, #0]
 801813a:	461a      	mov	r2, r3
 801813c:	7cfb      	ldrb	r3, [r7, #19]
 801813e:	fa42 f303 	asr.w	r3, r2, r3
 8018142:	f003 0301 	and.w	r3, r3, #1
 8018146:	2b00      	cmp	r3, #0
 8018148:	d054      	beq.n	80181f4 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	785b      	ldrb	r3, [r3, #1]
 801814e:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	689a      	ldr	r2, [r3, #8]
 8018154:	7d79      	ldrb	r1, [r7, #21]
 8018156:	7cfb      	ldrb	r3, [r7, #19]
 8018158:	440b      	add	r3, r1
 801815a:	4619      	mov	r1, r3
 801815c:	460b      	mov	r3, r1
 801815e:	005b      	lsls	r3, r3, #1
 8018160:	440b      	add	r3, r1
 8018162:	009b      	lsls	r3, r3, #2
 8018164:	4413      	add	r3, r2
 8018166:	7a1b      	ldrb	r3, [r3, #8]
 8018168:	f343 0303 	sbfx	r3, r3, #0, #4
 801816c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801816e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	689a      	ldr	r2, [r3, #8]
 8018174:	7d79      	ldrb	r1, [r7, #21]
 8018176:	7cfb      	ldrb	r3, [r7, #19]
 8018178:	440b      	add	r3, r1
 801817a:	4619      	mov	r1, r3
 801817c:	460b      	mov	r3, r1
 801817e:	005b      	lsls	r3, r3, #1
 8018180:	440b      	add	r3, r1
 8018182:	009b      	lsls	r3, r3, #2
 8018184:	4413      	add	r3, r2
 8018186:	7a1b      	ldrb	r3, [r3, #8]
 8018188:	f343 1303 	sbfx	r3, r3, #4, #4
 801818c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801818e:	461a      	mov	r2, r3
 8018190:	4621      	mov	r1, r4
 8018192:	f7ff fbf8 	bl	8017986 <RegionCommonValueInRange>
 8018196:	4603      	mov	r3, r0
 8018198:	2b00      	cmp	r3, #0
 801819a:	d02d      	beq.n	80181f8 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	68da      	ldr	r2, [r3, #12]
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	6899      	ldr	r1, [r3, #8]
 80181a4:	7d78      	ldrb	r0, [r7, #21]
 80181a6:	7cfb      	ldrb	r3, [r7, #19]
 80181a8:	4403      	add	r3, r0
 80181aa:	4618      	mov	r0, r3
 80181ac:	4603      	mov	r3, r0
 80181ae:	005b      	lsls	r3, r3, #1
 80181b0:	4403      	add	r3, r0
 80181b2:	009b      	lsls	r3, r3, #2
 80181b4:	440b      	add	r3, r1
 80181b6:	7a5b      	ldrb	r3, [r3, #9]
 80181b8:	4619      	mov	r1, r3
 80181ba:	460b      	mov	r3, r1
 80181bc:	005b      	lsls	r3, r3, #1
 80181be:	440b      	add	r3, r1
 80181c0:	00db      	lsls	r3, r3, #3
 80181c2:	4413      	add	r3, r2
 80181c4:	7d1b      	ldrb	r3, [r3, #20]
 80181c6:	f083 0301 	eor.w	r3, r3, #1
 80181ca:	b2db      	uxtb	r3, r3
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d003      	beq.n	80181d8 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80181d0:	7dbb      	ldrb	r3, [r7, #22]
 80181d2:	3301      	adds	r3, #1
 80181d4:	75bb      	strb	r3, [r7, #22]
                    continue;
 80181d6:	e010      	b.n	80181fa <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80181d8:	7dfb      	ldrb	r3, [r7, #23]
 80181da:	1c5a      	adds	r2, r3, #1
 80181dc:	75fa      	strb	r2, [r7, #23]
 80181de:	461a      	mov	r2, r3
 80181e0:	68bb      	ldr	r3, [r7, #8]
 80181e2:	4413      	add	r3, r2
 80181e4:	7d79      	ldrb	r1, [r7, #21]
 80181e6:	7cfa      	ldrb	r2, [r7, #19]
 80181e8:	440a      	add	r2, r1
 80181ea:	b2d2      	uxtb	r2, r2
 80181ec:	701a      	strb	r2, [r3, #0]
 80181ee:	e004      	b.n	80181fa <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80181f0:	bf00      	nop
 80181f2:	e002      	b.n	80181fa <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80181f4:	bf00      	nop
 80181f6:	e000      	b.n	80181fa <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80181f8:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80181fa:	7cfb      	ldrb	r3, [r7, #19]
 80181fc:	3301      	adds	r3, #1
 80181fe:	74fb      	strb	r3, [r7, #19]
 8018200:	7cfb      	ldrb	r3, [r7, #19]
 8018202:	2b0f      	cmp	r3, #15
 8018204:	f67f af6c 	bls.w	80180e0 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018208:	7d7b      	ldrb	r3, [r7, #21]
 801820a:	3310      	adds	r3, #16
 801820c:	757b      	strb	r3, [r7, #21]
 801820e:	7d3b      	ldrb	r3, [r7, #20]
 8018210:	3301      	adds	r3, #1
 8018212:	753b      	strb	r3, [r7, #20]
 8018214:	7d7b      	ldrb	r3, [r7, #21]
 8018216:	b29a      	uxth	r2, r3
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	8a1b      	ldrh	r3, [r3, #16]
 801821c:	429a      	cmp	r2, r3
 801821e:	f4ff af5c 	bcc.w	80180da <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	7dfa      	ldrb	r2, [r7, #23]
 8018226:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8018228:	683b      	ldr	r3, [r7, #0]
 801822a:	7dba      	ldrb	r2, [r7, #22]
 801822c:	701a      	strb	r2, [r3, #0]
}
 801822e:	bf00      	nop
 8018230:	371c      	adds	r7, #28
 8018232:	46bd      	mov	sp, r7
 8018234:	bd90      	pop	{r4, r7, pc}

08018236 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8018236:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018238:	b08b      	sub	sp, #44	@ 0x2c
 801823a:	af04      	add	r7, sp, #16
 801823c:	60f8      	str	r0, [r7, #12]
 801823e:	60b9      	str	r1, [r7, #8]
 8018240:	607a      	str	r2, [r7, #4]
 8018242:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	685b      	ldr	r3, [r3, #4]
 8018248:	4618      	mov	r0, r3
 801824a:	f004 fc1b 	bl	801ca84 <UTIL_TIMER_GetElapsedTime>
 801824e:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	681a      	ldr	r2, [r3, #0]
 8018254:	697b      	ldr	r3, [r7, #20]
 8018256:	1ad2      	subs	r2, r2, r3
 8018258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801825a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 801825c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801825e:	2201      	movs	r2, #1
 8018260:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8018262:	683b      	ldr	r3, [r7, #0]
 8018264:	2200      	movs	r2, #0
 8018266:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	685b      	ldr	r3, [r3, #4]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d004      	beq.n	801827a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018274:	697a      	ldr	r2, [r7, #20]
 8018276:	429a      	cmp	r2, r3
 8018278:	d32b      	bcc.n	80182d2 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801827a:	68bb      	ldr	r3, [r7, #8]
 801827c:	2200      	movs	r2, #0
 801827e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	69db      	ldr	r3, [r3, #28]
 8018284:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801828a:	68dd      	ldr	r5, [r3, #12]
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	7a5e      	ldrb	r6, [r3, #9]
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	f893 c008 	ldrb.w	ip, [r3, #8]
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	7d1b      	ldrb	r3, [r3, #20]
 801829a:	68fa      	ldr	r2, [r7, #12]
 801829c:	6992      	ldr	r2, [r2, #24]
 801829e:	9203      	str	r2, [sp, #12]
 80182a0:	68fa      	ldr	r2, [r7, #12]
 80182a2:	f10d 0e04 	add.w	lr, sp, #4
 80182a6:	320c      	adds	r2, #12
 80182a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80182ac:	e88e 0003 	stmia.w	lr, {r0, r1}
 80182b0:	9300      	str	r3, [sp, #0]
 80182b2:	4663      	mov	r3, ip
 80182b4:	4632      	mov	r2, r6
 80182b6:	4629      	mov	r1, r5
 80182b8:	4620      	mov	r0, r4
 80182ba:	f7ff fc35 	bl	8017b28 <RegionCommonUpdateBandTimeOff>
 80182be:	4602      	mov	r2, r0
 80182c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182c2:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	69d8      	ldr	r0, [r3, #28]
 80182c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182ca:	683a      	ldr	r2, [r7, #0]
 80182cc:	6879      	ldr	r1, [r7, #4]
 80182ce:	f7ff fef4 	bl	80180ba <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80182d2:	683b      	ldr	r3, [r7, #0]
 80182d4:	781b      	ldrb	r3, [r3, #0]
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d004      	beq.n	80182e4 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80182da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182dc:	2200      	movs	r2, #0
 80182de:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80182e0:	2300      	movs	r3, #0
 80182e2:	e006      	b.n	80182f2 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80182e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182e6:	781b      	ldrb	r3, [r3, #0]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d001      	beq.n	80182f0 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80182ec:	230b      	movs	r3, #11
 80182ee:	e000      	b.n	80182f2 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80182f0:	230c      	movs	r3, #12
    }
}
 80182f2:	4618      	mov	r0, r3
 80182f4:	371c      	adds	r7, #28
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080182fa <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80182fa:	b5b0      	push	{r4, r5, r7, lr}
 80182fc:	b086      	sub	sp, #24
 80182fe:	af02      	add	r7, sp, #8
 8018300:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	781b      	ldrb	r3, [r3, #0]
 8018306:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	f993 2000 	ldrsb.w	r2, [r3]
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018314:	429a      	cmp	r2, r3
 8018316:	d103      	bne.n	8018320 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801831e:	e026      	b.n	801836e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8018320:	7bfb      	ldrb	r3, [r7, #15]
 8018322:	3b01      	subs	r3, #1
 8018324:	b2db      	uxtb	r3, r3
 8018326:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801832e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018332:	429a      	cmp	r2, r3
 8018334:	d019      	beq.n	801836a <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	78d8      	ldrb	r0, [r3, #3]
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	6859      	ldr	r1, [r3, #4]
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801834a:	687a      	ldr	r2, [r7, #4]
 801834c:	6892      	ldr	r2, [r2, #8]
 801834e:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8018352:	9201      	str	r2, [sp, #4]
 8018354:	9300      	str	r3, [sp, #0]
 8018356:	462b      	mov	r3, r5
 8018358:	4622      	mov	r2, r4
 801835a:	f7ff faa2 	bl	80178a2 <RegionCommonChanVerifyDr>
 801835e:	4603      	mov	r3, r0
 8018360:	f083 0301 	eor.w	r3, r3, #1
 8018364:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8018366:	2b00      	cmp	r3, #0
 8018368:	d1da      	bne.n	8018320 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801836a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801836e:	4618      	mov	r0, r3
 8018370:	3710      	adds	r7, #16
 8018372:	46bd      	mov	sp, r7
 8018374:	bdb0      	pop	{r4, r5, r7, pc}

08018376 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8018376:	b480      	push	{r7}
 8018378:	b083      	sub	sp, #12
 801837a:	af00      	add	r7, sp, #0
 801837c:	4603      	mov	r3, r0
 801837e:	460a      	mov	r2, r1
 8018380:	71fb      	strb	r3, [r7, #7]
 8018382:	4613      	mov	r3, r2
 8018384:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8018386:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801838a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801838e:	4293      	cmp	r3, r2
 8018390:	bfb8      	it	lt
 8018392:	4613      	movlt	r3, r2
 8018394:	b25b      	sxtb	r3, r3
}
 8018396:	4618      	mov	r0, r3
 8018398:	370c      	adds	r7, #12
 801839a:	46bd      	mov	sp, r7
 801839c:	bc80      	pop	{r7}
 801839e:	4770      	bx	lr

080183a0 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80183a0:	b480      	push	{r7}
 80183a2:	b083      	sub	sp, #12
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	6078      	str	r0, [r7, #4]
 80183a8:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	009b      	lsls	r3, r3, #2
 80183ae:	683a      	ldr	r2, [r7, #0]
 80183b0:	4413      	add	r3, r2
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	4a07      	ldr	r2, [pc, #28]	@ (80183d4 <RegionCommonGetBandwidth+0x34>)
 80183b6:	4293      	cmp	r3, r2
 80183b8:	d004      	beq.n	80183c4 <RegionCommonGetBandwidth+0x24>
 80183ba:	4a07      	ldr	r2, [pc, #28]	@ (80183d8 <RegionCommonGetBandwidth+0x38>)
 80183bc:	4293      	cmp	r3, r2
 80183be:	d003      	beq.n	80183c8 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80183c0:	2300      	movs	r3, #0
 80183c2:	e002      	b.n	80183ca <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80183c4:	2301      	movs	r3, #1
 80183c6:	e000      	b.n	80183ca <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80183c8:	2302      	movs	r3, #2
    }
}
 80183ca:	4618      	mov	r0, r3
 80183cc:	370c      	adds	r7, #12
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bc80      	pop	{r7}
 80183d2:	4770      	bx	lr
 80183d4:	0003d090 	.word	0x0003d090
 80183d8:	0007a120 	.word	0x0007a120

080183dc <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80183dc:	b580      	push	{r7, lr}
 80183de:	b086      	sub	sp, #24
 80183e0:	af04      	add	r7, sp, #16
 80183e2:	4603      	mov	r3, r0
 80183e4:	6039      	str	r1, [r7, #0]
 80183e6:	71fb      	strb	r3, [r7, #7]
 80183e8:	4613      	mov	r3, r2
 80183ea:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80183ec:	79fb      	ldrb	r3, [r7, #7]
 80183ee:	2b05      	cmp	r3, #5
 80183f0:	d810      	bhi.n	8018414 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80183f2:	79fb      	ldrb	r3, [r7, #7]
 80183f4:	4a0f      	ldr	r2, [pc, #60]	@ (8018434 <RegionCommonRxConfigPrint+0x58>)
 80183f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80183fa:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80183fe:	9202      	str	r2, [sp, #8]
 8018400:	683a      	ldr	r2, [r7, #0]
 8018402:	9201      	str	r2, [sp, #4]
 8018404:	9300      	str	r3, [sp, #0]
 8018406:	4b0c      	ldr	r3, [pc, #48]	@ (8018438 <RegionCommonRxConfigPrint+0x5c>)
 8018408:	2201      	movs	r2, #1
 801840a:	2100      	movs	r1, #0
 801840c:	2002      	movs	r0, #2
 801840e:	f004 fc17 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8018412:	e00a      	b.n	801842a <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018414:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018418:	9301      	str	r3, [sp, #4]
 801841a:	683b      	ldr	r3, [r7, #0]
 801841c:	9300      	str	r3, [sp, #0]
 801841e:	4b07      	ldr	r3, [pc, #28]	@ (801843c <RegionCommonRxConfigPrint+0x60>)
 8018420:	2201      	movs	r2, #1
 8018422:	2100      	movs	r1, #0
 8018424:	2002      	movs	r0, #2
 8018426:	f004 fc0b 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
}
 801842a:	bf00      	nop
 801842c:	3708      	adds	r7, #8
 801842e:	46bd      	mov	sp, r7
 8018430:	bd80      	pop	{r7, pc}
 8018432:	bf00      	nop
 8018434:	20000114 	.word	0x20000114
 8018438:	0801d8b8 	.word	0x0801d8b8
 801843c:	0801d8d8 	.word	0x0801d8d8

08018440 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b084      	sub	sp, #16
 8018444:	af02      	add	r7, sp, #8
 8018446:	6078      	str	r0, [r7, #4]
 8018448:	460b      	mov	r3, r1
 801844a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801844c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018450:	9301      	str	r3, [sp, #4]
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	9300      	str	r3, [sp, #0]
 8018456:	4b05      	ldr	r3, [pc, #20]	@ (801846c <RegionCommonTxConfigPrint+0x2c>)
 8018458:	2201      	movs	r2, #1
 801845a:	2100      	movs	r1, #0
 801845c:	2002      	movs	r0, #2
 801845e:	f004 fbef 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
}
 8018462:	bf00      	nop
 8018464:	3708      	adds	r7, #8
 8018466:	46bd      	mov	sp, r7
 8018468:	bd80      	pop	{r7, pc}
 801846a:	bf00      	nop
 801846c:	0801d8f4 	.word	0x0801d8f4

08018470 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018470:	b480      	push	{r7}
 8018472:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018474:	4b0d      	ldr	r3, [pc, #52]	@ (80184ac <rand1+0x3c>)
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	4a0d      	ldr	r2, [pc, #52]	@ (80184b0 <rand1+0x40>)
 801847a:	fb02 f303 	mul.w	r3, r2, r3
 801847e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018482:	3339      	adds	r3, #57	@ 0x39
 8018484:	4a09      	ldr	r2, [pc, #36]	@ (80184ac <rand1+0x3c>)
 8018486:	6013      	str	r3, [r2, #0]
 8018488:	4b08      	ldr	r3, [pc, #32]	@ (80184ac <rand1+0x3c>)
 801848a:	681a      	ldr	r2, [r3, #0]
 801848c:	2303      	movs	r3, #3
 801848e:	fba3 1302 	umull	r1, r3, r3, r2
 8018492:	1ad1      	subs	r1, r2, r3
 8018494:	0849      	lsrs	r1, r1, #1
 8018496:	440b      	add	r3, r1
 8018498:	0f99      	lsrs	r1, r3, #30
 801849a:	460b      	mov	r3, r1
 801849c:	07db      	lsls	r3, r3, #31
 801849e:	1a5b      	subs	r3, r3, r1
 80184a0:	1ad1      	subs	r1, r2, r3
 80184a2:	460b      	mov	r3, r1
}
 80184a4:	4618      	mov	r0, r3
 80184a6:	46bd      	mov	sp, r7
 80184a8:	bc80      	pop	{r7}
 80184aa:	4770      	bx	lr
 80184ac:	2000012c 	.word	0x2000012c
 80184b0:	41c64e6d 	.word	0x41c64e6d

080184b4 <srand1>:

void srand1( uint32_t seed )
{
 80184b4:	b480      	push	{r7}
 80184b6:	b083      	sub	sp, #12
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	6078      	str	r0, [r7, #4]
    next = seed;
 80184bc:	4a03      	ldr	r2, [pc, #12]	@ (80184cc <srand1+0x18>)
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	6013      	str	r3, [r2, #0]
}
 80184c2:	bf00      	nop
 80184c4:	370c      	adds	r7, #12
 80184c6:	46bd      	mov	sp, r7
 80184c8:	bc80      	pop	{r7}
 80184ca:	4770      	bx	lr
 80184cc:	2000012c 	.word	0x2000012c

080184d0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80184d0:	b580      	push	{r7, lr}
 80184d2:	b082      	sub	sp, #8
 80184d4:	af00      	add	r7, sp, #0
 80184d6:	6078      	str	r0, [r7, #4]
 80184d8:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80184da:	f7ff ffc9 	bl	8018470 <rand1>
 80184de:	4602      	mov	r2, r0
 80184e0:	6839      	ldr	r1, [r7, #0]
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	1acb      	subs	r3, r1, r3
 80184e6:	3301      	adds	r3, #1
 80184e8:	fb92 f1f3 	sdiv	r1, r2, r3
 80184ec:	fb01 f303 	mul.w	r3, r1, r3
 80184f0:	1ad2      	subs	r2, r2, r3
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	4413      	add	r3, r2
}
 80184f6:	4618      	mov	r0, r3
 80184f8:	3708      	adds	r7, #8
 80184fa:	46bd      	mov	sp, r7
 80184fc:	bd80      	pop	{r7, pc}

080184fe <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80184fe:	b480      	push	{r7}
 8018500:	b085      	sub	sp, #20
 8018502:	af00      	add	r7, sp, #0
 8018504:	60f8      	str	r0, [r7, #12]
 8018506:	60b9      	str	r1, [r7, #8]
 8018508:	4613      	mov	r3, r2
 801850a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801850c:	e007      	b.n	801851e <memcpy1+0x20>
    {
        *dst++ = *src++;
 801850e:	68ba      	ldr	r2, [r7, #8]
 8018510:	1c53      	adds	r3, r2, #1
 8018512:	60bb      	str	r3, [r7, #8]
 8018514:	68fb      	ldr	r3, [r7, #12]
 8018516:	1c59      	adds	r1, r3, #1
 8018518:	60f9      	str	r1, [r7, #12]
 801851a:	7812      	ldrb	r2, [r2, #0]
 801851c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801851e:	88fb      	ldrh	r3, [r7, #6]
 8018520:	1e5a      	subs	r2, r3, #1
 8018522:	80fa      	strh	r2, [r7, #6]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d1f2      	bne.n	801850e <memcpy1+0x10>
    }
}
 8018528:	bf00      	nop
 801852a:	bf00      	nop
 801852c:	3714      	adds	r7, #20
 801852e:	46bd      	mov	sp, r7
 8018530:	bc80      	pop	{r7}
 8018532:	4770      	bx	lr

08018534 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018534:	b480      	push	{r7}
 8018536:	b085      	sub	sp, #20
 8018538:	af00      	add	r7, sp, #0
 801853a:	60f8      	str	r0, [r7, #12]
 801853c:	60b9      	str	r1, [r7, #8]
 801853e:	4613      	mov	r3, r2
 8018540:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018542:	88fb      	ldrh	r3, [r7, #6]
 8018544:	3b01      	subs	r3, #1
 8018546:	68fa      	ldr	r2, [r7, #12]
 8018548:	4413      	add	r3, r2
 801854a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801854c:	e007      	b.n	801855e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801854e:	68ba      	ldr	r2, [r7, #8]
 8018550:	1c53      	adds	r3, r2, #1
 8018552:	60bb      	str	r3, [r7, #8]
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	1e59      	subs	r1, r3, #1
 8018558:	60f9      	str	r1, [r7, #12]
 801855a:	7812      	ldrb	r2, [r2, #0]
 801855c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801855e:	88fb      	ldrh	r3, [r7, #6]
 8018560:	1e5a      	subs	r2, r3, #1
 8018562:	80fa      	strh	r2, [r7, #6]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d1f2      	bne.n	801854e <memcpyr+0x1a>
    }
}
 8018568:	bf00      	nop
 801856a:	bf00      	nop
 801856c:	3714      	adds	r7, #20
 801856e:	46bd      	mov	sp, r7
 8018570:	bc80      	pop	{r7}
 8018572:	4770      	bx	lr

08018574 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018574:	b480      	push	{r7}
 8018576:	b083      	sub	sp, #12
 8018578:	af00      	add	r7, sp, #0
 801857a:	6078      	str	r0, [r7, #4]
 801857c:	460b      	mov	r3, r1
 801857e:	70fb      	strb	r3, [r7, #3]
 8018580:	4613      	mov	r3, r2
 8018582:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018584:	e004      	b.n	8018590 <memset1+0x1c>
    {
        *dst++ = value;
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	1c5a      	adds	r2, r3, #1
 801858a:	607a      	str	r2, [r7, #4]
 801858c:	78fa      	ldrb	r2, [r7, #3]
 801858e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018590:	883b      	ldrh	r3, [r7, #0]
 8018592:	1e5a      	subs	r2, r3, #1
 8018594:	803a      	strh	r2, [r7, #0]
 8018596:	2b00      	cmp	r3, #0
 8018598:	d1f5      	bne.n	8018586 <memset1+0x12>
    }
}
 801859a:	bf00      	nop
 801859c:	bf00      	nop
 801859e:	370c      	adds	r7, #12
 80185a0:	46bd      	mov	sp, r7
 80185a2:	bc80      	pop	{r7}
 80185a4:	4770      	bx	lr
	...

080185a8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80185a8:	b480      	push	{r7}
 80185aa:	b085      	sub	sp, #20
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	6078      	str	r0, [r7, #4]
 80185b0:	460b      	mov	r3, r1
 80185b2:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80185b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80185b8:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d101      	bne.n	80185c4 <Crc32+0x1c>
    {
        return 0;
 80185c0:	2300      	movs	r3, #0
 80185c2:	e026      	b.n	8018612 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 80185c4:	2300      	movs	r3, #0
 80185c6:	817b      	strh	r3, [r7, #10]
 80185c8:	e01d      	b.n	8018606 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 80185ca:	897b      	ldrh	r3, [r7, #10]
 80185cc:	687a      	ldr	r2, [r7, #4]
 80185ce:	4413      	add	r3, r2
 80185d0:	781b      	ldrb	r3, [r3, #0]
 80185d2:	461a      	mov	r2, r3
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	4053      	eors	r3, r2
 80185d8:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80185da:	2300      	movs	r3, #0
 80185dc:	813b      	strh	r3, [r7, #8]
 80185de:	e00c      	b.n	80185fa <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	085a      	lsrs	r2, r3, #1
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	f003 0301 	and.w	r3, r3, #1
 80185ea:	425b      	negs	r3, r3
 80185ec:	490b      	ldr	r1, [pc, #44]	@ (801861c <Crc32+0x74>)
 80185ee:	400b      	ands	r3, r1
 80185f0:	4053      	eors	r3, r2
 80185f2:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80185f4:	893b      	ldrh	r3, [r7, #8]
 80185f6:	3301      	adds	r3, #1
 80185f8:	813b      	strh	r3, [r7, #8]
 80185fa:	893b      	ldrh	r3, [r7, #8]
 80185fc:	2b07      	cmp	r3, #7
 80185fe:	d9ef      	bls.n	80185e0 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8018600:	897b      	ldrh	r3, [r7, #10]
 8018602:	3301      	adds	r3, #1
 8018604:	817b      	strh	r3, [r7, #10]
 8018606:	897a      	ldrh	r2, [r7, #10]
 8018608:	887b      	ldrh	r3, [r7, #2]
 801860a:	429a      	cmp	r2, r3
 801860c:	d3dd      	bcc.n	80185ca <Crc32+0x22>
        }
    }

    return ~crc;
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	43db      	mvns	r3, r3
}
 8018612:	4618      	mov	r0, r3
 8018614:	3714      	adds	r7, #20
 8018616:	46bd      	mov	sp, r7
 8018618:	bc80      	pop	{r7}
 801861a:	4770      	bx	lr
 801861c:	edb88320 	.word	0xedb88320

08018620 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018620:	b580      	push	{r7, lr}
 8018622:	b084      	sub	sp, #16
 8018624:	af02      	add	r7, sp, #8
 8018626:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018628:	4a24      	ldr	r2, [pc, #144]	@ (80186bc <RadioInit+0x9c>)
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801862e:	4b24      	ldr	r3, [pc, #144]	@ (80186c0 <RadioInit+0xa0>)
 8018630:	2200      	movs	r2, #0
 8018632:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018634:	4b22      	ldr	r3, [pc, #136]	@ (80186c0 <RadioInit+0xa0>)
 8018636:	2200      	movs	r2, #0
 8018638:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801863a:	4b21      	ldr	r3, [pc, #132]	@ (80186c0 <RadioInit+0xa0>)
 801863c:	2200      	movs	r2, #0
 801863e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018640:	4b1f      	ldr	r3, [pc, #124]	@ (80186c0 <RadioInit+0xa0>)
 8018642:	2200      	movs	r2, #0
 8018644:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8018646:	481f      	ldr	r0, [pc, #124]	@ (80186c4 <RadioInit+0xa4>)
 8018648:	f001 ffc0 	bl	801a5cc <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801864c:	4b1c      	ldr	r3, [pc, #112]	@ (80186c0 <RadioInit+0xa0>)
 801864e:	2200      	movs	r2, #0
 8018650:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8018652:	4b1b      	ldr	r3, [pc, #108]	@ (80186c0 <RadioInit+0xa0>)
 8018654:	2200      	movs	r2, #0
 8018656:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018658:	f002 fa54 	bl	801ab04 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801865c:	2100      	movs	r1, #0
 801865e:	2000      	movs	r0, #0
 8018660:	f002 fe20 	bl	801b2a4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8018664:	2204      	movs	r2, #4
 8018666:	2100      	movs	r1, #0
 8018668:	2001      	movs	r0, #1
 801866a:	f002 fbdd 	bl	801ae28 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801866e:	2300      	movs	r3, #0
 8018670:	2200      	movs	r2, #0
 8018672:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018676:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801867a:	f002 fb0d 	bl	801ac98 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801867e:	f000 fe99 	bl	80193b4 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8018682:	2300      	movs	r3, #0
 8018684:	9300      	str	r3, [sp, #0]
 8018686:	4b10      	ldr	r3, [pc, #64]	@ (80186c8 <RadioInit+0xa8>)
 8018688:	2200      	movs	r2, #0
 801868a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801868e:	480f      	ldr	r0, [pc, #60]	@ (80186cc <RadioInit+0xac>)
 8018690:	f004 f828 	bl	801c6e4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8018694:	2300      	movs	r3, #0
 8018696:	9300      	str	r3, [sp, #0]
 8018698:	4b0d      	ldr	r3, [pc, #52]	@ (80186d0 <RadioInit+0xb0>)
 801869a:	2200      	movs	r2, #0
 801869c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80186a0:	480c      	ldr	r0, [pc, #48]	@ (80186d4 <RadioInit+0xb4>)
 80186a2:	f004 f81f 	bl	801c6e4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80186a6:	4809      	ldr	r0, [pc, #36]	@ (80186cc <RadioInit+0xac>)
 80186a8:	f004 f8c0 	bl	801c82c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80186ac:	4809      	ldr	r0, [pc, #36]	@ (80186d4 <RadioInit+0xb4>)
 80186ae:	f004 f8bd 	bl	801c82c <UTIL_TIMER_Stop>
}
 80186b2:	bf00      	nop
 80186b4:	3708      	adds	r7, #8
 80186b6:	46bd      	mov	sp, r7
 80186b8:	bd80      	pop	{r7, pc}
 80186ba:	bf00      	nop
 80186bc:	20001d40 	.word	0x20001d40
 80186c0:	20001d44 	.word	0x20001d44
 80186c4:	080197a9 	.word	0x080197a9
 80186c8:	08019731 	.word	0x08019731
 80186cc:	20001da0 	.word	0x20001da0
 80186d0:	08019745 	.word	0x08019745
 80186d4:	20001db8 	.word	0x20001db8

080186d8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80186dc:	f001 ffbe 	bl	801a65c <SUBGRF_GetOperatingMode>
 80186e0:	4603      	mov	r3, r0
 80186e2:	2b07      	cmp	r3, #7
 80186e4:	d00a      	beq.n	80186fc <RadioGetStatus+0x24>
 80186e6:	2b07      	cmp	r3, #7
 80186e8:	dc0a      	bgt.n	8018700 <RadioGetStatus+0x28>
 80186ea:	2b04      	cmp	r3, #4
 80186ec:	d002      	beq.n	80186f4 <RadioGetStatus+0x1c>
 80186ee:	2b05      	cmp	r3, #5
 80186f0:	d002      	beq.n	80186f8 <RadioGetStatus+0x20>
 80186f2:	e005      	b.n	8018700 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80186f4:	2302      	movs	r3, #2
 80186f6:	e004      	b.n	8018702 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80186f8:	2301      	movs	r3, #1
 80186fa:	e002      	b.n	8018702 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80186fc:	2303      	movs	r3, #3
 80186fe:	e000      	b.n	8018702 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8018700:	2300      	movs	r3, #0
    }
}
 8018702:	4618      	mov	r0, r3
 8018704:	bd80      	pop	{r7, pc}
	...

08018708 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8018708:	b580      	push	{r7, lr}
 801870a:	b082      	sub	sp, #8
 801870c:	af00      	add	r7, sp, #0
 801870e:	4603      	mov	r3, r0
 8018710:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8018712:	4a2a      	ldr	r2, [pc, #168]	@ (80187bc <RadioSetModem+0xb4>)
 8018714:	79fb      	ldrb	r3, [r7, #7]
 8018716:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8018718:	79fb      	ldrb	r3, [r7, #7]
 801871a:	4618      	mov	r0, r3
 801871c:	f003 f995 	bl	801ba4a <RFW_SetRadioModem>
    switch( modem )
 8018720:	79fb      	ldrb	r3, [r7, #7]
 8018722:	2b05      	cmp	r3, #5
 8018724:	d80e      	bhi.n	8018744 <RadioSetModem+0x3c>
 8018726:	a201      	add	r2, pc, #4	@ (adr r2, 801872c <RadioSetModem+0x24>)
 8018728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801872c:	08018753 	.word	0x08018753
 8018730:	08018761 	.word	0x08018761
 8018734:	08018745 	.word	0x08018745
 8018738:	08018787 	.word	0x08018787
 801873c:	08018795 	.word	0x08018795
 8018740:	080187a3 	.word	0x080187a3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8018744:	2003      	movs	r0, #3
 8018746:	f002 fb49 	bl	801addc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801874a:	4b1c      	ldr	r3, [pc, #112]	@ (80187bc <RadioSetModem+0xb4>)
 801874c:	2200      	movs	r2, #0
 801874e:	735a      	strb	r2, [r3, #13]
        break;
 8018750:	e02f      	b.n	80187b2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018752:	2000      	movs	r0, #0
 8018754:	f002 fb42 	bl	801addc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018758:	4b18      	ldr	r3, [pc, #96]	@ (80187bc <RadioSetModem+0xb4>)
 801875a:	2200      	movs	r2, #0
 801875c:	735a      	strb	r2, [r3, #13]
        break;
 801875e:	e028      	b.n	80187b2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8018760:	2001      	movs	r0, #1
 8018762:	f002 fb3b 	bl	801addc <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8018766:	4b15      	ldr	r3, [pc, #84]	@ (80187bc <RadioSetModem+0xb4>)
 8018768:	7b5a      	ldrb	r2, [r3, #13]
 801876a:	4b14      	ldr	r3, [pc, #80]	@ (80187bc <RadioSetModem+0xb4>)
 801876c:	7b1b      	ldrb	r3, [r3, #12]
 801876e:	429a      	cmp	r2, r3
 8018770:	d01e      	beq.n	80187b0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8018772:	4b12      	ldr	r3, [pc, #72]	@ (80187bc <RadioSetModem+0xb4>)
 8018774:	7b1a      	ldrb	r2, [r3, #12]
 8018776:	4b11      	ldr	r3, [pc, #68]	@ (80187bc <RadioSetModem+0xb4>)
 8018778:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801877a:	4b10      	ldr	r3, [pc, #64]	@ (80187bc <RadioSetModem+0xb4>)
 801877c:	7b5b      	ldrb	r3, [r3, #13]
 801877e:	4618      	mov	r0, r3
 8018780:	f000 ffa0 	bl	80196c4 <RadioSetPublicNetwork>
        }
        break;
 8018784:	e014      	b.n	80187b0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018786:	2002      	movs	r0, #2
 8018788:	f002 fb28 	bl	801addc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801878c:	4b0b      	ldr	r3, [pc, #44]	@ (80187bc <RadioSetModem+0xb4>)
 801878e:	2200      	movs	r2, #0
 8018790:	735a      	strb	r2, [r3, #13]
        break;
 8018792:	e00e      	b.n	80187b2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018794:	2002      	movs	r0, #2
 8018796:	f002 fb21 	bl	801addc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801879a:	4b08      	ldr	r3, [pc, #32]	@ (80187bc <RadioSetModem+0xb4>)
 801879c:	2200      	movs	r2, #0
 801879e:	735a      	strb	r2, [r3, #13]
        break;
 80187a0:	e007      	b.n	80187b2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80187a2:	2000      	movs	r0, #0
 80187a4:	f002 fb1a 	bl	801addc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80187a8:	4b04      	ldr	r3, [pc, #16]	@ (80187bc <RadioSetModem+0xb4>)
 80187aa:	2200      	movs	r2, #0
 80187ac:	735a      	strb	r2, [r3, #13]
        break;
 80187ae:	e000      	b.n	80187b2 <RadioSetModem+0xaa>
        break;
 80187b0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80187b2:	bf00      	nop
 80187b4:	3708      	adds	r7, #8
 80187b6:	46bd      	mov	sp, r7
 80187b8:	bd80      	pop	{r7, pc}
 80187ba:	bf00      	nop
 80187bc:	20001d44 	.word	0x20001d44

080187c0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80187c0:	b580      	push	{r7, lr}
 80187c2:	b082      	sub	sp, #8
 80187c4:	af00      	add	r7, sp, #0
 80187c6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80187c8:	6878      	ldr	r0, [r7, #4]
 80187ca:	f002 fac1 	bl	801ad50 <SUBGRF_SetRfFrequency>
}
 80187ce:	bf00      	nop
 80187d0:	3708      	adds	r7, #8
 80187d2:	46bd      	mov	sp, r7
 80187d4:	bd80      	pop	{r7, pc}

080187d6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80187d6:	b580      	push	{r7, lr}
 80187d8:	b090      	sub	sp, #64	@ 0x40
 80187da:	af0a      	add	r7, sp, #40	@ 0x28
 80187dc:	60f8      	str	r0, [r7, #12]
 80187de:	60b9      	str	r1, [r7, #8]
 80187e0:	603b      	str	r3, [r7, #0]
 80187e2:	4613      	mov	r3, r2
 80187e4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80187e6:	2301      	movs	r3, #1
 80187e8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80187ea:	2300      	movs	r3, #0
 80187ec:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80187ee:	2300      	movs	r3, #0
 80187f0:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80187f2:	f000 fdf2 	bl	80193da <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80187f6:	2000      	movs	r0, #0
 80187f8:	f7ff ff86 	bl	8018708 <RadioSetModem>

    RadioSetChannel( freq );
 80187fc:	68f8      	ldr	r0, [r7, #12]
 80187fe:	f7ff ffdf 	bl	80187c0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8018802:	2301      	movs	r3, #1
 8018804:	9309      	str	r3, [sp, #36]	@ 0x24
 8018806:	2300      	movs	r3, #0
 8018808:	9308      	str	r3, [sp, #32]
 801880a:	2300      	movs	r3, #0
 801880c:	9307      	str	r3, [sp, #28]
 801880e:	2300      	movs	r3, #0
 8018810:	9306      	str	r3, [sp, #24]
 8018812:	2300      	movs	r3, #0
 8018814:	9305      	str	r3, [sp, #20]
 8018816:	2300      	movs	r3, #0
 8018818:	9304      	str	r3, [sp, #16]
 801881a:	2300      	movs	r3, #0
 801881c:	9303      	str	r3, [sp, #12]
 801881e:	2300      	movs	r3, #0
 8018820:	9302      	str	r3, [sp, #8]
 8018822:	2303      	movs	r3, #3
 8018824:	9301      	str	r3, [sp, #4]
 8018826:	68bb      	ldr	r3, [r7, #8]
 8018828:	9300      	str	r3, [sp, #0]
 801882a:	2300      	movs	r3, #0
 801882c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8018830:	68b9      	ldr	r1, [r7, #8]
 8018832:	2000      	movs	r0, #0
 8018834:	f000 f83c 	bl	80188b0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8018838:	2000      	movs	r0, #0
 801883a:	f000 fdd5 	bl	80193e8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801883e:	f000 ff6f 	bl	8019720 <RadioGetWakeupTime>
 8018842:	4603      	mov	r3, r0
 8018844:	4618      	mov	r0, r3
 8018846:	f7e9 fdf5 	bl	8002434 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801884a:	f004 f909 	bl	801ca60 <UTIL_TIMER_GetCurrentTime>
 801884e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018850:	e00d      	b.n	801886e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8018852:	2000      	movs	r0, #0
 8018854:	f000 feb6 	bl	80195c4 <RadioRssi>
 8018858:	4603      	mov	r3, r0
 801885a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801885c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8018860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018864:	429a      	cmp	r2, r3
 8018866:	dd02      	ble.n	801886e <RadioIsChannelFree+0x98>
        {
            status = false;
 8018868:	2300      	movs	r3, #0
 801886a:	75fb      	strb	r3, [r7, #23]
            break;
 801886c:	e006      	b.n	801887c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801886e:	6938      	ldr	r0, [r7, #16]
 8018870:	f004 f908 	bl	801ca84 <UTIL_TIMER_GetElapsedTime>
 8018874:	4602      	mov	r2, r0
 8018876:	683b      	ldr	r3, [r7, #0]
 8018878:	4293      	cmp	r3, r2
 801887a:	d8ea      	bhi.n	8018852 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801887c:	f000 fdad 	bl	80193da <RadioStandby>

    return status;
 8018880:	7dfb      	ldrb	r3, [r7, #23]
}
 8018882:	4618      	mov	r0, r3
 8018884:	3718      	adds	r7, #24
 8018886:	46bd      	mov	sp, r7
 8018888:	bd80      	pop	{r7, pc}

0801888a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801888a:	b580      	push	{r7, lr}
 801888c:	b082      	sub	sp, #8
 801888e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8018890:	2300      	movs	r3, #0
 8018892:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018894:	2300      	movs	r3, #0
 8018896:	2200      	movs	r2, #0
 8018898:	2100      	movs	r1, #0
 801889a:	2000      	movs	r0, #0
 801889c:	f002 f9fc 	bl	801ac98 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80188a0:	f001 ffad 	bl	801a7fe <SUBGRF_GetRandom>
 80188a4:	6078      	str	r0, [r7, #4]

    return rnd;
 80188a6:	687b      	ldr	r3, [r7, #4]
}
 80188a8:	4618      	mov	r0, r3
 80188aa:	3708      	adds	r7, #8
 80188ac:	46bd      	mov	sp, r7
 80188ae:	bd80      	pop	{r7, pc}

080188b0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b08a      	sub	sp, #40	@ 0x28
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	60b9      	str	r1, [r7, #8]
 80188b8:	607a      	str	r2, [r7, #4]
 80188ba:	461a      	mov	r2, r3
 80188bc:	4603      	mov	r3, r0
 80188be:	73fb      	strb	r3, [r7, #15]
 80188c0:	4613      	mov	r3, r2
 80188c2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80188c4:	4ab9      	ldr	r2, [pc, #740]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 80188c6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80188ca:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 80188cc:	f003 f87b 	bl	801b9c6 <RFW_DeInit>
    if( rxContinuous == true )
 80188d0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d001      	beq.n	80188dc <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80188d8:	2300      	movs	r3, #0
 80188da:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 80188dc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d004      	beq.n	80188ee <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80188e4:	4ab2      	ldr	r2, [pc, #712]	@ (8018bb0 <RadioSetRxConfig+0x300>)
 80188e6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80188ea:	7013      	strb	r3, [r2, #0]
 80188ec:	e002      	b.n	80188f4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80188ee:	4bb0      	ldr	r3, [pc, #704]	@ (8018bb0 <RadioSetRxConfig+0x300>)
 80188f0:	22ff      	movs	r2, #255	@ 0xff
 80188f2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80188f4:	7bfb      	ldrb	r3, [r7, #15]
 80188f6:	2b05      	cmp	r3, #5
 80188f8:	d009      	beq.n	801890e <RadioSetRxConfig+0x5e>
 80188fa:	2b05      	cmp	r3, #5
 80188fc:	f300 81d7 	bgt.w	8018cae <RadioSetRxConfig+0x3fe>
 8018900:	2b00      	cmp	r3, #0
 8018902:	f000 80bf 	beq.w	8018a84 <RadioSetRxConfig+0x1d4>
 8018906:	2b01      	cmp	r3, #1
 8018908:	f000 8124 	beq.w	8018b54 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801890c:	e1cf      	b.n	8018cae <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801890e:	2001      	movs	r0, #1
 8018910:	f002 f8ba 	bl	801aa88 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018914:	4ba5      	ldr	r3, [pc, #660]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018916:	2200      	movs	r2, #0
 8018918:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801891c:	4aa3      	ldr	r2, [pc, #652]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8018922:	4ba2      	ldr	r3, [pc, #648]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018924:	2209      	movs	r2, #9
 8018926:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801892a:	4ba0      	ldr	r3, [pc, #640]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 801892c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8018930:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018932:	68b8      	ldr	r0, [r7, #8]
 8018934:	f002 ff7a 	bl	801b82c <SUBGRF_GetFskBandwidthRegValue>
 8018938:	4603      	mov	r3, r0
 801893a:	461a      	mov	r2, r3
 801893c:	4b9b      	ldr	r3, [pc, #620]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 801893e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018942:	4b9a      	ldr	r3, [pc, #616]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018944:	2200      	movs	r2, #0
 8018946:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018948:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801894a:	00db      	lsls	r3, r3, #3
 801894c:	b29a      	uxth	r2, r3
 801894e:	4b97      	ldr	r3, [pc, #604]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018950:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8018952:	4b96      	ldr	r3, [pc, #600]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018954:	2200      	movs	r2, #0
 8018956:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8018958:	4b94      	ldr	r3, [pc, #592]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 801895a:	2210      	movs	r2, #16
 801895c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801895e:	4b93      	ldr	r3, [pc, #588]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018960:	2200      	movs	r2, #0
 8018962:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8018964:	4b91      	ldr	r3, [pc, #580]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018966:	2200      	movs	r2, #0
 8018968:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801896a:	4b91      	ldr	r3, [pc, #580]	@ (8018bb0 <RadioSetRxConfig+0x300>)
 801896c:	781a      	ldrb	r2, [r3, #0]
 801896e:	4b8f      	ldr	r3, [pc, #572]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018970:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018972:	4b8e      	ldr	r3, [pc, #568]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018974:	2201      	movs	r2, #1
 8018976:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8018978:	4b8c      	ldr	r3, [pc, #560]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 801897a:	2200      	movs	r2, #0
 801897c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801897e:	2005      	movs	r0, #5
 8018980:	f7ff fec2 	bl	8018708 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018984:	488b      	ldr	r0, [pc, #556]	@ (8018bb4 <RadioSetRxConfig+0x304>)
 8018986:	f002 fb1d 	bl	801afc4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801898a:	488b      	ldr	r0, [pc, #556]	@ (8018bb8 <RadioSetRxConfig+0x308>)
 801898c:	f002 fbec 	bl	801b168 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018990:	4a8a      	ldr	r2, [pc, #552]	@ (8018bbc <RadioSetRxConfig+0x30c>)
 8018992:	f107 031c 	add.w	r3, r7, #28
 8018996:	e892 0003 	ldmia.w	r2, {r0, r1}
 801899a:	e883 0003 	stmia.w	r3, {r0, r1}
 801899e:	f107 031c 	add.w	r3, r7, #28
 80189a2:	4618      	mov	r0, r3
 80189a4:	f001 fea9 	bl	801a6fa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80189a8:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80189ac:	f001 fef4 	bl	801a798 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80189b0:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80189b4:	f000 fe24 	bl	8019600 <RadioRead>
 80189b8:	4603      	mov	r3, r0
 80189ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 80189be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80189c2:	f023 0310 	bic.w	r3, r3, #16
 80189c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80189ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80189ce:	4619      	mov	r1, r3
 80189d0:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80189d4:	f000 fe02 	bl	80195dc <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80189d8:	2104      	movs	r1, #4
 80189da:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 80189de:	f000 fdfd 	bl	80195dc <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80189e2:	f640 009b 	movw	r0, #2203	@ 0x89b
 80189e6:	f000 fe0b 	bl	8019600 <RadioRead>
 80189ea:	4603      	mov	r3, r0
 80189ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80189f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80189f4:	f023 031c 	bic.w	r3, r3, #28
 80189f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80189fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018a00:	f043 0308 	orr.w	r3, r3, #8
 8018a04:	b2db      	uxtb	r3, r3
 8018a06:	4619      	mov	r1, r3
 8018a08:	f640 009b 	movw	r0, #2203	@ 0x89b
 8018a0c:	f000 fde6 	bl	80195dc <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8018a10:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8018a14:	f000 fdf4 	bl	8019600 <RadioRead>
 8018a18:	4603      	mov	r3, r0
 8018a1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018a22:	f023 0318 	bic.w	r3, r3, #24
 8018a26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8018a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018a2e:	f043 0318 	orr.w	r3, r3, #24
 8018a32:	b2db      	uxtb	r3, r3
 8018a34:	4619      	mov	r1, r3
 8018a36:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8018a3a:	f000 fdcf 	bl	80195dc <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8018a3e:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8018a42:	f000 fddd 	bl	8019600 <RadioRead>
 8018a46:	4603      	mov	r3, r0
 8018a48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8018a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8018a54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8018a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018a5c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8018a60:	b2db      	uxtb	r3, r3
 8018a62:	4619      	mov	r1, r3
 8018a64:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8018a68:	f000 fdb8 	bl	80195dc <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018a6c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018a6e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8018a72:	fb02 f303 	mul.w	r3, r2, r3
 8018a76:	461a      	mov	r2, r3
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018a7e:	4a4b      	ldr	r2, [pc, #300]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018a80:	6093      	str	r3, [r2, #8]
            break;
 8018a82:	e115      	b.n	8018cb0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018a84:	2000      	movs	r0, #0
 8018a86:	f001 ffff 	bl	801aa88 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018a8a:	4b48      	ldr	r3, [pc, #288]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018a8c:	2200      	movs	r2, #0
 8018a8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018a92:	4a46      	ldr	r2, [pc, #280]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018a98:	4b44      	ldr	r3, [pc, #272]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018a9a:	220b      	movs	r2, #11
 8018a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018aa0:	68b8      	ldr	r0, [r7, #8]
 8018aa2:	f002 fec3 	bl	801b82c <SUBGRF_GetFskBandwidthRegValue>
 8018aa6:	4603      	mov	r3, r0
 8018aa8:	461a      	mov	r2, r3
 8018aaa:	4b40      	ldr	r3, [pc, #256]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018aac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018ab2:	2200      	movs	r2, #0
 8018ab4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018ab6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018ab8:	00db      	lsls	r3, r3, #3
 8018aba:	b29a      	uxth	r2, r3
 8018abc:	4b3b      	ldr	r3, [pc, #236]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018abe:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018ac0:	4b3a      	ldr	r3, [pc, #232]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018ac2:	2204      	movs	r2, #4
 8018ac4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8018ac6:	4b39      	ldr	r3, [pc, #228]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018ac8:	2218      	movs	r2, #24
 8018aca:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018acc:	4b37      	ldr	r3, [pc, #220]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018ace:	2200      	movs	r2, #0
 8018ad0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018ad2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018ad6:	f083 0301 	eor.w	r3, r3, #1
 8018ada:	b2db      	uxtb	r3, r3
 8018adc:	461a      	mov	r2, r3
 8018ade:	4b33      	ldr	r3, [pc, #204]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018ae0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018ae2:	4b33      	ldr	r3, [pc, #204]	@ (8018bb0 <RadioSetRxConfig+0x300>)
 8018ae4:	781a      	ldrb	r2, [r3, #0]
 8018ae6:	4b31      	ldr	r3, [pc, #196]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018ae8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8018aea:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d003      	beq.n	8018afa <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018af2:	4b2e      	ldr	r3, [pc, #184]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018af4:	22f2      	movs	r2, #242	@ 0xf2
 8018af6:	75da      	strb	r2, [r3, #23]
 8018af8:	e002      	b.n	8018b00 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018afa:	4b2c      	ldr	r3, [pc, #176]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018afc:	2201      	movs	r2, #1
 8018afe:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018b00:	4b2a      	ldr	r3, [pc, #168]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018b02:	2201      	movs	r2, #1
 8018b04:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018b06:	f000 fc68 	bl	80193da <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8018b0a:	2000      	movs	r0, #0
 8018b0c:	f7ff fdfc 	bl	8018708 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018b10:	4828      	ldr	r0, [pc, #160]	@ (8018bb4 <RadioSetRxConfig+0x304>)
 8018b12:	f002 fa57 	bl	801afc4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018b16:	4828      	ldr	r0, [pc, #160]	@ (8018bb8 <RadioSetRxConfig+0x308>)
 8018b18:	f002 fb26 	bl	801b168 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018b1c:	4a28      	ldr	r2, [pc, #160]	@ (8018bc0 <RadioSetRxConfig+0x310>)
 8018b1e:	f107 0314 	add.w	r3, r7, #20
 8018b22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018b26:	e883 0003 	stmia.w	r3, {r0, r1}
 8018b2a:	f107 0314 	add.w	r3, r7, #20
 8018b2e:	4618      	mov	r0, r3
 8018b30:	f001 fde3 	bl	801a6fa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018b34:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018b38:	f001 fe2e 	bl	801a798 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018b3c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018b3e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8018b42:	fb02 f303 	mul.w	r3, r2, r3
 8018b46:	461a      	mov	r2, r3
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b4e:	4a17      	ldr	r2, [pc, #92]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018b50:	6093      	str	r3, [r2, #8]
            break;
 8018b52:	e0ad      	b.n	8018cb0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018b54:	2000      	movs	r0, #0
 8018b56:	f001 ff97 	bl	801aa88 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018b5a:	4b14      	ldr	r3, [pc, #80]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018b5c:	2201      	movs	r2, #1
 8018b5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	b2da      	uxtb	r2, r3
 8018b66:	4b11      	ldr	r3, [pc, #68]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018b68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8018b6c:	4a15      	ldr	r2, [pc, #84]	@ (8018bc4 <RadioSetRxConfig+0x314>)
 8018b6e:	68bb      	ldr	r3, [r7, #8]
 8018b70:	4413      	add	r3, r2
 8018b72:	781a      	ldrb	r2, [r3, #0]
 8018b74:	4b0d      	ldr	r3, [pc, #52]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018b76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8018b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018b7c:	7bbb      	ldrb	r3, [r7, #14]
 8018b7e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018b82:	68bb      	ldr	r3, [r7, #8]
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d105      	bne.n	8018b94 <RadioSetRxConfig+0x2e4>
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	2b0b      	cmp	r3, #11
 8018b8c:	d008      	beq.n	8018ba0 <RadioSetRxConfig+0x2f0>
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	2b0c      	cmp	r3, #12
 8018b92:	d005      	beq.n	8018ba0 <RadioSetRxConfig+0x2f0>
 8018b94:	68bb      	ldr	r3, [r7, #8]
 8018b96:	2b01      	cmp	r3, #1
 8018b98:	d116      	bne.n	8018bc8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	2b0c      	cmp	r3, #12
 8018b9e:	d113      	bne.n	8018bc8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018ba0:	4b02      	ldr	r3, [pc, #8]	@ (8018bac <RadioSetRxConfig+0x2fc>)
 8018ba2:	2201      	movs	r2, #1
 8018ba4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8018ba8:	e012      	b.n	8018bd0 <RadioSetRxConfig+0x320>
 8018baa:	bf00      	nop
 8018bac:	20001d44 	.word	0x20001d44
 8018bb0:	20000130 	.word	0x20000130
 8018bb4:	20001d7c 	.word	0x20001d7c
 8018bb8:	20001d52 	.word	0x20001d52
 8018bbc:	0801d910 	.word	0x0801d910
 8018bc0:	0801d918 	.word	0x0801d918
 8018bc4:	0801e004 	.word	0x0801e004
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8018cb8 <RadioSetRxConfig+0x408>)
 8018bca:	2200      	movs	r2, #0
 8018bcc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018bd0:	4b39      	ldr	r3, [pc, #228]	@ (8018cb8 <RadioSetRxConfig+0x408>)
 8018bd2:	2201      	movs	r2, #1
 8018bd4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018bd6:	4b38      	ldr	r3, [pc, #224]	@ (8018cb8 <RadioSetRxConfig+0x408>)
 8018bd8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8018bdc:	2b05      	cmp	r3, #5
 8018bde:	d004      	beq.n	8018bea <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018be0:	4b35      	ldr	r3, [pc, #212]	@ (8018cb8 <RadioSetRxConfig+0x408>)
 8018be2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018be6:	2b06      	cmp	r3, #6
 8018be8:	d10a      	bne.n	8018c00 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8018bea:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018bec:	2b0b      	cmp	r3, #11
 8018bee:	d803      	bhi.n	8018bf8 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018bf0:	4b31      	ldr	r3, [pc, #196]	@ (8018cb8 <RadioSetRxConfig+0x408>)
 8018bf2:	220c      	movs	r2, #12
 8018bf4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018bf6:	e006      	b.n	8018c06 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018bf8:	4a2f      	ldr	r2, [pc, #188]	@ (8018cb8 <RadioSetRxConfig+0x408>)
 8018bfa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018bfc:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018bfe:	e002      	b.n	8018c06 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018c00:	4a2d      	ldr	r2, [pc, #180]	@ (8018cb8 <RadioSetRxConfig+0x408>)
 8018c02:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018c04:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018c06:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8018cb8 <RadioSetRxConfig+0x408>)
 8018c0c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8018cbc <RadioSetRxConfig+0x40c>)
 8018c10:	781a      	ldrb	r2, [r3, #0]
 8018c12:	4b29      	ldr	r3, [pc, #164]	@ (8018cb8 <RadioSetRxConfig+0x408>)
 8018c14:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018c16:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8018c1a:	4b27      	ldr	r3, [pc, #156]	@ (8018cb8 <RadioSetRxConfig+0x408>)
 8018c1c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018c20:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8018c24:	4b24      	ldr	r3, [pc, #144]	@ (8018cb8 <RadioSetRxConfig+0x408>)
 8018c26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8018c2a:	f000 fbd6 	bl	80193da <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018c2e:	2001      	movs	r0, #1
 8018c30:	f7ff fd6a 	bl	8018708 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018c34:	4822      	ldr	r0, [pc, #136]	@ (8018cc0 <RadioSetRxConfig+0x410>)
 8018c36:	f002 f9c5 	bl	801afc4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018c3a:	4822      	ldr	r0, [pc, #136]	@ (8018cc4 <RadioSetRxConfig+0x414>)
 8018c3c:	f002 fa94 	bl	801b168 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018c40:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018c42:	b2db      	uxtb	r3, r3
 8018c44:	4618      	mov	r0, r3
 8018c46:	f001 ff2e 	bl	801aaa6 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8018c4a:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8018c4e:	f002 fbe7 	bl	801b420 <SUBGRF_ReadRegister>
 8018c52:	4603      	mov	r3, r0
 8018c54:	f003 0301 	and.w	r3, r3, #1
 8018c58:	b2db      	uxtb	r3, r3
 8018c5a:	4619      	mov	r1, r3
 8018c5c:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8018c60:	f002 fbca 	bl	801b3f8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018c64:	4b14      	ldr	r3, [pc, #80]	@ (8018cb8 <RadioSetRxConfig+0x408>)
 8018c66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8018c6a:	2b01      	cmp	r3, #1
 8018c6c:	d10d      	bne.n	8018c8a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018c6e:	f240 7036 	movw	r0, #1846	@ 0x736
 8018c72:	f002 fbd5 	bl	801b420 <SUBGRF_ReadRegister>
 8018c76:	4603      	mov	r3, r0
 8018c78:	f023 0304 	bic.w	r3, r3, #4
 8018c7c:	b2db      	uxtb	r3, r3
 8018c7e:	4619      	mov	r1, r3
 8018c80:	f240 7036 	movw	r0, #1846	@ 0x736
 8018c84:	f002 fbb8 	bl	801b3f8 <SUBGRF_WriteRegister>
 8018c88:	e00c      	b.n	8018ca4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018c8a:	f240 7036 	movw	r0, #1846	@ 0x736
 8018c8e:	f002 fbc7 	bl	801b420 <SUBGRF_ReadRegister>
 8018c92:	4603      	mov	r3, r0
 8018c94:	f043 0304 	orr.w	r3, r3, #4
 8018c98:	b2db      	uxtb	r3, r3
 8018c9a:	4619      	mov	r1, r3
 8018c9c:	f240 7036 	movw	r0, #1846	@ 0x736
 8018ca0:	f002 fbaa 	bl	801b3f8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8018ca4:	4b04      	ldr	r3, [pc, #16]	@ (8018cb8 <RadioSetRxConfig+0x408>)
 8018ca6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018caa:	609a      	str	r2, [r3, #8]
            break;
 8018cac:	e000      	b.n	8018cb0 <RadioSetRxConfig+0x400>
            break;
 8018cae:	bf00      	nop
    }
}
 8018cb0:	bf00      	nop
 8018cb2:	3728      	adds	r7, #40	@ 0x28
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	bd80      	pop	{r7, pc}
 8018cb8:	20001d44 	.word	0x20001d44
 8018cbc:	20000130 	.word	0x20000130
 8018cc0:	20001d7c 	.word	0x20001d7c
 8018cc4:	20001d52 	.word	0x20001d52

08018cc8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8018cc8:	b580      	push	{r7, lr}
 8018cca:	b086      	sub	sp, #24
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	60ba      	str	r2, [r7, #8]
 8018cd0:	607b      	str	r3, [r7, #4]
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	73fb      	strb	r3, [r7, #15]
 8018cd6:	460b      	mov	r3, r1
 8018cd8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8018cda:	f002 fe74 	bl	801b9c6 <RFW_DeInit>
    switch( modem )
 8018cde:	7bfb      	ldrb	r3, [r7, #15]
 8018ce0:	2b04      	cmp	r3, #4
 8018ce2:	f000 80c7 	beq.w	8018e74 <RadioSetTxConfig+0x1ac>
 8018ce6:	2b04      	cmp	r3, #4
 8018ce8:	f300 80d6 	bgt.w	8018e98 <RadioSetTxConfig+0x1d0>
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d002      	beq.n	8018cf6 <RadioSetTxConfig+0x2e>
 8018cf0:	2b01      	cmp	r3, #1
 8018cf2:	d059      	beq.n	8018da8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018cf4:	e0d0      	b.n	8018e98 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018cf6:	4b77      	ldr	r3, [pc, #476]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018cf8:	2200      	movs	r2, #0
 8018cfa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018cfe:	4a75      	ldr	r2, [pc, #468]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018d00:	6a3b      	ldr	r3, [r7, #32]
 8018d02:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018d04:	4b73      	ldr	r3, [pc, #460]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018d06:	220b      	movs	r2, #11
 8018d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018d0c:	6878      	ldr	r0, [r7, #4]
 8018d0e:	f002 fd8d 	bl	801b82c <SUBGRF_GetFskBandwidthRegValue>
 8018d12:	4603      	mov	r3, r0
 8018d14:	461a      	mov	r2, r3
 8018d16:	4b6f      	ldr	r3, [pc, #444]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018d18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8018d1c:	4a6d      	ldr	r2, [pc, #436]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018d1e:	68bb      	ldr	r3, [r7, #8]
 8018d20:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018d22:	4b6c      	ldr	r3, [pc, #432]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018d24:	2200      	movs	r2, #0
 8018d26:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018d28:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018d2a:	00db      	lsls	r3, r3, #3
 8018d2c:	b29a      	uxth	r2, r3
 8018d2e:	4b69      	ldr	r3, [pc, #420]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018d30:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018d32:	4b68      	ldr	r3, [pc, #416]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018d34:	2204      	movs	r2, #4
 8018d36:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8018d38:	4b66      	ldr	r3, [pc, #408]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018d3a:	2218      	movs	r2, #24
 8018d3c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018d3e:	4b65      	ldr	r3, [pc, #404]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018d40:	2200      	movs	r2, #0
 8018d42:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018d44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018d48:	f083 0301 	eor.w	r3, r3, #1
 8018d4c:	b2db      	uxtb	r3, r3
 8018d4e:	461a      	mov	r2, r3
 8018d50:	4b60      	ldr	r3, [pc, #384]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018d52:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8018d54:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d003      	beq.n	8018d64 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018d5c:	4b5d      	ldr	r3, [pc, #372]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018d5e:	22f2      	movs	r2, #242	@ 0xf2
 8018d60:	75da      	strb	r2, [r3, #23]
 8018d62:	e002      	b.n	8018d6a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018d64:	4b5b      	ldr	r3, [pc, #364]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018d66:	2201      	movs	r2, #1
 8018d68:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018d6a:	4b5a      	ldr	r3, [pc, #360]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018d6c:	2201      	movs	r2, #1
 8018d6e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018d70:	f000 fb33 	bl	80193da <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8018d74:	2000      	movs	r0, #0
 8018d76:	f7ff fcc7 	bl	8018708 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018d7a:	4857      	ldr	r0, [pc, #348]	@ (8018ed8 <RadioSetTxConfig+0x210>)
 8018d7c:	f002 f922 	bl	801afc4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018d80:	4856      	ldr	r0, [pc, #344]	@ (8018edc <RadioSetTxConfig+0x214>)
 8018d82:	f002 f9f1 	bl	801b168 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018d86:	4a56      	ldr	r2, [pc, #344]	@ (8018ee0 <RadioSetTxConfig+0x218>)
 8018d88:	f107 0310 	add.w	r3, r7, #16
 8018d8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018d90:	e883 0003 	stmia.w	r3, {r0, r1}
 8018d94:	f107 0310 	add.w	r3, r7, #16
 8018d98:	4618      	mov	r0, r3
 8018d9a:	f001 fcae 	bl	801a6fa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018d9e:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018da2:	f001 fcf9 	bl	801a798 <SUBGRF_SetWhiteningSeed>
            break;
 8018da6:	e078      	b.n	8018e9a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018da8:	4b4a      	ldr	r3, [pc, #296]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018daa:	2201      	movs	r2, #1
 8018dac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8018db0:	6a3b      	ldr	r3, [r7, #32]
 8018db2:	b2da      	uxtb	r2, r3
 8018db4:	4b47      	ldr	r3, [pc, #284]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8018dba:	4a4a      	ldr	r2, [pc, #296]	@ (8018ee4 <RadioSetTxConfig+0x21c>)
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	4413      	add	r3, r2
 8018dc0:	781a      	ldrb	r2, [r3, #0]
 8018dc2:	4b44      	ldr	r3, [pc, #272]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8018dc8:	4a42      	ldr	r2, [pc, #264]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018dca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018dce:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d105      	bne.n	8018de4 <RadioSetTxConfig+0x11c>
 8018dd8:	6a3b      	ldr	r3, [r7, #32]
 8018dda:	2b0b      	cmp	r3, #11
 8018ddc:	d008      	beq.n	8018df0 <RadioSetTxConfig+0x128>
 8018dde:	6a3b      	ldr	r3, [r7, #32]
 8018de0:	2b0c      	cmp	r3, #12
 8018de2:	d005      	beq.n	8018df0 <RadioSetTxConfig+0x128>
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	2b01      	cmp	r3, #1
 8018de8:	d107      	bne.n	8018dfa <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018dea:	6a3b      	ldr	r3, [r7, #32]
 8018dec:	2b0c      	cmp	r3, #12
 8018dee:	d104      	bne.n	8018dfa <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018df0:	4b38      	ldr	r3, [pc, #224]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018df2:	2201      	movs	r2, #1
 8018df4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8018df8:	e003      	b.n	8018e02 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018dfa:	4b36      	ldr	r3, [pc, #216]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018dfc:	2200      	movs	r2, #0
 8018dfe:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018e02:	4b34      	ldr	r3, [pc, #208]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018e04:	2201      	movs	r2, #1
 8018e06:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018e08:	4b32      	ldr	r3, [pc, #200]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018e0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8018e0e:	2b05      	cmp	r3, #5
 8018e10:	d004      	beq.n	8018e1c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018e12:	4b30      	ldr	r3, [pc, #192]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018e14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018e18:	2b06      	cmp	r3, #6
 8018e1a:	d10a      	bne.n	8018e32 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8018e1c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018e1e:	2b0b      	cmp	r3, #11
 8018e20:	d803      	bhi.n	8018e2a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018e22:	4b2c      	ldr	r3, [pc, #176]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018e24:	220c      	movs	r2, #12
 8018e26:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018e28:	e006      	b.n	8018e38 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018e2c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018e2e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018e30:	e002      	b.n	8018e38 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018e32:	4a28      	ldr	r2, [pc, #160]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018e34:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018e36:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018e38:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8018e3c:	4b25      	ldr	r3, [pc, #148]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018e3e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018e40:	4b29      	ldr	r3, [pc, #164]	@ (8018ee8 <RadioSetTxConfig+0x220>)
 8018e42:	781a      	ldrb	r2, [r3, #0]
 8018e44:	4b23      	ldr	r3, [pc, #140]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018e46:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018e48:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8018e4c:	4b21      	ldr	r3, [pc, #132]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018e4e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018e52:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018e56:	4b1f      	ldr	r3, [pc, #124]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018e58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8018e5c:	f000 fabd 	bl	80193da <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018e60:	2001      	movs	r0, #1
 8018e62:	f7ff fc51 	bl	8018708 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018e66:	481c      	ldr	r0, [pc, #112]	@ (8018ed8 <RadioSetTxConfig+0x210>)
 8018e68:	f002 f8ac 	bl	801afc4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018e6c:	481b      	ldr	r0, [pc, #108]	@ (8018edc <RadioSetTxConfig+0x214>)
 8018e6e:	f002 f97b 	bl	801b168 <SUBGRF_SetPacketParams>
            break;
 8018e72:	e012      	b.n	8018e9a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8018e74:	2004      	movs	r0, #4
 8018e76:	f7ff fc47 	bl	8018708 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018e7a:	4b16      	ldr	r3, [pc, #88]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018e7c:	2202      	movs	r2, #2
 8018e7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8018e82:	4a14      	ldr	r2, [pc, #80]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018e84:	6a3b      	ldr	r3, [r7, #32]
 8018e86:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018e88:	4b12      	ldr	r3, [pc, #72]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018e8a:	2216      	movs	r2, #22
 8018e8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018e90:	4811      	ldr	r0, [pc, #68]	@ (8018ed8 <RadioSetTxConfig+0x210>)
 8018e92:	f002 f897 	bl	801afc4 <SUBGRF_SetModulationParams>
            break;
 8018e96:	e000      	b.n	8018e9a <RadioSetTxConfig+0x1d2>
            break;
 8018e98:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018e9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	f002 fbc6 	bl	801b630 <SUBGRF_SetRfTxPower>
 8018ea4:	4603      	mov	r3, r0
 8018ea6:	461a      	mov	r2, r3
 8018ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018eaa:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018eae:	210e      	movs	r1, #14
 8018eb0:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018eb4:	f002 faa0 	bl	801b3f8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018eb8:	4b06      	ldr	r3, [pc, #24]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018eba:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	f002 fd95 	bl	801b9ee <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018ec4:	4a03      	ldr	r2, [pc, #12]	@ (8018ed4 <RadioSetTxConfig+0x20c>)
 8018ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018ec8:	6053      	str	r3, [r2, #4]
}
 8018eca:	bf00      	nop
 8018ecc:	3718      	adds	r7, #24
 8018ece:	46bd      	mov	sp, r7
 8018ed0:	bd80      	pop	{r7, pc}
 8018ed2:	bf00      	nop
 8018ed4:	20001d44 	.word	0x20001d44
 8018ed8:	20001d7c 	.word	0x20001d7c
 8018edc:	20001d52 	.word	0x20001d52
 8018ee0:	0801d918 	.word	0x0801d918
 8018ee4:	0801e004 	.word	0x0801e004
 8018ee8:	20000130 	.word	0x20000130

08018eec <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018eec:	b480      	push	{r7}
 8018eee:	b083      	sub	sp, #12
 8018ef0:	af00      	add	r7, sp, #0
 8018ef2:	6078      	str	r0, [r7, #4]
    return true;
 8018ef4:	2301      	movs	r3, #1
}
 8018ef6:	4618      	mov	r0, r3
 8018ef8:	370c      	adds	r7, #12
 8018efa:	46bd      	mov	sp, r7
 8018efc:	bc80      	pop	{r7}
 8018efe:	4770      	bx	lr

08018f00 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8018f00:	b480      	push	{r7}
 8018f02:	b085      	sub	sp, #20
 8018f04:	af00      	add	r7, sp, #0
 8018f06:	4603      	mov	r3, r0
 8018f08:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8018f0e:	79fb      	ldrb	r3, [r7, #7]
 8018f10:	2b0a      	cmp	r3, #10
 8018f12:	d83e      	bhi.n	8018f92 <RadioGetLoRaBandwidthInHz+0x92>
 8018f14:	a201      	add	r2, pc, #4	@ (adr r2, 8018f1c <RadioGetLoRaBandwidthInHz+0x1c>)
 8018f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f1a:	bf00      	nop
 8018f1c:	08018f49 	.word	0x08018f49
 8018f20:	08018f59 	.word	0x08018f59
 8018f24:	08018f69 	.word	0x08018f69
 8018f28:	08018f79 	.word	0x08018f79
 8018f2c:	08018f81 	.word	0x08018f81
 8018f30:	08018f87 	.word	0x08018f87
 8018f34:	08018f8d 	.word	0x08018f8d
 8018f38:	08018f93 	.word	0x08018f93
 8018f3c:	08018f51 	.word	0x08018f51
 8018f40:	08018f61 	.word	0x08018f61
 8018f44:	08018f71 	.word	0x08018f71
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8018f48:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8018f4c:	60fb      	str	r3, [r7, #12]
        break;
 8018f4e:	e020      	b.n	8018f92 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8018f50:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8018f54:	60fb      	str	r3, [r7, #12]
        break;
 8018f56:	e01c      	b.n	8018f92 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8018f58:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8018f5c:	60fb      	str	r3, [r7, #12]
        break;
 8018f5e:	e018      	b.n	8018f92 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8018f60:	f245 1361 	movw	r3, #20833	@ 0x5161
 8018f64:	60fb      	str	r3, [r7, #12]
        break;
 8018f66:	e014      	b.n	8018f92 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8018f68:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8018f6c:	60fb      	str	r3, [r7, #12]
        break;
 8018f6e:	e010      	b.n	8018f92 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8018f70:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8018f74:	60fb      	str	r3, [r7, #12]
        break;
 8018f76:	e00c      	b.n	8018f92 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8018f78:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8018f7c:	60fb      	str	r3, [r7, #12]
        break;
 8018f7e:	e008      	b.n	8018f92 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8018f80:	4b07      	ldr	r3, [pc, #28]	@ (8018fa0 <RadioGetLoRaBandwidthInHz+0xa0>)
 8018f82:	60fb      	str	r3, [r7, #12]
        break;
 8018f84:	e005      	b.n	8018f92 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8018f86:	4b07      	ldr	r3, [pc, #28]	@ (8018fa4 <RadioGetLoRaBandwidthInHz+0xa4>)
 8018f88:	60fb      	str	r3, [r7, #12]
        break;
 8018f8a:	e002      	b.n	8018f92 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8018f8c:	4b06      	ldr	r3, [pc, #24]	@ (8018fa8 <RadioGetLoRaBandwidthInHz+0xa8>)
 8018f8e:	60fb      	str	r3, [r7, #12]
        break;
 8018f90:	bf00      	nop
    }

    return bandwidthInHz;
 8018f92:	68fb      	ldr	r3, [r7, #12]
}
 8018f94:	4618      	mov	r0, r3
 8018f96:	3714      	adds	r7, #20
 8018f98:	46bd      	mov	sp, r7
 8018f9a:	bc80      	pop	{r7}
 8018f9c:	4770      	bx	lr
 8018f9e:	bf00      	nop
 8018fa0:	0001e848 	.word	0x0001e848
 8018fa4:	0003d090 	.word	0x0003d090
 8018fa8:	0007a120 	.word	0x0007a120

08018fac <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018fac:	b480      	push	{r7}
 8018fae:	b083      	sub	sp, #12
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	6078      	str	r0, [r7, #4]
 8018fb4:	4608      	mov	r0, r1
 8018fb6:	4611      	mov	r1, r2
 8018fb8:	461a      	mov	r2, r3
 8018fba:	4603      	mov	r3, r0
 8018fbc:	70fb      	strb	r3, [r7, #3]
 8018fbe:	460b      	mov	r3, r1
 8018fc0:	803b      	strh	r3, [r7, #0]
 8018fc2:	4613      	mov	r3, r2
 8018fc4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8018fc6:	883b      	ldrh	r3, [r7, #0]
 8018fc8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018fca:	78ba      	ldrb	r2, [r7, #2]
 8018fcc:	f082 0201 	eor.w	r2, r2, #1
 8018fd0:	b2d2      	uxtb	r2, r2
 8018fd2:	2a00      	cmp	r2, #0
 8018fd4:	d001      	beq.n	8018fda <RadioGetGfskTimeOnAirNumerator+0x2e>
 8018fd6:	2208      	movs	r2, #8
 8018fd8:	e000      	b.n	8018fdc <RadioGetGfskTimeOnAirNumerator+0x30>
 8018fda:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8018fdc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018fde:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8018fe2:	7c3b      	ldrb	r3, [r7, #16]
 8018fe4:	7d39      	ldrb	r1, [r7, #20]
 8018fe6:	2900      	cmp	r1, #0
 8018fe8:	d001      	beq.n	8018fee <RadioGetGfskTimeOnAirNumerator+0x42>
 8018fea:	2102      	movs	r1, #2
 8018fec:	e000      	b.n	8018ff0 <RadioGetGfskTimeOnAirNumerator+0x44>
 8018fee:	2100      	movs	r1, #0
 8018ff0:	440b      	add	r3, r1
 8018ff2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018ff4:	4413      	add	r3, r2
}
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	370c      	adds	r7, #12
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	bc80      	pop	{r7}
 8018ffe:	4770      	bx	lr

08019000 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019000:	b480      	push	{r7}
 8019002:	b08b      	sub	sp, #44	@ 0x2c
 8019004:	af00      	add	r7, sp, #0
 8019006:	60f8      	str	r0, [r7, #12]
 8019008:	60b9      	str	r1, [r7, #8]
 801900a:	4611      	mov	r1, r2
 801900c:	461a      	mov	r2, r3
 801900e:	460b      	mov	r3, r1
 8019010:	71fb      	strb	r3, [r7, #7]
 8019012:	4613      	mov	r3, r2
 8019014:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8019016:	79fb      	ldrb	r3, [r7, #7]
 8019018:	3304      	adds	r3, #4
 801901a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801901c:	2300      	movs	r3, #0
 801901e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8019022:	68bb      	ldr	r3, [r7, #8]
 8019024:	2b05      	cmp	r3, #5
 8019026:	d002      	beq.n	801902e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8019028:	68bb      	ldr	r3, [r7, #8]
 801902a:	2b06      	cmp	r3, #6
 801902c:	d104      	bne.n	8019038 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801902e:	88bb      	ldrh	r3, [r7, #4]
 8019030:	2b0b      	cmp	r3, #11
 8019032:	d801      	bhi.n	8019038 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8019034:	230c      	movs	r3, #12
 8019036:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	2b00      	cmp	r3, #0
 801903c:	d105      	bne.n	801904a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801903e:	68bb      	ldr	r3, [r7, #8]
 8019040:	2b0b      	cmp	r3, #11
 8019042:	d008      	beq.n	8019056 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019044:	68bb      	ldr	r3, [r7, #8]
 8019046:	2b0c      	cmp	r3, #12
 8019048:	d005      	beq.n	8019056 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801904a:	68fb      	ldr	r3, [r7, #12]
 801904c:	2b01      	cmp	r3, #1
 801904e:	d105      	bne.n	801905c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019050:	68bb      	ldr	r3, [r7, #8]
 8019052:	2b0c      	cmp	r3, #12
 8019054:	d102      	bne.n	801905c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8019056:	2301      	movs	r3, #1
 8019058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801905c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8019060:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8019062:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8019066:	2a00      	cmp	r2, #0
 8019068:	d001      	beq.n	801906e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801906a:	2210      	movs	r2, #16
 801906c:	e000      	b.n	8019070 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801906e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019070:	4413      	add	r3, r2
 8019072:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8019074:	68bb      	ldr	r3, [r7, #8]
 8019076:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8019078:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801907a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801907e:	2a00      	cmp	r2, #0
 8019080:	d001      	beq.n	8019086 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8019082:	2200      	movs	r2, #0
 8019084:	e000      	b.n	8019088 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8019086:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8019088:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801908a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801908c:	68bb      	ldr	r3, [r7, #8]
 801908e:	2b06      	cmp	r3, #6
 8019090:	d803      	bhi.n	801909a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8019092:	68bb      	ldr	r3, [r7, #8]
 8019094:	009b      	lsls	r3, r3, #2
 8019096:	623b      	str	r3, [r7, #32]
 8019098:	e00e      	b.n	80190b8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801909a:	69fb      	ldr	r3, [r7, #28]
 801909c:	3308      	adds	r3, #8
 801909e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80190a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d004      	beq.n	80190b2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80190a8:	68bb      	ldr	r3, [r7, #8]
 80190aa:	3b02      	subs	r3, #2
 80190ac:	009b      	lsls	r3, r3, #2
 80190ae:	623b      	str	r3, [r7, #32]
 80190b0:	e002      	b.n	80190b8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80190b2:	68bb      	ldr	r3, [r7, #8]
 80190b4:	009b      	lsls	r3, r3, #2
 80190b6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80190b8:	69fb      	ldr	r3, [r7, #28]
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	da01      	bge.n	80190c2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80190be:	2300      	movs	r3, #0
 80190c0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80190c2:	69fa      	ldr	r2, [r7, #28]
 80190c4:	6a3b      	ldr	r3, [r7, #32]
 80190c6:	4413      	add	r3, r2
 80190c8:	1e5a      	subs	r2, r3, #1
 80190ca:	6a3b      	ldr	r3, [r7, #32]
 80190cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80190d0:	697a      	ldr	r2, [r7, #20]
 80190d2:	fb03 f202 	mul.w	r2, r3, r2
 80190d6:	88bb      	ldrh	r3, [r7, #4]
 80190d8:	4413      	add	r3, r2
    int32_t intermediate =
 80190da:	330c      	adds	r3, #12
 80190dc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80190de:	68bb      	ldr	r3, [r7, #8]
 80190e0:	2b06      	cmp	r3, #6
 80190e2:	d802      	bhi.n	80190ea <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80190e4:	69bb      	ldr	r3, [r7, #24]
 80190e6:	3302      	adds	r3, #2
 80190e8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80190ea:	69bb      	ldr	r3, [r7, #24]
 80190ec:	009b      	lsls	r3, r3, #2
 80190ee:	1c5a      	adds	r2, r3, #1
 80190f0:	68bb      	ldr	r3, [r7, #8]
 80190f2:	3b02      	subs	r3, #2
 80190f4:	fa02 f303 	lsl.w	r3, r2, r3
}
 80190f8:	4618      	mov	r0, r3
 80190fa:	372c      	adds	r7, #44	@ 0x2c
 80190fc:	46bd      	mov	sp, r7
 80190fe:	bc80      	pop	{r7}
 8019100:	4770      	bx	lr
	...

08019104 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8019104:	b580      	push	{r7, lr}
 8019106:	b08a      	sub	sp, #40	@ 0x28
 8019108:	af04      	add	r7, sp, #16
 801910a:	60b9      	str	r1, [r7, #8]
 801910c:	607a      	str	r2, [r7, #4]
 801910e:	461a      	mov	r2, r3
 8019110:	4603      	mov	r3, r0
 8019112:	73fb      	strb	r3, [r7, #15]
 8019114:	4613      	mov	r3, r2
 8019116:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019118:	2300      	movs	r3, #0
 801911a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801911c:	2301      	movs	r3, #1
 801911e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019120:	7bfb      	ldrb	r3, [r7, #15]
 8019122:	2b00      	cmp	r3, #0
 8019124:	d002      	beq.n	801912c <RadioTimeOnAir+0x28>
 8019126:	2b01      	cmp	r3, #1
 8019128:	d017      	beq.n	801915a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801912a:	e035      	b.n	8019198 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801912c:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8019130:	8c3a      	ldrh	r2, [r7, #32]
 8019132:	7bb9      	ldrb	r1, [r7, #14]
 8019134:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019138:	9301      	str	r3, [sp, #4]
 801913a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801913e:	9300      	str	r3, [sp, #0]
 8019140:	4603      	mov	r3, r0
 8019142:	6878      	ldr	r0, [r7, #4]
 8019144:	f7ff ff32 	bl	8018fac <RadioGetGfskTimeOnAirNumerator>
 8019148:	4603      	mov	r3, r0
 801914a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801914e:	fb02 f303 	mul.w	r3, r2, r3
 8019152:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	613b      	str	r3, [r7, #16]
        break;
 8019158:	e01e      	b.n	8019198 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801915a:	8c39      	ldrh	r1, [r7, #32]
 801915c:	7bba      	ldrb	r2, [r7, #14]
 801915e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019162:	9302      	str	r3, [sp, #8]
 8019164:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019168:	9301      	str	r3, [sp, #4]
 801916a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801916e:	9300      	str	r3, [sp, #0]
 8019170:	460b      	mov	r3, r1
 8019172:	6879      	ldr	r1, [r7, #4]
 8019174:	68b8      	ldr	r0, [r7, #8]
 8019176:	f7ff ff43 	bl	8019000 <RadioGetLoRaTimeOnAirNumerator>
 801917a:	4603      	mov	r3, r0
 801917c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019180:	fb02 f303 	mul.w	r3, r2, r3
 8019184:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8019186:	4a0a      	ldr	r2, [pc, #40]	@ (80191b0 <RadioTimeOnAir+0xac>)
 8019188:	68bb      	ldr	r3, [r7, #8]
 801918a:	4413      	add	r3, r2
 801918c:	781b      	ldrb	r3, [r3, #0]
 801918e:	4618      	mov	r0, r3
 8019190:	f7ff feb6 	bl	8018f00 <RadioGetLoRaBandwidthInHz>
 8019194:	6138      	str	r0, [r7, #16]
        break;
 8019196:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8019198:	697a      	ldr	r2, [r7, #20]
 801919a:	693b      	ldr	r3, [r7, #16]
 801919c:	4413      	add	r3, r2
 801919e:	1e5a      	subs	r2, r3, #1
 80191a0:	693b      	ldr	r3, [r7, #16]
 80191a2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80191a6:	4618      	mov	r0, r3
 80191a8:	3718      	adds	r7, #24
 80191aa:	46bd      	mov	sp, r7
 80191ac:	bd80      	pop	{r7, pc}
 80191ae:	bf00      	nop
 80191b0:	0801e004 	.word	0x0801e004

080191b4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b084      	sub	sp, #16
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	6078      	str	r0, [r7, #4]
 80191bc:	460b      	mov	r3, r1
 80191be:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80191c0:	2300      	movs	r3, #0
 80191c2:	2200      	movs	r2, #0
 80191c4:	f240 2101 	movw	r1, #513	@ 0x201
 80191c8:	f240 2001 	movw	r0, #513	@ 0x201
 80191cc:	f001 fd64 	bl	801ac98 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80191d0:	4b73      	ldr	r3, [pc, #460]	@ (80193a0 <RadioSend+0x1ec>)
 80191d2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80191d6:	2101      	movs	r1, #1
 80191d8:	4618      	mov	r0, r3
 80191da:	f002 fa01 	bl	801b5e0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80191de:	4b70      	ldr	r3, [pc, #448]	@ (80193a0 <RadioSend+0x1ec>)
 80191e0:	781b      	ldrb	r3, [r3, #0]
 80191e2:	2b01      	cmp	r3, #1
 80191e4:	d112      	bne.n	801920c <RadioSend+0x58>
 80191e6:	4b6e      	ldr	r3, [pc, #440]	@ (80193a0 <RadioSend+0x1ec>)
 80191e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80191ec:	2b06      	cmp	r3, #6
 80191ee:	d10d      	bne.n	801920c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80191f0:	f640 0089 	movw	r0, #2185	@ 0x889
 80191f4:	f002 f914 	bl	801b420 <SUBGRF_ReadRegister>
 80191f8:	4603      	mov	r3, r0
 80191fa:	f023 0304 	bic.w	r3, r3, #4
 80191fe:	b2db      	uxtb	r3, r3
 8019200:	4619      	mov	r1, r3
 8019202:	f640 0089 	movw	r0, #2185	@ 0x889
 8019206:	f002 f8f7 	bl	801b3f8 <SUBGRF_WriteRegister>
 801920a:	e00c      	b.n	8019226 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801920c:	f640 0089 	movw	r0, #2185	@ 0x889
 8019210:	f002 f906 	bl	801b420 <SUBGRF_ReadRegister>
 8019214:	4603      	mov	r3, r0
 8019216:	f043 0304 	orr.w	r3, r3, #4
 801921a:	b2db      	uxtb	r3, r3
 801921c:	4619      	mov	r1, r3
 801921e:	f640 0089 	movw	r0, #2185	@ 0x889
 8019222:	f002 f8e9 	bl	801b3f8 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8019226:	4b5e      	ldr	r3, [pc, #376]	@ (80193a0 <RadioSend+0x1ec>)
 8019228:	781b      	ldrb	r3, [r3, #0]
 801922a:	2b04      	cmp	r3, #4
 801922c:	f200 80a8 	bhi.w	8019380 <RadioSend+0x1cc>
 8019230:	a201      	add	r2, pc, #4	@ (adr r2, 8019238 <RadioSend+0x84>)
 8019232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019236:	bf00      	nop
 8019238:	08019267 	.word	0x08019267
 801923c:	0801924d 	.word	0x0801924d
 8019240:	08019267 	.word	0x08019267
 8019244:	080192c9 	.word	0x080192c9
 8019248:	080192e9 	.word	0x080192e9
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801924c:	4a54      	ldr	r2, [pc, #336]	@ (80193a0 <RadioSend+0x1ec>)
 801924e:	78fb      	ldrb	r3, [r7, #3]
 8019250:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019252:	4854      	ldr	r0, [pc, #336]	@ (80193a4 <RadioSend+0x1f0>)
 8019254:	f001 ff88 	bl	801b168 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019258:	78fb      	ldrb	r3, [r7, #3]
 801925a:	2200      	movs	r2, #0
 801925c:	4619      	mov	r1, r3
 801925e:	6878      	ldr	r0, [r7, #4]
 8019260:	f001 fa38 	bl	801a6d4 <SUBGRF_SendPayload>
            break;
 8019264:	e08d      	b.n	8019382 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019266:	f002 fbb4 	bl	801b9d2 <RFW_Is_Init>
 801926a:	4603      	mov	r3, r0
 801926c:	2b01      	cmp	r3, #1
 801926e:	d11e      	bne.n	80192ae <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019270:	f107 020d 	add.w	r2, r7, #13
 8019274:	78fb      	ldrb	r3, [r7, #3]
 8019276:	4619      	mov	r1, r3
 8019278:	6878      	ldr	r0, [r7, #4]
 801927a:	f002 fbc2 	bl	801ba02 <RFW_TransmitInit>
 801927e:	4603      	mov	r3, r0
 8019280:	2b00      	cmp	r3, #0
 8019282:	d10c      	bne.n	801929e <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019284:	7b7a      	ldrb	r2, [r7, #13]
 8019286:	4b46      	ldr	r3, [pc, #280]	@ (80193a0 <RadioSend+0x1ec>)
 8019288:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801928a:	4846      	ldr	r0, [pc, #280]	@ (80193a4 <RadioSend+0x1f0>)
 801928c:	f001 ff6c 	bl	801b168 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8019290:	7b7b      	ldrb	r3, [r7, #13]
 8019292:	2200      	movs	r2, #0
 8019294:	4619      	mov	r1, r3
 8019296:	6878      	ldr	r0, [r7, #4]
 8019298:	f001 fa1c 	bl	801a6d4 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801929c:	e071      	b.n	8019382 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801929e:	4b42      	ldr	r3, [pc, #264]	@ (80193a8 <RadioSend+0x1f4>)
 80192a0:	2201      	movs	r2, #1
 80192a2:	2100      	movs	r1, #0
 80192a4:	2002      	movs	r0, #2
 80192a6:	f003 fccb 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80192aa:	2303      	movs	r3, #3
 80192ac:	e073      	b.n	8019396 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80192ae:	4a3c      	ldr	r2, [pc, #240]	@ (80193a0 <RadioSend+0x1ec>)
 80192b0:	78fb      	ldrb	r3, [r7, #3]
 80192b2:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80192b4:	483b      	ldr	r0, [pc, #236]	@ (80193a4 <RadioSend+0x1f0>)
 80192b6:	f001 ff57 	bl	801b168 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80192ba:	78fb      	ldrb	r3, [r7, #3]
 80192bc:	2200      	movs	r2, #0
 80192be:	4619      	mov	r1, r3
 80192c0:	6878      	ldr	r0, [r7, #4]
 80192c2:	f001 fa07 	bl	801a6d4 <SUBGRF_SendPayload>
            break;
 80192c6:	e05c      	b.n	8019382 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80192c8:	4b35      	ldr	r3, [pc, #212]	@ (80193a0 <RadioSend+0x1ec>)
 80192ca:	2202      	movs	r2, #2
 80192cc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80192ce:	4a34      	ldr	r2, [pc, #208]	@ (80193a0 <RadioSend+0x1ec>)
 80192d0:	78fb      	ldrb	r3, [r7, #3]
 80192d2:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80192d4:	4833      	ldr	r0, [pc, #204]	@ (80193a4 <RadioSend+0x1f0>)
 80192d6:	f001 ff47 	bl	801b168 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80192da:	78fb      	ldrb	r3, [r7, #3]
 80192dc:	2200      	movs	r2, #0
 80192de:	4619      	mov	r1, r3
 80192e0:	6878      	ldr	r0, [r7, #4]
 80192e2:	f001 f9f7 	bl	801a6d4 <SUBGRF_SendPayload>
            break;
 80192e6:	e04c      	b.n	8019382 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80192e8:	78fb      	ldrb	r3, [r7, #3]
 80192ea:	461a      	mov	r2, r3
 80192ec:	6879      	ldr	r1, [r7, #4]
 80192ee:	482f      	ldr	r0, [pc, #188]	@ (80193ac <RadioSend+0x1f8>)
 80192f0:	f000 fcca 	bl	8019c88 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80192f4:	4b2a      	ldr	r3, [pc, #168]	@ (80193a0 <RadioSend+0x1ec>)
 80192f6:	2202      	movs	r2, #2
 80192f8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80192fa:	78fb      	ldrb	r3, [r7, #3]
 80192fc:	3301      	adds	r3, #1
 80192fe:	b2da      	uxtb	r2, r3
 8019300:	4b27      	ldr	r3, [pc, #156]	@ (80193a0 <RadioSend+0x1ec>)
 8019302:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019304:	4827      	ldr	r0, [pc, #156]	@ (80193a4 <RadioSend+0x1f0>)
 8019306:	f001 ff2f 	bl	801b168 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801930a:	2100      	movs	r1, #0
 801930c:	20f1      	movs	r0, #241	@ 0xf1
 801930e:	f000 f965 	bl	80195dc <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8019312:	2100      	movs	r1, #0
 8019314:	20f0      	movs	r0, #240	@ 0xf0
 8019316:	f000 f961 	bl	80195dc <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801931a:	4b21      	ldr	r3, [pc, #132]	@ (80193a0 <RadioSend+0x1ec>)
 801931c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801931e:	2b64      	cmp	r3, #100	@ 0x64
 8019320:	d108      	bne.n	8019334 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8019322:	2170      	movs	r1, #112	@ 0x70
 8019324:	20f3      	movs	r0, #243	@ 0xf3
 8019326:	f000 f959 	bl	80195dc <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801932a:	211d      	movs	r1, #29
 801932c:	20f2      	movs	r0, #242	@ 0xf2
 801932e:	f000 f955 	bl	80195dc <RadioWrite>
 8019332:	e007      	b.n	8019344 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8019334:	21e1      	movs	r1, #225	@ 0xe1
 8019336:	20f3      	movs	r0, #243	@ 0xf3
 8019338:	f000 f950 	bl	80195dc <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801933c:	2104      	movs	r1, #4
 801933e:	20f2      	movs	r0, #242	@ 0xf2
 8019340:	f000 f94c 	bl	80195dc <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019344:	78fb      	ldrb	r3, [r7, #3]
 8019346:	b29b      	uxth	r3, r3
 8019348:	00db      	lsls	r3, r3, #3
 801934a:	b29b      	uxth	r3, r3
 801934c:	3302      	adds	r3, #2
 801934e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019350:	89fb      	ldrh	r3, [r7, #14]
 8019352:	0a1b      	lsrs	r3, r3, #8
 8019354:	b29b      	uxth	r3, r3
 8019356:	b2db      	uxtb	r3, r3
 8019358:	4619      	mov	r1, r3
 801935a:	20f4      	movs	r0, #244	@ 0xf4
 801935c:	f000 f93e 	bl	80195dc <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8019360:	89fb      	ldrh	r3, [r7, #14]
 8019362:	b2db      	uxtb	r3, r3
 8019364:	4619      	mov	r1, r3
 8019366:	20f5      	movs	r0, #245	@ 0xf5
 8019368:	f000 f938 	bl	80195dc <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801936c:	78fb      	ldrb	r3, [r7, #3]
 801936e:	3301      	adds	r3, #1
 8019370:	b2db      	uxtb	r3, r3
 8019372:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8019376:	4619      	mov	r1, r3
 8019378:	480c      	ldr	r0, [pc, #48]	@ (80193ac <RadioSend+0x1f8>)
 801937a:	f001 f9ab 	bl	801a6d4 <SUBGRF_SendPayload>
            break;
 801937e:	e000      	b.n	8019382 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019380:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019382:	4b07      	ldr	r3, [pc, #28]	@ (80193a0 <RadioSend+0x1ec>)
 8019384:	685b      	ldr	r3, [r3, #4]
 8019386:	4619      	mov	r1, r3
 8019388:	4809      	ldr	r0, [pc, #36]	@ (80193b0 <RadioSend+0x1fc>)
 801938a:	f003 fabf 	bl	801c90c <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801938e:	4808      	ldr	r0, [pc, #32]	@ (80193b0 <RadioSend+0x1fc>)
 8019390:	f003 f9de 	bl	801c750 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8019394:	2300      	movs	r3, #0
}
 8019396:	4618      	mov	r0, r3
 8019398:	3710      	adds	r7, #16
 801939a:	46bd      	mov	sp, r7
 801939c:	bd80      	pop	{r7, pc}
 801939e:	bf00      	nop
 80193a0:	20001d44 	.word	0x20001d44
 80193a4:	20001d52 	.word	0x20001d52
 80193a8:	0801d920 	.word	0x0801d920
 80193ac:	20001c40 	.word	0x20001c40
 80193b0:	20001da0 	.word	0x20001da0

080193b4 <RadioSleep>:

static void RadioSleep( void )
{
 80193b4:	b580      	push	{r7, lr}
 80193b6:	b082      	sub	sp, #8
 80193b8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80193ba:	2300      	movs	r3, #0
 80193bc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80193be:	793b      	ldrb	r3, [r7, #4]
 80193c0:	f043 0304 	orr.w	r3, r3, #4
 80193c4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80193c6:	7938      	ldrb	r0, [r7, #4]
 80193c8:	f001 fa60 	bl	801a88c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80193cc:	2002      	movs	r0, #2
 80193ce:	f7e9 f831 	bl	8002434 <HAL_Delay>
}
 80193d2:	bf00      	nop
 80193d4:	3708      	adds	r7, #8
 80193d6:	46bd      	mov	sp, r7
 80193d8:	bd80      	pop	{r7, pc}

080193da <RadioStandby>:

static void RadioStandby( void )
{
 80193da:	b580      	push	{r7, lr}
 80193dc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80193de:	2000      	movs	r0, #0
 80193e0:	f001 fa86 	bl	801a8f0 <SUBGRF_SetStandby>
}
 80193e4:	bf00      	nop
 80193e6:	bd80      	pop	{r7, pc}

080193e8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80193e8:	b580      	push	{r7, lr}
 80193ea:	b082      	sub	sp, #8
 80193ec:	af00      	add	r7, sp, #0
 80193ee:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80193f0:	f002 faef 	bl	801b9d2 <RFW_Is_Init>
 80193f4:	4603      	mov	r3, r0
 80193f6:	2b01      	cmp	r3, #1
 80193f8:	d102      	bne.n	8019400 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80193fa:	f002 fb12 	bl	801ba22 <RFW_ReceiveInit>
 80193fe:	e007      	b.n	8019410 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019400:	2300      	movs	r3, #0
 8019402:	2200      	movs	r2, #0
 8019404:	f240 2162 	movw	r1, #610	@ 0x262
 8019408:	f240 2062 	movw	r0, #610	@ 0x262
 801940c:	f001 fc44 	bl	801ac98 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	2b00      	cmp	r3, #0
 8019414:	d006      	beq.n	8019424 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019416:	6879      	ldr	r1, [r7, #4]
 8019418:	4811      	ldr	r0, [pc, #68]	@ (8019460 <RadioRx+0x78>)
 801941a:	f003 fa77 	bl	801c90c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801941e:	4810      	ldr	r0, [pc, #64]	@ (8019460 <RadioRx+0x78>)
 8019420:	f003 f996 	bl	801c750 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019424:	4b0f      	ldr	r3, [pc, #60]	@ (8019464 <RadioRx+0x7c>)
 8019426:	2200      	movs	r2, #0
 8019428:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801942a:	4b0e      	ldr	r3, [pc, #56]	@ (8019464 <RadioRx+0x7c>)
 801942c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019430:	2100      	movs	r1, #0
 8019432:	4618      	mov	r0, r3
 8019434:	f002 f8d4 	bl	801b5e0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8019438:	4b0a      	ldr	r3, [pc, #40]	@ (8019464 <RadioRx+0x7c>)
 801943a:	785b      	ldrb	r3, [r3, #1]
 801943c:	2b00      	cmp	r3, #0
 801943e:	d004      	beq.n	801944a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019440:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019444:	f001 fa90 	bl	801a968 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019448:	e005      	b.n	8019456 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801944a:	4b06      	ldr	r3, [pc, #24]	@ (8019464 <RadioRx+0x7c>)
 801944c:	689b      	ldr	r3, [r3, #8]
 801944e:	019b      	lsls	r3, r3, #6
 8019450:	4618      	mov	r0, r3
 8019452:	f001 fa89 	bl	801a968 <SUBGRF_SetRx>
}
 8019456:	bf00      	nop
 8019458:	3708      	adds	r7, #8
 801945a:	46bd      	mov	sp, r7
 801945c:	bd80      	pop	{r7, pc}
 801945e:	bf00      	nop
 8019460:	20001db8 	.word	0x20001db8
 8019464:	20001d44 	.word	0x20001d44

08019468 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019468:	b580      	push	{r7, lr}
 801946a:	b082      	sub	sp, #8
 801946c:	af00      	add	r7, sp, #0
 801946e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8019470:	f002 faaf 	bl	801b9d2 <RFW_Is_Init>
 8019474:	4603      	mov	r3, r0
 8019476:	2b01      	cmp	r3, #1
 8019478:	d102      	bne.n	8019480 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801947a:	f002 fad2 	bl	801ba22 <RFW_ReceiveInit>
 801947e:	e007      	b.n	8019490 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019480:	2300      	movs	r3, #0
 8019482:	2200      	movs	r2, #0
 8019484:	f240 2162 	movw	r1, #610	@ 0x262
 8019488:	f240 2062 	movw	r0, #610	@ 0x262
 801948c:	f001 fc04 	bl	801ac98 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	2b00      	cmp	r3, #0
 8019494:	d006      	beq.n	80194a4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019496:	6879      	ldr	r1, [r7, #4]
 8019498:	4811      	ldr	r0, [pc, #68]	@ (80194e0 <RadioRxBoosted+0x78>)
 801949a:	f003 fa37 	bl	801c90c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801949e:	4810      	ldr	r0, [pc, #64]	@ (80194e0 <RadioRxBoosted+0x78>)
 80194a0:	f003 f956 	bl	801c750 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80194a4:	4b0f      	ldr	r3, [pc, #60]	@ (80194e4 <RadioRxBoosted+0x7c>)
 80194a6:	2200      	movs	r2, #0
 80194a8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80194aa:	4b0e      	ldr	r3, [pc, #56]	@ (80194e4 <RadioRxBoosted+0x7c>)
 80194ac:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80194b0:	2100      	movs	r1, #0
 80194b2:	4618      	mov	r0, r3
 80194b4:	f002 f894 	bl	801b5e0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80194b8:	4b0a      	ldr	r3, [pc, #40]	@ (80194e4 <RadioRxBoosted+0x7c>)
 80194ba:	785b      	ldrb	r3, [r3, #1]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d004      	beq.n	80194ca <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80194c0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80194c4:	f001 fa70 	bl	801a9a8 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80194c8:	e005      	b.n	80194d6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80194ca:	4b06      	ldr	r3, [pc, #24]	@ (80194e4 <RadioRxBoosted+0x7c>)
 80194cc:	689b      	ldr	r3, [r3, #8]
 80194ce:	019b      	lsls	r3, r3, #6
 80194d0:	4618      	mov	r0, r3
 80194d2:	f001 fa69 	bl	801a9a8 <SUBGRF_SetRxBoosted>
}
 80194d6:	bf00      	nop
 80194d8:	3708      	adds	r7, #8
 80194da:	46bd      	mov	sp, r7
 80194dc:	bd80      	pop	{r7, pc}
 80194de:	bf00      	nop
 80194e0:	20001db8 	.word	0x20001db8
 80194e4:	20001d44 	.word	0x20001d44

080194e8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b082      	sub	sp, #8
 80194ec:	af00      	add	r7, sp, #0
 80194ee:	6078      	str	r0, [r7, #4]
 80194f0:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	005a      	lsls	r2, r3, #1
 80194f6:	683b      	ldr	r3, [r7, #0]
 80194f8:	4413      	add	r3, r2
 80194fa:	4a0c      	ldr	r2, [pc, #48]	@ (801952c <RadioSetRxDutyCycle+0x44>)
 80194fc:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80194fe:	2300      	movs	r3, #0
 8019500:	2200      	movs	r2, #0
 8019502:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8019506:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801950a:	f001 fbc5 	bl	801ac98 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801950e:	4b07      	ldr	r3, [pc, #28]	@ (801952c <RadioSetRxDutyCycle+0x44>)
 8019510:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019514:	2100      	movs	r1, #0
 8019516:	4618      	mov	r0, r3
 8019518:	f002 f862 	bl	801b5e0 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801951c:	6839      	ldr	r1, [r7, #0]
 801951e:	6878      	ldr	r0, [r7, #4]
 8019520:	f001 fa66 	bl	801a9f0 <SUBGRF_SetRxDutyCycle>
}
 8019524:	bf00      	nop
 8019526:	3708      	adds	r7, #8
 8019528:	46bd      	mov	sp, r7
 801952a:	bd80      	pop	{r7, pc}
 801952c:	20001d44 	.word	0x20001d44

08019530 <RadioStartCad>:

static void RadioStartCad( void )
{
 8019530:	b580      	push	{r7, lr}
 8019532:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019534:	4b09      	ldr	r3, [pc, #36]	@ (801955c <RadioStartCad+0x2c>)
 8019536:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801953a:	2100      	movs	r1, #0
 801953c:	4618      	mov	r0, r3
 801953e:	f002 f84f 	bl	801b5e0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019542:	2300      	movs	r3, #0
 8019544:	2200      	movs	r2, #0
 8019546:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 801954a:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801954e:	f001 fba3 	bl	801ac98 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019552:	f001 fa79 	bl	801aa48 <SUBGRF_SetCad>
}
 8019556:	bf00      	nop
 8019558:	bd80      	pop	{r7, pc}
 801955a:	bf00      	nop
 801955c:	20001d44 	.word	0x20001d44

08019560 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019560:	b580      	push	{r7, lr}
 8019562:	b084      	sub	sp, #16
 8019564:	af00      	add	r7, sp, #0
 8019566:	6078      	str	r0, [r7, #4]
 8019568:	460b      	mov	r3, r1
 801956a:	70fb      	strb	r3, [r7, #3]
 801956c:	4613      	mov	r3, r2
 801956e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8019570:	883b      	ldrh	r3, [r7, #0]
 8019572:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019576:	fb02 f303 	mul.w	r3, r2, r3
 801957a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801957c:	6878      	ldr	r0, [r7, #4]
 801957e:	f001 fbe7 	bl	801ad50 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019586:	4618      	mov	r0, r3
 8019588:	f002 f852 	bl	801b630 <SUBGRF_SetRfTxPower>
 801958c:	4603      	mov	r3, r0
 801958e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019590:	210e      	movs	r1, #14
 8019592:	f640 101f 	movw	r0, #2335	@ 0x91f
 8019596:	f001 ff2f 	bl	801b3f8 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801959a:	7afb      	ldrb	r3, [r7, #11]
 801959c:	2101      	movs	r1, #1
 801959e:	4618      	mov	r0, r3
 80195a0:	f002 f81e 	bl	801b5e0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80195a4:	f001 fa5e 	bl	801aa64 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80195a8:	68f9      	ldr	r1, [r7, #12]
 80195aa:	4805      	ldr	r0, [pc, #20]	@ (80195c0 <RadioSetTxContinuousWave+0x60>)
 80195ac:	f003 f9ae 	bl	801c90c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80195b0:	4803      	ldr	r0, [pc, #12]	@ (80195c0 <RadioSetTxContinuousWave+0x60>)
 80195b2:	f003 f8cd 	bl	801c750 <UTIL_TIMER_Start>
}
 80195b6:	bf00      	nop
 80195b8:	3710      	adds	r7, #16
 80195ba:	46bd      	mov	sp, r7
 80195bc:	bd80      	pop	{r7, pc}
 80195be:	bf00      	nop
 80195c0:	20001da0 	.word	0x20001da0

080195c4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80195c4:	b580      	push	{r7, lr}
 80195c6:	b082      	sub	sp, #8
 80195c8:	af00      	add	r7, sp, #0
 80195ca:	4603      	mov	r3, r0
 80195cc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80195ce:	f001 fe80 	bl	801b2d2 <SUBGRF_GetRssiInst>
 80195d2:	4603      	mov	r3, r0
}
 80195d4:	4618      	mov	r0, r3
 80195d6:	3708      	adds	r7, #8
 80195d8:	46bd      	mov	sp, r7
 80195da:	bd80      	pop	{r7, pc}

080195dc <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80195dc:	b580      	push	{r7, lr}
 80195de:	b082      	sub	sp, #8
 80195e0:	af00      	add	r7, sp, #0
 80195e2:	4603      	mov	r3, r0
 80195e4:	460a      	mov	r2, r1
 80195e6:	80fb      	strh	r3, [r7, #6]
 80195e8:	4613      	mov	r3, r2
 80195ea:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80195ec:	797a      	ldrb	r2, [r7, #5]
 80195ee:	88fb      	ldrh	r3, [r7, #6]
 80195f0:	4611      	mov	r1, r2
 80195f2:	4618      	mov	r0, r3
 80195f4:	f001 ff00 	bl	801b3f8 <SUBGRF_WriteRegister>
}
 80195f8:	bf00      	nop
 80195fa:	3708      	adds	r7, #8
 80195fc:	46bd      	mov	sp, r7
 80195fe:	bd80      	pop	{r7, pc}

08019600 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8019600:	b580      	push	{r7, lr}
 8019602:	b082      	sub	sp, #8
 8019604:	af00      	add	r7, sp, #0
 8019606:	4603      	mov	r3, r0
 8019608:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801960a:	88fb      	ldrh	r3, [r7, #6]
 801960c:	4618      	mov	r0, r3
 801960e:	f001 ff07 	bl	801b420 <SUBGRF_ReadRegister>
 8019612:	4603      	mov	r3, r0
}
 8019614:	4618      	mov	r0, r3
 8019616:	3708      	adds	r7, #8
 8019618:	46bd      	mov	sp, r7
 801961a:	bd80      	pop	{r7, pc}

0801961c <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b082      	sub	sp, #8
 8019620:	af00      	add	r7, sp, #0
 8019622:	4603      	mov	r3, r0
 8019624:	6039      	str	r1, [r7, #0]
 8019626:	80fb      	strh	r3, [r7, #6]
 8019628:	4613      	mov	r3, r2
 801962a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801962c:	797b      	ldrb	r3, [r7, #5]
 801962e:	b29a      	uxth	r2, r3
 8019630:	88fb      	ldrh	r3, [r7, #6]
 8019632:	6839      	ldr	r1, [r7, #0]
 8019634:	4618      	mov	r0, r3
 8019636:	f001 ff07 	bl	801b448 <SUBGRF_WriteRegisters>
}
 801963a:	bf00      	nop
 801963c:	3708      	adds	r7, #8
 801963e:	46bd      	mov	sp, r7
 8019640:	bd80      	pop	{r7, pc}

08019642 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019642:	b580      	push	{r7, lr}
 8019644:	b082      	sub	sp, #8
 8019646:	af00      	add	r7, sp, #0
 8019648:	4603      	mov	r3, r0
 801964a:	6039      	str	r1, [r7, #0]
 801964c:	80fb      	strh	r3, [r7, #6]
 801964e:	4613      	mov	r3, r2
 8019650:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8019652:	797b      	ldrb	r3, [r7, #5]
 8019654:	b29a      	uxth	r2, r3
 8019656:	88fb      	ldrh	r3, [r7, #6]
 8019658:	6839      	ldr	r1, [r7, #0]
 801965a:	4618      	mov	r0, r3
 801965c:	f001 ff16 	bl	801b48c <SUBGRF_ReadRegisters>
}
 8019660:	bf00      	nop
 8019662:	3708      	adds	r7, #8
 8019664:	46bd      	mov	sp, r7
 8019666:	bd80      	pop	{r7, pc}

08019668 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019668:	b580      	push	{r7, lr}
 801966a:	b082      	sub	sp, #8
 801966c:	af00      	add	r7, sp, #0
 801966e:	4603      	mov	r3, r0
 8019670:	460a      	mov	r2, r1
 8019672:	71fb      	strb	r3, [r7, #7]
 8019674:	4613      	mov	r3, r2
 8019676:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019678:	79fb      	ldrb	r3, [r7, #7]
 801967a:	2b01      	cmp	r3, #1
 801967c:	d10a      	bne.n	8019694 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801967e:	4a0e      	ldr	r2, [pc, #56]	@ (80196b8 <RadioSetMaxPayloadLength+0x50>)
 8019680:	79bb      	ldrb	r3, [r7, #6]
 8019682:	7013      	strb	r3, [r2, #0]
 8019684:	4b0c      	ldr	r3, [pc, #48]	@ (80196b8 <RadioSetMaxPayloadLength+0x50>)
 8019686:	781a      	ldrb	r2, [r3, #0]
 8019688:	4b0c      	ldr	r3, [pc, #48]	@ (80196bc <RadioSetMaxPayloadLength+0x54>)
 801968a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801968c:	480c      	ldr	r0, [pc, #48]	@ (80196c0 <RadioSetMaxPayloadLength+0x58>)
 801968e:	f001 fd6b 	bl	801b168 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8019692:	e00d      	b.n	80196b0 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8019694:	4b09      	ldr	r3, [pc, #36]	@ (80196bc <RadioSetMaxPayloadLength+0x54>)
 8019696:	7d5b      	ldrb	r3, [r3, #21]
 8019698:	2b01      	cmp	r3, #1
 801969a:	d109      	bne.n	80196b0 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801969c:	4a06      	ldr	r2, [pc, #24]	@ (80196b8 <RadioSetMaxPayloadLength+0x50>)
 801969e:	79bb      	ldrb	r3, [r7, #6]
 80196a0:	7013      	strb	r3, [r2, #0]
 80196a2:	4b05      	ldr	r3, [pc, #20]	@ (80196b8 <RadioSetMaxPayloadLength+0x50>)
 80196a4:	781a      	ldrb	r2, [r3, #0]
 80196a6:	4b05      	ldr	r3, [pc, #20]	@ (80196bc <RadioSetMaxPayloadLength+0x54>)
 80196a8:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80196aa:	4805      	ldr	r0, [pc, #20]	@ (80196c0 <RadioSetMaxPayloadLength+0x58>)
 80196ac:	f001 fd5c 	bl	801b168 <SUBGRF_SetPacketParams>
}
 80196b0:	bf00      	nop
 80196b2:	3708      	adds	r7, #8
 80196b4:	46bd      	mov	sp, r7
 80196b6:	bd80      	pop	{r7, pc}
 80196b8:	20000130 	.word	0x20000130
 80196bc:	20001d44 	.word	0x20001d44
 80196c0:	20001d52 	.word	0x20001d52

080196c4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80196c4:	b580      	push	{r7, lr}
 80196c6:	b082      	sub	sp, #8
 80196c8:	af00      	add	r7, sp, #0
 80196ca:	4603      	mov	r3, r0
 80196cc:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80196ce:	4a13      	ldr	r2, [pc, #76]	@ (801971c <RadioSetPublicNetwork+0x58>)
 80196d0:	79fb      	ldrb	r3, [r7, #7]
 80196d2:	7313      	strb	r3, [r2, #12]
 80196d4:	4b11      	ldr	r3, [pc, #68]	@ (801971c <RadioSetPublicNetwork+0x58>)
 80196d6:	7b1a      	ldrb	r2, [r3, #12]
 80196d8:	4b10      	ldr	r3, [pc, #64]	@ (801971c <RadioSetPublicNetwork+0x58>)
 80196da:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80196dc:	2001      	movs	r0, #1
 80196de:	f7ff f813 	bl	8018708 <RadioSetModem>
    if( enable == true )
 80196e2:	79fb      	ldrb	r3, [r7, #7]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d00a      	beq.n	80196fe <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80196e8:	2134      	movs	r1, #52	@ 0x34
 80196ea:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80196ee:	f001 fe83 	bl	801b3f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80196f2:	2144      	movs	r1, #68	@ 0x44
 80196f4:	f240 7041 	movw	r0, #1857	@ 0x741
 80196f8:	f001 fe7e 	bl	801b3f8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80196fc:	e009      	b.n	8019712 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80196fe:	2114      	movs	r1, #20
 8019700:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8019704:	f001 fe78 	bl	801b3f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8019708:	2124      	movs	r1, #36	@ 0x24
 801970a:	f240 7041 	movw	r0, #1857	@ 0x741
 801970e:	f001 fe73 	bl	801b3f8 <SUBGRF_WriteRegister>
}
 8019712:	bf00      	nop
 8019714:	3708      	adds	r7, #8
 8019716:	46bd      	mov	sp, r7
 8019718:	bd80      	pop	{r7, pc}
 801971a:	bf00      	nop
 801971c:	20001d44 	.word	0x20001d44

08019720 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8019720:	b580      	push	{r7, lr}
 8019722:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8019724:	f001 ffb8 	bl	801b698 <SUBGRF_GetRadioWakeUpTime>
 8019728:	4603      	mov	r3, r0
 801972a:	3303      	adds	r3, #3
}
 801972c:	4618      	mov	r0, r3
 801972e:	bd80      	pop	{r7, pc}

08019730 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8019730:	b580      	push	{r7, lr}
 8019732:	b082      	sub	sp, #8
 8019734:	af00      	add	r7, sp, #0
 8019736:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8019738:	f000 f80e 	bl	8019758 <RadioOnTxTimeoutProcess>
}
 801973c:	bf00      	nop
 801973e:	3708      	adds	r7, #8
 8019740:	46bd      	mov	sp, r7
 8019742:	bd80      	pop	{r7, pc}

08019744 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8019744:	b580      	push	{r7, lr}
 8019746:	b082      	sub	sp, #8
 8019748:	af00      	add	r7, sp, #0
 801974a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801974c:	f000 f818 	bl	8019780 <RadioOnRxTimeoutProcess>
}
 8019750:	bf00      	nop
 8019752:	3708      	adds	r7, #8
 8019754:	46bd      	mov	sp, r7
 8019756:	bd80      	pop	{r7, pc}

08019758 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8019758:	b580      	push	{r7, lr}
 801975a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801975c:	4b07      	ldr	r3, [pc, #28]	@ (801977c <RadioOnTxTimeoutProcess+0x24>)
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	2b00      	cmp	r3, #0
 8019762:	d008      	beq.n	8019776 <RadioOnTxTimeoutProcess+0x1e>
 8019764:	4b05      	ldr	r3, [pc, #20]	@ (801977c <RadioOnTxTimeoutProcess+0x24>)
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	685b      	ldr	r3, [r3, #4]
 801976a:	2b00      	cmp	r3, #0
 801976c:	d003      	beq.n	8019776 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801976e:	4b03      	ldr	r3, [pc, #12]	@ (801977c <RadioOnTxTimeoutProcess+0x24>)
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	685b      	ldr	r3, [r3, #4]
 8019774:	4798      	blx	r3
    }
}
 8019776:	bf00      	nop
 8019778:	bd80      	pop	{r7, pc}
 801977a:	bf00      	nop
 801977c:	20001d40 	.word	0x20001d40

08019780 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8019780:	b580      	push	{r7, lr}
 8019782:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019784:	4b07      	ldr	r3, [pc, #28]	@ (80197a4 <RadioOnRxTimeoutProcess+0x24>)
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	2b00      	cmp	r3, #0
 801978a:	d008      	beq.n	801979e <RadioOnRxTimeoutProcess+0x1e>
 801978c:	4b05      	ldr	r3, [pc, #20]	@ (80197a4 <RadioOnRxTimeoutProcess+0x24>)
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	68db      	ldr	r3, [r3, #12]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d003      	beq.n	801979e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8019796:	4b03      	ldr	r3, [pc, #12]	@ (80197a4 <RadioOnRxTimeoutProcess+0x24>)
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	68db      	ldr	r3, [r3, #12]
 801979c:	4798      	blx	r3
    }
}
 801979e:	bf00      	nop
 80197a0:	bd80      	pop	{r7, pc}
 80197a2:	bf00      	nop
 80197a4:	20001d40 	.word	0x20001d40

080197a8 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b082      	sub	sp, #8
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	4603      	mov	r3, r0
 80197b0:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80197b2:	4a05      	ldr	r2, [pc, #20]	@ (80197c8 <RadioOnDioIrq+0x20>)
 80197b4:	88fb      	ldrh	r3, [r7, #6]
 80197b6:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80197ba:	f000 f807 	bl	80197cc <RadioIrqProcess>
}
 80197be:	bf00      	nop
 80197c0:	3708      	adds	r7, #8
 80197c2:	46bd      	mov	sp, r7
 80197c4:	bd80      	pop	{r7, pc}
 80197c6:	bf00      	nop
 80197c8:	20001d44 	.word	0x20001d44

080197cc <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80197cc:	b5b0      	push	{r4, r5, r7, lr}
 80197ce:	b082      	sub	sp, #8
 80197d0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80197d2:	2300      	movs	r3, #0
 80197d4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80197d6:	2300      	movs	r3, #0
 80197d8:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80197da:	4ba8      	ldr	r3, [pc, #672]	@ (8019a7c <RadioIrqProcess+0x2b0>)
 80197dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80197e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80197e4:	f000 810d 	beq.w	8019a02 <RadioIrqProcess+0x236>
 80197e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80197ec:	f300 81e8 	bgt.w	8019bc0 <RadioIrqProcess+0x3f4>
 80197f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80197f4:	f000 80f1 	beq.w	80199da <RadioIrqProcess+0x20e>
 80197f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80197fc:	f300 81e0 	bgt.w	8019bc0 <RadioIrqProcess+0x3f4>
 8019800:	2b80      	cmp	r3, #128	@ 0x80
 8019802:	f000 80d6 	beq.w	80199b2 <RadioIrqProcess+0x1e6>
 8019806:	2b80      	cmp	r3, #128	@ 0x80
 8019808:	f300 81da 	bgt.w	8019bc0 <RadioIrqProcess+0x3f4>
 801980c:	2b20      	cmp	r3, #32
 801980e:	dc49      	bgt.n	80198a4 <RadioIrqProcess+0xd8>
 8019810:	2b00      	cmp	r3, #0
 8019812:	f340 81d5 	ble.w	8019bc0 <RadioIrqProcess+0x3f4>
 8019816:	3b01      	subs	r3, #1
 8019818:	2b1f      	cmp	r3, #31
 801981a:	f200 81d1 	bhi.w	8019bc0 <RadioIrqProcess+0x3f4>
 801981e:	a201      	add	r2, pc, #4	@ (adr r2, 8019824 <RadioIrqProcess+0x58>)
 8019820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019824:	080198ad 	.word	0x080198ad
 8019828:	080198e7 	.word	0x080198e7
 801982c:	08019bc1 	.word	0x08019bc1
 8019830:	08019a9d 	.word	0x08019a9d
 8019834:	08019bc1 	.word	0x08019bc1
 8019838:	08019bc1 	.word	0x08019bc1
 801983c:	08019bc1 	.word	0x08019bc1
 8019840:	08019b19 	.word	0x08019b19
 8019844:	08019bc1 	.word	0x08019bc1
 8019848:	08019bc1 	.word	0x08019bc1
 801984c:	08019bc1 	.word	0x08019bc1
 8019850:	08019bc1 	.word	0x08019bc1
 8019854:	08019bc1 	.word	0x08019bc1
 8019858:	08019bc1 	.word	0x08019bc1
 801985c:	08019bc1 	.word	0x08019bc1
 8019860:	08019b35 	.word	0x08019b35
 8019864:	08019bc1 	.word	0x08019bc1
 8019868:	08019bc1 	.word	0x08019bc1
 801986c:	08019bc1 	.word	0x08019bc1
 8019870:	08019bc1 	.word	0x08019bc1
 8019874:	08019bc1 	.word	0x08019bc1
 8019878:	08019bc1 	.word	0x08019bc1
 801987c:	08019bc1 	.word	0x08019bc1
 8019880:	08019bc1 	.word	0x08019bc1
 8019884:	08019bc1 	.word	0x08019bc1
 8019888:	08019bc1 	.word	0x08019bc1
 801988c:	08019bc1 	.word	0x08019bc1
 8019890:	08019bc1 	.word	0x08019bc1
 8019894:	08019bc1 	.word	0x08019bc1
 8019898:	08019bc1 	.word	0x08019bc1
 801989c:	08019bc1 	.word	0x08019bc1
 80198a0:	08019b43 	.word	0x08019b43
 80198a4:	2b40      	cmp	r3, #64	@ 0x40
 80198a6:	f000 816d 	beq.w	8019b84 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80198aa:	e189      	b.n	8019bc0 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 80198ac:	4874      	ldr	r0, [pc, #464]	@ (8019a80 <RadioIrqProcess+0x2b4>)
 80198ae:	f002 ffbd 	bl	801c82c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80198b2:	2000      	movs	r0, #0
 80198b4:	f001 f81c 	bl	801a8f0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80198b8:	f002 f892 	bl	801b9e0 <RFW_Is_LongPacketModeEnabled>
 80198bc:	4603      	mov	r3, r0
 80198be:	2b01      	cmp	r3, #1
 80198c0:	d101      	bne.n	80198c6 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80198c2:	f002 f8b6 	bl	801ba32 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80198c6:	4b6f      	ldr	r3, [pc, #444]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	f000 817a 	beq.w	8019bc4 <RadioIrqProcess+0x3f8>
 80198d0:	4b6c      	ldr	r3, [pc, #432]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	f000 8174 	beq.w	8019bc4 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 80198dc:	4b69      	ldr	r3, [pc, #420]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	4798      	blx	r3
        break;
 80198e4:	e16e      	b.n	8019bc4 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 80198e6:	4868      	ldr	r0, [pc, #416]	@ (8019a88 <RadioIrqProcess+0x2bc>)
 80198e8:	f002 ffa0 	bl	801c82c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80198ec:	4b63      	ldr	r3, [pc, #396]	@ (8019a7c <RadioIrqProcess+0x2b0>)
 80198ee:	785b      	ldrb	r3, [r3, #1]
 80198f0:	f083 0301 	eor.w	r3, r3, #1
 80198f4:	b2db      	uxtb	r3, r3
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d014      	beq.n	8019924 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80198fa:	2000      	movs	r0, #0
 80198fc:	f000 fff8 	bl	801a8f0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8019900:	2100      	movs	r1, #0
 8019902:	f640 1002 	movw	r0, #2306	@ 0x902
 8019906:	f001 fd77 	bl	801b3f8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801990a:	f640 1044 	movw	r0, #2372	@ 0x944
 801990e:	f001 fd87 	bl	801b420 <SUBGRF_ReadRegister>
 8019912:	4603      	mov	r3, r0
 8019914:	f043 0302 	orr.w	r3, r3, #2
 8019918:	b2db      	uxtb	r3, r3
 801991a:	4619      	mov	r1, r3
 801991c:	f640 1044 	movw	r0, #2372	@ 0x944
 8019920:	f001 fd6a 	bl	801b3f8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8019924:	1dfb      	adds	r3, r7, #7
 8019926:	22ff      	movs	r2, #255	@ 0xff
 8019928:	4619      	mov	r1, r3
 801992a:	4858      	ldr	r0, [pc, #352]	@ (8019a8c <RadioIrqProcess+0x2c0>)
 801992c:	f000 feb0 	bl	801a690 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8019930:	4857      	ldr	r0, [pc, #348]	@ (8019a90 <RadioIrqProcess+0x2c4>)
 8019932:	f001 fd0f 	bl	801b354 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8019936:	4b53      	ldr	r3, [pc, #332]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 8019938:	681b      	ldr	r3, [r3, #0]
 801993a:	2b00      	cmp	r3, #0
 801993c:	f000 8144 	beq.w	8019bc8 <RadioIrqProcess+0x3fc>
 8019940:	4b50      	ldr	r3, [pc, #320]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 8019942:	681b      	ldr	r3, [r3, #0]
 8019944:	689b      	ldr	r3, [r3, #8]
 8019946:	2b00      	cmp	r3, #0
 8019948:	f000 813e 	beq.w	8019bc8 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801994c:	4b4b      	ldr	r3, [pc, #300]	@ (8019a7c <RadioIrqProcess+0x2b0>)
 801994e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8019952:	2b01      	cmp	r3, #1
 8019954:	d10e      	bne.n	8019974 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8019956:	4b4b      	ldr	r3, [pc, #300]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	689c      	ldr	r4, [r3, #8]
 801995c:	79fb      	ldrb	r3, [r7, #7]
 801995e:	4619      	mov	r1, r3
 8019960:	4b46      	ldr	r3, [pc, #280]	@ (8019a7c <RadioIrqProcess+0x2b0>)
 8019962:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8019966:	461a      	mov	r2, r3
 8019968:	4b44      	ldr	r3, [pc, #272]	@ (8019a7c <RadioIrqProcess+0x2b0>)
 801996a:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 801996e:	4847      	ldr	r0, [pc, #284]	@ (8019a8c <RadioIrqProcess+0x2c0>)
 8019970:	47a0      	blx	r4
                break;
 8019972:	e01d      	b.n	80199b0 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8019974:	4b41      	ldr	r3, [pc, #260]	@ (8019a7c <RadioIrqProcess+0x2b0>)
 8019976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019978:	463a      	mov	r2, r7
 801997a:	4611      	mov	r1, r2
 801997c:	4618      	mov	r0, r3
 801997e:	f001 ff7d 	bl	801b87c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8019982:	4b40      	ldr	r3, [pc, #256]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	689c      	ldr	r4, [r3, #8]
 8019988:	79fb      	ldrb	r3, [r7, #7]
 801998a:	4619      	mov	r1, r3
 801998c:	4b3b      	ldr	r3, [pc, #236]	@ (8019a7c <RadioIrqProcess+0x2b0>)
 801998e:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8019992:	4618      	mov	r0, r3
 8019994:	683b      	ldr	r3, [r7, #0]
 8019996:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 801999a:	4a3e      	ldr	r2, [pc, #248]	@ (8019a94 <RadioIrqProcess+0x2c8>)
 801999c:	fb82 5203 	smull	r5, r2, r2, r3
 80199a0:	1192      	asrs	r2, r2, #6
 80199a2:	17db      	asrs	r3, r3, #31
 80199a4:	1ad3      	subs	r3, r2, r3
 80199a6:	b25b      	sxtb	r3, r3
 80199a8:	4602      	mov	r2, r0
 80199aa:	4838      	ldr	r0, [pc, #224]	@ (8019a8c <RadioIrqProcess+0x2c0>)
 80199ac:	47a0      	blx	r4
                break;
 80199ae:	bf00      	nop
        break;
 80199b0:	e10a      	b.n	8019bc8 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 80199b2:	2000      	movs	r0, #0
 80199b4:	f000 ff9c 	bl	801a8f0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80199b8:	4b32      	ldr	r3, [pc, #200]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 80199ba:	681b      	ldr	r3, [r3, #0]
 80199bc:	2b00      	cmp	r3, #0
 80199be:	f000 8105 	beq.w	8019bcc <RadioIrqProcess+0x400>
 80199c2:	4b30      	ldr	r3, [pc, #192]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 80199c4:	681b      	ldr	r3, [r3, #0]
 80199c6:	699b      	ldr	r3, [r3, #24]
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	f000 80ff 	beq.w	8019bcc <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 80199ce:	4b2d      	ldr	r3, [pc, #180]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	699b      	ldr	r3, [r3, #24]
 80199d4:	2000      	movs	r0, #0
 80199d6:	4798      	blx	r3
        break;
 80199d8:	e0f8      	b.n	8019bcc <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 80199da:	2000      	movs	r0, #0
 80199dc:	f000 ff88 	bl	801a8f0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80199e0:	4b28      	ldr	r3, [pc, #160]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	f000 80f3 	beq.w	8019bd0 <RadioIrqProcess+0x404>
 80199ea:	4b26      	ldr	r3, [pc, #152]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	699b      	ldr	r3, [r3, #24]
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	f000 80ed 	beq.w	8019bd0 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 80199f6:	4b23      	ldr	r3, [pc, #140]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	699b      	ldr	r3, [r3, #24]
 80199fc:	2001      	movs	r0, #1
 80199fe:	4798      	blx	r3
        break;
 8019a00:	e0e6      	b.n	8019bd0 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8019a02:	4b25      	ldr	r3, [pc, #148]	@ (8019a98 <RadioIrqProcess+0x2cc>)
 8019a04:	2201      	movs	r2, #1
 8019a06:	2100      	movs	r1, #0
 8019a08:	2002      	movs	r0, #2
 8019a0a:	f003 f919 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8019a0e:	f000 fe25 	bl	801a65c <SUBGRF_GetOperatingMode>
 8019a12:	4603      	mov	r3, r0
 8019a14:	2b04      	cmp	r3, #4
 8019a16:	d115      	bne.n	8019a44 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8019a18:	4819      	ldr	r0, [pc, #100]	@ (8019a80 <RadioIrqProcess+0x2b4>)
 8019a1a:	f002 ff07 	bl	801c82c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019a1e:	2000      	movs	r0, #0
 8019a20:	f000 ff66 	bl	801a8f0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019a24:	4b17      	ldr	r3, [pc, #92]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	f000 80d3 	beq.w	8019bd4 <RadioIrqProcess+0x408>
 8019a2e:	4b15      	ldr	r3, [pc, #84]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	685b      	ldr	r3, [r3, #4]
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	f000 80cd 	beq.w	8019bd4 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8019a3a:	4b12      	ldr	r3, [pc, #72]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	685b      	ldr	r3, [r3, #4]
 8019a40:	4798      	blx	r3
        break;
 8019a42:	e0c7      	b.n	8019bd4 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8019a44:	f000 fe0a 	bl	801a65c <SUBGRF_GetOperatingMode>
 8019a48:	4603      	mov	r3, r0
 8019a4a:	2b05      	cmp	r3, #5
 8019a4c:	f040 80c2 	bne.w	8019bd4 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8019a50:	480d      	ldr	r0, [pc, #52]	@ (8019a88 <RadioIrqProcess+0x2bc>)
 8019a52:	f002 feeb 	bl	801c82c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019a56:	2000      	movs	r0, #0
 8019a58:	f000 ff4a 	bl	801a8f0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019a5c:	4b09      	ldr	r3, [pc, #36]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	f000 80b7 	beq.w	8019bd4 <RadioIrqProcess+0x408>
 8019a66:	4b07      	ldr	r3, [pc, #28]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	68db      	ldr	r3, [r3, #12]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	f000 80b1 	beq.w	8019bd4 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8019a72:	4b04      	ldr	r3, [pc, #16]	@ (8019a84 <RadioIrqProcess+0x2b8>)
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	68db      	ldr	r3, [r3, #12]
 8019a78:	4798      	blx	r3
        break;
 8019a7a:	e0ab      	b.n	8019bd4 <RadioIrqProcess+0x408>
 8019a7c:	20001d44 	.word	0x20001d44
 8019a80:	20001da0 	.word	0x20001da0
 8019a84:	20001d40 	.word	0x20001d40
 8019a88:	20001db8 	.word	0x20001db8
 8019a8c:	20001c40 	.word	0x20001c40
 8019a90:	20001d68 	.word	0x20001d68
 8019a94:	10624dd3 	.word	0x10624dd3
 8019a98:	0801d938 	.word	0x0801d938
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8019a9c:	4b54      	ldr	r3, [pc, #336]	@ (8019bf0 <RadioIrqProcess+0x424>)
 8019a9e:	2201      	movs	r2, #1
 8019aa0:	2100      	movs	r1, #0
 8019aa2:	2002      	movs	r0, #2
 8019aa4:	f003 f8cc 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8019aa8:	4b52      	ldr	r3, [pc, #328]	@ (8019bf4 <RadioIrqProcess+0x428>)
 8019aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	f000 8093 	beq.w	8019bd8 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8019ab2:	4a51      	ldr	r2, [pc, #324]	@ (8019bf8 <RadioIrqProcess+0x42c>)
 8019ab4:	4b4f      	ldr	r3, [pc, #316]	@ (8019bf4 <RadioIrqProcess+0x428>)
 8019ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019ab8:	0c1b      	lsrs	r3, r3, #16
 8019aba:	b2db      	uxtb	r3, r3
 8019abc:	4619      	mov	r1, r3
 8019abe:	f640 1003 	movw	r0, #2307	@ 0x903
 8019ac2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8019ac4:	4a4c      	ldr	r2, [pc, #304]	@ (8019bf8 <RadioIrqProcess+0x42c>)
 8019ac6:	4b4b      	ldr	r3, [pc, #300]	@ (8019bf4 <RadioIrqProcess+0x428>)
 8019ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019aca:	0a1b      	lsrs	r3, r3, #8
 8019acc:	b2db      	uxtb	r3, r3
 8019ace:	4619      	mov	r1, r3
 8019ad0:	f640 1004 	movw	r0, #2308	@ 0x904
 8019ad4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8019ad6:	4a48      	ldr	r2, [pc, #288]	@ (8019bf8 <RadioIrqProcess+0x42c>)
 8019ad8:	4b46      	ldr	r3, [pc, #280]	@ (8019bf4 <RadioIrqProcess+0x428>)
 8019ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019adc:	b2db      	uxtb	r3, r3
 8019ade:	4619      	mov	r1, r3
 8019ae0:	f640 1005 	movw	r0, #2309	@ 0x905
 8019ae4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8019ae6:	4c44      	ldr	r4, [pc, #272]	@ (8019bf8 <RadioIrqProcess+0x42c>)
 8019ae8:	4b44      	ldr	r3, [pc, #272]	@ (8019bfc <RadioIrqProcess+0x430>)
 8019aea:	f640 1002 	movw	r0, #2306	@ 0x902
 8019aee:	4798      	blx	r3
 8019af0:	4603      	mov	r3, r0
 8019af2:	f043 0301 	orr.w	r3, r3, #1
 8019af6:	b2db      	uxtb	r3, r3
 8019af8:	4619      	mov	r1, r3
 8019afa:	f640 1002 	movw	r0, #2306	@ 0x902
 8019afe:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8019b00:	4b3c      	ldr	r3, [pc, #240]	@ (8019bf4 <RadioIrqProcess+0x428>)
 8019b02:	2200      	movs	r2, #0
 8019b04:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019b06:	2300      	movs	r3, #0
 8019b08:	2200      	movs	r2, #0
 8019b0a:	f240 2162 	movw	r1, #610	@ 0x262
 8019b0e:	f240 2062 	movw	r0, #610	@ 0x262
 8019b12:	f001 f8c1 	bl	801ac98 <SUBGRF_SetDioIrqParams>
        break;
 8019b16:	e05f      	b.n	8019bd8 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8019b18:	4b39      	ldr	r3, [pc, #228]	@ (8019c00 <RadioIrqProcess+0x434>)
 8019b1a:	2201      	movs	r2, #1
 8019b1c:	2100      	movs	r1, #0
 8019b1e:	2002      	movs	r0, #2
 8019b20:	f003 f88e 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8019b24:	f001 ff55 	bl	801b9d2 <RFW_Is_Init>
 8019b28:	4603      	mov	r3, r0
 8019b2a:	2b01      	cmp	r3, #1
 8019b2c:	d156      	bne.n	8019bdc <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8019b2e:	f001 ff86 	bl	801ba3e <RFW_ReceivePayload>
        break;
 8019b32:	e053      	b.n	8019bdc <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8019b34:	4b33      	ldr	r3, [pc, #204]	@ (8019c04 <RadioIrqProcess+0x438>)
 8019b36:	2201      	movs	r2, #1
 8019b38:	2100      	movs	r1, #0
 8019b3a:	2002      	movs	r0, #2
 8019b3c:	f003 f880 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019b40:	e051      	b.n	8019be6 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8019b42:	4831      	ldr	r0, [pc, #196]	@ (8019c08 <RadioIrqProcess+0x43c>)
 8019b44:	f002 fe72 	bl	801c82c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019b48:	4b2a      	ldr	r3, [pc, #168]	@ (8019bf4 <RadioIrqProcess+0x428>)
 8019b4a:	785b      	ldrb	r3, [r3, #1]
 8019b4c:	f083 0301 	eor.w	r3, r3, #1
 8019b50:	b2db      	uxtb	r3, r3
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d002      	beq.n	8019b5c <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8019b56:	2000      	movs	r0, #0
 8019b58:	f000 feca 	bl	801a8f0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8019c0c <RadioIrqProcess+0x440>)
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d03d      	beq.n	8019be0 <RadioIrqProcess+0x414>
 8019b64:	4b29      	ldr	r3, [pc, #164]	@ (8019c0c <RadioIrqProcess+0x440>)
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	68db      	ldr	r3, [r3, #12]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d038      	beq.n	8019be0 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8019b6e:	4b27      	ldr	r3, [pc, #156]	@ (8019c0c <RadioIrqProcess+0x440>)
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	68db      	ldr	r3, [r3, #12]
 8019b74:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8019b76:	4b26      	ldr	r3, [pc, #152]	@ (8019c10 <RadioIrqProcess+0x444>)
 8019b78:	2201      	movs	r2, #1
 8019b7a:	2100      	movs	r1, #0
 8019b7c:	2002      	movs	r0, #2
 8019b7e:	f003 f85f 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019b82:	e02d      	b.n	8019be0 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8019b84:	4b23      	ldr	r3, [pc, #140]	@ (8019c14 <RadioIrqProcess+0x448>)
 8019b86:	2201      	movs	r2, #1
 8019b88:	2100      	movs	r1, #0
 8019b8a:	2002      	movs	r0, #2
 8019b8c:	f003 f858 	bl	801cc40 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8019b90:	4b18      	ldr	r3, [pc, #96]	@ (8019bf4 <RadioIrqProcess+0x428>)
 8019b92:	785b      	ldrb	r3, [r3, #1]
 8019b94:	f083 0301 	eor.w	r3, r3, #1
 8019b98:	b2db      	uxtb	r3, r3
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d002      	beq.n	8019ba4 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8019b9e:	2000      	movs	r0, #0
 8019ba0:	f000 fea6 	bl	801a8f0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8019ba4:	4b19      	ldr	r3, [pc, #100]	@ (8019c0c <RadioIrqProcess+0x440>)
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d01b      	beq.n	8019be4 <RadioIrqProcess+0x418>
 8019bac:	4b17      	ldr	r3, [pc, #92]	@ (8019c0c <RadioIrqProcess+0x440>)
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	691b      	ldr	r3, [r3, #16]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d016      	beq.n	8019be4 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 8019bb6:	4b15      	ldr	r3, [pc, #84]	@ (8019c0c <RadioIrqProcess+0x440>)
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	691b      	ldr	r3, [r3, #16]
 8019bbc:	4798      	blx	r3
        break;
 8019bbe:	e011      	b.n	8019be4 <RadioIrqProcess+0x418>
        break;
 8019bc0:	bf00      	nop
 8019bc2:	e010      	b.n	8019be6 <RadioIrqProcess+0x41a>
        break;
 8019bc4:	bf00      	nop
 8019bc6:	e00e      	b.n	8019be6 <RadioIrqProcess+0x41a>
        break;
 8019bc8:	bf00      	nop
 8019bca:	e00c      	b.n	8019be6 <RadioIrqProcess+0x41a>
        break;
 8019bcc:	bf00      	nop
 8019bce:	e00a      	b.n	8019be6 <RadioIrqProcess+0x41a>
        break;
 8019bd0:	bf00      	nop
 8019bd2:	e008      	b.n	8019be6 <RadioIrqProcess+0x41a>
        break;
 8019bd4:	bf00      	nop
 8019bd6:	e006      	b.n	8019be6 <RadioIrqProcess+0x41a>
        break;
 8019bd8:	bf00      	nop
 8019bda:	e004      	b.n	8019be6 <RadioIrqProcess+0x41a>
        break;
 8019bdc:	bf00      	nop
 8019bde:	e002      	b.n	8019be6 <RadioIrqProcess+0x41a>
        break;
 8019be0:	bf00      	nop
 8019be2:	e000      	b.n	8019be6 <RadioIrqProcess+0x41a>
        break;
 8019be4:	bf00      	nop
    }
}
 8019be6:	bf00      	nop
 8019be8:	3708      	adds	r7, #8
 8019bea:	46bd      	mov	sp, r7
 8019bec:	bdb0      	pop	{r4, r5, r7, pc}
 8019bee:	bf00      	nop
 8019bf0:	0801d94c 	.word	0x0801d94c
 8019bf4:	20001d44 	.word	0x20001d44
 8019bf8:	080195dd 	.word	0x080195dd
 8019bfc:	08019601 	.word	0x08019601
 8019c00:	0801d958 	.word	0x0801d958
 8019c04:	0801d964 	.word	0x0801d964
 8019c08:	20001db8 	.word	0x20001db8
 8019c0c:	20001d40 	.word	0x20001d40
 8019c10:	0801d970 	.word	0x0801d970
 8019c14:	0801d97c 	.word	0x0801d97c

08019c18 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8019c18:	b580      	push	{r7, lr}
 8019c1a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019c1c:	4b09      	ldr	r3, [pc, #36]	@ (8019c44 <RadioTxPrbs+0x2c>)
 8019c1e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019c22:	2101      	movs	r1, #1
 8019c24:	4618      	mov	r0, r3
 8019c26:	f001 fcdb 	bl	801b5e0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8019c2a:	4b07      	ldr	r3, [pc, #28]	@ (8019c48 <RadioTxPrbs+0x30>)
 8019c2c:	212d      	movs	r1, #45	@ 0x2d
 8019c2e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019c32:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8019c34:	f000 ff1f 	bl	801aa76 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8019c38:	4804      	ldr	r0, [pc, #16]	@ (8019c4c <RadioTxPrbs+0x34>)
 8019c3a:	f000 fe75 	bl	801a928 <SUBGRF_SetTx>
}
 8019c3e:	bf00      	nop
 8019c40:	bd80      	pop	{r7, pc}
 8019c42:	bf00      	nop
 8019c44:	20001d44 	.word	0x20001d44
 8019c48:	080195dd 	.word	0x080195dd
 8019c4c:	000fffff 	.word	0x000fffff

08019c50 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8019c50:	b580      	push	{r7, lr}
 8019c52:	b084      	sub	sp, #16
 8019c54:	af00      	add	r7, sp, #0
 8019c56:	4603      	mov	r3, r0
 8019c58:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8019c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019c5e:	4618      	mov	r0, r3
 8019c60:	f001 fce6 	bl	801b630 <SUBGRF_SetRfTxPower>
 8019c64:	4603      	mov	r3, r0
 8019c66:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019c68:	210e      	movs	r1, #14
 8019c6a:	f640 101f 	movw	r0, #2335	@ 0x91f
 8019c6e:	f001 fbc3 	bl	801b3f8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8019c72:	7bfb      	ldrb	r3, [r7, #15]
 8019c74:	2101      	movs	r1, #1
 8019c76:	4618      	mov	r0, r3
 8019c78:	f001 fcb2 	bl	801b5e0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8019c7c:	f000 fef2 	bl	801aa64 <SUBGRF_SetTxContinuousWave>
}
 8019c80:	bf00      	nop
 8019c82:	3710      	adds	r7, #16
 8019c84:	46bd      	mov	sp, r7
 8019c86:	bd80      	pop	{r7, pc}

08019c88 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8019c88:	b480      	push	{r7}
 8019c8a:	b089      	sub	sp, #36	@ 0x24
 8019c8c:	af00      	add	r7, sp, #0
 8019c8e:	60f8      	str	r0, [r7, #12]
 8019c90:	60b9      	str	r1, [r7, #8]
 8019c92:	4613      	mov	r3, r2
 8019c94:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8019c96:	2300      	movs	r3, #0
 8019c98:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8019c9a:	2300      	movs	r3, #0
 8019c9c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8019c9e:	2300      	movs	r3, #0
 8019ca0:	61bb      	str	r3, [r7, #24]
 8019ca2:	e011      	b.n	8019cc8 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8019ca4:	69bb      	ldr	r3, [r7, #24]
 8019ca6:	68ba      	ldr	r2, [r7, #8]
 8019ca8:	4413      	add	r3, r2
 8019caa:	781a      	ldrb	r2, [r3, #0]
 8019cac:	69bb      	ldr	r3, [r7, #24]
 8019cae:	68b9      	ldr	r1, [r7, #8]
 8019cb0:	440b      	add	r3, r1
 8019cb2:	43d2      	mvns	r2, r2
 8019cb4:	b2d2      	uxtb	r2, r2
 8019cb6:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8019cb8:	69bb      	ldr	r3, [r7, #24]
 8019cba:	68fa      	ldr	r2, [r7, #12]
 8019cbc:	4413      	add	r3, r2
 8019cbe:	2200      	movs	r2, #0
 8019cc0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8019cc2:	69bb      	ldr	r3, [r7, #24]
 8019cc4:	3301      	adds	r3, #1
 8019cc6:	61bb      	str	r3, [r7, #24]
 8019cc8:	79fb      	ldrb	r3, [r7, #7]
 8019cca:	69ba      	ldr	r2, [r7, #24]
 8019ccc:	429a      	cmp	r2, r3
 8019cce:	dbe9      	blt.n	8019ca4 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8019cd0:	2300      	movs	r3, #0
 8019cd2:	61bb      	str	r3, [r7, #24]
 8019cd4:	e049      	b.n	8019d6a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8019cd6:	69bb      	ldr	r3, [r7, #24]
 8019cd8:	425a      	negs	r2, r3
 8019cda:	f003 0307 	and.w	r3, r3, #7
 8019cde:	f002 0207 	and.w	r2, r2, #7
 8019ce2:	bf58      	it	pl
 8019ce4:	4253      	negpl	r3, r2
 8019ce6:	b2db      	uxtb	r3, r3
 8019ce8:	f1c3 0307 	rsb	r3, r3, #7
 8019cec:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8019cee:	69bb      	ldr	r3, [r7, #24]
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	da00      	bge.n	8019cf6 <payload_integration+0x6e>
 8019cf4:	3307      	adds	r3, #7
 8019cf6:	10db      	asrs	r3, r3, #3
 8019cf8:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8019cfa:	69bb      	ldr	r3, [r7, #24]
 8019cfc:	3301      	adds	r3, #1
 8019cfe:	425a      	negs	r2, r3
 8019d00:	f003 0307 	and.w	r3, r3, #7
 8019d04:	f002 0207 	and.w	r2, r2, #7
 8019d08:	bf58      	it	pl
 8019d0a:	4253      	negpl	r3, r2
 8019d0c:	b2db      	uxtb	r3, r3
 8019d0e:	f1c3 0307 	rsb	r3, r3, #7
 8019d12:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8019d14:	69bb      	ldr	r3, [r7, #24]
 8019d16:	3301      	adds	r3, #1
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	da00      	bge.n	8019d1e <payload_integration+0x96>
 8019d1c:	3307      	adds	r3, #7
 8019d1e:	10db      	asrs	r3, r3, #3
 8019d20:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8019d22:	7dbb      	ldrb	r3, [r7, #22]
 8019d24:	68ba      	ldr	r2, [r7, #8]
 8019d26:	4413      	add	r3, r2
 8019d28:	781b      	ldrb	r3, [r3, #0]
 8019d2a:	461a      	mov	r2, r3
 8019d2c:	7dfb      	ldrb	r3, [r7, #23]
 8019d2e:	fa42 f303 	asr.w	r3, r2, r3
 8019d32:	b2db      	uxtb	r3, r3
 8019d34:	f003 0301 	and.w	r3, r3, #1
 8019d38:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8019d3a:	7ffa      	ldrb	r2, [r7, #31]
 8019d3c:	7cfb      	ldrb	r3, [r7, #19]
 8019d3e:	4053      	eors	r3, r2
 8019d40:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8019d42:	7d3b      	ldrb	r3, [r7, #20]
 8019d44:	68fa      	ldr	r2, [r7, #12]
 8019d46:	4413      	add	r3, r2
 8019d48:	781b      	ldrb	r3, [r3, #0]
 8019d4a:	b25a      	sxtb	r2, r3
 8019d4c:	7ff9      	ldrb	r1, [r7, #31]
 8019d4e:	7d7b      	ldrb	r3, [r7, #21]
 8019d50:	fa01 f303 	lsl.w	r3, r1, r3
 8019d54:	b25b      	sxtb	r3, r3
 8019d56:	4313      	orrs	r3, r2
 8019d58:	b259      	sxtb	r1, r3
 8019d5a:	7d3b      	ldrb	r3, [r7, #20]
 8019d5c:	68fa      	ldr	r2, [r7, #12]
 8019d5e:	4413      	add	r3, r2
 8019d60:	b2ca      	uxtb	r2, r1
 8019d62:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8019d64:	69bb      	ldr	r3, [r7, #24]
 8019d66:	3301      	adds	r3, #1
 8019d68:	61bb      	str	r3, [r7, #24]
 8019d6a:	79fb      	ldrb	r3, [r7, #7]
 8019d6c:	00db      	lsls	r3, r3, #3
 8019d6e:	69ba      	ldr	r2, [r7, #24]
 8019d70:	429a      	cmp	r2, r3
 8019d72:	dbb0      	blt.n	8019cd6 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8019d74:	7ffb      	ldrb	r3, [r7, #31]
 8019d76:	01db      	lsls	r3, r3, #7
 8019d78:	b25a      	sxtb	r2, r3
 8019d7a:	7ffb      	ldrb	r3, [r7, #31]
 8019d7c:	019b      	lsls	r3, r3, #6
 8019d7e:	b25b      	sxtb	r3, r3
 8019d80:	4313      	orrs	r3, r2
 8019d82:	b25b      	sxtb	r3, r3
 8019d84:	7ffa      	ldrb	r2, [r7, #31]
 8019d86:	2a00      	cmp	r2, #0
 8019d88:	d101      	bne.n	8019d8e <payload_integration+0x106>
 8019d8a:	2220      	movs	r2, #32
 8019d8c:	e000      	b.n	8019d90 <payload_integration+0x108>
 8019d8e:	2200      	movs	r2, #0
 8019d90:	4313      	orrs	r3, r2
 8019d92:	b259      	sxtb	r1, r3
 8019d94:	79fb      	ldrb	r3, [r7, #7]
 8019d96:	68fa      	ldr	r2, [r7, #12]
 8019d98:	4413      	add	r3, r2
 8019d9a:	b2ca      	uxtb	r2, r1
 8019d9c:	701a      	strb	r2, [r3, #0]
}
 8019d9e:	bf00      	nop
 8019da0:	3724      	adds	r7, #36	@ 0x24
 8019da2:	46bd      	mov	sp, r7
 8019da4:	bc80      	pop	{r7}
 8019da6:	4770      	bx	lr

08019da8 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8019da8:	b580      	push	{r7, lr}
 8019daa:	b08c      	sub	sp, #48	@ 0x30
 8019dac:	af00      	add	r7, sp, #0
 8019dae:	60b9      	str	r1, [r7, #8]
 8019db0:	607a      	str	r2, [r7, #4]
 8019db2:	603b      	str	r3, [r7, #0]
 8019db4:	4603      	mov	r3, r0
 8019db6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8019db8:	2300      	movs	r3, #0
 8019dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8019dbc:	2300      	movs	r3, #0
 8019dbe:	623b      	str	r3, [r7, #32]
 8019dc0:	2300      	movs	r3, #0
 8019dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019dc4:	f001 fdff 	bl	801b9c6 <RFW_DeInit>

    if( rxContinuous != 0 )
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d001      	beq.n	8019dd2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8019dce:	2300      	movs	r3, #0
 8019dd0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	bf14      	ite	ne
 8019dd8:	2301      	movne	r3, #1
 8019dda:	2300      	moveq	r3, #0
 8019ddc:	b2da      	uxtb	r2, r3
 8019dde:	4ba3      	ldr	r3, [pc, #652]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019de0:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8019de2:	7bfb      	ldrb	r3, [r7, #15]
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d003      	beq.n	8019df0 <RadioSetRxGenericConfig+0x48>
 8019de8:	2b01      	cmp	r3, #1
 8019dea:	f000 80dc 	beq.w	8019fa6 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8019dee:	e194      	b.n	801a11a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8019df0:	68bb      	ldr	r3, [r7, #8]
 8019df2:	689b      	ldr	r3, [r3, #8]
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d003      	beq.n	8019e00 <RadioSetRxGenericConfig+0x58>
 8019df8:	68bb      	ldr	r3, [r7, #8]
 8019dfa:	68db      	ldr	r3, [r3, #12]
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d102      	bne.n	8019e06 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8019e00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019e04:	e18a      	b.n	801a11c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8019e06:	68bb      	ldr	r3, [r7, #8]
 8019e08:	7f9b      	ldrb	r3, [r3, #30]
 8019e0a:	2b08      	cmp	r3, #8
 8019e0c:	d902      	bls.n	8019e14 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8019e0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019e12:	e183      	b.n	801a11c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8019e14:	68bb      	ldr	r3, [r7, #8]
 8019e16:	6919      	ldr	r1, [r3, #16]
 8019e18:	68bb      	ldr	r3, [r7, #8]
 8019e1a:	7f9b      	ldrb	r3, [r3, #30]
 8019e1c:	461a      	mov	r2, r3
 8019e1e:	f107 0320 	add.w	r3, r7, #32
 8019e22:	4618      	mov	r0, r3
 8019e24:	f001 fec2 	bl	801bbac <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019e28:	68bb      	ldr	r3, [r7, #8]
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	bf14      	ite	ne
 8019e30:	2301      	movne	r3, #1
 8019e32:	2300      	moveq	r3, #0
 8019e34:	b2db      	uxtb	r3, r3
 8019e36:	4618      	mov	r0, r3
 8019e38:	f000 fe26 	bl	801aa88 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019e3c:	4b8b      	ldr	r3, [pc, #556]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019e3e:	2200      	movs	r2, #0
 8019e40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019e44:	68bb      	ldr	r3, [r7, #8]
 8019e46:	689b      	ldr	r3, [r3, #8]
 8019e48:	4a88      	ldr	r2, [pc, #544]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019e4a:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8019e4c:	68bb      	ldr	r3, [r7, #8]
 8019e4e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8019e52:	4b86      	ldr	r3, [pc, #536]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8019e58:	68bb      	ldr	r3, [r7, #8]
 8019e5a:	685b      	ldr	r3, [r3, #4]
 8019e5c:	4618      	mov	r0, r3
 8019e5e:	f001 fce5 	bl	801b82c <SUBGRF_GetFskBandwidthRegValue>
 8019e62:	4603      	mov	r3, r0
 8019e64:	461a      	mov	r2, r3
 8019e66:	4b81      	ldr	r3, [pc, #516]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019e68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019e6c:	4b7f      	ldr	r3, [pc, #508]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019e6e:	2200      	movs	r2, #0
 8019e70:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8019e72:	68bb      	ldr	r3, [r7, #8]
 8019e74:	68db      	ldr	r3, [r3, #12]
 8019e76:	b29b      	uxth	r3, r3
 8019e78:	00db      	lsls	r3, r3, #3
 8019e7a:	b29a      	uxth	r2, r3
 8019e7c:	4b7b      	ldr	r3, [pc, #492]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019e7e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8019e80:	68bb      	ldr	r3, [r7, #8]
 8019e82:	7fda      	ldrb	r2, [r3, #31]
 8019e84:	4b79      	ldr	r3, [pc, #484]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019e86:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019e88:	68bb      	ldr	r3, [r7, #8]
 8019e8a:	7f9b      	ldrb	r3, [r3, #30]
 8019e8c:	00db      	lsls	r3, r3, #3
 8019e8e:	b2da      	uxtb	r2, r3
 8019e90:	4b76      	ldr	r3, [pc, #472]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019e92:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8019e94:	68bb      	ldr	r3, [r7, #8]
 8019e96:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8019e9a:	4b74      	ldr	r3, [pc, #464]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019e9c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8019e9e:	68bb      	ldr	r3, [r7, #8]
 8019ea0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d105      	bne.n	8019eb4 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8019ea8:	68bb      	ldr	r3, [r7, #8]
 8019eaa:	695b      	ldr	r3, [r3, #20]
 8019eac:	b2da      	uxtb	r2, r3
 8019eae:	4b6f      	ldr	r3, [pc, #444]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019eb0:	759a      	strb	r2, [r3, #22]
 8019eb2:	e00b      	b.n	8019ecc <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8019eb4:	68bb      	ldr	r3, [r7, #8]
 8019eb6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8019eba:	2b02      	cmp	r3, #2
 8019ebc:	d103      	bne.n	8019ec6 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019ebe:	4b6b      	ldr	r3, [pc, #428]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019ec0:	22ff      	movs	r2, #255	@ 0xff
 8019ec2:	759a      	strb	r2, [r3, #22]
 8019ec4:	e002      	b.n	8019ecc <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019ec6:	4b69      	ldr	r3, [pc, #420]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019ec8:	22ff      	movs	r2, #255	@ 0xff
 8019eca:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8019ecc:	68bb      	ldr	r3, [r7, #8]
 8019ece:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8019ed2:	2b02      	cmp	r3, #2
 8019ed4:	d004      	beq.n	8019ee0 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019ed6:	68bb      	ldr	r3, [r7, #8]
 8019ed8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8019edc:	2b02      	cmp	r3, #2
 8019ede:	d12d      	bne.n	8019f3c <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8019ee0:	68bb      	ldr	r3, [r7, #8]
 8019ee2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019ee6:	2bf1      	cmp	r3, #241	@ 0xf1
 8019ee8:	d00c      	beq.n	8019f04 <RadioSetRxGenericConfig+0x15c>
 8019eea:	68bb      	ldr	r3, [r7, #8]
 8019eec:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019ef0:	2bf2      	cmp	r3, #242	@ 0xf2
 8019ef2:	d007      	beq.n	8019f04 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019ef4:	68bb      	ldr	r3, [r7, #8]
 8019ef6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019efa:	2b01      	cmp	r3, #1
 8019efc:	d002      	beq.n	8019f04 <RadioSetRxGenericConfig+0x15c>
                return -1;
 8019efe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019f02:	e10b      	b.n	801a11c <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8019f04:	2300      	movs	r3, #0
 8019f06:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8019f08:	68bb      	ldr	r3, [r7, #8]
 8019f0a:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8019f0c:	4b58      	ldr	r3, [pc, #352]	@ (801a070 <RadioSetRxGenericConfig+0x2c8>)
 8019f0e:	6819      	ldr	r1, [r3, #0]
 8019f10:	f107 0314 	add.w	r3, r7, #20
 8019f14:	4a57      	ldr	r2, [pc, #348]	@ (801a074 <RadioSetRxGenericConfig+0x2cc>)
 8019f16:	4618      	mov	r0, r3
 8019f18:	f001 fd48 	bl	801b9ac <RFW_Init>
 8019f1c:	4603      	mov	r3, r0
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d002      	beq.n	8019f28 <RadioSetRxGenericConfig+0x180>
                return -1;
 8019f22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019f26:	e0f9      	b.n	801a11c <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019f28:	4b50      	ldr	r3, [pc, #320]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019f2a:	2200      	movs	r2, #0
 8019f2c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019f2e:	4b4f      	ldr	r3, [pc, #316]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019f30:	2201      	movs	r2, #1
 8019f32:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019f34:	4b4d      	ldr	r3, [pc, #308]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019f36:	2200      	movs	r2, #0
 8019f38:	755a      	strb	r2, [r3, #21]
        {
 8019f3a:	e00e      	b.n	8019f5a <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019f3c:	68bb      	ldr	r3, [r7, #8]
 8019f3e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8019f42:	4b4a      	ldr	r3, [pc, #296]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019f44:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019f46:	68bb      	ldr	r3, [r7, #8]
 8019f48:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8019f4c:	4b47      	ldr	r3, [pc, #284]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019f4e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8019f50:	68bb      	ldr	r3, [r7, #8]
 8019f52:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8019f56:	4b45      	ldr	r3, [pc, #276]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019f58:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8019f5a:	f7ff fa3e 	bl	80193da <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019f5e:	2000      	movs	r0, #0
 8019f60:	f7fe fbd2 	bl	8018708 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019f64:	4844      	ldr	r0, [pc, #272]	@ (801a078 <RadioSetRxGenericConfig+0x2d0>)
 8019f66:	f001 f82d 	bl	801afc4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019f6a:	4844      	ldr	r0, [pc, #272]	@ (801a07c <RadioSetRxGenericConfig+0x2d4>)
 8019f6c:	f001 f8fc 	bl	801b168 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019f70:	f107 0320 	add.w	r3, r7, #32
 8019f74:	4618      	mov	r0, r3
 8019f76:	f000 fbc0 	bl	801a6fa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019f7a:	68bb      	ldr	r3, [r7, #8]
 8019f7c:	8b9b      	ldrh	r3, [r3, #28]
 8019f7e:	4618      	mov	r0, r3
 8019f80:	f000 fc0a 	bl	801a798 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8019f84:	68bb      	ldr	r3, [r7, #8]
 8019f86:	8b1b      	ldrh	r3, [r3, #24]
 8019f88:	4618      	mov	r0, r3
 8019f8a:	f000 fbe5 	bl	801a758 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8019f8e:	683b      	ldr	r3, [r7, #0]
 8019f90:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8019f94:	fb03 f202 	mul.w	r2, r3, r2
 8019f98:	68bb      	ldr	r3, [r7, #8]
 8019f9a:	689b      	ldr	r3, [r3, #8]
 8019f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019fa0:	4a32      	ldr	r2, [pc, #200]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019fa2:	6093      	str	r3, [r2, #8]
        break;
 8019fa4:	e0b9      	b.n	801a11a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8019fa6:	68bb      	ldr	r3, [r7, #8]
 8019fa8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d102      	bne.n	8019fb4 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8019fae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019fb2:	e0b3      	b.n	801a11c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8019fb4:	68bb      	ldr	r3, [r7, #8]
 8019fb6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8019fba:	2b01      	cmp	r3, #1
 8019fbc:	d104      	bne.n	8019fc8 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8019fbe:	68bb      	ldr	r3, [r7, #8]
 8019fc0:	695b      	ldr	r3, [r3, #20]
 8019fc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8019fc6:	e002      	b.n	8019fce <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8019fc8:	23ff      	movs	r3, #255	@ 0xff
 8019fca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019fce:	68bb      	ldr	r3, [r7, #8]
 8019fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	bf14      	ite	ne
 8019fd6:	2301      	movne	r3, #1
 8019fd8:	2300      	moveq	r3, #0
 8019fda:	b2db      	uxtb	r3, r3
 8019fdc:	4618      	mov	r0, r3
 8019fde:	f000 fd53 	bl	801aa88 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019fe2:	683b      	ldr	r3, [r7, #0]
 8019fe4:	b2db      	uxtb	r3, r3
 8019fe6:	4618      	mov	r0, r3
 8019fe8:	f000 fd5d 	bl	801aaa6 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019fec:	4b1f      	ldr	r3, [pc, #124]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019fee:	2201      	movs	r2, #1
 8019ff0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019ff4:	68bb      	ldr	r3, [r7, #8]
 8019ff6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8019ffa:	4b1c      	ldr	r3, [pc, #112]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 8019ffc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a000:	68bb      	ldr	r3, [r7, #8]
 801a002:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801a006:	4b19      	ldr	r3, [pc, #100]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 801a008:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a00c:	68bb      	ldr	r3, [r7, #8]
 801a00e:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 801a012:	4b16      	ldr	r3, [pc, #88]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 801a014:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801a018:	68bb      	ldr	r3, [r7, #8]
 801a01a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a01e:	2b02      	cmp	r3, #2
 801a020:	d010      	beq.n	801a044 <RadioSetRxGenericConfig+0x29c>
 801a022:	2b02      	cmp	r3, #2
 801a024:	dc2c      	bgt.n	801a080 <RadioSetRxGenericConfig+0x2d8>
 801a026:	2b00      	cmp	r3, #0
 801a028:	d002      	beq.n	801a030 <RadioSetRxGenericConfig+0x288>
 801a02a:	2b01      	cmp	r3, #1
 801a02c:	d005      	beq.n	801a03a <RadioSetRxGenericConfig+0x292>
            break;
 801a02e:	e027      	b.n	801a080 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a030:	4b0e      	ldr	r3, [pc, #56]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 801a032:	2200      	movs	r2, #0
 801a034:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a038:	e023      	b.n	801a082 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a03a:	4b0c      	ldr	r3, [pc, #48]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 801a03c:	2201      	movs	r2, #1
 801a03e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a042:	e01e      	b.n	801a082 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a044:	68bb      	ldr	r3, [r7, #8]
 801a046:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a04a:	2b0b      	cmp	r3, #11
 801a04c:	d004      	beq.n	801a058 <RadioSetRxGenericConfig+0x2b0>
 801a04e:	68bb      	ldr	r3, [r7, #8]
 801a050:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a054:	2b0c      	cmp	r3, #12
 801a056:	d104      	bne.n	801a062 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a058:	4b04      	ldr	r3, [pc, #16]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 801a05a:	2201      	movs	r2, #1
 801a05c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a060:	e00f      	b.n	801a082 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a062:	4b02      	ldr	r3, [pc, #8]	@ (801a06c <RadioSetRxGenericConfig+0x2c4>)
 801a064:	2200      	movs	r2, #0
 801a066:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a06a:	e00a      	b.n	801a082 <RadioSetRxGenericConfig+0x2da>
 801a06c:	20001d44 	.word	0x20001d44
 801a070:	20001d40 	.word	0x20001d40
 801a074:	20001db8 	.word	0x20001db8
 801a078:	20001d7c 	.word	0x20001d7c
 801a07c:	20001d52 	.word	0x20001d52
            break;
 801a080:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a082:	4b28      	ldr	r3, [pc, #160]	@ (801a124 <RadioSetRxGenericConfig+0x37c>)
 801a084:	2201      	movs	r2, #1
 801a086:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a088:	68bb      	ldr	r3, [r7, #8]
 801a08a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 801a08c:	4b25      	ldr	r3, [pc, #148]	@ (801a124 <RadioSetRxGenericConfig+0x37c>)
 801a08e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a090:	68bb      	ldr	r3, [r7, #8]
 801a092:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 801a096:	4b23      	ldr	r3, [pc, #140]	@ (801a124 <RadioSetRxGenericConfig+0x37c>)
 801a098:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a09a:	4a22      	ldr	r2, [pc, #136]	@ (801a124 <RadioSetRxGenericConfig+0x37c>)
 801a09c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a0a0:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a0a2:	68bb      	ldr	r3, [r7, #8]
 801a0a4:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 801a0a8:	4b1e      	ldr	r3, [pc, #120]	@ (801a124 <RadioSetRxGenericConfig+0x37c>)
 801a0aa:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a0ae:	68bb      	ldr	r3, [r7, #8]
 801a0b0:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 801a0b4:	4b1b      	ldr	r3, [pc, #108]	@ (801a124 <RadioSetRxGenericConfig+0x37c>)
 801a0b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 801a0ba:	f7ff f98e 	bl	80193da <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a0be:	2001      	movs	r0, #1
 801a0c0:	f7fe fb22 	bl	8018708 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a0c4:	4818      	ldr	r0, [pc, #96]	@ (801a128 <RadioSetRxGenericConfig+0x380>)
 801a0c6:	f000 ff7d 	bl	801afc4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a0ca:	4818      	ldr	r0, [pc, #96]	@ (801a12c <RadioSetRxGenericConfig+0x384>)
 801a0cc:	f001 f84c 	bl	801b168 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a0d0:	4b14      	ldr	r3, [pc, #80]	@ (801a124 <RadioSetRxGenericConfig+0x37c>)
 801a0d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801a0d6:	2b01      	cmp	r3, #1
 801a0d8:	d10d      	bne.n	801a0f6 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a0da:	f240 7036 	movw	r0, #1846	@ 0x736
 801a0de:	f001 f99f 	bl	801b420 <SUBGRF_ReadRegister>
 801a0e2:	4603      	mov	r3, r0
 801a0e4:	f023 0304 	bic.w	r3, r3, #4
 801a0e8:	b2db      	uxtb	r3, r3
 801a0ea:	4619      	mov	r1, r3
 801a0ec:	f240 7036 	movw	r0, #1846	@ 0x736
 801a0f0:	f001 f982 	bl	801b3f8 <SUBGRF_WriteRegister>
 801a0f4:	e00c      	b.n	801a110 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a0f6:	f240 7036 	movw	r0, #1846	@ 0x736
 801a0fa:	f001 f991 	bl	801b420 <SUBGRF_ReadRegister>
 801a0fe:	4603      	mov	r3, r0
 801a100:	f043 0304 	orr.w	r3, r3, #4
 801a104:	b2db      	uxtb	r3, r3
 801a106:	4619      	mov	r1, r3
 801a108:	f240 7036 	movw	r0, #1846	@ 0x736
 801a10c:	f001 f974 	bl	801b3f8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801a110:	4b04      	ldr	r3, [pc, #16]	@ (801a124 <RadioSetRxGenericConfig+0x37c>)
 801a112:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a116:	609a      	str	r2, [r3, #8]
        break;
 801a118:	bf00      	nop
    }
    return status;
 801a11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a11c:	4618      	mov	r0, r3
 801a11e:	3730      	adds	r7, #48	@ 0x30
 801a120:	46bd      	mov	sp, r7
 801a122:	bd80      	pop	{r7, pc}
 801a124:	20001d44 	.word	0x20001d44
 801a128:	20001d7c 	.word	0x20001d7c
 801a12c:	20001d52 	.word	0x20001d52

0801a130 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801a130:	b580      	push	{r7, lr}
 801a132:	b08e      	sub	sp, #56	@ 0x38
 801a134:	af00      	add	r7, sp, #0
 801a136:	60b9      	str	r1, [r7, #8]
 801a138:	607b      	str	r3, [r7, #4]
 801a13a:	4603      	mov	r3, r0
 801a13c:	73fb      	strb	r3, [r7, #15]
 801a13e:	4613      	mov	r3, r2
 801a140:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801a142:	2300      	movs	r3, #0
 801a144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a146:	2300      	movs	r3, #0
 801a148:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a14a:	f001 fc3c 	bl	801b9c6 <RFW_DeInit>
    switch( modem )
 801a14e:	7bfb      	ldrb	r3, [r7, #15]
 801a150:	2b03      	cmp	r3, #3
 801a152:	f200 8204 	bhi.w	801a55e <RadioSetTxGenericConfig+0x42e>
 801a156:	a201      	add	r2, pc, #4	@ (adr r2, 801a15c <RadioSetTxGenericConfig+0x2c>)
 801a158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a15c:	0801a2e1 	.word	0x0801a2e1
 801a160:	0801a429 	.word	0x0801a429
 801a164:	0801a521 	.word	0x0801a521
 801a168:	0801a16d 	.word	0x0801a16d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801a16c:	68bb      	ldr	r3, [r7, #8]
 801a16e:	7c9b      	ldrb	r3, [r3, #18]
 801a170:	2b08      	cmp	r3, #8
 801a172:	d902      	bls.n	801a17a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801a174:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a178:	e206      	b.n	801a588 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801a17a:	68bb      	ldr	r3, [r7, #8]
 801a17c:	6899      	ldr	r1, [r3, #8]
 801a17e:	68bb      	ldr	r3, [r7, #8]
 801a180:	7c9b      	ldrb	r3, [r3, #18]
 801a182:	461a      	mov	r2, r3
 801a184:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a188:	4618      	mov	r0, r3
 801a18a:	f001 fd0f 	bl	801bbac <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801a18e:	68bb      	ldr	r3, [r7, #8]
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	2b00      	cmp	r3, #0
 801a194:	d102      	bne.n	801a19c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801a196:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a19a:	e1f5      	b.n	801a588 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801a19c:	68bb      	ldr	r3, [r7, #8]
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	f242 7210 	movw	r2, #10000	@ 0x2710
 801a1a4:	4293      	cmp	r3, r2
 801a1a6:	d813      	bhi.n	801a1d0 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801a1a8:	2302      	movs	r3, #2
 801a1aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801a1ae:	4b99      	ldr	r3, [pc, #612]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a1b0:	2203      	movs	r2, #3
 801a1b2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801a1b4:	4b97      	ldr	r3, [pc, #604]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a1b6:	2203      	movs	r2, #3
 801a1b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a1bc:	68bb      	ldr	r3, [r7, #8]
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	4a94      	ldr	r2, [pc, #592]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a1c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a1c4:	68bb      	ldr	r3, [r7, #8]
 801a1c6:	7cda      	ldrb	r2, [r3, #19]
 801a1c8:	4b92      	ldr	r3, [pc, #584]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a1ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801a1ce:	e017      	b.n	801a200 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a1d6:	4b8f      	ldr	r3, [pc, #572]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a1d8:	2200      	movs	r2, #0
 801a1da:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a1dc:	4b8d      	ldr	r3, [pc, #564]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a1de:	2200      	movs	r2, #0
 801a1e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a1e4:	68bb      	ldr	r3, [r7, #8]
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	4a8a      	ldr	r2, [pc, #552]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a1ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a1ec:	68bb      	ldr	r3, [r7, #8]
 801a1ee:	7cda      	ldrb	r2, [r3, #19]
 801a1f0:	4b88      	ldr	r3, [pc, #544]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a1f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801a1f6:	68bb      	ldr	r3, [r7, #8]
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	089b      	lsrs	r3, r3, #2
 801a1fc:	4a85      	ldr	r2, [pc, #532]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a1fe:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801a200:	68bb      	ldr	r3, [r7, #8]
 801a202:	685b      	ldr	r3, [r3, #4]
 801a204:	b29b      	uxth	r3, r3
 801a206:	00db      	lsls	r3, r3, #3
 801a208:	b29a      	uxth	r2, r3
 801a20a:	4b82      	ldr	r3, [pc, #520]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a20c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a20e:	4b81      	ldr	r3, [pc, #516]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a210:	2204      	movs	r2, #4
 801a212:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801a214:	68bb      	ldr	r3, [r7, #8]
 801a216:	7c9b      	ldrb	r3, [r3, #18]
 801a218:	00db      	lsls	r3, r3, #3
 801a21a:	b2da      	uxtb	r2, r3
 801a21c:	4b7d      	ldr	r3, [pc, #500]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a21e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a220:	4b7c      	ldr	r3, [pc, #496]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a222:	2200      	movs	r2, #0
 801a224:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a226:	68bb      	ldr	r3, [r7, #8]
 801a228:	7d9b      	ldrb	r3, [r3, #22]
 801a22a:	2b02      	cmp	r3, #2
 801a22c:	d003      	beq.n	801a236 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a22e:	68bb      	ldr	r3, [r7, #8]
 801a230:	7d1b      	ldrb	r3, [r3, #20]
 801a232:	2b02      	cmp	r3, #2
 801a234:	d12b      	bne.n	801a28e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a236:	68bb      	ldr	r3, [r7, #8]
 801a238:	7d5b      	ldrb	r3, [r3, #21]
 801a23a:	2bf1      	cmp	r3, #241	@ 0xf1
 801a23c:	d00a      	beq.n	801a254 <RadioSetTxGenericConfig+0x124>
 801a23e:	68bb      	ldr	r3, [r7, #8]
 801a240:	7d5b      	ldrb	r3, [r3, #21]
 801a242:	2bf2      	cmp	r3, #242	@ 0xf2
 801a244:	d006      	beq.n	801a254 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a246:	68bb      	ldr	r3, [r7, #8]
 801a248:	7d5b      	ldrb	r3, [r3, #21]
 801a24a:	2b01      	cmp	r3, #1
 801a24c:	d002      	beq.n	801a254 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801a24e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a252:	e199      	b.n	801a588 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801a254:	68bb      	ldr	r3, [r7, #8]
 801a256:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801a258:	2301      	movs	r3, #1
 801a25a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a25e:	4b6e      	ldr	r3, [pc, #440]	@ (801a418 <RadioSetTxGenericConfig+0x2e8>)
 801a260:	6819      	ldr	r1, [r3, #0]
 801a262:	f107 0320 	add.w	r3, r7, #32
 801a266:	4a6d      	ldr	r2, [pc, #436]	@ (801a41c <RadioSetTxGenericConfig+0x2ec>)
 801a268:	4618      	mov	r0, r3
 801a26a:	f001 fb9f 	bl	801b9ac <RFW_Init>
 801a26e:	4603      	mov	r3, r0
 801a270:	2b00      	cmp	r3, #0
 801a272:	d002      	beq.n	801a27a <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801a274:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a278:	e186      	b.n	801a588 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a27a:	4b66      	ldr	r3, [pc, #408]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a27c:	2200      	movs	r2, #0
 801a27e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a280:	4b64      	ldr	r3, [pc, #400]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a282:	2201      	movs	r2, #1
 801a284:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a286:	4b63      	ldr	r3, [pc, #396]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a288:	2200      	movs	r2, #0
 801a28a:	755a      	strb	r2, [r3, #21]
        {
 801a28c:	e00b      	b.n	801a2a6 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801a28e:	68bb      	ldr	r3, [r7, #8]
 801a290:	7d5a      	ldrb	r2, [r3, #21]
 801a292:	4b60      	ldr	r3, [pc, #384]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a294:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801a296:	68bb      	ldr	r3, [r7, #8]
 801a298:	7d9a      	ldrb	r2, [r3, #22]
 801a29a:	4b5e      	ldr	r3, [pc, #376]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a29c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801a29e:	68bb      	ldr	r3, [r7, #8]
 801a2a0:	7d1a      	ldrb	r2, [r3, #20]
 801a2a2:	4b5c      	ldr	r3, [pc, #368]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a2a4:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a2a6:	f7ff f898 	bl	80193da <RadioStandby>
        RadioSetModem( radio_modem );
 801a2aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a2ae:	4618      	mov	r0, r3
 801a2b0:	f7fe fa2a 	bl	8018708 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a2b4:	485a      	ldr	r0, [pc, #360]	@ (801a420 <RadioSetTxGenericConfig+0x2f0>)
 801a2b6:	f000 fe85 	bl	801afc4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a2ba:	485a      	ldr	r0, [pc, #360]	@ (801a424 <RadioSetTxGenericConfig+0x2f4>)
 801a2bc:	f000 ff54 	bl	801b168 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a2c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a2c4:	4618      	mov	r0, r3
 801a2c6:	f000 fa18 	bl	801a6fa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801a2ca:	68bb      	ldr	r3, [r7, #8]
 801a2cc:	8a1b      	ldrh	r3, [r3, #16]
 801a2ce:	4618      	mov	r0, r3
 801a2d0:	f000 fa62 	bl	801a798 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801a2d4:	68bb      	ldr	r3, [r7, #8]
 801a2d6:	899b      	ldrh	r3, [r3, #12]
 801a2d8:	4618      	mov	r0, r3
 801a2da:	f000 fa3d 	bl	801a758 <SUBGRF_SetCrcPolynomial>
        break;
 801a2de:	e13f      	b.n	801a560 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801a2e0:	68bb      	ldr	r3, [r7, #8]
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d102      	bne.n	801a2ee <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801a2e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a2ec:	e14c      	b.n	801a588 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801a2ee:	68bb      	ldr	r3, [r7, #8]
 801a2f0:	7c9b      	ldrb	r3, [r3, #18]
 801a2f2:	2b08      	cmp	r3, #8
 801a2f4:	d902      	bls.n	801a2fc <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801a2f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a2fa:	e145      	b.n	801a588 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a2fc:	68bb      	ldr	r3, [r7, #8]
 801a2fe:	6899      	ldr	r1, [r3, #8]
 801a300:	68bb      	ldr	r3, [r7, #8]
 801a302:	7c9b      	ldrb	r3, [r3, #18]
 801a304:	461a      	mov	r2, r3
 801a306:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a30a:	4618      	mov	r0, r3
 801a30c:	f001 fc4e 	bl	801bbac <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a310:	4b40      	ldr	r3, [pc, #256]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a312:	2200      	movs	r2, #0
 801a314:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a318:	68bb      	ldr	r3, [r7, #8]
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	4a3d      	ldr	r2, [pc, #244]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a31e:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a320:	68bb      	ldr	r3, [r7, #8]
 801a322:	7cda      	ldrb	r2, [r3, #19]
 801a324:	4b3b      	ldr	r3, [pc, #236]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a326:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801a32a:	68bb      	ldr	r3, [r7, #8]
 801a32c:	699b      	ldr	r3, [r3, #24]
 801a32e:	4a39      	ldr	r2, [pc, #228]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a330:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a332:	4b38      	ldr	r3, [pc, #224]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a334:	2200      	movs	r2, #0
 801a336:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801a338:	68bb      	ldr	r3, [r7, #8]
 801a33a:	685b      	ldr	r3, [r3, #4]
 801a33c:	b29b      	uxth	r3, r3
 801a33e:	00db      	lsls	r3, r3, #3
 801a340:	b29a      	uxth	r2, r3
 801a342:	4b34      	ldr	r3, [pc, #208]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a344:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a346:	4b33      	ldr	r3, [pc, #204]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a348:	2204      	movs	r2, #4
 801a34a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a34c:	68bb      	ldr	r3, [r7, #8]
 801a34e:	7c9b      	ldrb	r3, [r3, #18]
 801a350:	00db      	lsls	r3, r3, #3
 801a352:	b2da      	uxtb	r2, r3
 801a354:	4b2f      	ldr	r3, [pc, #188]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a356:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a358:	4b2e      	ldr	r3, [pc, #184]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a35a:	2200      	movs	r2, #0
 801a35c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801a35e:	68bb      	ldr	r3, [r7, #8]
 801a360:	7d9b      	ldrb	r3, [r3, #22]
 801a362:	2b02      	cmp	r3, #2
 801a364:	d003      	beq.n	801a36e <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a366:	68bb      	ldr	r3, [r7, #8]
 801a368:	7d1b      	ldrb	r3, [r3, #20]
 801a36a:	2b02      	cmp	r3, #2
 801a36c:	d12a      	bne.n	801a3c4 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801a36e:	68bb      	ldr	r3, [r7, #8]
 801a370:	7d5b      	ldrb	r3, [r3, #21]
 801a372:	2bf1      	cmp	r3, #241	@ 0xf1
 801a374:	d00a      	beq.n	801a38c <RadioSetTxGenericConfig+0x25c>
 801a376:	68bb      	ldr	r3, [r7, #8]
 801a378:	7d5b      	ldrb	r3, [r3, #21]
 801a37a:	2bf2      	cmp	r3, #242	@ 0xf2
 801a37c:	d006      	beq.n	801a38c <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a37e:	68bb      	ldr	r3, [r7, #8]
 801a380:	7d5b      	ldrb	r3, [r3, #21]
 801a382:	2b01      	cmp	r3, #1
 801a384:	d002      	beq.n	801a38c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801a386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a38a:	e0fd      	b.n	801a588 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801a38c:	2301      	movs	r3, #1
 801a38e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801a390:	68bb      	ldr	r3, [r7, #8]
 801a392:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a394:	4b20      	ldr	r3, [pc, #128]	@ (801a418 <RadioSetTxGenericConfig+0x2e8>)
 801a396:	6819      	ldr	r1, [r3, #0]
 801a398:	f107 0314 	add.w	r3, r7, #20
 801a39c:	4a1f      	ldr	r2, [pc, #124]	@ (801a41c <RadioSetTxGenericConfig+0x2ec>)
 801a39e:	4618      	mov	r0, r3
 801a3a0:	f001 fb04 	bl	801b9ac <RFW_Init>
 801a3a4:	4603      	mov	r3, r0
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d002      	beq.n	801a3b0 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801a3aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a3ae:	e0eb      	b.n	801a588 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a3b0:	4b18      	ldr	r3, [pc, #96]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a3b2:	2200      	movs	r2, #0
 801a3b4:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a3b6:	4b17      	ldr	r3, [pc, #92]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a3b8:	2201      	movs	r2, #1
 801a3ba:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a3bc:	4b15      	ldr	r3, [pc, #84]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a3be:	2200      	movs	r2, #0
 801a3c0:	755a      	strb	r2, [r3, #21]
        {
 801a3c2:	e00b      	b.n	801a3dc <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a3c4:	68bb      	ldr	r3, [r7, #8]
 801a3c6:	7d5a      	ldrb	r2, [r3, #21]
 801a3c8:	4b12      	ldr	r3, [pc, #72]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a3ca:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a3cc:	68bb      	ldr	r3, [r7, #8]
 801a3ce:	7d9a      	ldrb	r2, [r3, #22]
 801a3d0:	4b10      	ldr	r3, [pc, #64]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a3d2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801a3d4:	68bb      	ldr	r3, [r7, #8]
 801a3d6:	7d1a      	ldrb	r2, [r3, #20]
 801a3d8:	4b0e      	ldr	r3, [pc, #56]	@ (801a414 <RadioSetTxGenericConfig+0x2e4>)
 801a3da:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a3dc:	f7fe fffd 	bl	80193da <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a3e0:	2000      	movs	r0, #0
 801a3e2:	f7fe f991 	bl	8018708 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a3e6:	480e      	ldr	r0, [pc, #56]	@ (801a420 <RadioSetTxGenericConfig+0x2f0>)
 801a3e8:	f000 fdec 	bl	801afc4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a3ec:	480d      	ldr	r0, [pc, #52]	@ (801a424 <RadioSetTxGenericConfig+0x2f4>)
 801a3ee:	f000 febb 	bl	801b168 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a3f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a3f6:	4618      	mov	r0, r3
 801a3f8:	f000 f97f 	bl	801a6fa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a3fc:	68bb      	ldr	r3, [r7, #8]
 801a3fe:	8a1b      	ldrh	r3, [r3, #16]
 801a400:	4618      	mov	r0, r3
 801a402:	f000 f9c9 	bl	801a798 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a406:	68bb      	ldr	r3, [r7, #8]
 801a408:	899b      	ldrh	r3, [r3, #12]
 801a40a:	4618      	mov	r0, r3
 801a40c:	f000 f9a4 	bl	801a758 <SUBGRF_SetCrcPolynomial>
        break;
 801a410:	e0a6      	b.n	801a560 <RadioSetTxGenericConfig+0x430>
 801a412:	bf00      	nop
 801a414:	20001d44 	.word	0x20001d44
 801a418:	20001d40 	.word	0x20001d40
 801a41c:	20001da0 	.word	0x20001da0
 801a420:	20001d7c 	.word	0x20001d7c
 801a424:	20001d52 	.word	0x20001d52
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a428:	4b59      	ldr	r3, [pc, #356]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a42a:	2201      	movs	r2, #1
 801a42c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a430:	68bb      	ldr	r3, [r7, #8]
 801a432:	781a      	ldrb	r2, [r3, #0]
 801a434:	4b56      	ldr	r3, [pc, #344]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a436:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a43a:	68bb      	ldr	r3, [r7, #8]
 801a43c:	785a      	ldrb	r2, [r3, #1]
 801a43e:	4b54      	ldr	r3, [pc, #336]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a444:	68bb      	ldr	r3, [r7, #8]
 801a446:	789a      	ldrb	r2, [r3, #2]
 801a448:	4b51      	ldr	r3, [pc, #324]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a44a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801a44e:	68bb      	ldr	r3, [r7, #8]
 801a450:	78db      	ldrb	r3, [r3, #3]
 801a452:	2b02      	cmp	r3, #2
 801a454:	d010      	beq.n	801a478 <RadioSetTxGenericConfig+0x348>
 801a456:	2b02      	cmp	r3, #2
 801a458:	dc20      	bgt.n	801a49c <RadioSetTxGenericConfig+0x36c>
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d002      	beq.n	801a464 <RadioSetTxGenericConfig+0x334>
 801a45e:	2b01      	cmp	r3, #1
 801a460:	d005      	beq.n	801a46e <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801a462:	e01b      	b.n	801a49c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a464:	4b4a      	ldr	r3, [pc, #296]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a466:	2200      	movs	r2, #0
 801a468:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a46c:	e017      	b.n	801a49e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a46e:	4b48      	ldr	r3, [pc, #288]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a470:	2201      	movs	r2, #1
 801a472:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a476:	e012      	b.n	801a49e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a478:	68bb      	ldr	r3, [r7, #8]
 801a47a:	781b      	ldrb	r3, [r3, #0]
 801a47c:	2b0b      	cmp	r3, #11
 801a47e:	d003      	beq.n	801a488 <RadioSetTxGenericConfig+0x358>
 801a480:	68bb      	ldr	r3, [r7, #8]
 801a482:	781b      	ldrb	r3, [r3, #0]
 801a484:	2b0c      	cmp	r3, #12
 801a486:	d104      	bne.n	801a492 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a488:	4b41      	ldr	r3, [pc, #260]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a48a:	2201      	movs	r2, #1
 801a48c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a490:	e005      	b.n	801a49e <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a492:	4b3f      	ldr	r3, [pc, #252]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a494:	2200      	movs	r2, #0
 801a496:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a49a:	e000      	b.n	801a49e <RadioSetTxGenericConfig+0x36e>
            break;
 801a49c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a49e:	4b3c      	ldr	r3, [pc, #240]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a4a0:	2201      	movs	r2, #1
 801a4a2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a4a4:	68bb      	ldr	r3, [r7, #8]
 801a4a6:	889a      	ldrh	r2, [r3, #4]
 801a4a8:	4b39      	ldr	r3, [pc, #228]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a4aa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a4ac:	68bb      	ldr	r3, [r7, #8]
 801a4ae:	799a      	ldrb	r2, [r3, #6]
 801a4b0:	4b37      	ldr	r3, [pc, #220]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a4b2:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a4b4:	68bb      	ldr	r3, [r7, #8]
 801a4b6:	79da      	ldrb	r2, [r3, #7]
 801a4b8:	4b35      	ldr	r3, [pc, #212]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a4ba:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a4be:	68bb      	ldr	r3, [r7, #8]
 801a4c0:	7a1a      	ldrb	r2, [r3, #8]
 801a4c2:	4b33      	ldr	r3, [pc, #204]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a4c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 801a4c8:	f7fe ff87 	bl	80193da <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a4cc:	2001      	movs	r0, #1
 801a4ce:	f7fe f91b 	bl	8018708 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a4d2:	4830      	ldr	r0, [pc, #192]	@ (801a594 <RadioSetTxGenericConfig+0x464>)
 801a4d4:	f000 fd76 	bl	801afc4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a4d8:	482f      	ldr	r0, [pc, #188]	@ (801a598 <RadioSetTxGenericConfig+0x468>)
 801a4da:	f000 fe45 	bl	801b168 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801a4de:	4b2c      	ldr	r3, [pc, #176]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a4e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801a4e4:	2b06      	cmp	r3, #6
 801a4e6:	d10d      	bne.n	801a504 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a4e8:	f640 0089 	movw	r0, #2185	@ 0x889
 801a4ec:	f000 ff98 	bl	801b420 <SUBGRF_ReadRegister>
 801a4f0:	4603      	mov	r3, r0
 801a4f2:	f023 0304 	bic.w	r3, r3, #4
 801a4f6:	b2db      	uxtb	r3, r3
 801a4f8:	4619      	mov	r1, r3
 801a4fa:	f640 0089 	movw	r0, #2185	@ 0x889
 801a4fe:	f000 ff7b 	bl	801b3f8 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801a502:	e02d      	b.n	801a560 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a504:	f640 0089 	movw	r0, #2185	@ 0x889
 801a508:	f000 ff8a 	bl	801b420 <SUBGRF_ReadRegister>
 801a50c:	4603      	mov	r3, r0
 801a50e:	f043 0304 	orr.w	r3, r3, #4
 801a512:	b2db      	uxtb	r3, r3
 801a514:	4619      	mov	r1, r3
 801a516:	f640 0089 	movw	r0, #2185	@ 0x889
 801a51a:	f000 ff6d 	bl	801b3f8 <SUBGRF_WriteRegister>
        break;
 801a51e:	e01f      	b.n	801a560 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801a520:	68bb      	ldr	r3, [r7, #8]
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	2b00      	cmp	r3, #0
 801a526:	d004      	beq.n	801a532 <RadioSetTxGenericConfig+0x402>
 801a528:	68bb      	ldr	r3, [r7, #8]
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a530:	d902      	bls.n	801a538 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801a532:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a536:	e027      	b.n	801a588 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801a538:	2003      	movs	r0, #3
 801a53a:	f7fe f8e5 	bl	8018708 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a53e:	4b14      	ldr	r3, [pc, #80]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a540:	2202      	movs	r2, #2
 801a542:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801a546:	68bb      	ldr	r3, [r7, #8]
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	4a11      	ldr	r2, [pc, #68]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a54c:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a54e:	4b10      	ldr	r3, [pc, #64]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a550:	2216      	movs	r2, #22
 801a552:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a556:	480f      	ldr	r0, [pc, #60]	@ (801a594 <RadioSetTxGenericConfig+0x464>)
 801a558:	f000 fd34 	bl	801afc4 <SUBGRF_SetModulationParams>
        break;
 801a55c:	e000      	b.n	801a560 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801a55e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a564:	4618      	mov	r0, r3
 801a566:	f001 f863 	bl	801b630 <SUBGRF_SetRfTxPower>
 801a56a:	4603      	mov	r3, r0
 801a56c:	461a      	mov	r2, r3
 801a56e:	4b08      	ldr	r3, [pc, #32]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a570:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a574:	4b06      	ldr	r3, [pc, #24]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a576:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801a57a:	4618      	mov	r0, r3
 801a57c:	f001 fa37 	bl	801b9ee <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a580:	4a03      	ldr	r2, [pc, #12]	@ (801a590 <RadioSetTxGenericConfig+0x460>)
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	6053      	str	r3, [r2, #4]
    return 0;
 801a586:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a588:	4618      	mov	r0, r3
 801a58a:	3738      	adds	r7, #56	@ 0x38
 801a58c:	46bd      	mov	sp, r7
 801a58e:	bd80      	pop	{r7, pc}
 801a590:	20001d44 	.word	0x20001d44
 801a594:	20001d7c 	.word	0x20001d7c
 801a598:	20001d52 	.word	0x20001d52

0801a59c <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801a59c:	b480      	push	{r7}
 801a59e:	b085      	sub	sp, #20
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801a5a4:	2301      	movs	r3, #1
 801a5a6:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801a5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5aa:	4618      	mov	r0, r3
 801a5ac:	3714      	adds	r7, #20
 801a5ae:	46bd      	mov	sp, r7
 801a5b0:	bc80      	pop	{r7}
 801a5b2:	4770      	bx	lr

0801a5b4 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801a5b4:	b480      	push	{r7}
 801a5b6:	b083      	sub	sp, #12
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	6078      	str	r0, [r7, #4]
 801a5bc:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801a5be:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	370c      	adds	r7, #12
 801a5c4:	46bd      	mov	sp, r7
 801a5c6:	bc80      	pop	{r7}
 801a5c8:	4770      	bx	lr
	...

0801a5cc <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b084      	sub	sp, #16
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d002      	beq.n	801a5e0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801a5da:	4a1d      	ldr	r2, [pc, #116]	@ (801a650 <SUBGRF_Init+0x84>)
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801a5e0:	f7e7 fd42 	bl	8002068 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a5e4:	2002      	movs	r0, #2
 801a5e6:	f001 f8ff 	bl	801b7e8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801a5ea:	4b1a      	ldr	r3, [pc, #104]	@ (801a654 <SUBGRF_Init+0x88>)
 801a5ec:	2200      	movs	r2, #0
 801a5ee:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801a5f0:	2000      	movs	r0, #0
 801a5f2:	f000 f97d 	bl	801a8f0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801a5f6:	f7f1 fc4e 	bl	800be96 <RBI_IsTCXO>
 801a5fa:	4603      	mov	r3, r0
 801a5fc:	2b01      	cmp	r3, #1
 801a5fe:	d10e      	bne.n	801a61e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801a600:	2140      	movs	r1, #64	@ 0x40
 801a602:	2001      	movs	r0, #1
 801a604:	f000 fb82 	bl	801ad0c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801a608:	2100      	movs	r1, #0
 801a60a:	f640 1011 	movw	r0, #2321	@ 0x911
 801a60e:	f000 fef3 	bl	801b3f8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801a612:	237f      	movs	r3, #127	@ 0x7f
 801a614:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801a616:	7b38      	ldrb	r0, [r7, #12]
 801a618:	f000 fa8b 	bl	801ab32 <SUBGRF_Calibrate>
 801a61c:	e009      	b.n	801a632 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a61e:	2120      	movs	r1, #32
 801a620:	f640 1011 	movw	r0, #2321	@ 0x911
 801a624:	f000 fee8 	bl	801b3f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a628:	2120      	movs	r1, #32
 801a62a:	f640 1012 	movw	r0, #2322	@ 0x912
 801a62e:	f000 fee3 	bl	801b3f8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a632:	210e      	movs	r1, #14
 801a634:	f640 101f 	movw	r0, #2335	@ 0x91f
 801a638:	f000 fede 	bl	801b3f8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801a63c:	f7f1 fb94 	bl	800bd68 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801a640:	4b05      	ldr	r3, [pc, #20]	@ (801a658 <SUBGRF_Init+0x8c>)
 801a642:	2201      	movs	r2, #1
 801a644:	701a      	strb	r2, [r3, #0]
}
 801a646:	bf00      	nop
 801a648:	3710      	adds	r7, #16
 801a64a:	46bd      	mov	sp, r7
 801a64c:	bd80      	pop	{r7, pc}
 801a64e:	bf00      	nop
 801a650:	20001ddc 	.word	0x20001ddc
 801a654:	20001dd8 	.word	0x20001dd8
 801a658:	20001dd0 	.word	0x20001dd0

0801a65c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801a65c:	b480      	push	{r7}
 801a65e:	af00      	add	r7, sp, #0
    return OperatingMode;
 801a660:	4b02      	ldr	r3, [pc, #8]	@ (801a66c <SUBGRF_GetOperatingMode+0x10>)
 801a662:	781b      	ldrb	r3, [r3, #0]
}
 801a664:	4618      	mov	r0, r3
 801a666:	46bd      	mov	sp, r7
 801a668:	bc80      	pop	{r7}
 801a66a:	4770      	bx	lr
 801a66c:	20001dd0 	.word	0x20001dd0

0801a670 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801a670:	b580      	push	{r7, lr}
 801a672:	b082      	sub	sp, #8
 801a674:	af00      	add	r7, sp, #0
 801a676:	6078      	str	r0, [r7, #4]
 801a678:	460b      	mov	r3, r1
 801a67a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801a67c:	78fb      	ldrb	r3, [r7, #3]
 801a67e:	461a      	mov	r2, r3
 801a680:	6879      	ldr	r1, [r7, #4]
 801a682:	2000      	movs	r0, #0
 801a684:	f000 ff24 	bl	801b4d0 <SUBGRF_WriteBuffer>
}
 801a688:	bf00      	nop
 801a68a:	3708      	adds	r7, #8
 801a68c:	46bd      	mov	sp, r7
 801a68e:	bd80      	pop	{r7, pc}

0801a690 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801a690:	b580      	push	{r7, lr}
 801a692:	b086      	sub	sp, #24
 801a694:	af00      	add	r7, sp, #0
 801a696:	60f8      	str	r0, [r7, #12]
 801a698:	60b9      	str	r1, [r7, #8]
 801a69a:	4613      	mov	r3, r2
 801a69c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801a69e:	2300      	movs	r3, #0
 801a6a0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801a6a2:	f107 0317 	add.w	r3, r7, #23
 801a6a6:	4619      	mov	r1, r3
 801a6a8:	68b8      	ldr	r0, [r7, #8]
 801a6aa:	f000 fe27 	bl	801b2fc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801a6ae:	68bb      	ldr	r3, [r7, #8]
 801a6b0:	781b      	ldrb	r3, [r3, #0]
 801a6b2:	79fa      	ldrb	r2, [r7, #7]
 801a6b4:	429a      	cmp	r2, r3
 801a6b6:	d201      	bcs.n	801a6bc <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801a6b8:	2301      	movs	r3, #1
 801a6ba:	e007      	b.n	801a6cc <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801a6bc:	7df8      	ldrb	r0, [r7, #23]
 801a6be:	68bb      	ldr	r3, [r7, #8]
 801a6c0:	781b      	ldrb	r3, [r3, #0]
 801a6c2:	461a      	mov	r2, r3
 801a6c4:	68f9      	ldr	r1, [r7, #12]
 801a6c6:	f000 ff25 	bl	801b514 <SUBGRF_ReadBuffer>

    return 0;
 801a6ca:	2300      	movs	r3, #0
}
 801a6cc:	4618      	mov	r0, r3
 801a6ce:	3718      	adds	r7, #24
 801a6d0:	46bd      	mov	sp, r7
 801a6d2:	bd80      	pop	{r7, pc}

0801a6d4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801a6d4:	b580      	push	{r7, lr}
 801a6d6:	b084      	sub	sp, #16
 801a6d8:	af00      	add	r7, sp, #0
 801a6da:	60f8      	str	r0, [r7, #12]
 801a6dc:	460b      	mov	r3, r1
 801a6de:	607a      	str	r2, [r7, #4]
 801a6e0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801a6e2:	7afb      	ldrb	r3, [r7, #11]
 801a6e4:	4619      	mov	r1, r3
 801a6e6:	68f8      	ldr	r0, [r7, #12]
 801a6e8:	f7ff ffc2 	bl	801a670 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801a6ec:	6878      	ldr	r0, [r7, #4]
 801a6ee:	f000 f91b 	bl	801a928 <SUBGRF_SetTx>
}
 801a6f2:	bf00      	nop
 801a6f4:	3710      	adds	r7, #16
 801a6f6:	46bd      	mov	sp, r7
 801a6f8:	bd80      	pop	{r7, pc}

0801a6fa <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801a6fa:	b580      	push	{r7, lr}
 801a6fc:	b082      	sub	sp, #8
 801a6fe:	af00      	add	r7, sp, #0
 801a700:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801a702:	2208      	movs	r2, #8
 801a704:	6879      	ldr	r1, [r7, #4]
 801a706:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801a70a:	f000 fe9d 	bl	801b448 <SUBGRF_WriteRegisters>
    return 0;
 801a70e:	2300      	movs	r3, #0
}
 801a710:	4618      	mov	r0, r3
 801a712:	3708      	adds	r7, #8
 801a714:	46bd      	mov	sp, r7
 801a716:	bd80      	pop	{r7, pc}

0801a718 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801a718:	b580      	push	{r7, lr}
 801a71a:	b084      	sub	sp, #16
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	4603      	mov	r3, r0
 801a720:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801a722:	88fb      	ldrh	r3, [r7, #6]
 801a724:	0a1b      	lsrs	r3, r3, #8
 801a726:	b29b      	uxth	r3, r3
 801a728:	b2db      	uxtb	r3, r3
 801a72a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801a72c:	88fb      	ldrh	r3, [r7, #6]
 801a72e:	b2db      	uxtb	r3, r3
 801a730:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a732:	f000 fb6f 	bl	801ae14 <SUBGRF_GetPacketType>
 801a736:	4603      	mov	r3, r0
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d108      	bne.n	801a74e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801a73c:	f107 030c 	add.w	r3, r7, #12
 801a740:	2202      	movs	r2, #2
 801a742:	4619      	mov	r1, r3
 801a744:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 801a748:	f000 fe7e 	bl	801b448 <SUBGRF_WriteRegisters>
            break;
 801a74c:	e000      	b.n	801a750 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801a74e:	bf00      	nop
    }
}
 801a750:	bf00      	nop
 801a752:	3710      	adds	r7, #16
 801a754:	46bd      	mov	sp, r7
 801a756:	bd80      	pop	{r7, pc}

0801a758 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801a758:	b580      	push	{r7, lr}
 801a75a:	b084      	sub	sp, #16
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	4603      	mov	r3, r0
 801a760:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801a762:	88fb      	ldrh	r3, [r7, #6]
 801a764:	0a1b      	lsrs	r3, r3, #8
 801a766:	b29b      	uxth	r3, r3
 801a768:	b2db      	uxtb	r3, r3
 801a76a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801a76c:	88fb      	ldrh	r3, [r7, #6]
 801a76e:	b2db      	uxtb	r3, r3
 801a770:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a772:	f000 fb4f 	bl	801ae14 <SUBGRF_GetPacketType>
 801a776:	4603      	mov	r3, r0
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d108      	bne.n	801a78e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801a77c:	f107 030c 	add.w	r3, r7, #12
 801a780:	2202      	movs	r2, #2
 801a782:	4619      	mov	r1, r3
 801a784:	f240 60be 	movw	r0, #1726	@ 0x6be
 801a788:	f000 fe5e 	bl	801b448 <SUBGRF_WriteRegisters>
            break;
 801a78c:	e000      	b.n	801a790 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801a78e:	bf00      	nop
    }
}
 801a790:	bf00      	nop
 801a792:	3710      	adds	r7, #16
 801a794:	46bd      	mov	sp, r7
 801a796:	bd80      	pop	{r7, pc}

0801a798 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801a798:	b580      	push	{r7, lr}
 801a79a:	b084      	sub	sp, #16
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	4603      	mov	r3, r0
 801a7a0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801a7a2:	2300      	movs	r3, #0
 801a7a4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801a7a6:	f000 fb35 	bl	801ae14 <SUBGRF_GetPacketType>
 801a7aa:	4603      	mov	r3, r0
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d121      	bne.n	801a7f4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801a7b0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a7b4:	f000 fe34 	bl	801b420 <SUBGRF_ReadRegister>
 801a7b8:	4603      	mov	r3, r0
 801a7ba:	f023 0301 	bic.w	r3, r3, #1
 801a7be:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801a7c0:	88fb      	ldrh	r3, [r7, #6]
 801a7c2:	0a1b      	lsrs	r3, r3, #8
 801a7c4:	b29b      	uxth	r3, r3
 801a7c6:	b25b      	sxtb	r3, r3
 801a7c8:	f003 0301 	and.w	r3, r3, #1
 801a7cc:	b25a      	sxtb	r2, r3
 801a7ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a7d2:	4313      	orrs	r3, r2
 801a7d4:	b25b      	sxtb	r3, r3
 801a7d6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801a7d8:	7bfb      	ldrb	r3, [r7, #15]
 801a7da:	4619      	mov	r1, r3
 801a7dc:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a7e0:	f000 fe0a 	bl	801b3f8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801a7e4:	88fb      	ldrh	r3, [r7, #6]
 801a7e6:	b2db      	uxtb	r3, r3
 801a7e8:	4619      	mov	r1, r3
 801a7ea:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801a7ee:	f000 fe03 	bl	801b3f8 <SUBGRF_WriteRegister>
            break;
 801a7f2:	e000      	b.n	801a7f6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801a7f4:	bf00      	nop
    }
}
 801a7f6:	bf00      	nop
 801a7f8:	3710      	adds	r7, #16
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	bd80      	pop	{r7, pc}

0801a7fe <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801a7fe:	b580      	push	{r7, lr}
 801a800:	b082      	sub	sp, #8
 801a802:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801a804:	2300      	movs	r3, #0
 801a806:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801a808:	2300      	movs	r3, #0
 801a80a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801a80c:	2300      	movs	r3, #0
 801a80e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801a810:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a814:	f000 fe04 	bl	801b420 <SUBGRF_ReadRegister>
 801a818:	4603      	mov	r3, r0
 801a81a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801a81c:	79fb      	ldrb	r3, [r7, #7]
 801a81e:	f023 0301 	bic.w	r3, r3, #1
 801a822:	b2db      	uxtb	r3, r3
 801a824:	4619      	mov	r1, r3
 801a826:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a82a:	f000 fde5 	bl	801b3f8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801a82e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a832:	f000 fdf5 	bl	801b420 <SUBGRF_ReadRegister>
 801a836:	4603      	mov	r3, r0
 801a838:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801a83a:	79bb      	ldrb	r3, [r7, #6]
 801a83c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a840:	b2db      	uxtb	r3, r3
 801a842:	4619      	mov	r1, r3
 801a844:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a848:	f000 fdd6 	bl	801b3f8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a84c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801a850:	f000 f88a 	bl	801a968 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801a854:	463b      	mov	r3, r7
 801a856:	2204      	movs	r2, #4
 801a858:	4619      	mov	r1, r3
 801a85a:	f640 0019 	movw	r0, #2073	@ 0x819
 801a85e:	f000 fe15 	bl	801b48c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801a862:	2000      	movs	r0, #0
 801a864:	f000 f844 	bl	801a8f0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801a868:	79fb      	ldrb	r3, [r7, #7]
 801a86a:	4619      	mov	r1, r3
 801a86c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801a870:	f000 fdc2 	bl	801b3f8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801a874:	79bb      	ldrb	r3, [r7, #6]
 801a876:	4619      	mov	r1, r3
 801a878:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a87c:	f000 fdbc 	bl	801b3f8 <SUBGRF_WriteRegister>

    return number;
 801a880:	683b      	ldr	r3, [r7, #0]
}
 801a882:	4618      	mov	r0, r3
 801a884:	3708      	adds	r7, #8
 801a886:	46bd      	mov	sp, r7
 801a888:	bd80      	pop	{r7, pc}
	...

0801a88c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801a88c:	b580      	push	{r7, lr}
 801a88e:	b084      	sub	sp, #16
 801a890:	af00      	add	r7, sp, #0
 801a892:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801a894:	2000      	movs	r0, #0
 801a896:	f7f1 fa9f 	bl	800bdd8 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a89a:	2002      	movs	r0, #2
 801a89c:	f000 ffa4 	bl	801b7e8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a8a0:	793b      	ldrb	r3, [r7, #4]
 801a8a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a8a6:	b2db      	uxtb	r3, r3
 801a8a8:	009b      	lsls	r3, r3, #2
 801a8aa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a8ac:	793b      	ldrb	r3, [r7, #4]
 801a8ae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a8b2:	b2db      	uxtb	r3, r3
 801a8b4:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a8b6:	b25b      	sxtb	r3, r3
 801a8b8:	4313      	orrs	r3, r2
 801a8ba:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801a8bc:	793b      	ldrb	r3, [r7, #4]
 801a8be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a8c2:	b2db      	uxtb	r3, r3
 801a8c4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a8c6:	4313      	orrs	r3, r2
 801a8c8:	b25b      	sxtb	r3, r3
 801a8ca:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a8cc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801a8ce:	f107 030f 	add.w	r3, r7, #15
 801a8d2:	2201      	movs	r2, #1
 801a8d4:	4619      	mov	r1, r3
 801a8d6:	2084      	movs	r0, #132	@ 0x84
 801a8d8:	f000 fe3e 	bl	801b558 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801a8dc:	4b03      	ldr	r3, [pc, #12]	@ (801a8ec <SUBGRF_SetSleep+0x60>)
 801a8de:	2200      	movs	r2, #0
 801a8e0:	701a      	strb	r2, [r3, #0]
}
 801a8e2:	bf00      	nop
 801a8e4:	3710      	adds	r7, #16
 801a8e6:	46bd      	mov	sp, r7
 801a8e8:	bd80      	pop	{r7, pc}
 801a8ea:	bf00      	nop
 801a8ec:	20001dd0 	.word	0x20001dd0

0801a8f0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801a8f0:	b580      	push	{r7, lr}
 801a8f2:	b082      	sub	sp, #8
 801a8f4:	af00      	add	r7, sp, #0
 801a8f6:	4603      	mov	r3, r0
 801a8f8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801a8fa:	1dfb      	adds	r3, r7, #7
 801a8fc:	2201      	movs	r2, #1
 801a8fe:	4619      	mov	r1, r3
 801a900:	2080      	movs	r0, #128	@ 0x80
 801a902:	f000 fe29 	bl	801b558 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801a906:	79fb      	ldrb	r3, [r7, #7]
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d103      	bne.n	801a914 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801a90c:	4b05      	ldr	r3, [pc, #20]	@ (801a924 <SUBGRF_SetStandby+0x34>)
 801a90e:	2201      	movs	r2, #1
 801a910:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801a912:	e002      	b.n	801a91a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801a914:	4b03      	ldr	r3, [pc, #12]	@ (801a924 <SUBGRF_SetStandby+0x34>)
 801a916:	2202      	movs	r2, #2
 801a918:	701a      	strb	r2, [r3, #0]
}
 801a91a:	bf00      	nop
 801a91c:	3708      	adds	r7, #8
 801a91e:	46bd      	mov	sp, r7
 801a920:	bd80      	pop	{r7, pc}
 801a922:	bf00      	nop
 801a924:	20001dd0 	.word	0x20001dd0

0801a928 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801a928:	b580      	push	{r7, lr}
 801a92a:	b084      	sub	sp, #16
 801a92c:	af00      	add	r7, sp, #0
 801a92e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801a930:	4b0c      	ldr	r3, [pc, #48]	@ (801a964 <SUBGRF_SetTx+0x3c>)
 801a932:	2204      	movs	r2, #4
 801a934:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	0c1b      	lsrs	r3, r3, #16
 801a93a:	b2db      	uxtb	r3, r3
 801a93c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	0a1b      	lsrs	r3, r3, #8
 801a942:	b2db      	uxtb	r3, r3
 801a944:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	b2db      	uxtb	r3, r3
 801a94a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801a94c:	f107 030c 	add.w	r3, r7, #12
 801a950:	2203      	movs	r2, #3
 801a952:	4619      	mov	r1, r3
 801a954:	2083      	movs	r0, #131	@ 0x83
 801a956:	f000 fdff 	bl	801b558 <SUBGRF_WriteCommand>
}
 801a95a:	bf00      	nop
 801a95c:	3710      	adds	r7, #16
 801a95e:	46bd      	mov	sp, r7
 801a960:	bd80      	pop	{r7, pc}
 801a962:	bf00      	nop
 801a964:	20001dd0 	.word	0x20001dd0

0801a968 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801a968:	b580      	push	{r7, lr}
 801a96a:	b084      	sub	sp, #16
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a970:	4b0c      	ldr	r3, [pc, #48]	@ (801a9a4 <SUBGRF_SetRx+0x3c>)
 801a972:	2205      	movs	r2, #5
 801a974:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	0c1b      	lsrs	r3, r3, #16
 801a97a:	b2db      	uxtb	r3, r3
 801a97c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	0a1b      	lsrs	r3, r3, #8
 801a982:	b2db      	uxtb	r3, r3
 801a984:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	b2db      	uxtb	r3, r3
 801a98a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a98c:	f107 030c 	add.w	r3, r7, #12
 801a990:	2203      	movs	r2, #3
 801a992:	4619      	mov	r1, r3
 801a994:	2082      	movs	r0, #130	@ 0x82
 801a996:	f000 fddf 	bl	801b558 <SUBGRF_WriteCommand>
}
 801a99a:	bf00      	nop
 801a99c:	3710      	adds	r7, #16
 801a99e:	46bd      	mov	sp, r7
 801a9a0:	bd80      	pop	{r7, pc}
 801a9a2:	bf00      	nop
 801a9a4:	20001dd0 	.word	0x20001dd0

0801a9a8 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801a9a8:	b580      	push	{r7, lr}
 801a9aa:	b084      	sub	sp, #16
 801a9ac:	af00      	add	r7, sp, #0
 801a9ae:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a9b0:	4b0e      	ldr	r3, [pc, #56]	@ (801a9ec <SUBGRF_SetRxBoosted+0x44>)
 801a9b2:	2205      	movs	r2, #5
 801a9b4:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801a9b6:	2197      	movs	r1, #151	@ 0x97
 801a9b8:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 801a9bc:	f000 fd1c 	bl	801b3f8 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	0c1b      	lsrs	r3, r3, #16
 801a9c4:	b2db      	uxtb	r3, r3
 801a9c6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	0a1b      	lsrs	r3, r3, #8
 801a9cc:	b2db      	uxtb	r3, r3
 801a9ce:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	b2db      	uxtb	r3, r3
 801a9d4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a9d6:	f107 030c 	add.w	r3, r7, #12
 801a9da:	2203      	movs	r2, #3
 801a9dc:	4619      	mov	r1, r3
 801a9de:	2082      	movs	r0, #130	@ 0x82
 801a9e0:	f000 fdba 	bl	801b558 <SUBGRF_WriteCommand>
}
 801a9e4:	bf00      	nop
 801a9e6:	3710      	adds	r7, #16
 801a9e8:	46bd      	mov	sp, r7
 801a9ea:	bd80      	pop	{r7, pc}
 801a9ec:	20001dd0 	.word	0x20001dd0

0801a9f0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a9f0:	b580      	push	{r7, lr}
 801a9f2:	b084      	sub	sp, #16
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	6078      	str	r0, [r7, #4]
 801a9f8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	0c1b      	lsrs	r3, r3, #16
 801a9fe:	b2db      	uxtb	r3, r3
 801aa00:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	0a1b      	lsrs	r3, r3, #8
 801aa06:	b2db      	uxtb	r3, r3
 801aa08:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	b2db      	uxtb	r3, r3
 801aa0e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801aa10:	683b      	ldr	r3, [r7, #0]
 801aa12:	0c1b      	lsrs	r3, r3, #16
 801aa14:	b2db      	uxtb	r3, r3
 801aa16:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801aa18:	683b      	ldr	r3, [r7, #0]
 801aa1a:	0a1b      	lsrs	r3, r3, #8
 801aa1c:	b2db      	uxtb	r3, r3
 801aa1e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801aa20:	683b      	ldr	r3, [r7, #0]
 801aa22:	b2db      	uxtb	r3, r3
 801aa24:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801aa26:	f107 0308 	add.w	r3, r7, #8
 801aa2a:	2206      	movs	r2, #6
 801aa2c:	4619      	mov	r1, r3
 801aa2e:	2094      	movs	r0, #148	@ 0x94
 801aa30:	f000 fd92 	bl	801b558 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801aa34:	4b03      	ldr	r3, [pc, #12]	@ (801aa44 <SUBGRF_SetRxDutyCycle+0x54>)
 801aa36:	2206      	movs	r2, #6
 801aa38:	701a      	strb	r2, [r3, #0]
}
 801aa3a:	bf00      	nop
 801aa3c:	3710      	adds	r7, #16
 801aa3e:	46bd      	mov	sp, r7
 801aa40:	bd80      	pop	{r7, pc}
 801aa42:	bf00      	nop
 801aa44:	20001dd0 	.word	0x20001dd0

0801aa48 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801aa48:	b580      	push	{r7, lr}
 801aa4a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801aa4c:	2200      	movs	r2, #0
 801aa4e:	2100      	movs	r1, #0
 801aa50:	20c5      	movs	r0, #197	@ 0xc5
 801aa52:	f000 fd81 	bl	801b558 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801aa56:	4b02      	ldr	r3, [pc, #8]	@ (801aa60 <SUBGRF_SetCad+0x18>)
 801aa58:	2207      	movs	r2, #7
 801aa5a:	701a      	strb	r2, [r3, #0]
}
 801aa5c:	bf00      	nop
 801aa5e:	bd80      	pop	{r7, pc}
 801aa60:	20001dd0 	.word	0x20001dd0

0801aa64 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801aa64:	b580      	push	{r7, lr}
 801aa66:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801aa68:	2200      	movs	r2, #0
 801aa6a:	2100      	movs	r1, #0
 801aa6c:	20d1      	movs	r0, #209	@ 0xd1
 801aa6e:	f000 fd73 	bl	801b558 <SUBGRF_WriteCommand>
}
 801aa72:	bf00      	nop
 801aa74:	bd80      	pop	{r7, pc}

0801aa76 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801aa76:	b580      	push	{r7, lr}
 801aa78:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801aa7a:	2200      	movs	r2, #0
 801aa7c:	2100      	movs	r1, #0
 801aa7e:	20d2      	movs	r0, #210	@ 0xd2
 801aa80:	f000 fd6a 	bl	801b558 <SUBGRF_WriteCommand>
}
 801aa84:	bf00      	nop
 801aa86:	bd80      	pop	{r7, pc}

0801aa88 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801aa88:	b580      	push	{r7, lr}
 801aa8a:	b082      	sub	sp, #8
 801aa8c:	af00      	add	r7, sp, #0
 801aa8e:	4603      	mov	r3, r0
 801aa90:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801aa92:	1dfb      	adds	r3, r7, #7
 801aa94:	2201      	movs	r2, #1
 801aa96:	4619      	mov	r1, r3
 801aa98:	209f      	movs	r0, #159	@ 0x9f
 801aa9a:	f000 fd5d 	bl	801b558 <SUBGRF_WriteCommand>
}
 801aa9e:	bf00      	nop
 801aaa0:	3708      	adds	r7, #8
 801aaa2:	46bd      	mov	sp, r7
 801aaa4:	bd80      	pop	{r7, pc}

0801aaa6 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801aaa6:	b580      	push	{r7, lr}
 801aaa8:	b084      	sub	sp, #16
 801aaaa:	af00      	add	r7, sp, #0
 801aaac:	4603      	mov	r3, r0
 801aaae:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801aab0:	1dfb      	adds	r3, r7, #7
 801aab2:	2201      	movs	r2, #1
 801aab4:	4619      	mov	r1, r3
 801aab6:	20a0      	movs	r0, #160	@ 0xa0
 801aab8:	f000 fd4e 	bl	801b558 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801aabc:	79fb      	ldrb	r3, [r7, #7]
 801aabe:	2b3f      	cmp	r3, #63	@ 0x3f
 801aac0:	d91c      	bls.n	801aafc <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801aac2:	79fb      	ldrb	r3, [r7, #7]
 801aac4:	085b      	lsrs	r3, r3, #1
 801aac6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801aac8:	2300      	movs	r3, #0
 801aaca:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801aacc:	2300      	movs	r3, #0
 801aace:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801aad0:	e005      	b.n	801aade <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801aad2:	7bfb      	ldrb	r3, [r7, #15]
 801aad4:	089b      	lsrs	r3, r3, #2
 801aad6:	73fb      	strb	r3, [r7, #15]
            exp++;
 801aad8:	7bbb      	ldrb	r3, [r7, #14]
 801aada:	3301      	adds	r3, #1
 801aadc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801aade:	7bfb      	ldrb	r3, [r7, #15]
 801aae0:	2b1f      	cmp	r3, #31
 801aae2:	d8f6      	bhi.n	801aad2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801aae4:	7bfb      	ldrb	r3, [r7, #15]
 801aae6:	00db      	lsls	r3, r3, #3
 801aae8:	b2da      	uxtb	r2, r3
 801aaea:	7bbb      	ldrb	r3, [r7, #14]
 801aaec:	4413      	add	r3, r2
 801aaee:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801aaf0:	7b7b      	ldrb	r3, [r7, #13]
 801aaf2:	4619      	mov	r1, r3
 801aaf4:	f240 7006 	movw	r0, #1798	@ 0x706
 801aaf8:	f000 fc7e 	bl	801b3f8 <SUBGRF_WriteRegister>
    }
}
 801aafc:	bf00      	nop
 801aafe:	3710      	adds	r7, #16
 801ab00:	46bd      	mov	sp, r7
 801ab02:	bd80      	pop	{r7, pc}

0801ab04 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801ab04:	b580      	push	{r7, lr}
 801ab06:	b082      	sub	sp, #8
 801ab08:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801ab0a:	f7f1 f9cf 	bl	800beac <RBI_IsDCDC>
 801ab0e:	4603      	mov	r3, r0
 801ab10:	2b01      	cmp	r3, #1
 801ab12:	d102      	bne.n	801ab1a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801ab14:	2301      	movs	r3, #1
 801ab16:	71fb      	strb	r3, [r7, #7]
 801ab18:	e001      	b.n	801ab1e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801ab1a:	2300      	movs	r3, #0
 801ab1c:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801ab1e:	1dfb      	adds	r3, r7, #7
 801ab20:	2201      	movs	r2, #1
 801ab22:	4619      	mov	r1, r3
 801ab24:	2096      	movs	r0, #150	@ 0x96
 801ab26:	f000 fd17 	bl	801b558 <SUBGRF_WriteCommand>
}
 801ab2a:	bf00      	nop
 801ab2c:	3708      	adds	r7, #8
 801ab2e:	46bd      	mov	sp, r7
 801ab30:	bd80      	pop	{r7, pc}

0801ab32 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801ab32:	b580      	push	{r7, lr}
 801ab34:	b084      	sub	sp, #16
 801ab36:	af00      	add	r7, sp, #0
 801ab38:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ab3a:	793b      	ldrb	r3, [r7, #4]
 801ab3c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801ab40:	b2db      	uxtb	r3, r3
 801ab42:	019b      	lsls	r3, r3, #6
 801ab44:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801ab46:	793b      	ldrb	r3, [r7, #4]
 801ab48:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801ab4c:	b2db      	uxtb	r3, r3
 801ab4e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ab50:	b25b      	sxtb	r3, r3
 801ab52:	4313      	orrs	r3, r2
 801ab54:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801ab56:	793b      	ldrb	r3, [r7, #4]
 801ab58:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801ab5c:	b2db      	uxtb	r3, r3
 801ab5e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801ab60:	b25b      	sxtb	r3, r3
 801ab62:	4313      	orrs	r3, r2
 801ab64:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801ab66:	793b      	ldrb	r3, [r7, #4]
 801ab68:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801ab6c:	b2db      	uxtb	r3, r3
 801ab6e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801ab70:	b25b      	sxtb	r3, r3
 801ab72:	4313      	orrs	r3, r2
 801ab74:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801ab76:	793b      	ldrb	r3, [r7, #4]
 801ab78:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801ab7c:	b2db      	uxtb	r3, r3
 801ab7e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801ab80:	b25b      	sxtb	r3, r3
 801ab82:	4313      	orrs	r3, r2
 801ab84:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801ab86:	793b      	ldrb	r3, [r7, #4]
 801ab88:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801ab8c:	b2db      	uxtb	r3, r3
 801ab8e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801ab90:	b25b      	sxtb	r3, r3
 801ab92:	4313      	orrs	r3, r2
 801ab94:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801ab96:	793b      	ldrb	r3, [r7, #4]
 801ab98:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801ab9c:	b2db      	uxtb	r3, r3
 801ab9e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801aba0:	4313      	orrs	r3, r2
 801aba2:	b25b      	sxtb	r3, r3
 801aba4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801aba6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801aba8:	f107 030f 	add.w	r3, r7, #15
 801abac:	2201      	movs	r2, #1
 801abae:	4619      	mov	r1, r3
 801abb0:	2089      	movs	r0, #137	@ 0x89
 801abb2:	f000 fcd1 	bl	801b558 <SUBGRF_WriteCommand>
}
 801abb6:	bf00      	nop
 801abb8:	3710      	adds	r7, #16
 801abba:	46bd      	mov	sp, r7
 801abbc:	bd80      	pop	{r7, pc}
	...

0801abc0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b084      	sub	sp, #16
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	4a1d      	ldr	r2, [pc, #116]	@ (801ac40 <SUBGRF_CalibrateImage+0x80>)
 801abcc:	4293      	cmp	r3, r2
 801abce:	d904      	bls.n	801abda <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801abd0:	23e1      	movs	r3, #225	@ 0xe1
 801abd2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801abd4:	23e9      	movs	r3, #233	@ 0xe9
 801abd6:	737b      	strb	r3, [r7, #13]
 801abd8:	e027      	b.n	801ac2a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	4a19      	ldr	r2, [pc, #100]	@ (801ac44 <SUBGRF_CalibrateImage+0x84>)
 801abde:	4293      	cmp	r3, r2
 801abe0:	d904      	bls.n	801abec <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801abe2:	23d7      	movs	r3, #215	@ 0xd7
 801abe4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801abe6:	23db      	movs	r3, #219	@ 0xdb
 801abe8:	737b      	strb	r3, [r7, #13]
 801abea:	e01e      	b.n	801ac2a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	4a16      	ldr	r2, [pc, #88]	@ (801ac48 <SUBGRF_CalibrateImage+0x88>)
 801abf0:	4293      	cmp	r3, r2
 801abf2:	d904      	bls.n	801abfe <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801abf4:	23c1      	movs	r3, #193	@ 0xc1
 801abf6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801abf8:	23c5      	movs	r3, #197	@ 0xc5
 801abfa:	737b      	strb	r3, [r7, #13]
 801abfc:	e015      	b.n	801ac2a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	4a12      	ldr	r2, [pc, #72]	@ (801ac4c <SUBGRF_CalibrateImage+0x8c>)
 801ac02:	4293      	cmp	r3, r2
 801ac04:	d904      	bls.n	801ac10 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801ac06:	2375      	movs	r3, #117	@ 0x75
 801ac08:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801ac0a:	2381      	movs	r3, #129	@ 0x81
 801ac0c:	737b      	strb	r3, [r7, #13]
 801ac0e:	e00c      	b.n	801ac2a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	4a0f      	ldr	r2, [pc, #60]	@ (801ac50 <SUBGRF_CalibrateImage+0x90>)
 801ac14:	4293      	cmp	r3, r2
 801ac16:	d904      	bls.n	801ac22 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801ac18:	236b      	movs	r3, #107	@ 0x6b
 801ac1a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801ac1c:	236f      	movs	r3, #111	@ 0x6f
 801ac1e:	737b      	strb	r3, [r7, #13]
 801ac20:	e003      	b.n	801ac2a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801ac22:	2329      	movs	r3, #41	@ 0x29
 801ac24:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801ac26:	232b      	movs	r3, #43	@ 0x2b
 801ac28:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801ac2a:	f107 030c 	add.w	r3, r7, #12
 801ac2e:	2202      	movs	r2, #2
 801ac30:	4619      	mov	r1, r3
 801ac32:	2098      	movs	r0, #152	@ 0x98
 801ac34:	f000 fc90 	bl	801b558 <SUBGRF_WriteCommand>
}
 801ac38:	bf00      	nop
 801ac3a:	3710      	adds	r7, #16
 801ac3c:	46bd      	mov	sp, r7
 801ac3e:	bd80      	pop	{r7, pc}
 801ac40:	35a4e900 	.word	0x35a4e900
 801ac44:	32a9f880 	.word	0x32a9f880
 801ac48:	2de54480 	.word	0x2de54480
 801ac4c:	1b6b0b00 	.word	0x1b6b0b00
 801ac50:	1954fc40 	.word	0x1954fc40

0801ac54 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801ac54:	b590      	push	{r4, r7, lr}
 801ac56:	b085      	sub	sp, #20
 801ac58:	af00      	add	r7, sp, #0
 801ac5a:	4604      	mov	r4, r0
 801ac5c:	4608      	mov	r0, r1
 801ac5e:	4611      	mov	r1, r2
 801ac60:	461a      	mov	r2, r3
 801ac62:	4623      	mov	r3, r4
 801ac64:	71fb      	strb	r3, [r7, #7]
 801ac66:	4603      	mov	r3, r0
 801ac68:	71bb      	strb	r3, [r7, #6]
 801ac6a:	460b      	mov	r3, r1
 801ac6c:	717b      	strb	r3, [r7, #5]
 801ac6e:	4613      	mov	r3, r2
 801ac70:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801ac72:	79fb      	ldrb	r3, [r7, #7]
 801ac74:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801ac76:	79bb      	ldrb	r3, [r7, #6]
 801ac78:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801ac7a:	797b      	ldrb	r3, [r7, #5]
 801ac7c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801ac7e:	793b      	ldrb	r3, [r7, #4]
 801ac80:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801ac82:	f107 030c 	add.w	r3, r7, #12
 801ac86:	2204      	movs	r2, #4
 801ac88:	4619      	mov	r1, r3
 801ac8a:	2095      	movs	r0, #149	@ 0x95
 801ac8c:	f000 fc64 	bl	801b558 <SUBGRF_WriteCommand>
}
 801ac90:	bf00      	nop
 801ac92:	3714      	adds	r7, #20
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd90      	pop	{r4, r7, pc}

0801ac98 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801ac98:	b590      	push	{r4, r7, lr}
 801ac9a:	b085      	sub	sp, #20
 801ac9c:	af00      	add	r7, sp, #0
 801ac9e:	4604      	mov	r4, r0
 801aca0:	4608      	mov	r0, r1
 801aca2:	4611      	mov	r1, r2
 801aca4:	461a      	mov	r2, r3
 801aca6:	4623      	mov	r3, r4
 801aca8:	80fb      	strh	r3, [r7, #6]
 801acaa:	4603      	mov	r3, r0
 801acac:	80bb      	strh	r3, [r7, #4]
 801acae:	460b      	mov	r3, r1
 801acb0:	807b      	strh	r3, [r7, #2]
 801acb2:	4613      	mov	r3, r2
 801acb4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801acb6:	88fb      	ldrh	r3, [r7, #6]
 801acb8:	0a1b      	lsrs	r3, r3, #8
 801acba:	b29b      	uxth	r3, r3
 801acbc:	b2db      	uxtb	r3, r3
 801acbe:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801acc0:	88fb      	ldrh	r3, [r7, #6]
 801acc2:	b2db      	uxtb	r3, r3
 801acc4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801acc6:	88bb      	ldrh	r3, [r7, #4]
 801acc8:	0a1b      	lsrs	r3, r3, #8
 801acca:	b29b      	uxth	r3, r3
 801accc:	b2db      	uxtb	r3, r3
 801acce:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801acd0:	88bb      	ldrh	r3, [r7, #4]
 801acd2:	b2db      	uxtb	r3, r3
 801acd4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801acd6:	887b      	ldrh	r3, [r7, #2]
 801acd8:	0a1b      	lsrs	r3, r3, #8
 801acda:	b29b      	uxth	r3, r3
 801acdc:	b2db      	uxtb	r3, r3
 801acde:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801ace0:	887b      	ldrh	r3, [r7, #2]
 801ace2:	b2db      	uxtb	r3, r3
 801ace4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801ace6:	883b      	ldrh	r3, [r7, #0]
 801ace8:	0a1b      	lsrs	r3, r3, #8
 801acea:	b29b      	uxth	r3, r3
 801acec:	b2db      	uxtb	r3, r3
 801acee:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801acf0:	883b      	ldrh	r3, [r7, #0]
 801acf2:	b2db      	uxtb	r3, r3
 801acf4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801acf6:	f107 0308 	add.w	r3, r7, #8
 801acfa:	2208      	movs	r2, #8
 801acfc:	4619      	mov	r1, r3
 801acfe:	2008      	movs	r0, #8
 801ad00:	f000 fc2a 	bl	801b558 <SUBGRF_WriteCommand>
}
 801ad04:	bf00      	nop
 801ad06:	3714      	adds	r7, #20
 801ad08:	46bd      	mov	sp, r7
 801ad0a:	bd90      	pop	{r4, r7, pc}

0801ad0c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801ad0c:	b580      	push	{r7, lr}
 801ad0e:	b084      	sub	sp, #16
 801ad10:	af00      	add	r7, sp, #0
 801ad12:	4603      	mov	r3, r0
 801ad14:	6039      	str	r1, [r7, #0]
 801ad16:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801ad18:	79fb      	ldrb	r3, [r7, #7]
 801ad1a:	f003 0307 	and.w	r3, r3, #7
 801ad1e:	b2db      	uxtb	r3, r3
 801ad20:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801ad22:	683b      	ldr	r3, [r7, #0]
 801ad24:	0c1b      	lsrs	r3, r3, #16
 801ad26:	b2db      	uxtb	r3, r3
 801ad28:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801ad2a:	683b      	ldr	r3, [r7, #0]
 801ad2c:	0a1b      	lsrs	r3, r3, #8
 801ad2e:	b2db      	uxtb	r3, r3
 801ad30:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801ad32:	683b      	ldr	r3, [r7, #0]
 801ad34:	b2db      	uxtb	r3, r3
 801ad36:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801ad38:	f107 030c 	add.w	r3, r7, #12
 801ad3c:	2204      	movs	r2, #4
 801ad3e:	4619      	mov	r1, r3
 801ad40:	2097      	movs	r0, #151	@ 0x97
 801ad42:	f000 fc09 	bl	801b558 <SUBGRF_WriteCommand>
}
 801ad46:	bf00      	nop
 801ad48:	3710      	adds	r7, #16
 801ad4a:	46bd      	mov	sp, r7
 801ad4c:	bd80      	pop	{r7, pc}
	...

0801ad50 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801ad50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801ad54:	b084      	sub	sp, #16
 801ad56:	af00      	add	r7, sp, #0
 801ad58:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801ad5a:	2300      	movs	r3, #0
 801ad5c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801ad5e:	4b1d      	ldr	r3, [pc, #116]	@ (801add4 <SUBGRF_SetRfFrequency+0x84>)
 801ad60:	781b      	ldrb	r3, [r3, #0]
 801ad62:	f083 0301 	eor.w	r3, r3, #1
 801ad66:	b2db      	uxtb	r3, r3
 801ad68:	2b00      	cmp	r3, #0
 801ad6a:	d005      	beq.n	801ad78 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801ad6c:	6878      	ldr	r0, [r7, #4]
 801ad6e:	f7ff ff27 	bl	801abc0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801ad72:	4b18      	ldr	r3, [pc, #96]	@ (801add4 <SUBGRF_SetRfFrequency+0x84>)
 801ad74:	2201      	movs	r2, #1
 801ad76:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	2200      	movs	r2, #0
 801ad7c:	461c      	mov	r4, r3
 801ad7e:	4615      	mov	r5, r2
 801ad80:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801ad84:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801ad88:	4a13      	ldr	r2, [pc, #76]	@ (801add8 <SUBGRF_SetRfFrequency+0x88>)
 801ad8a:	f04f 0300 	mov.w	r3, #0
 801ad8e:	4640      	mov	r0, r8
 801ad90:	4649      	mov	r1, r9
 801ad92:	f7e5 fe6d 	bl	8000a70 <__aeabi_uldivmod>
 801ad96:	4602      	mov	r2, r0
 801ad98:	460b      	mov	r3, r1
 801ad9a:	4613      	mov	r3, r2
 801ad9c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801ad9e:	68fb      	ldr	r3, [r7, #12]
 801ada0:	0e1b      	lsrs	r3, r3, #24
 801ada2:	b2db      	uxtb	r3, r3
 801ada4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801ada6:	68fb      	ldr	r3, [r7, #12]
 801ada8:	0c1b      	lsrs	r3, r3, #16
 801adaa:	b2db      	uxtb	r3, r3
 801adac:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	0a1b      	lsrs	r3, r3, #8
 801adb2:	b2db      	uxtb	r3, r3
 801adb4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801adb6:	68fb      	ldr	r3, [r7, #12]
 801adb8:	b2db      	uxtb	r3, r3
 801adba:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801adbc:	f107 0308 	add.w	r3, r7, #8
 801adc0:	2204      	movs	r2, #4
 801adc2:	4619      	mov	r1, r3
 801adc4:	2086      	movs	r0, #134	@ 0x86
 801adc6:	f000 fbc7 	bl	801b558 <SUBGRF_WriteCommand>
}
 801adca:	bf00      	nop
 801adcc:	3710      	adds	r7, #16
 801adce:	46bd      	mov	sp, r7
 801add0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801add4:	20001dd8 	.word	0x20001dd8
 801add8:	01e84800 	.word	0x01e84800

0801addc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801addc:	b580      	push	{r7, lr}
 801adde:	b082      	sub	sp, #8
 801ade0:	af00      	add	r7, sp, #0
 801ade2:	4603      	mov	r3, r0
 801ade4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801ade6:	79fa      	ldrb	r2, [r7, #7]
 801ade8:	4b09      	ldr	r3, [pc, #36]	@ (801ae10 <SUBGRF_SetPacketType+0x34>)
 801adea:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801adec:	79fb      	ldrb	r3, [r7, #7]
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d104      	bne.n	801adfc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801adf2:	2100      	movs	r1, #0
 801adf4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801adf8:	f000 fafe 	bl	801b3f8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801adfc:	1dfb      	adds	r3, r7, #7
 801adfe:	2201      	movs	r2, #1
 801ae00:	4619      	mov	r1, r3
 801ae02:	208a      	movs	r0, #138	@ 0x8a
 801ae04:	f000 fba8 	bl	801b558 <SUBGRF_WriteCommand>
}
 801ae08:	bf00      	nop
 801ae0a:	3708      	adds	r7, #8
 801ae0c:	46bd      	mov	sp, r7
 801ae0e:	bd80      	pop	{r7, pc}
 801ae10:	20001dd1 	.word	0x20001dd1

0801ae14 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801ae14:	b480      	push	{r7}
 801ae16:	af00      	add	r7, sp, #0
    return PacketType;
 801ae18:	4b02      	ldr	r3, [pc, #8]	@ (801ae24 <SUBGRF_GetPacketType+0x10>)
 801ae1a:	781b      	ldrb	r3, [r3, #0]
}
 801ae1c:	4618      	mov	r0, r3
 801ae1e:	46bd      	mov	sp, r7
 801ae20:	bc80      	pop	{r7}
 801ae22:	4770      	bx	lr
 801ae24:	20001dd1 	.word	0x20001dd1

0801ae28 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	b084      	sub	sp, #16
 801ae2c:	af00      	add	r7, sp, #0
 801ae2e:	4603      	mov	r3, r0
 801ae30:	71fb      	strb	r3, [r7, #7]
 801ae32:	460b      	mov	r3, r1
 801ae34:	71bb      	strb	r3, [r7, #6]
 801ae36:	4613      	mov	r3, r2
 801ae38:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801ae3a:	79fb      	ldrb	r3, [r7, #7]
 801ae3c:	2b01      	cmp	r3, #1
 801ae3e:	d149      	bne.n	801aed4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801ae40:	2000      	movs	r0, #0
 801ae42:	f7f1 f83e 	bl	800bec2 <RBI_GetRFOMaxPowerConfig>
 801ae46:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801ae48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ae4c:	68fa      	ldr	r2, [r7, #12]
 801ae4e:	429a      	cmp	r2, r3
 801ae50:	da01      	bge.n	801ae56 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	2b0e      	cmp	r3, #14
 801ae5a:	d10e      	bne.n	801ae7a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801ae5c:	2301      	movs	r3, #1
 801ae5e:	2201      	movs	r2, #1
 801ae60:	2100      	movs	r1, #0
 801ae62:	2004      	movs	r0, #4
 801ae64:	f7ff fef6 	bl	801ac54 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ae68:	79ba      	ldrb	r2, [r7, #6]
 801ae6a:	68fb      	ldr	r3, [r7, #12]
 801ae6c:	b2db      	uxtb	r3, r3
 801ae6e:	1ad3      	subs	r3, r2, r3
 801ae70:	b2db      	uxtb	r3, r3
 801ae72:	330e      	adds	r3, #14
 801ae74:	b2db      	uxtb	r3, r3
 801ae76:	71bb      	strb	r3, [r7, #6]
 801ae78:	e01f      	b.n	801aeba <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801ae7a:	68fb      	ldr	r3, [r7, #12]
 801ae7c:	2b0a      	cmp	r3, #10
 801ae7e:	d10e      	bne.n	801ae9e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801ae80:	2301      	movs	r3, #1
 801ae82:	2201      	movs	r2, #1
 801ae84:	2100      	movs	r1, #0
 801ae86:	2001      	movs	r0, #1
 801ae88:	f7ff fee4 	bl	801ac54 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801ae8c:	79ba      	ldrb	r2, [r7, #6]
 801ae8e:	68fb      	ldr	r3, [r7, #12]
 801ae90:	b2db      	uxtb	r3, r3
 801ae92:	1ad3      	subs	r3, r2, r3
 801ae94:	b2db      	uxtb	r3, r3
 801ae96:	330d      	adds	r3, #13
 801ae98:	b2db      	uxtb	r3, r3
 801ae9a:	71bb      	strb	r3, [r7, #6]
 801ae9c:	e00d      	b.n	801aeba <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801ae9e:	2301      	movs	r3, #1
 801aea0:	2201      	movs	r2, #1
 801aea2:	2100      	movs	r1, #0
 801aea4:	2007      	movs	r0, #7
 801aea6:	f7ff fed5 	bl	801ac54 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801aeaa:	79ba      	ldrb	r2, [r7, #6]
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	b2db      	uxtb	r3, r3
 801aeb0:	1ad3      	subs	r3, r2, r3
 801aeb2:	b2db      	uxtb	r3, r3
 801aeb4:	330e      	adds	r3, #14
 801aeb6:	b2db      	uxtb	r3, r3
 801aeb8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801aeba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801aebe:	f113 0f11 	cmn.w	r3, #17
 801aec2:	da01      	bge.n	801aec8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801aec4:	23ef      	movs	r3, #239	@ 0xef
 801aec6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801aec8:	2118      	movs	r1, #24
 801aeca:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801aece:	f000 fa93 	bl	801b3f8 <SUBGRF_WriteRegister>
 801aed2:	e067      	b.n	801afa4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801aed4:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801aed8:	f000 faa2 	bl	801b420 <SUBGRF_ReadRegister>
 801aedc:	4603      	mov	r3, r0
 801aede:	f043 031e 	orr.w	r3, r3, #30
 801aee2:	b2db      	uxtb	r3, r3
 801aee4:	4619      	mov	r1, r3
 801aee6:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801aeea:	f000 fa85 	bl	801b3f8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801aeee:	2001      	movs	r0, #1
 801aef0:	f7f0 ffe7 	bl	800bec2 <RBI_GetRFOMaxPowerConfig>
 801aef4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801aef6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801aefa:	68fa      	ldr	r2, [r7, #12]
 801aefc:	429a      	cmp	r2, r3
 801aefe:	da01      	bge.n	801af04 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801af04:	68fb      	ldr	r3, [r7, #12]
 801af06:	2b14      	cmp	r3, #20
 801af08:	d10e      	bne.n	801af28 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801af0a:	2301      	movs	r3, #1
 801af0c:	2200      	movs	r2, #0
 801af0e:	2105      	movs	r1, #5
 801af10:	2003      	movs	r0, #3
 801af12:	f7ff fe9f 	bl	801ac54 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801af16:	79ba      	ldrb	r2, [r7, #6]
 801af18:	68fb      	ldr	r3, [r7, #12]
 801af1a:	b2db      	uxtb	r3, r3
 801af1c:	1ad3      	subs	r3, r2, r3
 801af1e:	b2db      	uxtb	r3, r3
 801af20:	3316      	adds	r3, #22
 801af22:	b2db      	uxtb	r3, r3
 801af24:	71bb      	strb	r3, [r7, #6]
 801af26:	e031      	b.n	801af8c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801af28:	68fb      	ldr	r3, [r7, #12]
 801af2a:	2b11      	cmp	r3, #17
 801af2c:	d10e      	bne.n	801af4c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801af2e:	2301      	movs	r3, #1
 801af30:	2200      	movs	r2, #0
 801af32:	2103      	movs	r1, #3
 801af34:	2002      	movs	r0, #2
 801af36:	f7ff fe8d 	bl	801ac54 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801af3a:	79ba      	ldrb	r2, [r7, #6]
 801af3c:	68fb      	ldr	r3, [r7, #12]
 801af3e:	b2db      	uxtb	r3, r3
 801af40:	1ad3      	subs	r3, r2, r3
 801af42:	b2db      	uxtb	r3, r3
 801af44:	3316      	adds	r3, #22
 801af46:	b2db      	uxtb	r3, r3
 801af48:	71bb      	strb	r3, [r7, #6]
 801af4a:	e01f      	b.n	801af8c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	2b0e      	cmp	r3, #14
 801af50:	d10e      	bne.n	801af70 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801af52:	2301      	movs	r3, #1
 801af54:	2200      	movs	r2, #0
 801af56:	2102      	movs	r1, #2
 801af58:	2002      	movs	r0, #2
 801af5a:	f7ff fe7b 	bl	801ac54 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801af5e:	79ba      	ldrb	r2, [r7, #6]
 801af60:	68fb      	ldr	r3, [r7, #12]
 801af62:	b2db      	uxtb	r3, r3
 801af64:	1ad3      	subs	r3, r2, r3
 801af66:	b2db      	uxtb	r3, r3
 801af68:	330e      	adds	r3, #14
 801af6a:	b2db      	uxtb	r3, r3
 801af6c:	71bb      	strb	r3, [r7, #6]
 801af6e:	e00d      	b.n	801af8c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801af70:	2301      	movs	r3, #1
 801af72:	2200      	movs	r2, #0
 801af74:	2107      	movs	r1, #7
 801af76:	2004      	movs	r0, #4
 801af78:	f7ff fe6c 	bl	801ac54 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801af7c:	79ba      	ldrb	r2, [r7, #6]
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	b2db      	uxtb	r3, r3
 801af82:	1ad3      	subs	r3, r2, r3
 801af84:	b2db      	uxtb	r3, r3
 801af86:	3316      	adds	r3, #22
 801af88:	b2db      	uxtb	r3, r3
 801af8a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801af8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801af90:	f113 0f09 	cmn.w	r3, #9
 801af94:	da01      	bge.n	801af9a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801af96:	23f7      	movs	r3, #247	@ 0xf7
 801af98:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801af9a:	2138      	movs	r1, #56	@ 0x38
 801af9c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801afa0:	f000 fa2a 	bl	801b3f8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801afa4:	79bb      	ldrb	r3, [r7, #6]
 801afa6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801afa8:	797b      	ldrb	r3, [r7, #5]
 801afaa:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801afac:	f107 0308 	add.w	r3, r7, #8
 801afb0:	2202      	movs	r2, #2
 801afb2:	4619      	mov	r1, r3
 801afb4:	208e      	movs	r0, #142	@ 0x8e
 801afb6:	f000 facf 	bl	801b558 <SUBGRF_WriteCommand>
}
 801afba:	bf00      	nop
 801afbc:	3710      	adds	r7, #16
 801afbe:	46bd      	mov	sp, r7
 801afc0:	bd80      	pop	{r7, pc}
	...

0801afc4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801afc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801afc8:	b086      	sub	sp, #24
 801afca:	af00      	add	r7, sp, #0
 801afcc:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801afce:	2300      	movs	r3, #0
 801afd0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801afd2:	4a61      	ldr	r2, [pc, #388]	@ (801b158 <SUBGRF_SetModulationParams+0x194>)
 801afd4:	f107 0308 	add.w	r3, r7, #8
 801afd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801afdc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	781a      	ldrb	r2, [r3, #0]
 801afe4:	4b5d      	ldr	r3, [pc, #372]	@ (801b15c <SUBGRF_SetModulationParams+0x198>)
 801afe6:	781b      	ldrb	r3, [r3, #0]
 801afe8:	429a      	cmp	r2, r3
 801afea:	d004      	beq.n	801aff6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	781b      	ldrb	r3, [r3, #0]
 801aff0:	4618      	mov	r0, r3
 801aff2:	f7ff fef3 	bl	801addc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	781b      	ldrb	r3, [r3, #0]
 801affa:	2b03      	cmp	r3, #3
 801affc:	f200 80a5 	bhi.w	801b14a <SUBGRF_SetModulationParams+0x186>
 801b000:	a201      	add	r2, pc, #4	@ (adr r2, 801b008 <SUBGRF_SetModulationParams+0x44>)
 801b002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b006:	bf00      	nop
 801b008:	0801b019 	.word	0x0801b019
 801b00c:	0801b0d9 	.word	0x0801b0d9
 801b010:	0801b09b 	.word	0x0801b09b
 801b014:	0801b107 	.word	0x0801b107
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b018:	2308      	movs	r3, #8
 801b01a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	685b      	ldr	r3, [r3, #4]
 801b020:	4a4f      	ldr	r2, [pc, #316]	@ (801b160 <SUBGRF_SetModulationParams+0x19c>)
 801b022:	fbb2 f3f3 	udiv	r3, r2, r3
 801b026:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b028:	697b      	ldr	r3, [r7, #20]
 801b02a:	0c1b      	lsrs	r3, r3, #16
 801b02c:	b2db      	uxtb	r3, r3
 801b02e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b030:	697b      	ldr	r3, [r7, #20]
 801b032:	0a1b      	lsrs	r3, r3, #8
 801b034:	b2db      	uxtb	r3, r3
 801b036:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b038:	697b      	ldr	r3, [r7, #20]
 801b03a:	b2db      	uxtb	r3, r3
 801b03c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	7b1b      	ldrb	r3, [r3, #12]
 801b042:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	7b5b      	ldrb	r3, [r3, #13]
 801b048:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	689b      	ldr	r3, [r3, #8]
 801b04e:	2200      	movs	r2, #0
 801b050:	461c      	mov	r4, r3
 801b052:	4615      	mov	r5, r2
 801b054:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b058:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b05c:	4a41      	ldr	r2, [pc, #260]	@ (801b164 <SUBGRF_SetModulationParams+0x1a0>)
 801b05e:	f04f 0300 	mov.w	r3, #0
 801b062:	4640      	mov	r0, r8
 801b064:	4649      	mov	r1, r9
 801b066:	f7e5 fd03 	bl	8000a70 <__aeabi_uldivmod>
 801b06a:	4602      	mov	r2, r0
 801b06c:	460b      	mov	r3, r1
 801b06e:	4613      	mov	r3, r2
 801b070:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801b072:	697b      	ldr	r3, [r7, #20]
 801b074:	0c1b      	lsrs	r3, r3, #16
 801b076:	b2db      	uxtb	r3, r3
 801b078:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801b07a:	697b      	ldr	r3, [r7, #20]
 801b07c:	0a1b      	lsrs	r3, r3, #8
 801b07e:	b2db      	uxtb	r3, r3
 801b080:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801b082:	697b      	ldr	r3, [r7, #20]
 801b084:	b2db      	uxtb	r3, r3
 801b086:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b088:	7cfb      	ldrb	r3, [r7, #19]
 801b08a:	b29a      	uxth	r2, r3
 801b08c:	f107 0308 	add.w	r3, r7, #8
 801b090:	4619      	mov	r1, r3
 801b092:	208b      	movs	r0, #139	@ 0x8b
 801b094:	f000 fa60 	bl	801b558 <SUBGRF_WriteCommand>
        break;
 801b098:	e058      	b.n	801b14c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801b09a:	2304      	movs	r3, #4
 801b09c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	691b      	ldr	r3, [r3, #16]
 801b0a2:	4a2f      	ldr	r2, [pc, #188]	@ (801b160 <SUBGRF_SetModulationParams+0x19c>)
 801b0a4:	fbb2 f3f3 	udiv	r3, r2, r3
 801b0a8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b0aa:	697b      	ldr	r3, [r7, #20]
 801b0ac:	0c1b      	lsrs	r3, r3, #16
 801b0ae:	b2db      	uxtb	r3, r3
 801b0b0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b0b2:	697b      	ldr	r3, [r7, #20]
 801b0b4:	0a1b      	lsrs	r3, r3, #8
 801b0b6:	b2db      	uxtb	r3, r3
 801b0b8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b0ba:	697b      	ldr	r3, [r7, #20]
 801b0bc:	b2db      	uxtb	r3, r3
 801b0be:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	7d1b      	ldrb	r3, [r3, #20]
 801b0c4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b0c6:	7cfb      	ldrb	r3, [r7, #19]
 801b0c8:	b29a      	uxth	r2, r3
 801b0ca:	f107 0308 	add.w	r3, r7, #8
 801b0ce:	4619      	mov	r1, r3
 801b0d0:	208b      	movs	r0, #139	@ 0x8b
 801b0d2:	f000 fa41 	bl	801b558 <SUBGRF_WriteCommand>
        break;
 801b0d6:	e039      	b.n	801b14c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801b0d8:	2304      	movs	r3, #4
 801b0da:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	7e1b      	ldrb	r3, [r3, #24]
 801b0e0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	7e5b      	ldrb	r3, [r3, #25]
 801b0e6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	7e9b      	ldrb	r3, [r3, #26]
 801b0ec:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	7edb      	ldrb	r3, [r3, #27]
 801b0f2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b0f4:	7cfb      	ldrb	r3, [r7, #19]
 801b0f6:	b29a      	uxth	r2, r3
 801b0f8:	f107 0308 	add.w	r3, r7, #8
 801b0fc:	4619      	mov	r1, r3
 801b0fe:	208b      	movs	r0, #139	@ 0x8b
 801b100:	f000 fa2a 	bl	801b558 <SUBGRF_WriteCommand>

        break;
 801b104:	e022      	b.n	801b14c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801b106:	2305      	movs	r3, #5
 801b108:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	685b      	ldr	r3, [r3, #4]
 801b10e:	4a14      	ldr	r2, [pc, #80]	@ (801b160 <SUBGRF_SetModulationParams+0x19c>)
 801b110:	fbb2 f3f3 	udiv	r3, r2, r3
 801b114:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b116:	697b      	ldr	r3, [r7, #20]
 801b118:	0c1b      	lsrs	r3, r3, #16
 801b11a:	b2db      	uxtb	r3, r3
 801b11c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b11e:	697b      	ldr	r3, [r7, #20]
 801b120:	0a1b      	lsrs	r3, r3, #8
 801b122:	b2db      	uxtb	r3, r3
 801b124:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b126:	697b      	ldr	r3, [r7, #20]
 801b128:	b2db      	uxtb	r3, r3
 801b12a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	7b1b      	ldrb	r3, [r3, #12]
 801b130:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	7b5b      	ldrb	r3, [r3, #13]
 801b136:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b138:	7cfb      	ldrb	r3, [r7, #19]
 801b13a:	b29a      	uxth	r2, r3
 801b13c:	f107 0308 	add.w	r3, r7, #8
 801b140:	4619      	mov	r1, r3
 801b142:	208b      	movs	r0, #139	@ 0x8b
 801b144:	f000 fa08 	bl	801b558 <SUBGRF_WriteCommand>
        break;
 801b148:	e000      	b.n	801b14c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801b14a:	bf00      	nop
    }
}
 801b14c:	bf00      	nop
 801b14e:	3718      	adds	r7, #24
 801b150:	46bd      	mov	sp, r7
 801b152:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b156:	bf00      	nop
 801b158:	0801d98c 	.word	0x0801d98c
 801b15c:	20001dd1 	.word	0x20001dd1
 801b160:	3d090000 	.word	0x3d090000
 801b164:	01e84800 	.word	0x01e84800

0801b168 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801b168:	b580      	push	{r7, lr}
 801b16a:	b086      	sub	sp, #24
 801b16c:	af00      	add	r7, sp, #0
 801b16e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801b170:	2300      	movs	r3, #0
 801b172:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b174:	4a48      	ldr	r2, [pc, #288]	@ (801b298 <SUBGRF_SetPacketParams+0x130>)
 801b176:	f107 030c 	add.w	r3, r7, #12
 801b17a:	ca07      	ldmia	r2, {r0, r1, r2}
 801b17c:	c303      	stmia	r3!, {r0, r1}
 801b17e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	781a      	ldrb	r2, [r3, #0]
 801b184:	4b45      	ldr	r3, [pc, #276]	@ (801b29c <SUBGRF_SetPacketParams+0x134>)
 801b186:	781b      	ldrb	r3, [r3, #0]
 801b188:	429a      	cmp	r2, r3
 801b18a:	d004      	beq.n	801b196 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	781b      	ldrb	r3, [r3, #0]
 801b190:	4618      	mov	r0, r3
 801b192:	f7ff fe23 	bl	801addc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	781b      	ldrb	r3, [r3, #0]
 801b19a:	2b03      	cmp	r3, #3
 801b19c:	d878      	bhi.n	801b290 <SUBGRF_SetPacketParams+0x128>
 801b19e:	a201      	add	r2, pc, #4	@ (adr r2, 801b1a4 <SUBGRF_SetPacketParams+0x3c>)
 801b1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b1a4:	0801b1b5 	.word	0x0801b1b5
 801b1a8:	0801b245 	.word	0x0801b245
 801b1ac:	0801b239 	.word	0x0801b239
 801b1b0:	0801b1b5 	.word	0x0801b1b5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	7a5b      	ldrb	r3, [r3, #9]
 801b1b8:	2bf1      	cmp	r3, #241	@ 0xf1
 801b1ba:	d10a      	bne.n	801b1d2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801b1bc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801b1c0:	f7ff faaa 	bl	801a718 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801b1c4:	f248 0005 	movw	r0, #32773	@ 0x8005
 801b1c8:	f7ff fac6 	bl	801a758 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801b1cc:	2302      	movs	r3, #2
 801b1ce:	75bb      	strb	r3, [r7, #22]
 801b1d0:	e011      	b.n	801b1f6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	7a5b      	ldrb	r3, [r3, #9]
 801b1d6:	2bf2      	cmp	r3, #242	@ 0xf2
 801b1d8:	d10a      	bne.n	801b1f0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801b1da:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801b1de:	f7ff fa9b 	bl	801a718 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801b1e2:	f241 0021 	movw	r0, #4129	@ 0x1021
 801b1e6:	f7ff fab7 	bl	801a758 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801b1ea:	2306      	movs	r3, #6
 801b1ec:	75bb      	strb	r3, [r7, #22]
 801b1ee:	e002      	b.n	801b1f6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	7a5b      	ldrb	r3, [r3, #9]
 801b1f4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801b1f6:	2309      	movs	r3, #9
 801b1f8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	885b      	ldrh	r3, [r3, #2]
 801b1fe:	0a1b      	lsrs	r3, r3, #8
 801b200:	b29b      	uxth	r3, r3
 801b202:	b2db      	uxtb	r3, r3
 801b204:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	885b      	ldrh	r3, [r3, #2]
 801b20a:	b2db      	uxtb	r3, r3
 801b20c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	791b      	ldrb	r3, [r3, #4]
 801b212:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	795b      	ldrb	r3, [r3, #5]
 801b218:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	799b      	ldrb	r3, [r3, #6]
 801b21e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	79db      	ldrb	r3, [r3, #7]
 801b224:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	7a1b      	ldrb	r3, [r3, #8]
 801b22a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801b22c:	7dbb      	ldrb	r3, [r7, #22]
 801b22e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	7a9b      	ldrb	r3, [r3, #10]
 801b234:	753b      	strb	r3, [r7, #20]
        break;
 801b236:	e022      	b.n	801b27e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801b238:	2301      	movs	r3, #1
 801b23a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	7b1b      	ldrb	r3, [r3, #12]
 801b240:	733b      	strb	r3, [r7, #12]
        break;
 801b242:	e01c      	b.n	801b27e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801b244:	2306      	movs	r3, #6
 801b246:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	89db      	ldrh	r3, [r3, #14]
 801b24c:	0a1b      	lsrs	r3, r3, #8
 801b24e:	b29b      	uxth	r3, r3
 801b250:	b2db      	uxtb	r3, r3
 801b252:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	89db      	ldrh	r3, [r3, #14]
 801b258:	b2db      	uxtb	r3, r3
 801b25a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	7c1a      	ldrb	r2, [r3, #16]
 801b260:	4b0f      	ldr	r3, [pc, #60]	@ (801b2a0 <SUBGRF_SetPacketParams+0x138>)
 801b262:	4611      	mov	r1, r2
 801b264:	7019      	strb	r1, [r3, #0]
 801b266:	4613      	mov	r3, r2
 801b268:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	7c5b      	ldrb	r3, [r3, #17]
 801b26e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	7c9b      	ldrb	r3, [r3, #18]
 801b274:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	7cdb      	ldrb	r3, [r3, #19]
 801b27a:	747b      	strb	r3, [r7, #17]
        break;
 801b27c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801b27e:	7dfb      	ldrb	r3, [r7, #23]
 801b280:	b29a      	uxth	r2, r3
 801b282:	f107 030c 	add.w	r3, r7, #12
 801b286:	4619      	mov	r1, r3
 801b288:	208c      	movs	r0, #140	@ 0x8c
 801b28a:	f000 f965 	bl	801b558 <SUBGRF_WriteCommand>
 801b28e:	e000      	b.n	801b292 <SUBGRF_SetPacketParams+0x12a>
        return;
 801b290:	bf00      	nop
}
 801b292:	3718      	adds	r7, #24
 801b294:	46bd      	mov	sp, r7
 801b296:	bd80      	pop	{r7, pc}
 801b298:	0801d994 	.word	0x0801d994
 801b29c:	20001dd1 	.word	0x20001dd1
 801b2a0:	20001dd2 	.word	0x20001dd2

0801b2a4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801b2a4:	b580      	push	{r7, lr}
 801b2a6:	b084      	sub	sp, #16
 801b2a8:	af00      	add	r7, sp, #0
 801b2aa:	4603      	mov	r3, r0
 801b2ac:	460a      	mov	r2, r1
 801b2ae:	71fb      	strb	r3, [r7, #7]
 801b2b0:	4613      	mov	r3, r2
 801b2b2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801b2b4:	79fb      	ldrb	r3, [r7, #7]
 801b2b6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801b2b8:	79bb      	ldrb	r3, [r7, #6]
 801b2ba:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801b2bc:	f107 030c 	add.w	r3, r7, #12
 801b2c0:	2202      	movs	r2, #2
 801b2c2:	4619      	mov	r1, r3
 801b2c4:	208f      	movs	r0, #143	@ 0x8f
 801b2c6:	f000 f947 	bl	801b558 <SUBGRF_WriteCommand>
}
 801b2ca:	bf00      	nop
 801b2cc:	3710      	adds	r7, #16
 801b2ce:	46bd      	mov	sp, r7
 801b2d0:	bd80      	pop	{r7, pc}

0801b2d2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801b2d2:	b580      	push	{r7, lr}
 801b2d4:	b082      	sub	sp, #8
 801b2d6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801b2d8:	2300      	movs	r3, #0
 801b2da:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801b2dc:	1d3b      	adds	r3, r7, #4
 801b2de:	2201      	movs	r2, #1
 801b2e0:	4619      	mov	r1, r3
 801b2e2:	2015      	movs	r0, #21
 801b2e4:	f000 f95a 	bl	801b59c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801b2e8:	793b      	ldrb	r3, [r7, #4]
 801b2ea:	425b      	negs	r3, r3
 801b2ec:	105b      	asrs	r3, r3, #1
 801b2ee:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801b2f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b2f4:	4618      	mov	r0, r3
 801b2f6:	3708      	adds	r7, #8
 801b2f8:	46bd      	mov	sp, r7
 801b2fa:	bd80      	pop	{r7, pc}

0801b2fc <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801b2fc:	b580      	push	{r7, lr}
 801b2fe:	b084      	sub	sp, #16
 801b300:	af00      	add	r7, sp, #0
 801b302:	6078      	str	r0, [r7, #4]
 801b304:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801b306:	f107 030c 	add.w	r3, r7, #12
 801b30a:	2202      	movs	r2, #2
 801b30c:	4619      	mov	r1, r3
 801b30e:	2013      	movs	r0, #19
 801b310:	f000 f944 	bl	801b59c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801b314:	f7ff fd7e 	bl	801ae14 <SUBGRF_GetPacketType>
 801b318:	4603      	mov	r3, r0
 801b31a:	2b01      	cmp	r3, #1
 801b31c:	d10d      	bne.n	801b33a <SUBGRF_GetRxBufferStatus+0x3e>
 801b31e:	4b0c      	ldr	r3, [pc, #48]	@ (801b350 <SUBGRF_GetRxBufferStatus+0x54>)
 801b320:	781b      	ldrb	r3, [r3, #0]
 801b322:	b2db      	uxtb	r3, r3
 801b324:	2b01      	cmp	r3, #1
 801b326:	d108      	bne.n	801b33a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801b328:	f240 7002 	movw	r0, #1794	@ 0x702
 801b32c:	f000 f878 	bl	801b420 <SUBGRF_ReadRegister>
 801b330:	4603      	mov	r3, r0
 801b332:	461a      	mov	r2, r3
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	701a      	strb	r2, [r3, #0]
 801b338:	e002      	b.n	801b340 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801b33a:	7b3a      	ldrb	r2, [r7, #12]
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801b340:	7b7a      	ldrb	r2, [r7, #13]
 801b342:	683b      	ldr	r3, [r7, #0]
 801b344:	701a      	strb	r2, [r3, #0]
}
 801b346:	bf00      	nop
 801b348:	3710      	adds	r7, #16
 801b34a:	46bd      	mov	sp, r7
 801b34c:	bd80      	pop	{r7, pc}
 801b34e:	bf00      	nop
 801b350:	20001dd2 	.word	0x20001dd2

0801b354 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801b354:	b580      	push	{r7, lr}
 801b356:	b084      	sub	sp, #16
 801b358:	af00      	add	r7, sp, #0
 801b35a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801b35c:	f107 030c 	add.w	r3, r7, #12
 801b360:	2203      	movs	r2, #3
 801b362:	4619      	mov	r1, r3
 801b364:	2014      	movs	r0, #20
 801b366:	f000 f919 	bl	801b59c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801b36a:	f7ff fd53 	bl	801ae14 <SUBGRF_GetPacketType>
 801b36e:	4603      	mov	r3, r0
 801b370:	461a      	mov	r2, r3
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	781b      	ldrb	r3, [r3, #0]
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d002      	beq.n	801b384 <SUBGRF_GetPacketStatus+0x30>
 801b37e:	2b01      	cmp	r3, #1
 801b380:	d013      	beq.n	801b3aa <SUBGRF_GetPacketStatus+0x56>
 801b382:	e02a      	b.n	801b3da <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801b384:	7b3a      	ldrb	r2, [r7, #12]
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801b38a:	7b7b      	ldrb	r3, [r7, #13]
 801b38c:	425b      	negs	r3, r3
 801b38e:	105b      	asrs	r3, r3, #1
 801b390:	b25a      	sxtb	r2, r3
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801b396:	7bbb      	ldrb	r3, [r7, #14]
 801b398:	425b      	negs	r3, r3
 801b39a:	105b      	asrs	r3, r3, #1
 801b39c:	b25a      	sxtb	r2, r3
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	2200      	movs	r2, #0
 801b3a6:	609a      	str	r2, [r3, #8]
            break;
 801b3a8:	e020      	b.n	801b3ec <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801b3aa:	7b3b      	ldrb	r3, [r7, #12]
 801b3ac:	425b      	negs	r3, r3
 801b3ae:	105b      	asrs	r3, r3, #1
 801b3b0:	b25a      	sxtb	r2, r3
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801b3b6:	7b7b      	ldrb	r3, [r7, #13]
 801b3b8:	b25b      	sxtb	r3, r3
 801b3ba:	3302      	adds	r3, #2
 801b3bc:	109b      	asrs	r3, r3, #2
 801b3be:	b25a      	sxtb	r2, r3
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801b3c4:	7bbb      	ldrb	r3, [r7, #14]
 801b3c6:	425b      	negs	r3, r3
 801b3c8:	105b      	asrs	r3, r3, #1
 801b3ca:	b25a      	sxtb	r2, r3
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801b3d0:	4b08      	ldr	r3, [pc, #32]	@ (801b3f4 <SUBGRF_GetPacketStatus+0xa0>)
 801b3d2:	681a      	ldr	r2, [r3, #0]
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	611a      	str	r2, [r3, #16]
            break;
 801b3d8:	e008      	b.n	801b3ec <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801b3da:	2214      	movs	r2, #20
 801b3dc:	2100      	movs	r1, #0
 801b3de:	6878      	ldr	r0, [r7, #4]
 801b3e0:	f000 fc03 	bl	801bbea <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	220f      	movs	r2, #15
 801b3e8:	701a      	strb	r2, [r3, #0]
            break;
 801b3ea:	bf00      	nop
    }
}
 801b3ec:	bf00      	nop
 801b3ee:	3710      	adds	r7, #16
 801b3f0:	46bd      	mov	sp, r7
 801b3f2:	bd80      	pop	{r7, pc}
 801b3f4:	20001dd4 	.word	0x20001dd4

0801b3f8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801b3f8:	b580      	push	{r7, lr}
 801b3fa:	b082      	sub	sp, #8
 801b3fc:	af00      	add	r7, sp, #0
 801b3fe:	4603      	mov	r3, r0
 801b400:	460a      	mov	r2, r1
 801b402:	80fb      	strh	r3, [r7, #6]
 801b404:	4613      	mov	r3, r2
 801b406:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801b408:	1d7a      	adds	r2, r7, #5
 801b40a:	88f9      	ldrh	r1, [r7, #6]
 801b40c:	2301      	movs	r3, #1
 801b40e:	4803      	ldr	r0, [pc, #12]	@ (801b41c <SUBGRF_WriteRegister+0x24>)
 801b410:	f7ed f892 	bl	8008538 <HAL_SUBGHZ_WriteRegisters>
}
 801b414:	bf00      	nop
 801b416:	3708      	adds	r7, #8
 801b418:	46bd      	mov	sp, r7
 801b41a:	bd80      	pop	{r7, pc}
 801b41c:	20000290 	.word	0x20000290

0801b420 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801b420:	b580      	push	{r7, lr}
 801b422:	b084      	sub	sp, #16
 801b424:	af00      	add	r7, sp, #0
 801b426:	4603      	mov	r3, r0
 801b428:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801b42a:	f107 020f 	add.w	r2, r7, #15
 801b42e:	88f9      	ldrh	r1, [r7, #6]
 801b430:	2301      	movs	r3, #1
 801b432:	4804      	ldr	r0, [pc, #16]	@ (801b444 <SUBGRF_ReadRegister+0x24>)
 801b434:	f7ed f8df 	bl	80085f6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801b438:	7bfb      	ldrb	r3, [r7, #15]
}
 801b43a:	4618      	mov	r0, r3
 801b43c:	3710      	adds	r7, #16
 801b43e:	46bd      	mov	sp, r7
 801b440:	bd80      	pop	{r7, pc}
 801b442:	bf00      	nop
 801b444:	20000290 	.word	0x20000290

0801b448 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b448:	b580      	push	{r7, lr}
 801b44a:	b086      	sub	sp, #24
 801b44c:	af00      	add	r7, sp, #0
 801b44e:	4603      	mov	r3, r0
 801b450:	6039      	str	r1, [r7, #0]
 801b452:	80fb      	strh	r3, [r7, #6]
 801b454:	4613      	mov	r3, r2
 801b456:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b458:	f3ef 8310 	mrs	r3, PRIMASK
 801b45c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b45e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b460:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b462:	b672      	cpsid	i
}
 801b464:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801b466:	88bb      	ldrh	r3, [r7, #4]
 801b468:	88f9      	ldrh	r1, [r7, #6]
 801b46a:	683a      	ldr	r2, [r7, #0]
 801b46c:	4806      	ldr	r0, [pc, #24]	@ (801b488 <SUBGRF_WriteRegisters+0x40>)
 801b46e:	f7ed f863 	bl	8008538 <HAL_SUBGHZ_WriteRegisters>
 801b472:	697b      	ldr	r3, [r7, #20]
 801b474:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b476:	693b      	ldr	r3, [r7, #16]
 801b478:	f383 8810 	msr	PRIMASK, r3
}
 801b47c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b47e:	bf00      	nop
 801b480:	3718      	adds	r7, #24
 801b482:	46bd      	mov	sp, r7
 801b484:	bd80      	pop	{r7, pc}
 801b486:	bf00      	nop
 801b488:	20000290 	.word	0x20000290

0801b48c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b48c:	b580      	push	{r7, lr}
 801b48e:	b086      	sub	sp, #24
 801b490:	af00      	add	r7, sp, #0
 801b492:	4603      	mov	r3, r0
 801b494:	6039      	str	r1, [r7, #0]
 801b496:	80fb      	strh	r3, [r7, #6]
 801b498:	4613      	mov	r3, r2
 801b49a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b49c:	f3ef 8310 	mrs	r3, PRIMASK
 801b4a0:	60fb      	str	r3, [r7, #12]
  return(result);
 801b4a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b4a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b4a6:	b672      	cpsid	i
}
 801b4a8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801b4aa:	88bb      	ldrh	r3, [r7, #4]
 801b4ac:	88f9      	ldrh	r1, [r7, #6]
 801b4ae:	683a      	ldr	r2, [r7, #0]
 801b4b0:	4806      	ldr	r0, [pc, #24]	@ (801b4cc <SUBGRF_ReadRegisters+0x40>)
 801b4b2:	f7ed f8a0 	bl	80085f6 <HAL_SUBGHZ_ReadRegisters>
 801b4b6:	697b      	ldr	r3, [r7, #20]
 801b4b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4ba:	693b      	ldr	r3, [r7, #16]
 801b4bc:	f383 8810 	msr	PRIMASK, r3
}
 801b4c0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b4c2:	bf00      	nop
 801b4c4:	3718      	adds	r7, #24
 801b4c6:	46bd      	mov	sp, r7
 801b4c8:	bd80      	pop	{r7, pc}
 801b4ca:	bf00      	nop
 801b4cc:	20000290 	.word	0x20000290

0801b4d0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b4d0:	b580      	push	{r7, lr}
 801b4d2:	b086      	sub	sp, #24
 801b4d4:	af00      	add	r7, sp, #0
 801b4d6:	4603      	mov	r3, r0
 801b4d8:	6039      	str	r1, [r7, #0]
 801b4da:	71fb      	strb	r3, [r7, #7]
 801b4dc:	4613      	mov	r3, r2
 801b4de:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b4e0:	f3ef 8310 	mrs	r3, PRIMASK
 801b4e4:	60fb      	str	r3, [r7, #12]
  return(result);
 801b4e6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b4e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b4ea:	b672      	cpsid	i
}
 801b4ec:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801b4ee:	79bb      	ldrb	r3, [r7, #6]
 801b4f0:	b29b      	uxth	r3, r3
 801b4f2:	79f9      	ldrb	r1, [r7, #7]
 801b4f4:	683a      	ldr	r2, [r7, #0]
 801b4f6:	4806      	ldr	r0, [pc, #24]	@ (801b510 <SUBGRF_WriteBuffer+0x40>)
 801b4f8:	f7ed f991 	bl	800881e <HAL_SUBGHZ_WriteBuffer>
 801b4fc:	697b      	ldr	r3, [r7, #20]
 801b4fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b500:	693b      	ldr	r3, [r7, #16]
 801b502:	f383 8810 	msr	PRIMASK, r3
}
 801b506:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b508:	bf00      	nop
 801b50a:	3718      	adds	r7, #24
 801b50c:	46bd      	mov	sp, r7
 801b50e:	bd80      	pop	{r7, pc}
 801b510:	20000290 	.word	0x20000290

0801b514 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b514:	b580      	push	{r7, lr}
 801b516:	b086      	sub	sp, #24
 801b518:	af00      	add	r7, sp, #0
 801b51a:	4603      	mov	r3, r0
 801b51c:	6039      	str	r1, [r7, #0]
 801b51e:	71fb      	strb	r3, [r7, #7]
 801b520:	4613      	mov	r3, r2
 801b522:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b524:	f3ef 8310 	mrs	r3, PRIMASK
 801b528:	60fb      	str	r3, [r7, #12]
  return(result);
 801b52a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b52c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b52e:	b672      	cpsid	i
}
 801b530:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801b532:	79bb      	ldrb	r3, [r7, #6]
 801b534:	b29b      	uxth	r3, r3
 801b536:	79f9      	ldrb	r1, [r7, #7]
 801b538:	683a      	ldr	r2, [r7, #0]
 801b53a:	4806      	ldr	r0, [pc, #24]	@ (801b554 <SUBGRF_ReadBuffer+0x40>)
 801b53c:	f7ed f9c2 	bl	80088c4 <HAL_SUBGHZ_ReadBuffer>
 801b540:	697b      	ldr	r3, [r7, #20]
 801b542:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b544:	693b      	ldr	r3, [r7, #16]
 801b546:	f383 8810 	msr	PRIMASK, r3
}
 801b54a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b54c:	bf00      	nop
 801b54e:	3718      	adds	r7, #24
 801b550:	46bd      	mov	sp, r7
 801b552:	bd80      	pop	{r7, pc}
 801b554:	20000290 	.word	0x20000290

0801b558 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b558:	b580      	push	{r7, lr}
 801b55a:	b086      	sub	sp, #24
 801b55c:	af00      	add	r7, sp, #0
 801b55e:	4603      	mov	r3, r0
 801b560:	6039      	str	r1, [r7, #0]
 801b562:	71fb      	strb	r3, [r7, #7]
 801b564:	4613      	mov	r3, r2
 801b566:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b568:	f3ef 8310 	mrs	r3, PRIMASK
 801b56c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b56e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b570:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b572:	b672      	cpsid	i
}
 801b574:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801b576:	88bb      	ldrh	r3, [r7, #4]
 801b578:	79f9      	ldrb	r1, [r7, #7]
 801b57a:	683a      	ldr	r2, [r7, #0]
 801b57c:	4806      	ldr	r0, [pc, #24]	@ (801b598 <SUBGRF_WriteCommand+0x40>)
 801b57e:	f7ed f89b 	bl	80086b8 <HAL_SUBGHZ_ExecSetCmd>
 801b582:	697b      	ldr	r3, [r7, #20]
 801b584:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b586:	693b      	ldr	r3, [r7, #16]
 801b588:	f383 8810 	msr	PRIMASK, r3
}
 801b58c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b58e:	bf00      	nop
 801b590:	3718      	adds	r7, #24
 801b592:	46bd      	mov	sp, r7
 801b594:	bd80      	pop	{r7, pc}
 801b596:	bf00      	nop
 801b598:	20000290 	.word	0x20000290

0801b59c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b59c:	b580      	push	{r7, lr}
 801b59e:	b086      	sub	sp, #24
 801b5a0:	af00      	add	r7, sp, #0
 801b5a2:	4603      	mov	r3, r0
 801b5a4:	6039      	str	r1, [r7, #0]
 801b5a6:	71fb      	strb	r3, [r7, #7]
 801b5a8:	4613      	mov	r3, r2
 801b5aa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b5ac:	f3ef 8310 	mrs	r3, PRIMASK
 801b5b0:	60fb      	str	r3, [r7, #12]
  return(result);
 801b5b2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b5b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b5b6:	b672      	cpsid	i
}
 801b5b8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801b5ba:	88bb      	ldrh	r3, [r7, #4]
 801b5bc:	79f9      	ldrb	r1, [r7, #7]
 801b5be:	683a      	ldr	r2, [r7, #0]
 801b5c0:	4806      	ldr	r0, [pc, #24]	@ (801b5dc <SUBGRF_ReadCommand+0x40>)
 801b5c2:	f7ed f8d8 	bl	8008776 <HAL_SUBGHZ_ExecGetCmd>
 801b5c6:	697b      	ldr	r3, [r7, #20]
 801b5c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5ca:	693b      	ldr	r3, [r7, #16]
 801b5cc:	f383 8810 	msr	PRIMASK, r3
}
 801b5d0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b5d2:	bf00      	nop
 801b5d4:	3718      	adds	r7, #24
 801b5d6:	46bd      	mov	sp, r7
 801b5d8:	bd80      	pop	{r7, pc}
 801b5da:	bf00      	nop
 801b5dc:	20000290 	.word	0x20000290

0801b5e0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801b5e0:	b580      	push	{r7, lr}
 801b5e2:	b084      	sub	sp, #16
 801b5e4:	af00      	add	r7, sp, #0
 801b5e6:	4603      	mov	r3, r0
 801b5e8:	460a      	mov	r2, r1
 801b5ea:	71fb      	strb	r3, [r7, #7]
 801b5ec:	4613      	mov	r3, r2
 801b5ee:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801b5f0:	2301      	movs	r3, #1
 801b5f2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801b5f4:	79bb      	ldrb	r3, [r7, #6]
 801b5f6:	2b01      	cmp	r3, #1
 801b5f8:	d10d      	bne.n	801b616 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801b5fa:	79fb      	ldrb	r3, [r7, #7]
 801b5fc:	2b01      	cmp	r3, #1
 801b5fe:	d104      	bne.n	801b60a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801b600:	2302      	movs	r3, #2
 801b602:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801b604:	2004      	movs	r0, #4
 801b606:	f000 f8ef 	bl	801b7e8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801b60a:	79fb      	ldrb	r3, [r7, #7]
 801b60c:	2b02      	cmp	r3, #2
 801b60e:	d107      	bne.n	801b620 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801b610:	2303      	movs	r3, #3
 801b612:	73fb      	strb	r3, [r7, #15]
 801b614:	e004      	b.n	801b620 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801b616:	79bb      	ldrb	r3, [r7, #6]
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d101      	bne.n	801b620 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801b61c:	2301      	movs	r3, #1
 801b61e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801b620:	7bfb      	ldrb	r3, [r7, #15]
 801b622:	4618      	mov	r0, r3
 801b624:	f7f0 fbd8 	bl	800bdd8 <RBI_ConfigRFSwitch>
}
 801b628:	bf00      	nop
 801b62a:	3710      	adds	r7, #16
 801b62c:	46bd      	mov	sp, r7
 801b62e:	bd80      	pop	{r7, pc}

0801b630 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801b630:	b580      	push	{r7, lr}
 801b632:	b084      	sub	sp, #16
 801b634:	af00      	add	r7, sp, #0
 801b636:	4603      	mov	r3, r0
 801b638:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801b63a:	2301      	movs	r3, #1
 801b63c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801b63e:	f7f0 fc1f 	bl	800be80 <RBI_GetTxConfig>
 801b642:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801b644:	68bb      	ldr	r3, [r7, #8]
 801b646:	2b02      	cmp	r3, #2
 801b648:	d016      	beq.n	801b678 <SUBGRF_SetRfTxPower+0x48>
 801b64a:	68bb      	ldr	r3, [r7, #8]
 801b64c:	2b02      	cmp	r3, #2
 801b64e:	dc16      	bgt.n	801b67e <SUBGRF_SetRfTxPower+0x4e>
 801b650:	68bb      	ldr	r3, [r7, #8]
 801b652:	2b00      	cmp	r3, #0
 801b654:	d003      	beq.n	801b65e <SUBGRF_SetRfTxPower+0x2e>
 801b656:	68bb      	ldr	r3, [r7, #8]
 801b658:	2b01      	cmp	r3, #1
 801b65a:	d00a      	beq.n	801b672 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801b65c:	e00f      	b.n	801b67e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801b65e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b662:	2b0f      	cmp	r3, #15
 801b664:	dd02      	ble.n	801b66c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801b666:	2302      	movs	r3, #2
 801b668:	73fb      	strb	r3, [r7, #15]
            break;
 801b66a:	e009      	b.n	801b680 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801b66c:	2301      	movs	r3, #1
 801b66e:	73fb      	strb	r3, [r7, #15]
            break;
 801b670:	e006      	b.n	801b680 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801b672:	2301      	movs	r3, #1
 801b674:	73fb      	strb	r3, [r7, #15]
            break;
 801b676:	e003      	b.n	801b680 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801b678:	2302      	movs	r3, #2
 801b67a:	73fb      	strb	r3, [r7, #15]
            break;
 801b67c:	e000      	b.n	801b680 <SUBGRF_SetRfTxPower+0x50>
            break;
 801b67e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801b680:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801b684:	7bfb      	ldrb	r3, [r7, #15]
 801b686:	2202      	movs	r2, #2
 801b688:	4618      	mov	r0, r3
 801b68a:	f7ff fbcd 	bl	801ae28 <SUBGRF_SetTxParams>

    return paSelect;
 801b68e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b690:	4618      	mov	r0, r3
 801b692:	3710      	adds	r7, #16
 801b694:	46bd      	mov	sp, r7
 801b696:	bd80      	pop	{r7, pc}

0801b698 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801b698:	b480      	push	{r7}
 801b69a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801b69c:	2301      	movs	r3, #1
}
 801b69e:	4618      	mov	r0, r3
 801b6a0:	46bd      	mov	sp, r7
 801b6a2:	bc80      	pop	{r7}
 801b6a4:	4770      	bx	lr
	...

0801b6a8 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b6a8:	b580      	push	{r7, lr}
 801b6aa:	b082      	sub	sp, #8
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801b6b0:	4b03      	ldr	r3, [pc, #12]	@ (801b6c0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	2001      	movs	r0, #1
 801b6b6:	4798      	blx	r3
}
 801b6b8:	bf00      	nop
 801b6ba:	3708      	adds	r7, #8
 801b6bc:	46bd      	mov	sp, r7
 801b6be:	bd80      	pop	{r7, pc}
 801b6c0:	20001ddc 	.word	0x20001ddc

0801b6c4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b6c4:	b580      	push	{r7, lr}
 801b6c6:	b082      	sub	sp, #8
 801b6c8:	af00      	add	r7, sp, #0
 801b6ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801b6cc:	4b03      	ldr	r3, [pc, #12]	@ (801b6dc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801b6ce:	681b      	ldr	r3, [r3, #0]
 801b6d0:	2002      	movs	r0, #2
 801b6d2:	4798      	blx	r3
}
 801b6d4:	bf00      	nop
 801b6d6:	3708      	adds	r7, #8
 801b6d8:	46bd      	mov	sp, r7
 801b6da:	bd80      	pop	{r7, pc}
 801b6dc:	20001ddc 	.word	0x20001ddc

0801b6e0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801b6e0:	b580      	push	{r7, lr}
 801b6e2:	b082      	sub	sp, #8
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801b6e8:	4b03      	ldr	r3, [pc, #12]	@ (801b6f8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	2040      	movs	r0, #64	@ 0x40
 801b6ee:	4798      	blx	r3
}
 801b6f0:	bf00      	nop
 801b6f2:	3708      	adds	r7, #8
 801b6f4:	46bd      	mov	sp, r7
 801b6f6:	bd80      	pop	{r7, pc}
 801b6f8:	20001ddc 	.word	0x20001ddc

0801b6fc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801b6fc:	b580      	push	{r7, lr}
 801b6fe:	b082      	sub	sp, #8
 801b700:	af00      	add	r7, sp, #0
 801b702:	6078      	str	r0, [r7, #4]
 801b704:	460b      	mov	r3, r1
 801b706:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801b708:	78fb      	ldrb	r3, [r7, #3]
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	d002      	beq.n	801b714 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801b70e:	2b01      	cmp	r3, #1
 801b710:	d005      	beq.n	801b71e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801b712:	e00a      	b.n	801b72a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801b714:	4b07      	ldr	r3, [pc, #28]	@ (801b734 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	2080      	movs	r0, #128	@ 0x80
 801b71a:	4798      	blx	r3
            break;
 801b71c:	e005      	b.n	801b72a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801b71e:	4b05      	ldr	r3, [pc, #20]	@ (801b734 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b720:	681b      	ldr	r3, [r3, #0]
 801b722:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b726:	4798      	blx	r3
            break;
 801b728:	bf00      	nop
    }
}
 801b72a:	bf00      	nop
 801b72c:	3708      	adds	r7, #8
 801b72e:	46bd      	mov	sp, r7
 801b730:	bd80      	pop	{r7, pc}
 801b732:	bf00      	nop
 801b734:	20001ddc 	.word	0x20001ddc

0801b738 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b738:	b580      	push	{r7, lr}
 801b73a:	b082      	sub	sp, #8
 801b73c:	af00      	add	r7, sp, #0
 801b73e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801b740:	4b04      	ldr	r3, [pc, #16]	@ (801b754 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801b742:	681b      	ldr	r3, [r3, #0]
 801b744:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801b748:	4798      	blx	r3
}
 801b74a:	bf00      	nop
 801b74c:	3708      	adds	r7, #8
 801b74e:	46bd      	mov	sp, r7
 801b750:	bd80      	pop	{r7, pc}
 801b752:	bf00      	nop
 801b754:	20001ddc 	.word	0x20001ddc

0801b758 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b758:	b580      	push	{r7, lr}
 801b75a:	b082      	sub	sp, #8
 801b75c:	af00      	add	r7, sp, #0
 801b75e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801b760:	4b03      	ldr	r3, [pc, #12]	@ (801b770 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	2020      	movs	r0, #32
 801b766:	4798      	blx	r3
}
 801b768:	bf00      	nop
 801b76a:	3708      	adds	r7, #8
 801b76c:	46bd      	mov	sp, r7
 801b76e:	bd80      	pop	{r7, pc}
 801b770:	20001ddc 	.word	0x20001ddc

0801b774 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b774:	b580      	push	{r7, lr}
 801b776:	b082      	sub	sp, #8
 801b778:	af00      	add	r7, sp, #0
 801b77a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801b77c:	4b03      	ldr	r3, [pc, #12]	@ (801b78c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801b77e:	681b      	ldr	r3, [r3, #0]
 801b780:	2004      	movs	r0, #4
 801b782:	4798      	blx	r3
}
 801b784:	bf00      	nop
 801b786:	3708      	adds	r7, #8
 801b788:	46bd      	mov	sp, r7
 801b78a:	bd80      	pop	{r7, pc}
 801b78c:	20001ddc 	.word	0x20001ddc

0801b790 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b790:	b580      	push	{r7, lr}
 801b792:	b082      	sub	sp, #8
 801b794:	af00      	add	r7, sp, #0
 801b796:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801b798:	4b03      	ldr	r3, [pc, #12]	@ (801b7a8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	2008      	movs	r0, #8
 801b79e:	4798      	blx	r3
}
 801b7a0:	bf00      	nop
 801b7a2:	3708      	adds	r7, #8
 801b7a4:	46bd      	mov	sp, r7
 801b7a6:	bd80      	pop	{r7, pc}
 801b7a8:	20001ddc 	.word	0x20001ddc

0801b7ac <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b7ac:	b580      	push	{r7, lr}
 801b7ae:	b082      	sub	sp, #8
 801b7b0:	af00      	add	r7, sp, #0
 801b7b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801b7b4:	4b03      	ldr	r3, [pc, #12]	@ (801b7c4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801b7b6:	681b      	ldr	r3, [r3, #0]
 801b7b8:	2010      	movs	r0, #16
 801b7ba:	4798      	blx	r3
}
 801b7bc:	bf00      	nop
 801b7be:	3708      	adds	r7, #8
 801b7c0:	46bd      	mov	sp, r7
 801b7c2:	bd80      	pop	{r7, pc}
 801b7c4:	20001ddc 	.word	0x20001ddc

0801b7c8 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b7c8:	b580      	push	{r7, lr}
 801b7ca:	b082      	sub	sp, #8
 801b7cc:	af00      	add	r7, sp, #0
 801b7ce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801b7d0:	4b04      	ldr	r3, [pc, #16]	@ (801b7e4 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801b7d2:	681b      	ldr	r3, [r3, #0]
 801b7d4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801b7d8:	4798      	blx	r3
}
 801b7da:	bf00      	nop
 801b7dc:	3708      	adds	r7, #8
 801b7de:	46bd      	mov	sp, r7
 801b7e0:	bd80      	pop	{r7, pc}
 801b7e2:	bf00      	nop
 801b7e4:	20001ddc 	.word	0x20001ddc

0801b7e8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801b7e8:	b580      	push	{r7, lr}
 801b7ea:	b084      	sub	sp, #16
 801b7ec:	af00      	add	r7, sp, #0
 801b7ee:	4603      	mov	r3, r0
 801b7f0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801b7f2:	f7f0 fb5b 	bl	800beac <RBI_IsDCDC>
 801b7f6:	4603      	mov	r3, r0
 801b7f8:	2b01      	cmp	r3, #1
 801b7fa:	d112      	bne.n	801b822 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801b7fc:	f640 1023 	movw	r0, #2339	@ 0x923
 801b800:	f7ff fe0e 	bl	801b420 <SUBGRF_ReadRegister>
 801b804:	4603      	mov	r3, r0
 801b806:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801b808:	7bfb      	ldrb	r3, [r7, #15]
 801b80a:	f023 0306 	bic.w	r3, r3, #6
 801b80e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801b810:	7bfa      	ldrb	r2, [r7, #15]
 801b812:	79fb      	ldrb	r3, [r7, #7]
 801b814:	4313      	orrs	r3, r2
 801b816:	b2db      	uxtb	r3, r3
 801b818:	4619      	mov	r1, r3
 801b81a:	f640 1023 	movw	r0, #2339	@ 0x923
 801b81e:	f7ff fdeb 	bl	801b3f8 <SUBGRF_WriteRegister>
  }
}
 801b822:	bf00      	nop
 801b824:	3710      	adds	r7, #16
 801b826:	46bd      	mov	sp, r7
 801b828:	bd80      	pop	{r7, pc}
	...

0801b82c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801b82c:	b480      	push	{r7}
 801b82e:	b085      	sub	sp, #20
 801b830:	af00      	add	r7, sp, #0
 801b832:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	2b00      	cmp	r3, #0
 801b838:	d101      	bne.n	801b83e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801b83a:	231f      	movs	r3, #31
 801b83c:	e017      	b.n	801b86e <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b83e:	2300      	movs	r3, #0
 801b840:	73fb      	strb	r3, [r7, #15]
 801b842:	e00f      	b.n	801b864 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801b844:	7bfb      	ldrb	r3, [r7, #15]
 801b846:	4a0c      	ldr	r2, [pc, #48]	@ (801b878 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b848:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b84c:	687a      	ldr	r2, [r7, #4]
 801b84e:	429a      	cmp	r2, r3
 801b850:	d205      	bcs.n	801b85e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801b852:	7bfb      	ldrb	r3, [r7, #15]
 801b854:	4a08      	ldr	r2, [pc, #32]	@ (801b878 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b856:	00db      	lsls	r3, r3, #3
 801b858:	4413      	add	r3, r2
 801b85a:	791b      	ldrb	r3, [r3, #4]
 801b85c:	e007      	b.n	801b86e <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b85e:	7bfb      	ldrb	r3, [r7, #15]
 801b860:	3301      	adds	r3, #1
 801b862:	73fb      	strb	r3, [r7, #15]
 801b864:	7bfb      	ldrb	r3, [r7, #15]
 801b866:	2b15      	cmp	r3, #21
 801b868:	d9ec      	bls.n	801b844 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801b86a:	bf00      	nop
 801b86c:	e7fd      	b.n	801b86a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801b86e:	4618      	mov	r0, r3
 801b870:	3714      	adds	r7, #20
 801b872:	46bd      	mov	sp, r7
 801b874:	bc80      	pop	{r7}
 801b876:	4770      	bx	lr
 801b878:	0801e008 	.word	0x0801e008

0801b87c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801b87c:	b580      	push	{r7, lr}
 801b87e:	b08a      	sub	sp, #40	@ 0x28
 801b880:	af00      	add	r7, sp, #0
 801b882:	6078      	str	r0, [r7, #4]
 801b884:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801b886:	4b35      	ldr	r3, [pc, #212]	@ (801b95c <SUBGRF_GetCFO+0xe0>)
 801b888:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801b88a:	f640 0007 	movw	r0, #2055	@ 0x807
 801b88e:	f7ff fdc7 	bl	801b420 <SUBGRF_ReadRegister>
 801b892:	4603      	mov	r3, r0
 801b894:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801b896:	7ffb      	ldrb	r3, [r7, #31]
 801b898:	08db      	lsrs	r3, r3, #3
 801b89a:	b2db      	uxtb	r3, r3
 801b89c:	f003 0303 	and.w	r3, r3, #3
 801b8a0:	3328      	adds	r3, #40	@ 0x28
 801b8a2:	443b      	add	r3, r7
 801b8a4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801b8a8:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801b8aa:	7ffb      	ldrb	r3, [r7, #31]
 801b8ac:	f003 0307 	and.w	r3, r3, #7
 801b8b0:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801b8b2:	7fba      	ldrb	r2, [r7, #30]
 801b8b4:	7f7b      	ldrb	r3, [r7, #29]
 801b8b6:	3301      	adds	r3, #1
 801b8b8:	fa02 f303 	lsl.w	r3, r2, r3
 801b8bc:	461a      	mov	r2, r3
 801b8be:	4b28      	ldr	r3, [pc, #160]	@ (801b960 <SUBGRF_GetCFO+0xe4>)
 801b8c0:	fbb3 f3f2 	udiv	r3, r3, r2
 801b8c4:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801b8c6:	69ba      	ldr	r2, [r7, #24]
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8ce:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801b8d0:	2301      	movs	r3, #1
 801b8d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801b8d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b8da:	697a      	ldr	r2, [r7, #20]
 801b8dc:	fb02 f303 	mul.w	r3, r2, r3
 801b8e0:	2b07      	cmp	r3, #7
 801b8e2:	d802      	bhi.n	801b8ea <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801b8e4:	2302      	movs	r3, #2
 801b8e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801b8ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b8ee:	697a      	ldr	r2, [r7, #20]
 801b8f0:	fb02 f303 	mul.w	r3, r2, r3
 801b8f4:	2b03      	cmp	r3, #3
 801b8f6:	d802      	bhi.n	801b8fe <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801b8f8:	2304      	movs	r3, #4
 801b8fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801b8fe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801b902:	69bb      	ldr	r3, [r7, #24]
 801b904:	fb02 f303 	mul.w	r3, r2, r3
 801b908:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801b90a:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801b90e:	f7ff fd87 	bl	801b420 <SUBGRF_ReadRegister>
 801b912:	4603      	mov	r3, r0
 801b914:	021b      	lsls	r3, r3, #8
 801b916:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801b91a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801b91c:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801b920:	f7ff fd7e 	bl	801b420 <SUBGRF_ReadRegister>
 801b924:	4603      	mov	r3, r0
 801b926:	461a      	mov	r2, r3
 801b928:	6a3b      	ldr	r3, [r7, #32]
 801b92a:	4313      	orrs	r3, r2
 801b92c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801b92e:	6a3b      	ldr	r3, [r7, #32]
 801b930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801b934:	2b00      	cmp	r3, #0
 801b936:	d005      	beq.n	801b944 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801b938:	6a3b      	ldr	r3, [r7, #32]
 801b93a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801b93e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801b942:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801b944:	693b      	ldr	r3, [r7, #16]
 801b946:	095b      	lsrs	r3, r3, #5
 801b948:	6a3a      	ldr	r2, [r7, #32]
 801b94a:	fb02 f303 	mul.w	r3, r2, r3
 801b94e:	11da      	asrs	r2, r3, #7
 801b950:	683b      	ldr	r3, [r7, #0]
 801b952:	601a      	str	r2, [r3, #0]
}
 801b954:	bf00      	nop
 801b956:	3728      	adds	r7, #40	@ 0x28
 801b958:	46bd      	mov	sp, r7
 801b95a:	bd80      	pop	{r7, pc}
 801b95c:	0c0a0804 	.word	0x0c0a0804
 801b960:	01e84800 	.word	0x01e84800

0801b964 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801b964:	b480      	push	{r7}
 801b966:	b087      	sub	sp, #28
 801b968:	af00      	add	r7, sp, #0
 801b96a:	4603      	mov	r3, r0
 801b96c:	60b9      	str	r1, [r7, #8]
 801b96e:	607a      	str	r2, [r7, #4]
 801b970:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801b972:	2300      	movs	r3, #0
 801b974:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801b976:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b97a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801b97c:	697b      	ldr	r3, [r7, #20]
}
 801b97e:	4618      	mov	r0, r3
 801b980:	371c      	adds	r7, #28
 801b982:	46bd      	mov	sp, r7
 801b984:	bc80      	pop	{r7}
 801b986:	4770      	bx	lr

0801b988 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801b988:	b480      	push	{r7}
 801b98a:	b087      	sub	sp, #28
 801b98c:	af00      	add	r7, sp, #0
 801b98e:	4603      	mov	r3, r0
 801b990:	60b9      	str	r1, [r7, #8]
 801b992:	607a      	str	r2, [r7, #4]
 801b994:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801b996:	2300      	movs	r3, #0
 801b998:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801b99a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b99e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801b9a0:	697b      	ldr	r3, [r7, #20]
}
 801b9a2:	4618      	mov	r0, r3
 801b9a4:	371c      	adds	r7, #28
 801b9a6:	46bd      	mov	sp, r7
 801b9a8:	bc80      	pop	{r7}
 801b9aa:	4770      	bx	lr

0801b9ac <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801b9ac:	b480      	push	{r7}
 801b9ae:	b085      	sub	sp, #20
 801b9b0:	af00      	add	r7, sp, #0
 801b9b2:	60f8      	str	r0, [r7, #12]
 801b9b4:	60b9      	str	r1, [r7, #8]
 801b9b6:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801b9b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801b9bc:	4618      	mov	r0, r3
 801b9be:	3714      	adds	r7, #20
 801b9c0:	46bd      	mov	sp, r7
 801b9c2:	bc80      	pop	{r7}
 801b9c4:	4770      	bx	lr

0801b9c6 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801b9c6:	b480      	push	{r7}
 801b9c8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801b9ca:	bf00      	nop
 801b9cc:	46bd      	mov	sp, r7
 801b9ce:	bc80      	pop	{r7}
 801b9d0:	4770      	bx	lr

0801b9d2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801b9d2:	b480      	push	{r7}
 801b9d4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801b9d6:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801b9d8:	4618      	mov	r0, r3
 801b9da:	46bd      	mov	sp, r7
 801b9dc:	bc80      	pop	{r7}
 801b9de:	4770      	bx	lr

0801b9e0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801b9e0:	b480      	push	{r7}
 801b9e2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801b9e4:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801b9e6:	4618      	mov	r0, r3
 801b9e8:	46bd      	mov	sp, r7
 801b9ea:	bc80      	pop	{r7}
 801b9ec:	4770      	bx	lr

0801b9ee <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801b9ee:	b480      	push	{r7}
 801b9f0:	b083      	sub	sp, #12
 801b9f2:	af00      	add	r7, sp, #0
 801b9f4:	4603      	mov	r3, r0
 801b9f6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801b9f8:	bf00      	nop
 801b9fa:	370c      	adds	r7, #12
 801b9fc:	46bd      	mov	sp, r7
 801b9fe:	bc80      	pop	{r7}
 801ba00:	4770      	bx	lr

0801ba02 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801ba02:	b480      	push	{r7}
 801ba04:	b087      	sub	sp, #28
 801ba06:	af00      	add	r7, sp, #0
 801ba08:	60f8      	str	r0, [r7, #12]
 801ba0a:	460b      	mov	r3, r1
 801ba0c:	607a      	str	r2, [r7, #4]
 801ba0e:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801ba10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ba14:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801ba16:	697b      	ldr	r3, [r7, #20]
}
 801ba18:	4618      	mov	r0, r3
 801ba1a:	371c      	adds	r7, #28
 801ba1c:	46bd      	mov	sp, r7
 801ba1e:	bc80      	pop	{r7}
 801ba20:	4770      	bx	lr

0801ba22 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801ba22:	b480      	push	{r7}
 801ba24:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801ba26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801ba2a:	4618      	mov	r0, r3
 801ba2c:	46bd      	mov	sp, r7
 801ba2e:	bc80      	pop	{r7}
 801ba30:	4770      	bx	lr

0801ba32 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801ba32:	b480      	push	{r7}
 801ba34:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801ba36:	bf00      	nop
 801ba38:	46bd      	mov	sp, r7
 801ba3a:	bc80      	pop	{r7}
 801ba3c:	4770      	bx	lr

0801ba3e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801ba3e:	b480      	push	{r7}
 801ba40:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801ba42:	bf00      	nop
 801ba44:	46bd      	mov	sp, r7
 801ba46:	bc80      	pop	{r7}
 801ba48:	4770      	bx	lr

0801ba4a <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801ba4a:	b480      	push	{r7}
 801ba4c:	b083      	sub	sp, #12
 801ba4e:	af00      	add	r7, sp, #0
 801ba50:	4603      	mov	r3, r0
 801ba52:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801ba54:	bf00      	nop
 801ba56:	370c      	adds	r7, #12
 801ba58:	46bd      	mov	sp, r7
 801ba5a:	bc80      	pop	{r7}
 801ba5c:	4770      	bx	lr
	...

0801ba60 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801ba60:	b480      	push	{r7}
 801ba62:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ba64:	4b04      	ldr	r3, [pc, #16]	@ (801ba78 <UTIL_LPM_Init+0x18>)
 801ba66:	2200      	movs	r2, #0
 801ba68:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ba6a:	4b04      	ldr	r3, [pc, #16]	@ (801ba7c <UTIL_LPM_Init+0x1c>)
 801ba6c:	2200      	movs	r2, #0
 801ba6e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ba70:	bf00      	nop
 801ba72:	46bd      	mov	sp, r7
 801ba74:	bc80      	pop	{r7}
 801ba76:	4770      	bx	lr
 801ba78:	20001de0 	.word	0x20001de0
 801ba7c:	20001de4 	.word	0x20001de4

0801ba80 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ba80:	b480      	push	{r7}
 801ba82:	b087      	sub	sp, #28
 801ba84:	af00      	add	r7, sp, #0
 801ba86:	6078      	str	r0, [r7, #4]
 801ba88:	460b      	mov	r3, r1
 801ba8a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba8c:	f3ef 8310 	mrs	r3, PRIMASK
 801ba90:	613b      	str	r3, [r7, #16]
  return(result);
 801ba92:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ba94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba96:	b672      	cpsid	i
}
 801ba98:	bf00      	nop
  
  switch( state )
 801ba9a:	78fb      	ldrb	r3, [r7, #3]
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d008      	beq.n	801bab2 <UTIL_LPM_SetStopMode+0x32>
 801baa0:	2b01      	cmp	r3, #1
 801baa2:	d10e      	bne.n	801bac2 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801baa4:	4b0d      	ldr	r3, [pc, #52]	@ (801badc <UTIL_LPM_SetStopMode+0x5c>)
 801baa6:	681a      	ldr	r2, [r3, #0]
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	4313      	orrs	r3, r2
 801baac:	4a0b      	ldr	r2, [pc, #44]	@ (801badc <UTIL_LPM_SetStopMode+0x5c>)
 801baae:	6013      	str	r3, [r2, #0]
      break;
 801bab0:	e008      	b.n	801bac4 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	43da      	mvns	r2, r3
 801bab6:	4b09      	ldr	r3, [pc, #36]	@ (801badc <UTIL_LPM_SetStopMode+0x5c>)
 801bab8:	681b      	ldr	r3, [r3, #0]
 801baba:	4013      	ands	r3, r2
 801babc:	4a07      	ldr	r2, [pc, #28]	@ (801badc <UTIL_LPM_SetStopMode+0x5c>)
 801babe:	6013      	str	r3, [r2, #0]
      break;
 801bac0:	e000      	b.n	801bac4 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801bac2:	bf00      	nop
 801bac4:	697b      	ldr	r3, [r7, #20]
 801bac6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bac8:	68fb      	ldr	r3, [r7, #12]
 801baca:	f383 8810 	msr	PRIMASK, r3
}
 801bace:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801bad0:	bf00      	nop
 801bad2:	371c      	adds	r7, #28
 801bad4:	46bd      	mov	sp, r7
 801bad6:	bc80      	pop	{r7}
 801bad8:	4770      	bx	lr
 801bada:	bf00      	nop
 801badc:	20001de0 	.word	0x20001de0

0801bae0 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801bae0:	b480      	push	{r7}
 801bae2:	b087      	sub	sp, #28
 801bae4:	af00      	add	r7, sp, #0
 801bae6:	6078      	str	r0, [r7, #4]
 801bae8:	460b      	mov	r3, r1
 801baea:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801baec:	f3ef 8310 	mrs	r3, PRIMASK
 801baf0:	613b      	str	r3, [r7, #16]
  return(result);
 801baf2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801baf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801baf6:	b672      	cpsid	i
}
 801baf8:	bf00      	nop
  
  switch(state)
 801bafa:	78fb      	ldrb	r3, [r7, #3]
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d008      	beq.n	801bb12 <UTIL_LPM_SetOffMode+0x32>
 801bb00:	2b01      	cmp	r3, #1
 801bb02:	d10e      	bne.n	801bb22 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801bb04:	4b0d      	ldr	r3, [pc, #52]	@ (801bb3c <UTIL_LPM_SetOffMode+0x5c>)
 801bb06:	681a      	ldr	r2, [r3, #0]
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	4313      	orrs	r3, r2
 801bb0c:	4a0b      	ldr	r2, [pc, #44]	@ (801bb3c <UTIL_LPM_SetOffMode+0x5c>)
 801bb0e:	6013      	str	r3, [r2, #0]
      break;
 801bb10:	e008      	b.n	801bb24 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	43da      	mvns	r2, r3
 801bb16:	4b09      	ldr	r3, [pc, #36]	@ (801bb3c <UTIL_LPM_SetOffMode+0x5c>)
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	4013      	ands	r3, r2
 801bb1c:	4a07      	ldr	r2, [pc, #28]	@ (801bb3c <UTIL_LPM_SetOffMode+0x5c>)
 801bb1e:	6013      	str	r3, [r2, #0]
      break;
 801bb20:	e000      	b.n	801bb24 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801bb22:	bf00      	nop
 801bb24:	697b      	ldr	r3, [r7, #20]
 801bb26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb28:	68fb      	ldr	r3, [r7, #12]
 801bb2a:	f383 8810 	msr	PRIMASK, r3
}
 801bb2e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801bb30:	bf00      	nop
 801bb32:	371c      	adds	r7, #28
 801bb34:	46bd      	mov	sp, r7
 801bb36:	bc80      	pop	{r7}
 801bb38:	4770      	bx	lr
 801bb3a:	bf00      	nop
 801bb3c:	20001de4 	.word	0x20001de4

0801bb40 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801bb40:	b580      	push	{r7, lr}
 801bb42:	b084      	sub	sp, #16
 801bb44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb46:	f3ef 8310 	mrs	r3, PRIMASK
 801bb4a:	60bb      	str	r3, [r7, #8]
  return(result);
 801bb4c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801bb4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb50:	b672      	cpsid	i
}
 801bb52:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801bb54:	4b12      	ldr	r3, [pc, #72]	@ (801bba0 <UTIL_LPM_EnterLowPower+0x60>)
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d006      	beq.n	801bb6a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801bb5c:	4b11      	ldr	r3, [pc, #68]	@ (801bba4 <UTIL_LPM_EnterLowPower+0x64>)
 801bb5e:	681b      	ldr	r3, [r3, #0]
 801bb60:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801bb62:	4b10      	ldr	r3, [pc, #64]	@ (801bba4 <UTIL_LPM_EnterLowPower+0x64>)
 801bb64:	685b      	ldr	r3, [r3, #4]
 801bb66:	4798      	blx	r3
 801bb68:	e010      	b.n	801bb8c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801bb6a:	4b0f      	ldr	r3, [pc, #60]	@ (801bba8 <UTIL_LPM_EnterLowPower+0x68>)
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d006      	beq.n	801bb80 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801bb72:	4b0c      	ldr	r3, [pc, #48]	@ (801bba4 <UTIL_LPM_EnterLowPower+0x64>)
 801bb74:	689b      	ldr	r3, [r3, #8]
 801bb76:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801bb78:	4b0a      	ldr	r3, [pc, #40]	@ (801bba4 <UTIL_LPM_EnterLowPower+0x64>)
 801bb7a:	68db      	ldr	r3, [r3, #12]
 801bb7c:	4798      	blx	r3
 801bb7e:	e005      	b.n	801bb8c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801bb80:	4b08      	ldr	r3, [pc, #32]	@ (801bba4 <UTIL_LPM_EnterLowPower+0x64>)
 801bb82:	691b      	ldr	r3, [r3, #16]
 801bb84:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801bb86:	4b07      	ldr	r3, [pc, #28]	@ (801bba4 <UTIL_LPM_EnterLowPower+0x64>)
 801bb88:	695b      	ldr	r3, [r3, #20]
 801bb8a:	4798      	blx	r3
 801bb8c:	68fb      	ldr	r3, [r7, #12]
 801bb8e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	f383 8810 	msr	PRIMASK, r3
}
 801bb96:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801bb98:	bf00      	nop
 801bb9a:	3710      	adds	r7, #16
 801bb9c:	46bd      	mov	sp, r7
 801bb9e:	bd80      	pop	{r7, pc}
 801bba0:	20001de0 	.word	0x20001de0
 801bba4:	0801d9f8 	.word	0x0801d9f8
 801bba8:	20001de4 	.word	0x20001de4

0801bbac <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801bbac:	b480      	push	{r7}
 801bbae:	b087      	sub	sp, #28
 801bbb0:	af00      	add	r7, sp, #0
 801bbb2:	60f8      	str	r0, [r7, #12]
 801bbb4:	60b9      	str	r1, [r7, #8]
 801bbb6:	4613      	mov	r3, r2
 801bbb8:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801bbbe:	68bb      	ldr	r3, [r7, #8]
 801bbc0:	613b      	str	r3, [r7, #16]

  while( size-- )
 801bbc2:	e007      	b.n	801bbd4 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801bbc4:	693a      	ldr	r2, [r7, #16]
 801bbc6:	1c53      	adds	r3, r2, #1
 801bbc8:	613b      	str	r3, [r7, #16]
 801bbca:	697b      	ldr	r3, [r7, #20]
 801bbcc:	1c59      	adds	r1, r3, #1
 801bbce:	6179      	str	r1, [r7, #20]
 801bbd0:	7812      	ldrb	r2, [r2, #0]
 801bbd2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801bbd4:	88fb      	ldrh	r3, [r7, #6]
 801bbd6:	1e5a      	subs	r2, r3, #1
 801bbd8:	80fa      	strh	r2, [r7, #6]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d1f2      	bne.n	801bbc4 <UTIL_MEM_cpy_8+0x18>
    }
}
 801bbde:	bf00      	nop
 801bbe0:	bf00      	nop
 801bbe2:	371c      	adds	r7, #28
 801bbe4:	46bd      	mov	sp, r7
 801bbe6:	bc80      	pop	{r7}
 801bbe8:	4770      	bx	lr

0801bbea <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801bbea:	b480      	push	{r7}
 801bbec:	b085      	sub	sp, #20
 801bbee:	af00      	add	r7, sp, #0
 801bbf0:	6078      	str	r0, [r7, #4]
 801bbf2:	460b      	mov	r3, r1
 801bbf4:	70fb      	strb	r3, [r7, #3]
 801bbf6:	4613      	mov	r3, r2
 801bbf8:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801bbfe:	e004      	b.n	801bc0a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801bc00:	68fb      	ldr	r3, [r7, #12]
 801bc02:	1c5a      	adds	r2, r3, #1
 801bc04:	60fa      	str	r2, [r7, #12]
 801bc06:	78fa      	ldrb	r2, [r7, #3]
 801bc08:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801bc0a:	883b      	ldrh	r3, [r7, #0]
 801bc0c:	1e5a      	subs	r2, r3, #1
 801bc0e:	803a      	strh	r2, [r7, #0]
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	d1f5      	bne.n	801bc00 <UTIL_MEM_set_8+0x16>
  }
}
 801bc14:	bf00      	nop
 801bc16:	bf00      	nop
 801bc18:	3714      	adds	r7, #20
 801bc1a:	46bd      	mov	sp, r7
 801bc1c:	bc80      	pop	{r7}
 801bc1e:	4770      	bx	lr

0801bc20 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801bc20:	b082      	sub	sp, #8
 801bc22:	b480      	push	{r7}
 801bc24:	b087      	sub	sp, #28
 801bc26:	af00      	add	r7, sp, #0
 801bc28:	60f8      	str	r0, [r7, #12]
 801bc2a:	1d38      	adds	r0, r7, #4
 801bc2c:	e880 0006 	stmia.w	r0, {r1, r2}
 801bc30:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801bc32:	2300      	movs	r3, #0
 801bc34:	613b      	str	r3, [r7, #16]
 801bc36:	2300      	movs	r3, #0
 801bc38:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801bc3a:	687a      	ldr	r2, [r7, #4]
 801bc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc3e:	4413      	add	r3, r2
 801bc40:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801bc42:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801bc46:	b29a      	uxth	r2, r3
 801bc48:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801bc4c:	b29b      	uxth	r3, r3
 801bc4e:	4413      	add	r3, r2
 801bc50:	b29b      	uxth	r3, r3
 801bc52:	b21b      	sxth	r3, r3
 801bc54:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801bc56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bc5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801bc5e:	db0a      	blt.n	801bc76 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801bc60:	693b      	ldr	r3, [r7, #16]
 801bc62:	3301      	adds	r3, #1
 801bc64:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801bc66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bc6a:	b29b      	uxth	r3, r3
 801bc6c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801bc70:	b29b      	uxth	r3, r3
 801bc72:	b21b      	sxth	r3, r3
 801bc74:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801bc76:	68fb      	ldr	r3, [r7, #12]
 801bc78:	461a      	mov	r2, r3
 801bc7a:	f107 0310 	add.w	r3, r7, #16
 801bc7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bc82:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bc86:	68f8      	ldr	r0, [r7, #12]
 801bc88:	371c      	adds	r7, #28
 801bc8a:	46bd      	mov	sp, r7
 801bc8c:	bc80      	pop	{r7}
 801bc8e:	b002      	add	sp, #8
 801bc90:	4770      	bx	lr

0801bc92 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801bc92:	b082      	sub	sp, #8
 801bc94:	b480      	push	{r7}
 801bc96:	b087      	sub	sp, #28
 801bc98:	af00      	add	r7, sp, #0
 801bc9a:	60f8      	str	r0, [r7, #12]
 801bc9c:	1d38      	adds	r0, r7, #4
 801bc9e:	e880 0006 	stmia.w	r0, {r1, r2}
 801bca2:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801bca4:	2300      	movs	r3, #0
 801bca6:	613b      	str	r3, [r7, #16]
 801bca8:	2300      	movs	r3, #0
 801bcaa:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801bcac:	687a      	ldr	r2, [r7, #4]
 801bcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcb0:	1ad3      	subs	r3, r2, r3
 801bcb2:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801bcb4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801bcb8:	b29a      	uxth	r2, r3
 801bcba:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801bcbe:	b29b      	uxth	r3, r3
 801bcc0:	1ad3      	subs	r3, r2, r3
 801bcc2:	b29b      	uxth	r3, r3
 801bcc4:	b21b      	sxth	r3, r3
 801bcc6:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801bcc8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	da0a      	bge.n	801bce6 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801bcd0:	693b      	ldr	r3, [r7, #16]
 801bcd2:	3b01      	subs	r3, #1
 801bcd4:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801bcd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801bcda:	b29b      	uxth	r3, r3
 801bcdc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801bce0:	b29b      	uxth	r3, r3
 801bce2:	b21b      	sxth	r3, r3
 801bce4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801bce6:	68fb      	ldr	r3, [r7, #12]
 801bce8:	461a      	mov	r2, r3
 801bcea:	f107 0310 	add.w	r3, r7, #16
 801bcee:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bcf2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bcf6:	68f8      	ldr	r0, [r7, #12]
 801bcf8:	371c      	adds	r7, #28
 801bcfa:	46bd      	mov	sp, r7
 801bcfc:	bc80      	pop	{r7}
 801bcfe:	b002      	add	sp, #8
 801bd00:	4770      	bx	lr
	...

0801bd04 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801bd04:	b580      	push	{r7, lr}
 801bd06:	b088      	sub	sp, #32
 801bd08:	af02      	add	r7, sp, #8
 801bd0a:	463b      	mov	r3, r7
 801bd0c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bd10:	2300      	movs	r3, #0
 801bd12:	60bb      	str	r3, [r7, #8]
 801bd14:	2300      	movs	r3, #0
 801bd16:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bd18:	4b10      	ldr	r3, [pc, #64]	@ (801bd5c <SysTimeSet+0x58>)
 801bd1a:	691b      	ldr	r3, [r3, #16]
 801bd1c:	f107 0208 	add.w	r2, r7, #8
 801bd20:	3204      	adds	r2, #4
 801bd22:	4610      	mov	r0, r2
 801bd24:	4798      	blx	r3
 801bd26:	4603      	mov	r3, r0
 801bd28:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801bd2a:	f107 0010 	add.w	r0, r7, #16
 801bd2e:	68fb      	ldr	r3, [r7, #12]
 801bd30:	9300      	str	r3, [sp, #0]
 801bd32:	68bb      	ldr	r3, [r7, #8]
 801bd34:	463a      	mov	r2, r7
 801bd36:	ca06      	ldmia	r2, {r1, r2}
 801bd38:	f7ff ffab 	bl	801bc92 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801bd3c:	4b07      	ldr	r3, [pc, #28]	@ (801bd5c <SysTimeSet+0x58>)
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	693a      	ldr	r2, [r7, #16]
 801bd42:	4610      	mov	r0, r2
 801bd44:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801bd46:	4b05      	ldr	r3, [pc, #20]	@ (801bd5c <SysTimeSet+0x58>)
 801bd48:	689b      	ldr	r3, [r3, #8]
 801bd4a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801bd4e:	4610      	mov	r0, r2
 801bd50:	4798      	blx	r3
}
 801bd52:	bf00      	nop
 801bd54:	3718      	adds	r7, #24
 801bd56:	46bd      	mov	sp, r7
 801bd58:	bd80      	pop	{r7, pc}
 801bd5a:	bf00      	nop
 801bd5c:	0801dadc 	.word	0x0801dadc

0801bd60 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801bd60:	b580      	push	{r7, lr}
 801bd62:	b08a      	sub	sp, #40	@ 0x28
 801bd64:	af02      	add	r7, sp, #8
 801bd66:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bd68:	2300      	movs	r3, #0
 801bd6a:	61bb      	str	r3, [r7, #24]
 801bd6c:	2300      	movs	r3, #0
 801bd6e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801bd70:	2300      	movs	r3, #0
 801bd72:	613b      	str	r3, [r7, #16]
 801bd74:	2300      	movs	r3, #0
 801bd76:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bd78:	4b14      	ldr	r3, [pc, #80]	@ (801bdcc <SysTimeGet+0x6c>)
 801bd7a:	691b      	ldr	r3, [r3, #16]
 801bd7c:	f107 0218 	add.w	r2, r7, #24
 801bd80:	3204      	adds	r2, #4
 801bd82:	4610      	mov	r0, r2
 801bd84:	4798      	blx	r3
 801bd86:	4603      	mov	r3, r0
 801bd88:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801bd8a:	4b10      	ldr	r3, [pc, #64]	@ (801bdcc <SysTimeGet+0x6c>)
 801bd8c:	68db      	ldr	r3, [r3, #12]
 801bd8e:	4798      	blx	r3
 801bd90:	4603      	mov	r3, r0
 801bd92:	b21b      	sxth	r3, r3
 801bd94:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801bd96:	4b0d      	ldr	r3, [pc, #52]	@ (801bdcc <SysTimeGet+0x6c>)
 801bd98:	685b      	ldr	r3, [r3, #4]
 801bd9a:	4798      	blx	r3
 801bd9c:	4603      	mov	r3, r0
 801bd9e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801bda0:	f107 0010 	add.w	r0, r7, #16
 801bda4:	69fb      	ldr	r3, [r7, #28]
 801bda6:	9300      	str	r3, [sp, #0]
 801bda8:	69bb      	ldr	r3, [r7, #24]
 801bdaa:	f107 0208 	add.w	r2, r7, #8
 801bdae:	ca06      	ldmia	r2, {r1, r2}
 801bdb0:	f7ff ff36 	bl	801bc20 <SysTimeAdd>

  return sysTime;
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	461a      	mov	r2, r3
 801bdb8:	f107 0310 	add.w	r3, r7, #16
 801bdbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bdc0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801bdc4:	6878      	ldr	r0, [r7, #4]
 801bdc6:	3720      	adds	r7, #32
 801bdc8:	46bd      	mov	sp, r7
 801bdca:	bd80      	pop	{r7, pc}
 801bdcc:	0801dadc 	.word	0x0801dadc

0801bdd0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801bdd0:	b580      	push	{r7, lr}
 801bdd2:	b084      	sub	sp, #16
 801bdd4:	af00      	add	r7, sp, #0
 801bdd6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bdd8:	2300      	movs	r3, #0
 801bdda:	60bb      	str	r3, [r7, #8]
 801bddc:	2300      	movs	r3, #0
 801bdde:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bde0:	4b0a      	ldr	r3, [pc, #40]	@ (801be0c <SysTimeGetMcuTime+0x3c>)
 801bde2:	691b      	ldr	r3, [r3, #16]
 801bde4:	f107 0208 	add.w	r2, r7, #8
 801bde8:	3204      	adds	r2, #4
 801bdea:	4610      	mov	r0, r2
 801bdec:	4798      	blx	r3
 801bdee:	4603      	mov	r3, r0
 801bdf0:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	461a      	mov	r2, r3
 801bdf6:	f107 0308 	add.w	r3, r7, #8
 801bdfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bdfe:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801be02:	6878      	ldr	r0, [r7, #4]
 801be04:	3710      	adds	r7, #16
 801be06:	46bd      	mov	sp, r7
 801be08:	bd80      	pop	{r7, pc}
 801be0a:	bf00      	nop
 801be0c:	0801dadc 	.word	0x0801dadc

0801be10 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801be10:	b580      	push	{r7, lr}
 801be12:	b088      	sub	sp, #32
 801be14:	af02      	add	r7, sp, #8
 801be16:	463b      	mov	r3, r7
 801be18:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801be1c:	4b0f      	ldr	r3, [pc, #60]	@ (801be5c <SysTimeToMs+0x4c>)
 801be1e:	68db      	ldr	r3, [r3, #12]
 801be20:	4798      	blx	r3
 801be22:	4603      	mov	r3, r0
 801be24:	b21b      	sxth	r3, r3
 801be26:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801be28:	4b0c      	ldr	r3, [pc, #48]	@ (801be5c <SysTimeToMs+0x4c>)
 801be2a:	685b      	ldr	r3, [r3, #4]
 801be2c:	4798      	blx	r3
 801be2e:	4603      	mov	r3, r0
 801be30:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801be32:	f107 0008 	add.w	r0, r7, #8
 801be36:	697b      	ldr	r3, [r7, #20]
 801be38:	9300      	str	r3, [sp, #0]
 801be3a:	693b      	ldr	r3, [r7, #16]
 801be3c:	463a      	mov	r2, r7
 801be3e:	ca06      	ldmia	r2, {r1, r2}
 801be40:	f7ff ff27 	bl	801bc92 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801be44:	68bb      	ldr	r3, [r7, #8]
 801be46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801be4a:	fb02 f303 	mul.w	r3, r2, r3
 801be4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801be52:	4413      	add	r3, r2
}
 801be54:	4618      	mov	r0, r3
 801be56:	3718      	adds	r7, #24
 801be58:	46bd      	mov	sp, r7
 801be5a:	bd80      	pop	{r7, pc}
 801be5c:	0801dadc 	.word	0x0801dadc

0801be60 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801be60:	b580      	push	{r7, lr}
 801be62:	b08a      	sub	sp, #40	@ 0x28
 801be64:	af02      	add	r7, sp, #8
 801be66:	6078      	str	r0, [r7, #4]
 801be68:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801be6a:	683b      	ldr	r3, [r7, #0]
 801be6c:	4a19      	ldr	r2, [pc, #100]	@ (801bed4 <SysTimeFromMs+0x74>)
 801be6e:	fba2 2303 	umull	r2, r3, r2, r3
 801be72:	099b      	lsrs	r3, r3, #6
 801be74:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801be76:	69fb      	ldr	r3, [r7, #28]
 801be78:	617b      	str	r3, [r7, #20]
 801be7a:	683b      	ldr	r3, [r7, #0]
 801be7c:	b29a      	uxth	r2, r3
 801be7e:	69fb      	ldr	r3, [r7, #28]
 801be80:	b29b      	uxth	r3, r3
 801be82:	4619      	mov	r1, r3
 801be84:	0149      	lsls	r1, r1, #5
 801be86:	1ac9      	subs	r1, r1, r3
 801be88:	0089      	lsls	r1, r1, #2
 801be8a:	440b      	add	r3, r1
 801be8c:	00db      	lsls	r3, r3, #3
 801be8e:	b29b      	uxth	r3, r3
 801be90:	1ad3      	subs	r3, r2, r3
 801be92:	b29b      	uxth	r3, r3
 801be94:	b21b      	sxth	r3, r3
 801be96:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801be98:	f107 030c 	add.w	r3, r7, #12
 801be9c:	2200      	movs	r2, #0
 801be9e:	601a      	str	r2, [r3, #0]
 801bea0:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801bea2:	4b0d      	ldr	r3, [pc, #52]	@ (801bed8 <SysTimeFromMs+0x78>)
 801bea4:	68db      	ldr	r3, [r3, #12]
 801bea6:	4798      	blx	r3
 801bea8:	4603      	mov	r3, r0
 801beaa:	b21b      	sxth	r3, r3
 801beac:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801beae:	4b0a      	ldr	r3, [pc, #40]	@ (801bed8 <SysTimeFromMs+0x78>)
 801beb0:	685b      	ldr	r3, [r3, #4]
 801beb2:	4798      	blx	r3
 801beb4:	4603      	mov	r3, r0
 801beb6:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801beb8:	6878      	ldr	r0, [r7, #4]
 801beba:	693b      	ldr	r3, [r7, #16]
 801bebc:	9300      	str	r3, [sp, #0]
 801bebe:	68fb      	ldr	r3, [r7, #12]
 801bec0:	f107 0214 	add.w	r2, r7, #20
 801bec4:	ca06      	ldmia	r2, {r1, r2}
 801bec6:	f7ff feab 	bl	801bc20 <SysTimeAdd>
}
 801beca:	6878      	ldr	r0, [r7, #4]
 801becc:	3720      	adds	r7, #32
 801bece:	46bd      	mov	sp, r7
 801bed0:	bd80      	pop	{r7, pc}
 801bed2:	bf00      	nop
 801bed4:	10624dd3 	.word	0x10624dd3
 801bed8:	0801dadc 	.word	0x0801dadc

0801bedc <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801bedc:	b480      	push	{r7}
 801bede:	b085      	sub	sp, #20
 801bee0:	af00      	add	r7, sp, #0
 801bee2:	6078      	str	r0, [r7, #4]
  int i = 0;
 801bee4:	2300      	movs	r3, #0
 801bee6:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801bee8:	e00e      	b.n	801bf08 <ee_skip_atoi+0x2c>
 801beea:	68fa      	ldr	r2, [r7, #12]
 801beec:	4613      	mov	r3, r2
 801beee:	009b      	lsls	r3, r3, #2
 801bef0:	4413      	add	r3, r2
 801bef2:	005b      	lsls	r3, r3, #1
 801bef4:	4618      	mov	r0, r3
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	681b      	ldr	r3, [r3, #0]
 801befa:	1c59      	adds	r1, r3, #1
 801befc:	687a      	ldr	r2, [r7, #4]
 801befe:	6011      	str	r1, [r2, #0]
 801bf00:	781b      	ldrb	r3, [r3, #0]
 801bf02:	4403      	add	r3, r0
 801bf04:	3b30      	subs	r3, #48	@ 0x30
 801bf06:	60fb      	str	r3, [r7, #12]
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	781b      	ldrb	r3, [r3, #0]
 801bf0e:	2b2f      	cmp	r3, #47	@ 0x2f
 801bf10:	d904      	bls.n	801bf1c <ee_skip_atoi+0x40>
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	781b      	ldrb	r3, [r3, #0]
 801bf18:	2b39      	cmp	r3, #57	@ 0x39
 801bf1a:	d9e6      	bls.n	801beea <ee_skip_atoi+0xe>
  return i;
 801bf1c:	68fb      	ldr	r3, [r7, #12]
}
 801bf1e:	4618      	mov	r0, r3
 801bf20:	3714      	adds	r7, #20
 801bf22:	46bd      	mov	sp, r7
 801bf24:	bc80      	pop	{r7}
 801bf26:	4770      	bx	lr

0801bf28 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801bf28:	b480      	push	{r7}
 801bf2a:	b099      	sub	sp, #100	@ 0x64
 801bf2c:	af00      	add	r7, sp, #0
 801bf2e:	60f8      	str	r0, [r7, #12]
 801bf30:	60b9      	str	r1, [r7, #8]
 801bf32:	607a      	str	r2, [r7, #4]
 801bf34:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801bf36:	4b71      	ldr	r3, [pc, #452]	@ (801c0fc <ee_number+0x1d4>)
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801bf3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bf3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d002      	beq.n	801bf4c <ee_number+0x24>
 801bf46:	4b6e      	ldr	r3, [pc, #440]	@ (801c100 <ee_number+0x1d8>)
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801bf4c:	683b      	ldr	r3, [r7, #0]
 801bf4e:	2b01      	cmp	r3, #1
 801bf50:	dd02      	ble.n	801bf58 <ee_number+0x30>
 801bf52:	683b      	ldr	r3, [r7, #0]
 801bf54:	2b24      	cmp	r3, #36	@ 0x24
 801bf56:	dd01      	ble.n	801bf5c <ee_number+0x34>
 801bf58:	2300      	movs	r3, #0
 801bf5a:	e0ca      	b.n	801c0f2 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801bf5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bf5e:	f003 0301 	and.w	r3, r3, #1
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	d001      	beq.n	801bf6a <ee_number+0x42>
 801bf66:	2330      	movs	r3, #48	@ 0x30
 801bf68:	e000      	b.n	801bf6c <ee_number+0x44>
 801bf6a:	2320      	movs	r3, #32
 801bf6c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801bf70:	2300      	movs	r3, #0
 801bf72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801bf76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bf78:	f003 0302 	and.w	r3, r3, #2
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d00b      	beq.n	801bf98 <ee_number+0x70>
  {
    if (num < 0)
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	da08      	bge.n	801bf98 <ee_number+0x70>
    {
      sign = '-';
 801bf86:	232d      	movs	r3, #45	@ 0x2d
 801bf88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	425b      	negs	r3, r3
 801bf90:	607b      	str	r3, [r7, #4]
      size--;
 801bf92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bf94:	3b01      	subs	r3, #1
 801bf96:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801bf98:	2300      	movs	r3, #0
 801bf9a:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	2b00      	cmp	r3, #0
 801bfa0:	d11e      	bne.n	801bfe0 <ee_number+0xb8>
    tmp[i++] = '0';
 801bfa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bfa4:	1c5a      	adds	r2, r3, #1
 801bfa6:	657a      	str	r2, [r7, #84]	@ 0x54
 801bfa8:	3360      	adds	r3, #96	@ 0x60
 801bfaa:	443b      	add	r3, r7
 801bfac:	2230      	movs	r2, #48	@ 0x30
 801bfae:	f803 2c50 	strb.w	r2, [r3, #-80]
 801bfb2:	e018      	b.n	801bfe6 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801bfb4:	687b      	ldr	r3, [r7, #4]
 801bfb6:	683a      	ldr	r2, [r7, #0]
 801bfb8:	fbb3 f1f2 	udiv	r1, r3, r2
 801bfbc:	fb01 f202 	mul.w	r2, r1, r2
 801bfc0:	1a9b      	subs	r3, r3, r2
 801bfc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801bfc4:	441a      	add	r2, r3
 801bfc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bfc8:	1c59      	adds	r1, r3, #1
 801bfca:	6579      	str	r1, [r7, #84]	@ 0x54
 801bfcc:	7812      	ldrb	r2, [r2, #0]
 801bfce:	3360      	adds	r3, #96	@ 0x60
 801bfd0:	443b      	add	r3, r7
 801bfd2:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801bfd6:	687a      	ldr	r2, [r7, #4]
 801bfd8:	683b      	ldr	r3, [r7, #0]
 801bfda:	fbb2 f3f3 	udiv	r3, r2, r3
 801bfde:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d1e6      	bne.n	801bfb4 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801bfe6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bfe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801bfea:	429a      	cmp	r2, r3
 801bfec:	dd01      	ble.n	801bff2 <ee_number+0xca>
 801bfee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bff0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801bff2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801bff4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801bff6:	1ad3      	subs	r3, r2, r3
 801bff8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801bffa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bffc:	f003 0301 	and.w	r3, r3, #1
 801c000:	2b00      	cmp	r3, #0
 801c002:	d112      	bne.n	801c02a <ee_number+0x102>
 801c004:	e00c      	b.n	801c020 <ee_number+0xf8>
 801c006:	68fb      	ldr	r3, [r7, #12]
 801c008:	1c5a      	adds	r2, r3, #1
 801c00a:	60fa      	str	r2, [r7, #12]
 801c00c:	2220      	movs	r2, #32
 801c00e:	701a      	strb	r2, [r3, #0]
 801c010:	68bb      	ldr	r3, [r7, #8]
 801c012:	3b01      	subs	r3, #1
 801c014:	60bb      	str	r3, [r7, #8]
 801c016:	68bb      	ldr	r3, [r7, #8]
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d101      	bne.n	801c020 <ee_number+0xf8>
 801c01c:	68fb      	ldr	r3, [r7, #12]
 801c01e:	e068      	b.n	801c0f2 <ee_number+0x1ca>
 801c020:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c022:	1e5a      	subs	r2, r3, #1
 801c024:	66ba      	str	r2, [r7, #104]	@ 0x68
 801c026:	2b00      	cmp	r3, #0
 801c028:	dced      	bgt.n	801c006 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801c02a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d01b      	beq.n	801c06a <ee_number+0x142>
 801c032:	68fb      	ldr	r3, [r7, #12]
 801c034:	1c5a      	adds	r2, r3, #1
 801c036:	60fa      	str	r2, [r7, #12]
 801c038:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801c03c:	701a      	strb	r2, [r3, #0]
 801c03e:	68bb      	ldr	r3, [r7, #8]
 801c040:	3b01      	subs	r3, #1
 801c042:	60bb      	str	r3, [r7, #8]
 801c044:	68bb      	ldr	r3, [r7, #8]
 801c046:	2b00      	cmp	r3, #0
 801c048:	d10f      	bne.n	801c06a <ee_number+0x142>
 801c04a:	68fb      	ldr	r3, [r7, #12]
 801c04c:	e051      	b.n	801c0f2 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801c04e:	68fb      	ldr	r3, [r7, #12]
 801c050:	1c5a      	adds	r2, r3, #1
 801c052:	60fa      	str	r2, [r7, #12]
 801c054:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801c058:	701a      	strb	r2, [r3, #0]
 801c05a:	68bb      	ldr	r3, [r7, #8]
 801c05c:	3b01      	subs	r3, #1
 801c05e:	60bb      	str	r3, [r7, #8]
 801c060:	68bb      	ldr	r3, [r7, #8]
 801c062:	2b00      	cmp	r3, #0
 801c064:	d101      	bne.n	801c06a <ee_number+0x142>
 801c066:	68fb      	ldr	r3, [r7, #12]
 801c068:	e043      	b.n	801c0f2 <ee_number+0x1ca>
 801c06a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c06c:	1e5a      	subs	r2, r3, #1
 801c06e:	66ba      	str	r2, [r7, #104]	@ 0x68
 801c070:	2b00      	cmp	r3, #0
 801c072:	dcec      	bgt.n	801c04e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801c074:	e00c      	b.n	801c090 <ee_number+0x168>
 801c076:	68fb      	ldr	r3, [r7, #12]
 801c078:	1c5a      	adds	r2, r3, #1
 801c07a:	60fa      	str	r2, [r7, #12]
 801c07c:	2230      	movs	r2, #48	@ 0x30
 801c07e:	701a      	strb	r2, [r3, #0]
 801c080:	68bb      	ldr	r3, [r7, #8]
 801c082:	3b01      	subs	r3, #1
 801c084:	60bb      	str	r3, [r7, #8]
 801c086:	68bb      	ldr	r3, [r7, #8]
 801c088:	2b00      	cmp	r3, #0
 801c08a:	d101      	bne.n	801c090 <ee_number+0x168>
 801c08c:	68fb      	ldr	r3, [r7, #12]
 801c08e:	e030      	b.n	801c0f2 <ee_number+0x1ca>
 801c090:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801c092:	1e5a      	subs	r2, r3, #1
 801c094:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801c096:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c098:	429a      	cmp	r2, r3
 801c09a:	dbec      	blt.n	801c076 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801c09c:	e010      	b.n	801c0c0 <ee_number+0x198>
 801c09e:	68fb      	ldr	r3, [r7, #12]
 801c0a0:	1c5a      	adds	r2, r3, #1
 801c0a2:	60fa      	str	r2, [r7, #12]
 801c0a4:	f107 0110 	add.w	r1, r7, #16
 801c0a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c0aa:	440a      	add	r2, r1
 801c0ac:	7812      	ldrb	r2, [r2, #0]
 801c0ae:	701a      	strb	r2, [r3, #0]
 801c0b0:	68bb      	ldr	r3, [r7, #8]
 801c0b2:	3b01      	subs	r3, #1
 801c0b4:	60bb      	str	r3, [r7, #8]
 801c0b6:	68bb      	ldr	r3, [r7, #8]
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	d101      	bne.n	801c0c0 <ee_number+0x198>
 801c0bc:	68fb      	ldr	r3, [r7, #12]
 801c0be:	e018      	b.n	801c0f2 <ee_number+0x1ca>
 801c0c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c0c2:	1e5a      	subs	r2, r3, #1
 801c0c4:	657a      	str	r2, [r7, #84]	@ 0x54
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	dce9      	bgt.n	801c09e <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801c0ca:	e00c      	b.n	801c0e6 <ee_number+0x1be>
 801c0cc:	68fb      	ldr	r3, [r7, #12]
 801c0ce:	1c5a      	adds	r2, r3, #1
 801c0d0:	60fa      	str	r2, [r7, #12]
 801c0d2:	2220      	movs	r2, #32
 801c0d4:	701a      	strb	r2, [r3, #0]
 801c0d6:	68bb      	ldr	r3, [r7, #8]
 801c0d8:	3b01      	subs	r3, #1
 801c0da:	60bb      	str	r3, [r7, #8]
 801c0dc:	68bb      	ldr	r3, [r7, #8]
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d101      	bne.n	801c0e6 <ee_number+0x1be>
 801c0e2:	68fb      	ldr	r3, [r7, #12]
 801c0e4:	e005      	b.n	801c0f2 <ee_number+0x1ca>
 801c0e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c0e8:	1e5a      	subs	r2, r3, #1
 801c0ea:	66ba      	str	r2, [r7, #104]	@ 0x68
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	dced      	bgt.n	801c0cc <ee_number+0x1a4>

  return str;
 801c0f0:	68fb      	ldr	r3, [r7, #12]
}
 801c0f2:	4618      	mov	r0, r3
 801c0f4:	3764      	adds	r7, #100	@ 0x64
 801c0f6:	46bd      	mov	sp, r7
 801c0f8:	bc80      	pop	{r7}
 801c0fa:	4770      	bx	lr
 801c0fc:	20000134 	.word	0x20000134
 801c100:	20000138 	.word	0x20000138

0801c104 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801c104:	b580      	push	{r7, lr}
 801c106:	b092      	sub	sp, #72	@ 0x48
 801c108:	af04      	add	r7, sp, #16
 801c10a:	60f8      	str	r0, [r7, #12]
 801c10c:	60b9      	str	r1, [r7, #8]
 801c10e:	607a      	str	r2, [r7, #4]
 801c110:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801c112:	68bb      	ldr	r3, [r7, #8]
 801c114:	2b00      	cmp	r3, #0
 801c116:	dc01      	bgt.n	801c11c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801c118:	2300      	movs	r3, #0
 801c11a:	e13e      	b.n	801c39a <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c11c:	68fb      	ldr	r3, [r7, #12]
 801c11e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c120:	e128      	b.n	801c374 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801c122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	1ad2      	subs	r2, r2, r3
 801c128:	68bb      	ldr	r3, [r7, #8]
 801c12a:	3b01      	subs	r3, #1
 801c12c:	429a      	cmp	r2, r3
 801c12e:	f280 812e 	bge.w	801c38e <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	781b      	ldrb	r3, [r3, #0]
 801c136:	2b25      	cmp	r3, #37	@ 0x25
 801c138:	d006      	beq.n	801c148 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801c13a:	687a      	ldr	r2, [r7, #4]
 801c13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c13e:	1c59      	adds	r1, r3, #1
 801c140:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801c142:	7812      	ldrb	r2, [r2, #0]
 801c144:	701a      	strb	r2, [r3, #0]
      continue;
 801c146:	e112      	b.n	801c36e <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801c148:	2300      	movs	r3, #0
 801c14a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	3301      	adds	r3, #1
 801c150:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	781b      	ldrb	r3, [r3, #0]
 801c156:	2b30      	cmp	r3, #48	@ 0x30
 801c158:	d103      	bne.n	801c162 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801c15a:	6a3b      	ldr	r3, [r7, #32]
 801c15c:	f043 0301 	orr.w	r3, r3, #1
 801c160:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801c162:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c166:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	781b      	ldrb	r3, [r3, #0]
 801c16c:	2b2f      	cmp	r3, #47	@ 0x2f
 801c16e:	d908      	bls.n	801c182 <tiny_vsnprintf_like+0x7e>
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	781b      	ldrb	r3, [r3, #0]
 801c174:	2b39      	cmp	r3, #57	@ 0x39
 801c176:	d804      	bhi.n	801c182 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801c178:	1d3b      	adds	r3, r7, #4
 801c17a:	4618      	mov	r0, r3
 801c17c:	f7ff feae 	bl	801bedc <ee_skip_atoi>
 801c180:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801c182:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c186:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801c188:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c18c:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801c18e:	230a      	movs	r3, #10
 801c190:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	781b      	ldrb	r3, [r3, #0]
 801c196:	3b58      	subs	r3, #88	@ 0x58
 801c198:	2b20      	cmp	r3, #32
 801c19a:	f200 8094 	bhi.w	801c2c6 <tiny_vsnprintf_like+0x1c2>
 801c19e:	a201      	add	r2, pc, #4	@ (adr r2, 801c1a4 <tiny_vsnprintf_like+0xa0>)
 801c1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c1a4:	0801c2af 	.word	0x0801c2af
 801c1a8:	0801c2c7 	.word	0x0801c2c7
 801c1ac:	0801c2c7 	.word	0x0801c2c7
 801c1b0:	0801c2c7 	.word	0x0801c2c7
 801c1b4:	0801c2c7 	.word	0x0801c2c7
 801c1b8:	0801c2c7 	.word	0x0801c2c7
 801c1bc:	0801c2c7 	.word	0x0801c2c7
 801c1c0:	0801c2c7 	.word	0x0801c2c7
 801c1c4:	0801c2c7 	.word	0x0801c2c7
 801c1c8:	0801c2c7 	.word	0x0801c2c7
 801c1cc:	0801c2c7 	.word	0x0801c2c7
 801c1d0:	0801c233 	.word	0x0801c233
 801c1d4:	0801c2bd 	.word	0x0801c2bd
 801c1d8:	0801c2c7 	.word	0x0801c2c7
 801c1dc:	0801c2c7 	.word	0x0801c2c7
 801c1e0:	0801c2c7 	.word	0x0801c2c7
 801c1e4:	0801c2c7 	.word	0x0801c2c7
 801c1e8:	0801c2bd 	.word	0x0801c2bd
 801c1ec:	0801c2c7 	.word	0x0801c2c7
 801c1f0:	0801c2c7 	.word	0x0801c2c7
 801c1f4:	0801c2c7 	.word	0x0801c2c7
 801c1f8:	0801c2c7 	.word	0x0801c2c7
 801c1fc:	0801c2c7 	.word	0x0801c2c7
 801c200:	0801c2c7 	.word	0x0801c2c7
 801c204:	0801c2c7 	.word	0x0801c2c7
 801c208:	0801c2c7 	.word	0x0801c2c7
 801c20c:	0801c2c7 	.word	0x0801c2c7
 801c210:	0801c253 	.word	0x0801c253
 801c214:	0801c2c7 	.word	0x0801c2c7
 801c218:	0801c313 	.word	0x0801c313
 801c21c:	0801c2c7 	.word	0x0801c2c7
 801c220:	0801c2c7 	.word	0x0801c2c7
 801c224:	0801c2b7 	.word	0x0801c2b7
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801c228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c22a:	1c5a      	adds	r2, r3, #1
 801c22c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c22e:	2220      	movs	r2, #32
 801c230:	701a      	strb	r2, [r3, #0]
 801c232:	69fb      	ldr	r3, [r7, #28]
 801c234:	3b01      	subs	r3, #1
 801c236:	61fb      	str	r3, [r7, #28]
 801c238:	69fb      	ldr	r3, [r7, #28]
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	dcf4      	bgt.n	801c228 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801c23e:	683b      	ldr	r3, [r7, #0]
 801c240:	1d1a      	adds	r2, r3, #4
 801c242:	603a      	str	r2, [r7, #0]
 801c244:	6819      	ldr	r1, [r3, #0]
 801c246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c248:	1c5a      	adds	r2, r3, #1
 801c24a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c24c:	b2ca      	uxtb	r2, r1
 801c24e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801c250:	e08d      	b.n	801c36e <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801c252:	683b      	ldr	r3, [r7, #0]
 801c254:	1d1a      	adds	r2, r3, #4
 801c256:	603a      	str	r2, [r7, #0]
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801c25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d101      	bne.n	801c266 <tiny_vsnprintf_like+0x162>
 801c262:	4b50      	ldr	r3, [pc, #320]	@ (801c3a4 <tiny_vsnprintf_like+0x2a0>)
 801c264:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801c266:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c268:	f7e3 ff86 	bl	8000178 <strlen>
 801c26c:	4603      	mov	r3, r0
 801c26e:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801c270:	e004      	b.n	801c27c <tiny_vsnprintf_like+0x178>
 801c272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c274:	1c5a      	adds	r2, r3, #1
 801c276:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c278:	2220      	movs	r2, #32
 801c27a:	701a      	strb	r2, [r3, #0]
 801c27c:	69fb      	ldr	r3, [r7, #28]
 801c27e:	1e5a      	subs	r2, r3, #1
 801c280:	61fa      	str	r2, [r7, #28]
 801c282:	693a      	ldr	r2, [r7, #16]
 801c284:	429a      	cmp	r2, r3
 801c286:	dbf4      	blt.n	801c272 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801c288:	2300      	movs	r3, #0
 801c28a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c28c:	e00a      	b.n	801c2a4 <tiny_vsnprintf_like+0x1a0>
 801c28e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c290:	1c53      	adds	r3, r2, #1
 801c292:	627b      	str	r3, [r7, #36]	@ 0x24
 801c294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c296:	1c59      	adds	r1, r3, #1
 801c298:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801c29a:	7812      	ldrb	r2, [r2, #0]
 801c29c:	701a      	strb	r2, [r3, #0]
 801c29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2a0:	3301      	adds	r3, #1
 801c2a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c2a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c2a6:	693b      	ldr	r3, [r7, #16]
 801c2a8:	429a      	cmp	r2, r3
 801c2aa:	dbf0      	blt.n	801c28e <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801c2ac:	e05f      	b.n	801c36e <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801c2ae:	6a3b      	ldr	r3, [r7, #32]
 801c2b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c2b4:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801c2b6:	2310      	movs	r3, #16
 801c2b8:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801c2ba:	e02b      	b.n	801c314 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801c2bc:	6a3b      	ldr	r3, [r7, #32]
 801c2be:	f043 0302 	orr.w	r3, r3, #2
 801c2c2:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801c2c4:	e025      	b.n	801c312 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	781b      	ldrb	r3, [r3, #0]
 801c2ca:	2b25      	cmp	r3, #37	@ 0x25
 801c2cc:	d004      	beq.n	801c2d8 <tiny_vsnprintf_like+0x1d4>
 801c2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c2d0:	1c5a      	adds	r2, r3, #1
 801c2d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c2d4:	2225      	movs	r2, #37	@ 0x25
 801c2d6:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801c2d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c2da:	68fb      	ldr	r3, [r7, #12]
 801c2dc:	1ad2      	subs	r2, r2, r3
 801c2de:	68bb      	ldr	r3, [r7, #8]
 801c2e0:	3b01      	subs	r3, #1
 801c2e2:	429a      	cmp	r2, r3
 801c2e4:	da16      	bge.n	801c314 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	781b      	ldrb	r3, [r3, #0]
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d006      	beq.n	801c2fc <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801c2ee:	687a      	ldr	r2, [r7, #4]
 801c2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c2f2:	1c59      	adds	r1, r3, #1
 801c2f4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801c2f6:	7812      	ldrb	r2, [r2, #0]
 801c2f8:	701a      	strb	r2, [r3, #0]
 801c2fa:	e002      	b.n	801c302 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	3b01      	subs	r3, #1
 801c300:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801c302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c304:	68fb      	ldr	r3, [r7, #12]
 801c306:	1ad2      	subs	r2, r2, r3
 801c308:	68bb      	ldr	r3, [r7, #8]
 801c30a:	3b01      	subs	r3, #1
 801c30c:	429a      	cmp	r2, r3
 801c30e:	db2d      	blt.n	801c36c <tiny_vsnprintf_like+0x268>
 801c310:	e000      	b.n	801c314 <tiny_vsnprintf_like+0x210>
        break;
 801c312:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801c314:	697b      	ldr	r3, [r7, #20]
 801c316:	2b6c      	cmp	r3, #108	@ 0x6c
 801c318:	d105      	bne.n	801c326 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801c31a:	683b      	ldr	r3, [r7, #0]
 801c31c:	1d1a      	adds	r2, r3, #4
 801c31e:	603a      	str	r2, [r7, #0]
 801c320:	681b      	ldr	r3, [r3, #0]
 801c322:	637b      	str	r3, [r7, #52]	@ 0x34
 801c324:	e00f      	b.n	801c346 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801c326:	6a3b      	ldr	r3, [r7, #32]
 801c328:	f003 0302 	and.w	r3, r3, #2
 801c32c:	2b00      	cmp	r3, #0
 801c32e:	d005      	beq.n	801c33c <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801c330:	683b      	ldr	r3, [r7, #0]
 801c332:	1d1a      	adds	r2, r3, #4
 801c334:	603a      	str	r2, [r7, #0]
 801c336:	681b      	ldr	r3, [r3, #0]
 801c338:	637b      	str	r3, [r7, #52]	@ 0x34
 801c33a:	e004      	b.n	801c346 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801c33c:	683b      	ldr	r3, [r7, #0]
 801c33e:	1d1a      	adds	r2, r3, #4
 801c340:	603a      	str	r2, [r7, #0]
 801c342:	681b      	ldr	r3, [r3, #0]
 801c344:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801c346:	68bb      	ldr	r3, [r7, #8]
 801c348:	1e5a      	subs	r2, r3, #1
 801c34a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c34c:	68fb      	ldr	r3, [r7, #12]
 801c34e:	1acb      	subs	r3, r1, r3
 801c350:	1ad1      	subs	r1, r2, r3
 801c352:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c354:	6a3b      	ldr	r3, [r7, #32]
 801c356:	9302      	str	r3, [sp, #8]
 801c358:	69bb      	ldr	r3, [r7, #24]
 801c35a:	9301      	str	r3, [sp, #4]
 801c35c:	69fb      	ldr	r3, [r7, #28]
 801c35e:	9300      	str	r3, [sp, #0]
 801c360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c362:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c364:	f7ff fde0 	bl	801bf28 <ee_number>
 801c368:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801c36a:	e000      	b.n	801c36e <tiny_vsnprintf_like+0x26a>
        continue;
 801c36c:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	3301      	adds	r3, #1
 801c372:	607b      	str	r3, [r7, #4]
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	781b      	ldrb	r3, [r3, #0]
 801c378:	2b00      	cmp	r3, #0
 801c37a:	f47f aed2 	bne.w	801c122 <tiny_vsnprintf_like+0x1e>
 801c37e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c380:	68fb      	ldr	r3, [r7, #12]
 801c382:	1ad2      	subs	r2, r2, r3
 801c384:	68bb      	ldr	r3, [r7, #8]
 801c386:	3b01      	subs	r3, #1
 801c388:	429a      	cmp	r2, r3
 801c38a:	f6bf aeca 	bge.w	801c122 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801c38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c390:	2200      	movs	r2, #0
 801c392:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801c394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	1ad3      	subs	r3, r2, r3
}
 801c39a:	4618      	mov	r0, r3
 801c39c:	3738      	adds	r7, #56	@ 0x38
 801c39e:	46bd      	mov	sp, r7
 801c3a0:	bd80      	pop	{r7, pc}
 801c3a2:	bf00      	nop
 801c3a4:	0801d9f0 	.word	0x0801d9f0

0801c3a8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c3a8:	b580      	push	{r7, lr}
 801c3aa:	b090      	sub	sp, #64	@ 0x40
 801c3ac:	af00      	add	r7, sp, #0
 801c3ae:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c3b0:	4b73      	ldr	r3, [pc, #460]	@ (801c580 <UTIL_SEQ_Run+0x1d8>)
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801c3b6:	4b72      	ldr	r3, [pc, #456]	@ (801c580 <UTIL_SEQ_Run+0x1d8>)
 801c3b8:	681a      	ldr	r2, [r3, #0]
 801c3ba:	687b      	ldr	r3, [r7, #4]
 801c3bc:	4013      	ands	r3, r2
 801c3be:	4a70      	ldr	r2, [pc, #448]	@ (801c580 <UTIL_SEQ_Run+0x1d8>)
 801c3c0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801c3c2:	4b70      	ldr	r3, [pc, #448]	@ (801c584 <UTIL_SEQ_Run+0x1dc>)
 801c3c4:	681b      	ldr	r3, [r3, #0]
 801c3c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801c3c8:	4b6f      	ldr	r3, [pc, #444]	@ (801c588 <UTIL_SEQ_Run+0x1e0>)
 801c3ca:	681b      	ldr	r3, [r3, #0]
 801c3cc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801c3ce:	4b6f      	ldr	r3, [pc, #444]	@ (801c58c <UTIL_SEQ_Run+0x1e4>)
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801c3d4:	4b6e      	ldr	r3, [pc, #440]	@ (801c590 <UTIL_SEQ_Run+0x1e8>)
 801c3d6:	681b      	ldr	r3, [r3, #0]
 801c3d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c3da:	e08d      	b.n	801c4f8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801c3dc:	2300      	movs	r3, #0
 801c3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c3e0:	e002      	b.n	801c3e8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801c3e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c3e4:	3301      	adds	r3, #1
 801c3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c3e8:	4a6a      	ldr	r2, [pc, #424]	@ (801c594 <UTIL_SEQ_Run+0x1ec>)
 801c3ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c3ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3f2:	401a      	ands	r2, r3
 801c3f4:	4b62      	ldr	r3, [pc, #392]	@ (801c580 <UTIL_SEQ_Run+0x1d8>)
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	4013      	ands	r3, r2
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	d0f1      	beq.n	801c3e2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801c3fe:	4a65      	ldr	r2, [pc, #404]	@ (801c594 <UTIL_SEQ_Run+0x1ec>)
 801c400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c402:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c408:	401a      	ands	r2, r3
 801c40a:	4b5d      	ldr	r3, [pc, #372]	@ (801c580 <UTIL_SEQ_Run+0x1d8>)
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	4013      	ands	r3, r2
 801c410:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c412:	4a60      	ldr	r2, [pc, #384]	@ (801c594 <UTIL_SEQ_Run+0x1ec>)
 801c414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c416:	00db      	lsls	r3, r3, #3
 801c418:	4413      	add	r3, r2
 801c41a:	685a      	ldr	r2, [r3, #4]
 801c41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c41e:	4013      	ands	r3, r2
 801c420:	2b00      	cmp	r3, #0
 801c422:	d106      	bne.n	801c432 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c424:	4a5b      	ldr	r2, [pc, #364]	@ (801c594 <UTIL_SEQ_Run+0x1ec>)
 801c426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c428:	00db      	lsls	r3, r3, #3
 801c42a:	4413      	add	r3, r2
 801c42c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c430:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c432:	4a58      	ldr	r2, [pc, #352]	@ (801c594 <UTIL_SEQ_Run+0x1ec>)
 801c434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c436:	00db      	lsls	r3, r3, #3
 801c438:	4413      	add	r3, r2
 801c43a:	685a      	ldr	r2, [r3, #4]
 801c43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c43e:	4013      	ands	r3, r2
 801c440:	4618      	mov	r0, r3
 801c442:	f000 f907 	bl	801c654 <SEQ_BitPosition>
 801c446:	4603      	mov	r3, r0
 801c448:	461a      	mov	r2, r3
 801c44a:	4b53      	ldr	r3, [pc, #332]	@ (801c598 <UTIL_SEQ_Run+0x1f0>)
 801c44c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c44e:	4a51      	ldr	r2, [pc, #324]	@ (801c594 <UTIL_SEQ_Run+0x1ec>)
 801c450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c452:	00db      	lsls	r3, r3, #3
 801c454:	4413      	add	r3, r2
 801c456:	685a      	ldr	r2, [r3, #4]
 801c458:	4b4f      	ldr	r3, [pc, #316]	@ (801c598 <UTIL_SEQ_Run+0x1f0>)
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	2101      	movs	r1, #1
 801c45e:	fa01 f303 	lsl.w	r3, r1, r3
 801c462:	43db      	mvns	r3, r3
 801c464:	401a      	ands	r2, r3
 801c466:	494b      	ldr	r1, [pc, #300]	@ (801c594 <UTIL_SEQ_Run+0x1ec>)
 801c468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c46a:	00db      	lsls	r3, r3, #3
 801c46c:	440b      	add	r3, r1
 801c46e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c470:	f3ef 8310 	mrs	r3, PRIMASK
 801c474:	61bb      	str	r3, [r7, #24]
  return(result);
 801c476:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c478:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c47a:	b672      	cpsid	i
}
 801c47c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c47e:	4b46      	ldr	r3, [pc, #280]	@ (801c598 <UTIL_SEQ_Run+0x1f0>)
 801c480:	681b      	ldr	r3, [r3, #0]
 801c482:	2201      	movs	r2, #1
 801c484:	fa02 f303 	lsl.w	r3, r2, r3
 801c488:	43da      	mvns	r2, r3
 801c48a:	4b3e      	ldr	r3, [pc, #248]	@ (801c584 <UTIL_SEQ_Run+0x1dc>)
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	4013      	ands	r3, r2
 801c490:	4a3c      	ldr	r2, [pc, #240]	@ (801c584 <UTIL_SEQ_Run+0x1dc>)
 801c492:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c494:	2301      	movs	r3, #1
 801c496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c498:	e013      	b.n	801c4c2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c49a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c49c:	3b01      	subs	r3, #1
 801c49e:	4a3d      	ldr	r2, [pc, #244]	@ (801c594 <UTIL_SEQ_Run+0x1ec>)
 801c4a0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c4a4:	4b3c      	ldr	r3, [pc, #240]	@ (801c598 <UTIL_SEQ_Run+0x1f0>)
 801c4a6:	681b      	ldr	r3, [r3, #0]
 801c4a8:	2201      	movs	r2, #1
 801c4aa:	fa02 f303 	lsl.w	r3, r2, r3
 801c4ae:	43da      	mvns	r2, r3
 801c4b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c4b2:	3b01      	subs	r3, #1
 801c4b4:	400a      	ands	r2, r1
 801c4b6:	4937      	ldr	r1, [pc, #220]	@ (801c594 <UTIL_SEQ_Run+0x1ec>)
 801c4b8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c4bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c4be:	3b01      	subs	r3, #1
 801c4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c4c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d1e8      	bne.n	801c49a <UTIL_SEQ_Run+0xf2>
 801c4c8:	6a3b      	ldr	r3, [r7, #32]
 801c4ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4cc:	697b      	ldr	r3, [r7, #20]
 801c4ce:	f383 8810 	msr	PRIMASK, r3
}
 801c4d2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c4d4:	4b30      	ldr	r3, [pc, #192]	@ (801c598 <UTIL_SEQ_Run+0x1f0>)
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	4a30      	ldr	r2, [pc, #192]	@ (801c59c <UTIL_SEQ_Run+0x1f4>)
 801c4da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c4de:	4798      	blx	r3

    local_taskset = TaskSet;
 801c4e0:	4b28      	ldr	r3, [pc, #160]	@ (801c584 <UTIL_SEQ_Run+0x1dc>)
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801c4e6:	4b28      	ldr	r3, [pc, #160]	@ (801c588 <UTIL_SEQ_Run+0x1e0>)
 801c4e8:	681b      	ldr	r3, [r3, #0]
 801c4ea:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801c4ec:	4b27      	ldr	r3, [pc, #156]	@ (801c58c <UTIL_SEQ_Run+0x1e4>)
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801c4f2:	4b27      	ldr	r3, [pc, #156]	@ (801c590 <UTIL_SEQ_Run+0x1e8>)
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c4f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c4fc:	401a      	ands	r2, r3
 801c4fe:	4b20      	ldr	r3, [pc, #128]	@ (801c580 <UTIL_SEQ_Run+0x1d8>)
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	4013      	ands	r3, r2
 801c504:	2b00      	cmp	r3, #0
 801c506:	d005      	beq.n	801c514 <UTIL_SEQ_Run+0x16c>
 801c508:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c50c:	4013      	ands	r3, r2
 801c50e:	2b00      	cmp	r3, #0
 801c510:	f43f af64 	beq.w	801c3dc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c514:	4b20      	ldr	r3, [pc, #128]	@ (801c598 <UTIL_SEQ_Run+0x1f0>)
 801c516:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c51a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c51c:	f000 f88e 	bl	801c63c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c520:	f3ef 8310 	mrs	r3, PRIMASK
 801c524:	613b      	str	r3, [r7, #16]
  return(result);
 801c526:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c528:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c52a:	b672      	cpsid	i
}
 801c52c:	bf00      	nop
  local_taskset = TaskSet;
 801c52e:	4b15      	ldr	r3, [pc, #84]	@ (801c584 <UTIL_SEQ_Run+0x1dc>)
 801c530:	681b      	ldr	r3, [r3, #0]
 801c532:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801c534:	4b14      	ldr	r3, [pc, #80]	@ (801c588 <UTIL_SEQ_Run+0x1e0>)
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801c53a:	4b14      	ldr	r3, [pc, #80]	@ (801c58c <UTIL_SEQ_Run+0x1e4>)
 801c53c:	681b      	ldr	r3, [r3, #0]
 801c53e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801c540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c544:	401a      	ands	r2, r3
 801c546:	4b0e      	ldr	r3, [pc, #56]	@ (801c580 <UTIL_SEQ_Run+0x1d8>)
 801c548:	681b      	ldr	r3, [r3, #0]
 801c54a:	4013      	ands	r3, r2
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	d107      	bne.n	801c560 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801c550:	4b0f      	ldr	r3, [pc, #60]	@ (801c590 <UTIL_SEQ_Run+0x1e8>)
 801c552:	681a      	ldr	r2, [r3, #0]
 801c554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c556:	4013      	ands	r3, r2
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d101      	bne.n	801c560 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801c55c:	f7e5 fe08 	bl	8002170 <UTIL_SEQ_Idle>
 801c560:	69fb      	ldr	r3, [r7, #28]
 801c562:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c564:	68fb      	ldr	r3, [r7, #12]
 801c566:	f383 8810 	msr	PRIMASK, r3
}
 801c56a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801c56c:	f000 f86c 	bl	801c648 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c570:	4a03      	ldr	r2, [pc, #12]	@ (801c580 <UTIL_SEQ_Run+0x1d8>)
 801c572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c574:	6013      	str	r3, [r2, #0]

  return;
 801c576:	bf00      	nop
}
 801c578:	3740      	adds	r7, #64	@ 0x40
 801c57a:	46bd      	mov	sp, r7
 801c57c:	bd80      	pop	{r7, pc}
 801c57e:	bf00      	nop
 801c580:	20000140 	.word	0x20000140
 801c584:	20001de8 	.word	0x20001de8
 801c588:	20001dec 	.word	0x20001dec
 801c58c:	2000013c 	.word	0x2000013c
 801c590:	20001df0 	.word	0x20001df0
 801c594:	20001e10 	.word	0x20001e10
 801c598:	20001df4 	.word	0x20001df4
 801c59c:	20001df8 	.word	0x20001df8

0801c5a0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c5a0:	b580      	push	{r7, lr}
 801c5a2:	b088      	sub	sp, #32
 801c5a4:	af00      	add	r7, sp, #0
 801c5a6:	60f8      	str	r0, [r7, #12]
 801c5a8:	60b9      	str	r1, [r7, #8]
 801c5aa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5ac:	f3ef 8310 	mrs	r3, PRIMASK
 801c5b0:	617b      	str	r3, [r7, #20]
  return(result);
 801c5b2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c5b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c5b6:	b672      	cpsid	i
}
 801c5b8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c5ba:	68f8      	ldr	r0, [r7, #12]
 801c5bc:	f000 f84a 	bl	801c654 <SEQ_BitPosition>
 801c5c0:	4603      	mov	r3, r0
 801c5c2:	4619      	mov	r1, r3
 801c5c4:	4a06      	ldr	r2, [pc, #24]	@ (801c5e0 <UTIL_SEQ_RegTask+0x40>)
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c5cc:	69fb      	ldr	r3, [r7, #28]
 801c5ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5d0:	69bb      	ldr	r3, [r7, #24]
 801c5d2:	f383 8810 	msr	PRIMASK, r3
}
 801c5d6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c5d8:	bf00      	nop
}
 801c5da:	3720      	adds	r7, #32
 801c5dc:	46bd      	mov	sp, r7
 801c5de:	bd80      	pop	{r7, pc}
 801c5e0:	20001df8 	.word	0x20001df8

0801c5e4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c5e4:	b480      	push	{r7}
 801c5e6:	b087      	sub	sp, #28
 801c5e8:	af00      	add	r7, sp, #0
 801c5ea:	6078      	str	r0, [r7, #4]
 801c5ec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5ee:	f3ef 8310 	mrs	r3, PRIMASK
 801c5f2:	60fb      	str	r3, [r7, #12]
  return(result);
 801c5f4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c5f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c5f8:	b672      	cpsid	i
}
 801c5fa:	bf00      	nop

  TaskSet |= TaskId_bm;
 801c5fc:	4b0d      	ldr	r3, [pc, #52]	@ (801c634 <UTIL_SEQ_SetTask+0x50>)
 801c5fe:	681a      	ldr	r2, [r3, #0]
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	4313      	orrs	r3, r2
 801c604:	4a0b      	ldr	r2, [pc, #44]	@ (801c634 <UTIL_SEQ_SetTask+0x50>)
 801c606:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c608:	4a0b      	ldr	r2, [pc, #44]	@ (801c638 <UTIL_SEQ_SetTask+0x54>)
 801c60a:	683b      	ldr	r3, [r7, #0]
 801c60c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	431a      	orrs	r2, r3
 801c614:	4908      	ldr	r1, [pc, #32]	@ (801c638 <UTIL_SEQ_SetTask+0x54>)
 801c616:	683b      	ldr	r3, [r7, #0]
 801c618:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801c61c:	697b      	ldr	r3, [r7, #20]
 801c61e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c620:	693b      	ldr	r3, [r7, #16]
 801c622:	f383 8810 	msr	PRIMASK, r3
}
 801c626:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c628:	bf00      	nop
}
 801c62a:	371c      	adds	r7, #28
 801c62c:	46bd      	mov	sp, r7
 801c62e:	bc80      	pop	{r7}
 801c630:	4770      	bx	lr
 801c632:	bf00      	nop
 801c634:	20001de8 	.word	0x20001de8
 801c638:	20001e10 	.word	0x20001e10

0801c63c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c63c:	b480      	push	{r7}
 801c63e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c640:	bf00      	nop
}
 801c642:	46bd      	mov	sp, r7
 801c644:	bc80      	pop	{r7}
 801c646:	4770      	bx	lr

0801c648 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c648:	b480      	push	{r7}
 801c64a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c64c:	bf00      	nop
}
 801c64e:	46bd      	mov	sp, r7
 801c650:	bc80      	pop	{r7}
 801c652:	4770      	bx	lr

0801c654 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c654:	b480      	push	{r7}
 801c656:	b085      	sub	sp, #20
 801c658:	af00      	add	r7, sp, #0
 801c65a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801c65c:	2300      	movs	r3, #0
 801c65e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801c664:	68bb      	ldr	r3, [r7, #8]
 801c666:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c66a:	d204      	bcs.n	801c676 <SEQ_BitPosition+0x22>
 801c66c:	2310      	movs	r3, #16
 801c66e:	73fb      	strb	r3, [r7, #15]
 801c670:	68bb      	ldr	r3, [r7, #8]
 801c672:	041b      	lsls	r3, r3, #16
 801c674:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801c676:	68bb      	ldr	r3, [r7, #8]
 801c678:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c67c:	d205      	bcs.n	801c68a <SEQ_BitPosition+0x36>
 801c67e:	7bfb      	ldrb	r3, [r7, #15]
 801c680:	3308      	adds	r3, #8
 801c682:	73fb      	strb	r3, [r7, #15]
 801c684:	68bb      	ldr	r3, [r7, #8]
 801c686:	021b      	lsls	r3, r3, #8
 801c688:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801c68a:	68bb      	ldr	r3, [r7, #8]
 801c68c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c690:	d205      	bcs.n	801c69e <SEQ_BitPosition+0x4a>
 801c692:	7bfb      	ldrb	r3, [r7, #15]
 801c694:	3304      	adds	r3, #4
 801c696:	73fb      	strb	r3, [r7, #15]
 801c698:	68bb      	ldr	r3, [r7, #8]
 801c69a:	011b      	lsls	r3, r3, #4
 801c69c:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801c69e:	68bb      	ldr	r3, [r7, #8]
 801c6a0:	0f1b      	lsrs	r3, r3, #28
 801c6a2:	4a07      	ldr	r2, [pc, #28]	@ (801c6c0 <SEQ_BitPosition+0x6c>)
 801c6a4:	5cd2      	ldrb	r2, [r2, r3]
 801c6a6:	7bfb      	ldrb	r3, [r7, #15]
 801c6a8:	4413      	add	r3, r2
 801c6aa:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801c6ac:	7bfb      	ldrb	r3, [r7, #15]
 801c6ae:	f1c3 031f 	rsb	r3, r3, #31
 801c6b2:	b2db      	uxtb	r3, r3
}
 801c6b4:	4618      	mov	r0, r3
 801c6b6:	3714      	adds	r7, #20
 801c6b8:	46bd      	mov	sp, r7
 801c6ba:	bc80      	pop	{r7}
 801c6bc:	4770      	bx	lr
 801c6be:	bf00      	nop
 801c6c0:	0801e0b8 	.word	0x0801e0b8

0801c6c4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c6c4:	b580      	push	{r7, lr}
 801c6c6:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c6c8:	4b04      	ldr	r3, [pc, #16]	@ (801c6dc <UTIL_TIMER_Init+0x18>)
 801c6ca:	2200      	movs	r2, #0
 801c6cc:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c6ce:	4b04      	ldr	r3, [pc, #16]	@ (801c6e0 <UTIL_TIMER_Init+0x1c>)
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	4798      	blx	r3
 801c6d4:	4603      	mov	r3, r0
}
 801c6d6:	4618      	mov	r0, r3
 801c6d8:	bd80      	pop	{r7, pc}
 801c6da:	bf00      	nop
 801c6dc:	20001e18 	.word	0x20001e18
 801c6e0:	0801dab0 	.word	0x0801dab0

0801c6e4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c6e4:	b580      	push	{r7, lr}
 801c6e6:	b084      	sub	sp, #16
 801c6e8:	af00      	add	r7, sp, #0
 801c6ea:	60f8      	str	r0, [r7, #12]
 801c6ec:	60b9      	str	r1, [r7, #8]
 801c6ee:	603b      	str	r3, [r7, #0]
 801c6f0:	4613      	mov	r3, r2
 801c6f2:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801c6f4:	68fb      	ldr	r3, [r7, #12]
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d023      	beq.n	801c742 <UTIL_TIMER_Create+0x5e>
 801c6fa:	683b      	ldr	r3, [r7, #0]
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	d020      	beq.n	801c742 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801c700:	68fb      	ldr	r3, [r7, #12]
 801c702:	2200      	movs	r2, #0
 801c704:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c706:	4b11      	ldr	r3, [pc, #68]	@ (801c74c <UTIL_TIMER_Create+0x68>)
 801c708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c70a:	68b8      	ldr	r0, [r7, #8]
 801c70c:	4798      	blx	r3
 801c70e:	4602      	mov	r2, r0
 801c710:	68fb      	ldr	r3, [r7, #12]
 801c712:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c714:	68fb      	ldr	r3, [r7, #12]
 801c716:	2200      	movs	r2, #0
 801c718:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	2200      	movs	r2, #0
 801c71e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	2200      	movs	r2, #0
 801c724:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	683a      	ldr	r2, [r7, #0]
 801c72a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c72c:	68fb      	ldr	r3, [r7, #12]
 801c72e:	69ba      	ldr	r2, [r7, #24]
 801c730:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c732:	68fb      	ldr	r3, [r7, #12]
 801c734:	79fa      	ldrb	r2, [r7, #7]
 801c736:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	2200      	movs	r2, #0
 801c73c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c73e:	2300      	movs	r3, #0
 801c740:	e000      	b.n	801c744 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c742:	2301      	movs	r3, #1
  }
}
 801c744:	4618      	mov	r0, r3
 801c746:	3710      	adds	r7, #16
 801c748:	46bd      	mov	sp, r7
 801c74a:	bd80      	pop	{r7, pc}
 801c74c:	0801dab0 	.word	0x0801dab0

0801c750 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c750:	b580      	push	{r7, lr}
 801c752:	b08a      	sub	sp, #40	@ 0x28
 801c754:	af00      	add	r7, sp, #0
 801c756:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c758:	2300      	movs	r3, #0
 801c75a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	2b00      	cmp	r3, #0
 801c762:	d056      	beq.n	801c812 <UTIL_TIMER_Start+0xc2>
 801c764:	6878      	ldr	r0, [r7, #4]
 801c766:	f000 f9a9 	bl	801cabc <TimerExists>
 801c76a:	4603      	mov	r3, r0
 801c76c:	f083 0301 	eor.w	r3, r3, #1
 801c770:	b2db      	uxtb	r3, r3
 801c772:	2b00      	cmp	r3, #0
 801c774:	d04d      	beq.n	801c812 <UTIL_TIMER_Start+0xc2>
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	7a5b      	ldrb	r3, [r3, #9]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d149      	bne.n	801c812 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c77e:	f3ef 8310 	mrs	r3, PRIMASK
 801c782:	613b      	str	r3, [r7, #16]
  return(result);
 801c784:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c786:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c788:	b672      	cpsid	i
}
 801c78a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	685b      	ldr	r3, [r3, #4]
 801c790:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c792:	4b24      	ldr	r3, [pc, #144]	@ (801c824 <UTIL_TIMER_Start+0xd4>)
 801c794:	6a1b      	ldr	r3, [r3, #32]
 801c796:	4798      	blx	r3
 801c798:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801c79a:	6a3a      	ldr	r2, [r7, #32]
 801c79c:	69bb      	ldr	r3, [r7, #24]
 801c79e:	429a      	cmp	r2, r3
 801c7a0:	d201      	bcs.n	801c7a6 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801c7a2:	69bb      	ldr	r3, [r7, #24]
 801c7a4:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c7a6:	687b      	ldr	r3, [r7, #4]
 801c7a8:	6a3a      	ldr	r2, [r7, #32]
 801c7aa:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	2200      	movs	r2, #0
 801c7b0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c7b2:	687b      	ldr	r3, [r7, #4]
 801c7b4:	2201      	movs	r2, #1
 801c7b6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c7b8:	687b      	ldr	r3, [r7, #4]
 801c7ba:	2200      	movs	r2, #0
 801c7bc:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c7be:	4b1a      	ldr	r3, [pc, #104]	@ (801c828 <UTIL_TIMER_Start+0xd8>)
 801c7c0:	681b      	ldr	r3, [r3, #0]
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	d106      	bne.n	801c7d4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c7c6:	4b17      	ldr	r3, [pc, #92]	@ (801c824 <UTIL_TIMER_Start+0xd4>)
 801c7c8:	691b      	ldr	r3, [r3, #16]
 801c7ca:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c7cc:	6878      	ldr	r0, [r7, #4]
 801c7ce:	f000 f9eb 	bl	801cba8 <TimerInsertNewHeadTimer>
 801c7d2:	e017      	b.n	801c804 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c7d4:	4b13      	ldr	r3, [pc, #76]	@ (801c824 <UTIL_TIMER_Start+0xd4>)
 801c7d6:	699b      	ldr	r3, [r3, #24]
 801c7d8:	4798      	blx	r3
 801c7da:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	681a      	ldr	r2, [r3, #0]
 801c7e0:	697b      	ldr	r3, [r7, #20]
 801c7e2:	441a      	add	r2, r3
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c7e8:	687b      	ldr	r3, [r7, #4]
 801c7ea:	681a      	ldr	r2, [r3, #0]
 801c7ec:	4b0e      	ldr	r3, [pc, #56]	@ (801c828 <UTIL_TIMER_Start+0xd8>)
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	681b      	ldr	r3, [r3, #0]
 801c7f2:	429a      	cmp	r2, r3
 801c7f4:	d203      	bcs.n	801c7fe <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c7f6:	6878      	ldr	r0, [r7, #4]
 801c7f8:	f000 f9d6 	bl	801cba8 <TimerInsertNewHeadTimer>
 801c7fc:	e002      	b.n	801c804 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c7fe:	6878      	ldr	r0, [r7, #4]
 801c800:	f000 f9a2 	bl	801cb48 <TimerInsertTimer>
 801c804:	69fb      	ldr	r3, [r7, #28]
 801c806:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c808:	68fb      	ldr	r3, [r7, #12]
 801c80a:	f383 8810 	msr	PRIMASK, r3
}
 801c80e:	bf00      	nop
  {
 801c810:	e002      	b.n	801c818 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c812:	2301      	movs	r3, #1
 801c814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801c818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801c81c:	4618      	mov	r0, r3
 801c81e:	3728      	adds	r7, #40	@ 0x28
 801c820:	46bd      	mov	sp, r7
 801c822:	bd80      	pop	{r7, pc}
 801c824:	0801dab0 	.word	0x0801dab0
 801c828:	20001e18 	.word	0x20001e18

0801c82c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c82c:	b580      	push	{r7, lr}
 801c82e:	b088      	sub	sp, #32
 801c830:	af00      	add	r7, sp, #0
 801c832:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c834:	2300      	movs	r3, #0
 801c836:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d05b      	beq.n	801c8f6 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c83e:	f3ef 8310 	mrs	r3, PRIMASK
 801c842:	60fb      	str	r3, [r7, #12]
  return(result);
 801c844:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c846:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c848:	b672      	cpsid	i
}
 801c84a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c84c:	4b2d      	ldr	r3, [pc, #180]	@ (801c904 <UTIL_TIMER_Stop+0xd8>)
 801c84e:	681b      	ldr	r3, [r3, #0]
 801c850:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c852:	4b2c      	ldr	r3, [pc, #176]	@ (801c904 <UTIL_TIMER_Stop+0xd8>)
 801c854:	681b      	ldr	r3, [r3, #0]
 801c856:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c858:	687b      	ldr	r3, [r7, #4]
 801c85a:	2201      	movs	r2, #1
 801c85c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c85e:	4b29      	ldr	r3, [pc, #164]	@ (801c904 <UTIL_TIMER_Stop+0xd8>)
 801c860:	681b      	ldr	r3, [r3, #0]
 801c862:	2b00      	cmp	r3, #0
 801c864:	d041      	beq.n	801c8ea <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	2200      	movs	r2, #0
 801c86a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c86c:	4b25      	ldr	r3, [pc, #148]	@ (801c904 <UTIL_TIMER_Stop+0xd8>)
 801c86e:	681b      	ldr	r3, [r3, #0]
 801c870:	687a      	ldr	r2, [r7, #4]
 801c872:	429a      	cmp	r2, r3
 801c874:	d134      	bne.n	801c8e0 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801c876:	4b23      	ldr	r3, [pc, #140]	@ (801c904 <UTIL_TIMER_Stop+0xd8>)
 801c878:	681b      	ldr	r3, [r3, #0]
 801c87a:	2200      	movs	r2, #0
 801c87c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c87e:	4b21      	ldr	r3, [pc, #132]	@ (801c904 <UTIL_TIMER_Stop+0xd8>)
 801c880:	681b      	ldr	r3, [r3, #0]
 801c882:	695b      	ldr	r3, [r3, #20]
 801c884:	2b00      	cmp	r3, #0
 801c886:	d00a      	beq.n	801c89e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801c888:	4b1e      	ldr	r3, [pc, #120]	@ (801c904 <UTIL_TIMER_Stop+0xd8>)
 801c88a:	681b      	ldr	r3, [r3, #0]
 801c88c:	695b      	ldr	r3, [r3, #20]
 801c88e:	4a1d      	ldr	r2, [pc, #116]	@ (801c904 <UTIL_TIMER_Stop+0xd8>)
 801c890:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801c892:	4b1c      	ldr	r3, [pc, #112]	@ (801c904 <UTIL_TIMER_Stop+0xd8>)
 801c894:	681b      	ldr	r3, [r3, #0]
 801c896:	4618      	mov	r0, r3
 801c898:	f000 f92c 	bl	801caf4 <TimerSetTimeout>
 801c89c:	e023      	b.n	801c8e6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c89e:	4b1a      	ldr	r3, [pc, #104]	@ (801c908 <UTIL_TIMER_Stop+0xdc>)
 801c8a0:	68db      	ldr	r3, [r3, #12]
 801c8a2:	4798      	blx	r3
            TimerListHead = NULL;
 801c8a4:	4b17      	ldr	r3, [pc, #92]	@ (801c904 <UTIL_TIMER_Stop+0xd8>)
 801c8a6:	2200      	movs	r2, #0
 801c8a8:	601a      	str	r2, [r3, #0]
 801c8aa:	e01c      	b.n	801c8e6 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c8ac:	697a      	ldr	r2, [r7, #20]
 801c8ae:	687b      	ldr	r3, [r7, #4]
 801c8b0:	429a      	cmp	r2, r3
 801c8b2:	d110      	bne.n	801c8d6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801c8b4:	697b      	ldr	r3, [r7, #20]
 801c8b6:	695b      	ldr	r3, [r3, #20]
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	d006      	beq.n	801c8ca <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801c8bc:	697b      	ldr	r3, [r7, #20]
 801c8be:	695b      	ldr	r3, [r3, #20]
 801c8c0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c8c2:	69bb      	ldr	r3, [r7, #24]
 801c8c4:	697a      	ldr	r2, [r7, #20]
 801c8c6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c8c8:	e00d      	b.n	801c8e6 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801c8ca:	2300      	movs	r3, #0
 801c8cc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c8ce:	69bb      	ldr	r3, [r7, #24]
 801c8d0:	697a      	ldr	r2, [r7, #20]
 801c8d2:	615a      	str	r2, [r3, #20]
            break;
 801c8d4:	e007      	b.n	801c8e6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801c8d6:	697b      	ldr	r3, [r7, #20]
 801c8d8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c8da:	697b      	ldr	r3, [r7, #20]
 801c8dc:	695b      	ldr	r3, [r3, #20]
 801c8de:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c8e0:	697b      	ldr	r3, [r7, #20]
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d1e2      	bne.n	801c8ac <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c8e6:	2300      	movs	r3, #0
 801c8e8:	77fb      	strb	r3, [r7, #31]
 801c8ea:	693b      	ldr	r3, [r7, #16]
 801c8ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8ee:	68bb      	ldr	r3, [r7, #8]
 801c8f0:	f383 8810 	msr	PRIMASK, r3
}
 801c8f4:	e001      	b.n	801c8fa <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c8f6:	2301      	movs	r3, #1
 801c8f8:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801c8fa:	7ffb      	ldrb	r3, [r7, #31]
}
 801c8fc:	4618      	mov	r0, r3
 801c8fe:	3720      	adds	r7, #32
 801c900:	46bd      	mov	sp, r7
 801c902:	bd80      	pop	{r7, pc}
 801c904:	20001e18 	.word	0x20001e18
 801c908:	0801dab0 	.word	0x0801dab0

0801c90c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c90c:	b580      	push	{r7, lr}
 801c90e:	b084      	sub	sp, #16
 801c910:	af00      	add	r7, sp, #0
 801c912:	6078      	str	r0, [r7, #4]
 801c914:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c916:	2300      	movs	r3, #0
 801c918:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d102      	bne.n	801c926 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c920:	2301      	movs	r3, #1
 801c922:	73fb      	strb	r3, [r7, #15]
 801c924:	e014      	b.n	801c950 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c926:	4b0d      	ldr	r3, [pc, #52]	@ (801c95c <UTIL_TIMER_SetPeriod+0x50>)
 801c928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c92a:	6838      	ldr	r0, [r7, #0]
 801c92c:	4798      	blx	r3
 801c92e:	4602      	mov	r2, r0
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c934:	6878      	ldr	r0, [r7, #4]
 801c936:	f000 f8c1 	bl	801cabc <TimerExists>
 801c93a:	4603      	mov	r3, r0
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	d007      	beq.n	801c950 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c940:	6878      	ldr	r0, [r7, #4]
 801c942:	f7ff ff73 	bl	801c82c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c946:	6878      	ldr	r0, [r7, #4]
 801c948:	f7ff ff02 	bl	801c750 <UTIL_TIMER_Start>
 801c94c:	4603      	mov	r3, r0
 801c94e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801c950:	7bfb      	ldrb	r3, [r7, #15]
}
 801c952:	4618      	mov	r0, r3
 801c954:	3710      	adds	r7, #16
 801c956:	46bd      	mov	sp, r7
 801c958:	bd80      	pop	{r7, pc}
 801c95a:	bf00      	nop
 801c95c:	0801dab0 	.word	0x0801dab0

0801c960 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801c960:	b590      	push	{r4, r7, lr}
 801c962:	b089      	sub	sp, #36	@ 0x24
 801c964:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c966:	f3ef 8310 	mrs	r3, PRIMASK
 801c96a:	60bb      	str	r3, [r7, #8]
  return(result);
 801c96c:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c96e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c970:	b672      	cpsid	i
}
 801c972:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801c974:	4b38      	ldr	r3, [pc, #224]	@ (801ca58 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c976:	695b      	ldr	r3, [r3, #20]
 801c978:	4798      	blx	r3
 801c97a:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801c97c:	4b36      	ldr	r3, [pc, #216]	@ (801ca58 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c97e:	691b      	ldr	r3, [r3, #16]
 801c980:	4798      	blx	r3
 801c982:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801c984:	693a      	ldr	r2, [r7, #16]
 801c986:	697b      	ldr	r3, [r7, #20]
 801c988:	1ad3      	subs	r3, r2, r3
 801c98a:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801c98c:	4b33      	ldr	r3, [pc, #204]	@ (801ca5c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c98e:	681b      	ldr	r3, [r3, #0]
 801c990:	2b00      	cmp	r3, #0
 801c992:	d037      	beq.n	801ca04 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801c994:	4b31      	ldr	r3, [pc, #196]	@ (801ca5c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c996:	681b      	ldr	r3, [r3, #0]
 801c998:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801c99a:	69fb      	ldr	r3, [r7, #28]
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	68fa      	ldr	r2, [r7, #12]
 801c9a0:	429a      	cmp	r2, r3
 801c9a2:	d206      	bcs.n	801c9b2 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801c9a4:	69fb      	ldr	r3, [r7, #28]
 801c9a6:	681a      	ldr	r2, [r3, #0]
 801c9a8:	68fb      	ldr	r3, [r7, #12]
 801c9aa:	1ad2      	subs	r2, r2, r3
 801c9ac:	69fb      	ldr	r3, [r7, #28]
 801c9ae:	601a      	str	r2, [r3, #0]
 801c9b0:	e002      	b.n	801c9b8 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801c9b2:	69fb      	ldr	r3, [r7, #28]
 801c9b4:	2200      	movs	r2, #0
 801c9b6:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801c9b8:	69fb      	ldr	r3, [r7, #28]
 801c9ba:	695b      	ldr	r3, [r3, #20]
 801c9bc:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801c9be:	69fb      	ldr	r3, [r7, #28]
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d1ea      	bne.n	801c99a <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c9c4:	e01e      	b.n	801ca04 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801c9c6:	4b25      	ldr	r3, [pc, #148]	@ (801ca5c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9c8:	681b      	ldr	r3, [r3, #0]
 801c9ca:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801c9cc:	4b23      	ldr	r3, [pc, #140]	@ (801ca5c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9ce:	681b      	ldr	r3, [r3, #0]
 801c9d0:	695b      	ldr	r3, [r3, #20]
 801c9d2:	4a22      	ldr	r2, [pc, #136]	@ (801ca5c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c9d4:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801c9d6:	69fb      	ldr	r3, [r7, #28]
 801c9d8:	2200      	movs	r2, #0
 801c9da:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801c9dc:	69fb      	ldr	r3, [r7, #28]
 801c9de:	2200      	movs	r2, #0
 801c9e0:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801c9e2:	69fb      	ldr	r3, [r7, #28]
 801c9e4:	68db      	ldr	r3, [r3, #12]
 801c9e6:	69fa      	ldr	r2, [r7, #28]
 801c9e8:	6912      	ldr	r2, [r2, #16]
 801c9ea:	4610      	mov	r0, r2
 801c9ec:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801c9ee:	69fb      	ldr	r3, [r7, #28]
 801c9f0:	7adb      	ldrb	r3, [r3, #11]
 801c9f2:	2b01      	cmp	r3, #1
 801c9f4:	d106      	bne.n	801ca04 <UTIL_TIMER_IRQ_Handler+0xa4>
 801c9f6:	69fb      	ldr	r3, [r7, #28]
 801c9f8:	7a9b      	ldrb	r3, [r3, #10]
 801c9fa:	2b00      	cmp	r3, #0
 801c9fc:	d102      	bne.n	801ca04 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801c9fe:	69f8      	ldr	r0, [r7, #28]
 801ca00:	f7ff fea6 	bl	801c750 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ca04:	4b15      	ldr	r3, [pc, #84]	@ (801ca5c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca06:	681b      	ldr	r3, [r3, #0]
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d00d      	beq.n	801ca28 <UTIL_TIMER_IRQ_Handler+0xc8>
 801ca0c:	4b13      	ldr	r3, [pc, #76]	@ (801ca5c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	681b      	ldr	r3, [r3, #0]
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d0d7      	beq.n	801c9c6 <UTIL_TIMER_IRQ_Handler+0x66>
 801ca16:	4b11      	ldr	r3, [pc, #68]	@ (801ca5c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca18:	681b      	ldr	r3, [r3, #0]
 801ca1a:	681c      	ldr	r4, [r3, #0]
 801ca1c:	4b0e      	ldr	r3, [pc, #56]	@ (801ca58 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ca1e:	699b      	ldr	r3, [r3, #24]
 801ca20:	4798      	blx	r3
 801ca22:	4603      	mov	r3, r0
 801ca24:	429c      	cmp	r4, r3
 801ca26:	d3ce      	bcc.n	801c9c6 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801ca28:	4b0c      	ldr	r3, [pc, #48]	@ (801ca5c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca2a:	681b      	ldr	r3, [r3, #0]
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d009      	beq.n	801ca44 <UTIL_TIMER_IRQ_Handler+0xe4>
 801ca30:	4b0a      	ldr	r3, [pc, #40]	@ (801ca5c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	7a1b      	ldrb	r3, [r3, #8]
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d104      	bne.n	801ca44 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801ca3a:	4b08      	ldr	r3, [pc, #32]	@ (801ca5c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca3c:	681b      	ldr	r3, [r3, #0]
 801ca3e:	4618      	mov	r0, r3
 801ca40:	f000 f858 	bl	801caf4 <TimerSetTimeout>
 801ca44:	69bb      	ldr	r3, [r7, #24]
 801ca46:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	f383 8810 	msr	PRIMASK, r3
}
 801ca4e:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801ca50:	bf00      	nop
 801ca52:	3724      	adds	r7, #36	@ 0x24
 801ca54:	46bd      	mov	sp, r7
 801ca56:	bd90      	pop	{r4, r7, pc}
 801ca58:	0801dab0 	.word	0x0801dab0
 801ca5c:	20001e18 	.word	0x20001e18

0801ca60 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801ca60:	b580      	push	{r7, lr}
 801ca62:	b082      	sub	sp, #8
 801ca64:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801ca66:	4b06      	ldr	r3, [pc, #24]	@ (801ca80 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ca68:	69db      	ldr	r3, [r3, #28]
 801ca6a:	4798      	blx	r3
 801ca6c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801ca6e:	4b04      	ldr	r3, [pc, #16]	@ (801ca80 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ca70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ca72:	6878      	ldr	r0, [r7, #4]
 801ca74:	4798      	blx	r3
 801ca76:	4603      	mov	r3, r0
}
 801ca78:	4618      	mov	r0, r3
 801ca7a:	3708      	adds	r7, #8
 801ca7c:	46bd      	mov	sp, r7
 801ca7e:	bd80      	pop	{r7, pc}
 801ca80:	0801dab0 	.word	0x0801dab0

0801ca84 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801ca84:	b580      	push	{r7, lr}
 801ca86:	b084      	sub	sp, #16
 801ca88:	af00      	add	r7, sp, #0
 801ca8a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801ca8c:	4b0a      	ldr	r3, [pc, #40]	@ (801cab8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ca8e:	69db      	ldr	r3, [r3, #28]
 801ca90:	4798      	blx	r3
 801ca92:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801ca94:	4b08      	ldr	r3, [pc, #32]	@ (801cab8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801ca96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca98:	6878      	ldr	r0, [r7, #4]
 801ca9a:	4798      	blx	r3
 801ca9c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801ca9e:	4b06      	ldr	r3, [pc, #24]	@ (801cab8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801caa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801caa2:	68f9      	ldr	r1, [r7, #12]
 801caa4:	68ba      	ldr	r2, [r7, #8]
 801caa6:	1a8a      	subs	r2, r1, r2
 801caa8:	4610      	mov	r0, r2
 801caaa:	4798      	blx	r3
 801caac:	4603      	mov	r3, r0
}
 801caae:	4618      	mov	r0, r3
 801cab0:	3710      	adds	r7, #16
 801cab2:	46bd      	mov	sp, r7
 801cab4:	bd80      	pop	{r7, pc}
 801cab6:	bf00      	nop
 801cab8:	0801dab0 	.word	0x0801dab0

0801cabc <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801cabc:	b480      	push	{r7}
 801cabe:	b085      	sub	sp, #20
 801cac0:	af00      	add	r7, sp, #0
 801cac2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cac4:	4b0a      	ldr	r3, [pc, #40]	@ (801caf0 <TimerExists+0x34>)
 801cac6:	681b      	ldr	r3, [r3, #0]
 801cac8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801caca:	e008      	b.n	801cade <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801cacc:	68fa      	ldr	r2, [r7, #12]
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	429a      	cmp	r2, r3
 801cad2:	d101      	bne.n	801cad8 <TimerExists+0x1c>
    {
      return true;
 801cad4:	2301      	movs	r3, #1
 801cad6:	e006      	b.n	801cae6 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801cad8:	68fb      	ldr	r3, [r7, #12]
 801cada:	695b      	ldr	r3, [r3, #20]
 801cadc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801cade:	68fb      	ldr	r3, [r7, #12]
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d1f3      	bne.n	801cacc <TimerExists+0x10>
  }
  return false;
 801cae4:	2300      	movs	r3, #0
}
 801cae6:	4618      	mov	r0, r3
 801cae8:	3714      	adds	r7, #20
 801caea:	46bd      	mov	sp, r7
 801caec:	bc80      	pop	{r7}
 801caee:	4770      	bx	lr
 801caf0:	20001e18 	.word	0x20001e18

0801caf4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801caf4:	b590      	push	{r4, r7, lr}
 801caf6:	b085      	sub	sp, #20
 801caf8:	af00      	add	r7, sp, #0
 801cafa:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801cafc:	4b11      	ldr	r3, [pc, #68]	@ (801cb44 <TimerSetTimeout+0x50>)
 801cafe:	6a1b      	ldr	r3, [r3, #32]
 801cb00:	4798      	blx	r3
 801cb02:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	2201      	movs	r2, #1
 801cb08:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	681c      	ldr	r4, [r3, #0]
 801cb0e:	4b0d      	ldr	r3, [pc, #52]	@ (801cb44 <TimerSetTimeout+0x50>)
 801cb10:	699b      	ldr	r3, [r3, #24]
 801cb12:	4798      	blx	r3
 801cb14:	4602      	mov	r2, r0
 801cb16:	68fb      	ldr	r3, [r7, #12]
 801cb18:	4413      	add	r3, r2
 801cb1a:	429c      	cmp	r4, r3
 801cb1c:	d207      	bcs.n	801cb2e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801cb1e:	4b09      	ldr	r3, [pc, #36]	@ (801cb44 <TimerSetTimeout+0x50>)
 801cb20:	699b      	ldr	r3, [r3, #24]
 801cb22:	4798      	blx	r3
 801cb24:	4602      	mov	r2, r0
 801cb26:	68fb      	ldr	r3, [r7, #12]
 801cb28:	441a      	add	r2, r3
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801cb2e:	4b05      	ldr	r3, [pc, #20]	@ (801cb44 <TimerSetTimeout+0x50>)
 801cb30:	689b      	ldr	r3, [r3, #8]
 801cb32:	687a      	ldr	r2, [r7, #4]
 801cb34:	6812      	ldr	r2, [r2, #0]
 801cb36:	4610      	mov	r0, r2
 801cb38:	4798      	blx	r3
}
 801cb3a:	bf00      	nop
 801cb3c:	3714      	adds	r7, #20
 801cb3e:	46bd      	mov	sp, r7
 801cb40:	bd90      	pop	{r4, r7, pc}
 801cb42:	bf00      	nop
 801cb44:	0801dab0 	.word	0x0801dab0

0801cb48 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801cb48:	b480      	push	{r7}
 801cb4a:	b085      	sub	sp, #20
 801cb4c:	af00      	add	r7, sp, #0
 801cb4e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cb50:	4b14      	ldr	r3, [pc, #80]	@ (801cba4 <TimerInsertTimer+0x5c>)
 801cb52:	681b      	ldr	r3, [r3, #0]
 801cb54:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801cb56:	4b13      	ldr	r3, [pc, #76]	@ (801cba4 <TimerInsertTimer+0x5c>)
 801cb58:	681b      	ldr	r3, [r3, #0]
 801cb5a:	695b      	ldr	r3, [r3, #20]
 801cb5c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801cb5e:	e012      	b.n	801cb86 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	681a      	ldr	r2, [r3, #0]
 801cb64:	68bb      	ldr	r3, [r7, #8]
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	429a      	cmp	r2, r3
 801cb6a:	d905      	bls.n	801cb78 <TimerInsertTimer+0x30>
    {
        cur = next;
 801cb6c:	68bb      	ldr	r3, [r7, #8]
 801cb6e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801cb70:	68bb      	ldr	r3, [r7, #8]
 801cb72:	695b      	ldr	r3, [r3, #20]
 801cb74:	60bb      	str	r3, [r7, #8]
 801cb76:	e006      	b.n	801cb86 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801cb78:	68fb      	ldr	r3, [r7, #12]
 801cb7a:	687a      	ldr	r2, [r7, #4]
 801cb7c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	68ba      	ldr	r2, [r7, #8]
 801cb82:	615a      	str	r2, [r3, #20]
        return;
 801cb84:	e009      	b.n	801cb9a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801cb86:	68fb      	ldr	r3, [r7, #12]
 801cb88:	695b      	ldr	r3, [r3, #20]
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d1e8      	bne.n	801cb60 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	687a      	ldr	r2, [r7, #4]
 801cb92:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	2200      	movs	r2, #0
 801cb98:	615a      	str	r2, [r3, #20]
}
 801cb9a:	3714      	adds	r7, #20
 801cb9c:	46bd      	mov	sp, r7
 801cb9e:	bc80      	pop	{r7}
 801cba0:	4770      	bx	lr
 801cba2:	bf00      	nop
 801cba4:	20001e18 	.word	0x20001e18

0801cba8 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801cba8:	b580      	push	{r7, lr}
 801cbaa:	b084      	sub	sp, #16
 801cbac:	af00      	add	r7, sp, #0
 801cbae:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cbb0:	4b0b      	ldr	r3, [pc, #44]	@ (801cbe0 <TimerInsertNewHeadTimer+0x38>)
 801cbb2:	681b      	ldr	r3, [r3, #0]
 801cbb4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801cbb6:	68fb      	ldr	r3, [r7, #12]
 801cbb8:	2b00      	cmp	r3, #0
 801cbba:	d002      	beq.n	801cbc2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801cbbc:	68fb      	ldr	r3, [r7, #12]
 801cbbe:	2200      	movs	r2, #0
 801cbc0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	68fa      	ldr	r2, [r7, #12]
 801cbc6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801cbc8:	4a05      	ldr	r2, [pc, #20]	@ (801cbe0 <TimerInsertNewHeadTimer+0x38>)
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801cbce:	4b04      	ldr	r3, [pc, #16]	@ (801cbe0 <TimerInsertNewHeadTimer+0x38>)
 801cbd0:	681b      	ldr	r3, [r3, #0]
 801cbd2:	4618      	mov	r0, r3
 801cbd4:	f7ff ff8e 	bl	801caf4 <TimerSetTimeout>
}
 801cbd8:	bf00      	nop
 801cbda:	3710      	adds	r7, #16
 801cbdc:	46bd      	mov	sp, r7
 801cbde:	bd80      	pop	{r7, pc}
 801cbe0:	20001e18 	.word	0x20001e18

0801cbe4 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801cbe4:	b580      	push	{r7, lr}
 801cbe6:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801cbe8:	2218      	movs	r2, #24
 801cbea:	2100      	movs	r1, #0
 801cbec:	4807      	ldr	r0, [pc, #28]	@ (801cc0c <UTIL_ADV_TRACE_Init+0x28>)
 801cbee:	f7fe fffc 	bl	801bbea <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801cbf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801cbf6:	2100      	movs	r1, #0
 801cbf8:	4805      	ldr	r0, [pc, #20]	@ (801cc10 <UTIL_ADV_TRACE_Init+0x2c>)
 801cbfa:	f7fe fff6 	bl	801bbea <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801cbfe:	4b05      	ldr	r3, [pc, #20]	@ (801cc14 <UTIL_ADV_TRACE_Init+0x30>)
 801cc00:	681b      	ldr	r3, [r3, #0]
 801cc02:	4805      	ldr	r0, [pc, #20]	@ (801cc18 <UTIL_ADV_TRACE_Init+0x34>)
 801cc04:	4798      	blx	r3
 801cc06:	4603      	mov	r3, r0
}
 801cc08:	4618      	mov	r0, r3
 801cc0a:	bd80      	pop	{r7, pc}
 801cc0c:	20001e1c 	.word	0x20001e1c
 801cc10:	20001e34 	.word	0x20001e34
 801cc14:	0801daf0 	.word	0x0801daf0
 801cc18:	0801ce85 	.word	0x0801ce85

0801cc1c <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801cc1c:	b480      	push	{r7}
 801cc1e:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801cc20:	4b06      	ldr	r3, [pc, #24]	@ (801cc3c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801cc22:	8a5a      	ldrh	r2, [r3, #18]
 801cc24:	4b05      	ldr	r3, [pc, #20]	@ (801cc3c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801cc26:	8a1b      	ldrh	r3, [r3, #16]
 801cc28:	429a      	cmp	r2, r3
 801cc2a:	d101      	bne.n	801cc30 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801cc2c:	2301      	movs	r3, #1
 801cc2e:	e000      	b.n	801cc32 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801cc30:	2300      	movs	r3, #0
}
 801cc32:	4618      	mov	r0, r3
 801cc34:	46bd      	mov	sp, r7
 801cc36:	bc80      	pop	{r7}
 801cc38:	4770      	bx	lr
 801cc3a:	bf00      	nop
 801cc3c:	20001e1c 	.word	0x20001e1c

0801cc40 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801cc40:	b408      	push	{r3}
 801cc42:	b580      	push	{r7, lr}
 801cc44:	b08d      	sub	sp, #52	@ 0x34
 801cc46:	af00      	add	r7, sp, #0
 801cc48:	60f8      	str	r0, [r7, #12]
 801cc4a:	60b9      	str	r1, [r7, #8]
 801cc4c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801cc4e:	2300      	movs	r3, #0
 801cc50:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801cc52:	2300      	movs	r3, #0
 801cc54:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801cc56:	4b37      	ldr	r3, [pc, #220]	@ (801cd34 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cc58:	7a1b      	ldrb	r3, [r3, #8]
 801cc5a:	461a      	mov	r2, r3
 801cc5c:	68fb      	ldr	r3, [r7, #12]
 801cc5e:	4293      	cmp	r3, r2
 801cc60:	d902      	bls.n	801cc68 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801cc62:	f06f 0304 	mvn.w	r3, #4
 801cc66:	e05e      	b.n	801cd26 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801cc68:	4b32      	ldr	r3, [pc, #200]	@ (801cd34 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cc6a:	68da      	ldr	r2, [r3, #12]
 801cc6c:	68bb      	ldr	r3, [r7, #8]
 801cc6e:	4013      	ands	r3, r2
 801cc70:	68ba      	ldr	r2, [r7, #8]
 801cc72:	429a      	cmp	r2, r3
 801cc74:	d002      	beq.n	801cc7c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801cc76:	f06f 0305 	mvn.w	r3, #5
 801cc7a:	e054      	b.n	801cd26 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801cc7c:	4b2d      	ldr	r3, [pc, #180]	@ (801cd34 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cc7e:	685b      	ldr	r3, [r3, #4]
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d00a      	beq.n	801cc9a <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	d007      	beq.n	801cc9a <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801cc8a:	4b2a      	ldr	r3, [pc, #168]	@ (801cd34 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801cc8c:	685b      	ldr	r3, [r3, #4]
 801cc8e:	f107 0116 	add.w	r1, r7, #22
 801cc92:	f107 0218 	add.w	r2, r7, #24
 801cc96:	4610      	mov	r0, r2
 801cc98:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801cc9a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801cc9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801cca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cca2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cca4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cca8:	4823      	ldr	r0, [pc, #140]	@ (801cd38 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801ccaa:	f7ff fa2b 	bl	801c104 <tiny_vsnprintf_like>
 801ccae:	4603      	mov	r3, r0
 801ccb0:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801ccb2:	f000 f9f1 	bl	801d098 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801ccb6:	8afa      	ldrh	r2, [r7, #22]
 801ccb8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801ccba:	4413      	add	r3, r2
 801ccbc:	b29b      	uxth	r3, r3
 801ccbe:	f107 0214 	add.w	r2, r7, #20
 801ccc2:	4611      	mov	r1, r2
 801ccc4:	4618      	mov	r0, r3
 801ccc6:	f000 f969 	bl	801cf9c <TRACE_AllocateBufer>
 801ccca:	4603      	mov	r3, r0
 801cccc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ccd0:	d025      	beq.n	801cd1e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801ccd2:	2300      	movs	r3, #0
 801ccd4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801ccd6:	e00e      	b.n	801ccf6 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801ccd8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801ccda:	8aba      	ldrh	r2, [r7, #20]
 801ccdc:	3330      	adds	r3, #48	@ 0x30
 801ccde:	443b      	add	r3, r7
 801cce0:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801cce4:	4b15      	ldr	r3, [pc, #84]	@ (801cd3c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801cce6:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801cce8:	8abb      	ldrh	r3, [r7, #20]
 801ccea:	3301      	adds	r3, #1
 801ccec:	b29b      	uxth	r3, r3
 801ccee:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801ccf0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801ccf2:	3301      	adds	r3, #1
 801ccf4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801ccf6:	8afb      	ldrh	r3, [r7, #22]
 801ccf8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801ccfa:	429a      	cmp	r2, r3
 801ccfc:	d3ec      	bcc.n	801ccd8 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ccfe:	8abb      	ldrh	r3, [r7, #20]
 801cd00:	461a      	mov	r2, r3
 801cd02:	4b0e      	ldr	r3, [pc, #56]	@ (801cd3c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801cd04:	18d0      	adds	r0, r2, r3
 801cd06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cd0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801cd0e:	f7ff f9f9 	bl	801c104 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801cd12:	f000 f9df 	bl	801d0d4 <TRACE_UnLock>

    return TRACE_Send();
 801cd16:	f000 f831 	bl	801cd7c <TRACE_Send>
 801cd1a:	4603      	mov	r3, r0
 801cd1c:	e003      	b.n	801cd26 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801cd1e:	f000 f9d9 	bl	801d0d4 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801cd22:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801cd26:	4618      	mov	r0, r3
 801cd28:	3734      	adds	r7, #52	@ 0x34
 801cd2a:	46bd      	mov	sp, r7
 801cd2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801cd30:	b001      	add	sp, #4
 801cd32:	4770      	bx	lr
 801cd34:	20001e1c 	.word	0x20001e1c
 801cd38:	20002234 	.word	0x20002234
 801cd3c:	20001e34 	.word	0x20001e34

0801cd40 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801cd40:	b480      	push	{r7}
 801cd42:	b083      	sub	sp, #12
 801cd44:	af00      	add	r7, sp, #0
 801cd46:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801cd48:	4a03      	ldr	r2, [pc, #12]	@ (801cd58 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	6053      	str	r3, [r2, #4]
}
 801cd4e:	bf00      	nop
 801cd50:	370c      	adds	r7, #12
 801cd52:	46bd      	mov	sp, r7
 801cd54:	bc80      	pop	{r7}
 801cd56:	4770      	bx	lr
 801cd58:	20001e1c 	.word	0x20001e1c

0801cd5c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801cd5c:	b480      	push	{r7}
 801cd5e:	b083      	sub	sp, #12
 801cd60:	af00      	add	r7, sp, #0
 801cd62:	4603      	mov	r3, r0
 801cd64:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801cd66:	4a04      	ldr	r2, [pc, #16]	@ (801cd78 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801cd68:	79fb      	ldrb	r3, [r7, #7]
 801cd6a:	7213      	strb	r3, [r2, #8]
}
 801cd6c:	bf00      	nop
 801cd6e:	370c      	adds	r7, #12
 801cd70:	46bd      	mov	sp, r7
 801cd72:	bc80      	pop	{r7}
 801cd74:	4770      	bx	lr
 801cd76:	bf00      	nop
 801cd78:	20001e1c 	.word	0x20001e1c

0801cd7c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801cd7c:	b580      	push	{r7, lr}
 801cd7e:	b088      	sub	sp, #32
 801cd80:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801cd82:	2300      	movs	r3, #0
 801cd84:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801cd86:	2300      	movs	r3, #0
 801cd88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd8a:	f3ef 8310 	mrs	r3, PRIMASK
 801cd8e:	613b      	str	r3, [r7, #16]
  return(result);
 801cd90:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cd92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd94:	b672      	cpsid	i
}
 801cd96:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801cd98:	f000 f9ba 	bl	801d110 <TRACE_IsLocked>
 801cd9c:	4603      	mov	r3, r0
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	d15d      	bne.n	801ce5e <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801cda2:	f000 f979 	bl	801d098 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801cda6:	4b34      	ldr	r3, [pc, #208]	@ (801ce78 <TRACE_Send+0xfc>)
 801cda8:	8a1a      	ldrh	r2, [r3, #16]
 801cdaa:	4b33      	ldr	r3, [pc, #204]	@ (801ce78 <TRACE_Send+0xfc>)
 801cdac:	8a5b      	ldrh	r3, [r3, #18]
 801cdae:	429a      	cmp	r2, r3
 801cdb0:	d04d      	beq.n	801ce4e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801cdb2:	4b31      	ldr	r3, [pc, #196]	@ (801ce78 <TRACE_Send+0xfc>)
 801cdb4:	789b      	ldrb	r3, [r3, #2]
 801cdb6:	2b01      	cmp	r3, #1
 801cdb8:	d117      	bne.n	801cdea <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801cdba:	4b2f      	ldr	r3, [pc, #188]	@ (801ce78 <TRACE_Send+0xfc>)
 801cdbc:	881a      	ldrh	r2, [r3, #0]
 801cdbe:	4b2e      	ldr	r3, [pc, #184]	@ (801ce78 <TRACE_Send+0xfc>)
 801cdc0:	8a1b      	ldrh	r3, [r3, #16]
 801cdc2:	1ad3      	subs	r3, r2, r3
 801cdc4:	b29a      	uxth	r2, r3
 801cdc6:	4b2c      	ldr	r3, [pc, #176]	@ (801ce78 <TRACE_Send+0xfc>)
 801cdc8:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801cdca:	4b2b      	ldr	r3, [pc, #172]	@ (801ce78 <TRACE_Send+0xfc>)
 801cdcc:	2202      	movs	r2, #2
 801cdce:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801cdd0:	4b29      	ldr	r3, [pc, #164]	@ (801ce78 <TRACE_Send+0xfc>)
 801cdd2:	2200      	movs	r2, #0
 801cdd4:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801cdd6:	4b28      	ldr	r3, [pc, #160]	@ (801ce78 <TRACE_Send+0xfc>)
 801cdd8:	8a9b      	ldrh	r3, [r3, #20]
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d105      	bne.n	801cdea <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cdde:	4b26      	ldr	r3, [pc, #152]	@ (801ce78 <TRACE_Send+0xfc>)
 801cde0:	2200      	movs	r2, #0
 801cde2:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cde4:	4b24      	ldr	r3, [pc, #144]	@ (801ce78 <TRACE_Send+0xfc>)
 801cde6:	2200      	movs	r2, #0
 801cde8:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801cdea:	4b23      	ldr	r3, [pc, #140]	@ (801ce78 <TRACE_Send+0xfc>)
 801cdec:	789b      	ldrb	r3, [r3, #2]
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	d115      	bne.n	801ce1e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cdf2:	4b21      	ldr	r3, [pc, #132]	@ (801ce78 <TRACE_Send+0xfc>)
 801cdf4:	8a5a      	ldrh	r2, [r3, #18]
 801cdf6:	4b20      	ldr	r3, [pc, #128]	@ (801ce78 <TRACE_Send+0xfc>)
 801cdf8:	8a1b      	ldrh	r3, [r3, #16]
 801cdfa:	429a      	cmp	r2, r3
 801cdfc:	d908      	bls.n	801ce10 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cdfe:	4b1e      	ldr	r3, [pc, #120]	@ (801ce78 <TRACE_Send+0xfc>)
 801ce00:	8a5a      	ldrh	r2, [r3, #18]
 801ce02:	4b1d      	ldr	r3, [pc, #116]	@ (801ce78 <TRACE_Send+0xfc>)
 801ce04:	8a1b      	ldrh	r3, [r3, #16]
 801ce06:	1ad3      	subs	r3, r2, r3
 801ce08:	b29a      	uxth	r2, r3
 801ce0a:	4b1b      	ldr	r3, [pc, #108]	@ (801ce78 <TRACE_Send+0xfc>)
 801ce0c:	829a      	strh	r2, [r3, #20]
 801ce0e:	e006      	b.n	801ce1e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ce10:	4b19      	ldr	r3, [pc, #100]	@ (801ce78 <TRACE_Send+0xfc>)
 801ce12:	8a1b      	ldrh	r3, [r3, #16]
 801ce14:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801ce18:	b29a      	uxth	r2, r3
 801ce1a:	4b17      	ldr	r3, [pc, #92]	@ (801ce78 <TRACE_Send+0xfc>)
 801ce1c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ce1e:	4b16      	ldr	r3, [pc, #88]	@ (801ce78 <TRACE_Send+0xfc>)
 801ce20:	8a1b      	ldrh	r3, [r3, #16]
 801ce22:	461a      	mov	r2, r3
 801ce24:	4b15      	ldr	r3, [pc, #84]	@ (801ce7c <TRACE_Send+0x100>)
 801ce26:	4413      	add	r3, r2
 801ce28:	61bb      	str	r3, [r7, #24]
 801ce2a:	697b      	ldr	r3, [r7, #20]
 801ce2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce2e:	68fb      	ldr	r3, [r7, #12]
 801ce30:	f383 8810 	msr	PRIMASK, r3
}
 801ce34:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801ce36:	f7e5 fac3 	bl	80023c0 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ce3a:	4b11      	ldr	r3, [pc, #68]	@ (801ce80 <TRACE_Send+0x104>)
 801ce3c:	68db      	ldr	r3, [r3, #12]
 801ce3e:	4a0e      	ldr	r2, [pc, #56]	@ (801ce78 <TRACE_Send+0xfc>)
 801ce40:	8a92      	ldrh	r2, [r2, #20]
 801ce42:	4611      	mov	r1, r2
 801ce44:	69b8      	ldr	r0, [r7, #24]
 801ce46:	4798      	blx	r3
 801ce48:	4603      	mov	r3, r0
 801ce4a:	77fb      	strb	r3, [r7, #31]
 801ce4c:	e00d      	b.n	801ce6a <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801ce4e:	f000 f941 	bl	801d0d4 <TRACE_UnLock>
 801ce52:	697b      	ldr	r3, [r7, #20]
 801ce54:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce56:	68bb      	ldr	r3, [r7, #8]
 801ce58:	f383 8810 	msr	PRIMASK, r3
}
 801ce5c:	e005      	b.n	801ce6a <TRACE_Send+0xee>
 801ce5e:	697b      	ldr	r3, [r7, #20]
 801ce60:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	f383 8810 	msr	PRIMASK, r3
}
 801ce68:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801ce6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ce6e:	4618      	mov	r0, r3
 801ce70:	3720      	adds	r7, #32
 801ce72:	46bd      	mov	sp, r7
 801ce74:	bd80      	pop	{r7, pc}
 801ce76:	bf00      	nop
 801ce78:	20001e1c 	.word	0x20001e1c
 801ce7c:	20001e34 	.word	0x20001e34
 801ce80:	0801daf0 	.word	0x0801daf0

0801ce84 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801ce84:	b580      	push	{r7, lr}
 801ce86:	b088      	sub	sp, #32
 801ce88:	af00      	add	r7, sp, #0
 801ce8a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801ce8c:	2300      	movs	r3, #0
 801ce8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce90:	f3ef 8310 	mrs	r3, PRIMASK
 801ce94:	617b      	str	r3, [r7, #20]
  return(result);
 801ce96:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ce98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce9a:	b672      	cpsid	i
}
 801ce9c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801ce9e:	4b3c      	ldr	r3, [pc, #240]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cea0:	789b      	ldrb	r3, [r3, #2]
 801cea2:	2b02      	cmp	r3, #2
 801cea4:	d106      	bne.n	801ceb4 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cea6:	4b3a      	ldr	r3, [pc, #232]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cea8:	2200      	movs	r2, #0
 801ceaa:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ceac:	4b38      	ldr	r3, [pc, #224]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801ceae:	2200      	movs	r2, #0
 801ceb0:	821a      	strh	r2, [r3, #16]
 801ceb2:	e00a      	b.n	801ceca <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ceb4:	4b36      	ldr	r3, [pc, #216]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801ceb6:	8a1a      	ldrh	r2, [r3, #16]
 801ceb8:	4b35      	ldr	r3, [pc, #212]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801ceba:	8a9b      	ldrh	r3, [r3, #20]
 801cebc:	4413      	add	r3, r2
 801cebe:	b29b      	uxth	r3, r3
 801cec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801cec4:	b29a      	uxth	r2, r3
 801cec6:	4b32      	ldr	r3, [pc, #200]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cec8:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801ceca:	4b31      	ldr	r3, [pc, #196]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cecc:	8a1a      	ldrh	r2, [r3, #16]
 801cece:	4b30      	ldr	r3, [pc, #192]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801ced0:	8a5b      	ldrh	r3, [r3, #18]
 801ced2:	429a      	cmp	r2, r3
 801ced4:	d04d      	beq.n	801cf72 <TRACE_TxCpltCallback+0xee>
 801ced6:	4b2e      	ldr	r3, [pc, #184]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801ced8:	8adb      	ldrh	r3, [r3, #22]
 801ceda:	2b01      	cmp	r3, #1
 801cedc:	d149      	bne.n	801cf72 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801cede:	4b2c      	ldr	r3, [pc, #176]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cee0:	789b      	ldrb	r3, [r3, #2]
 801cee2:	2b01      	cmp	r3, #1
 801cee4:	d117      	bne.n	801cf16 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801cee6:	4b2a      	ldr	r3, [pc, #168]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cee8:	881a      	ldrh	r2, [r3, #0]
 801ceea:	4b29      	ldr	r3, [pc, #164]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801ceec:	8a1b      	ldrh	r3, [r3, #16]
 801ceee:	1ad3      	subs	r3, r2, r3
 801cef0:	b29a      	uxth	r2, r3
 801cef2:	4b27      	ldr	r3, [pc, #156]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cef4:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801cef6:	4b26      	ldr	r3, [pc, #152]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cef8:	2202      	movs	r2, #2
 801cefa:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801cefc:	4b24      	ldr	r3, [pc, #144]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cefe:	2200      	movs	r2, #0
 801cf00:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801cf02:	4b23      	ldr	r3, [pc, #140]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cf04:	8a9b      	ldrh	r3, [r3, #20]
 801cf06:	2b00      	cmp	r3, #0
 801cf08:	d105      	bne.n	801cf16 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cf0a:	4b21      	ldr	r3, [pc, #132]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cf0c:	2200      	movs	r2, #0
 801cf0e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cf10:	4b1f      	ldr	r3, [pc, #124]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cf12:	2200      	movs	r2, #0
 801cf14:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801cf16:	4b1e      	ldr	r3, [pc, #120]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cf18:	789b      	ldrb	r3, [r3, #2]
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	d115      	bne.n	801cf4a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cf1e:	4b1c      	ldr	r3, [pc, #112]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cf20:	8a5a      	ldrh	r2, [r3, #18]
 801cf22:	4b1b      	ldr	r3, [pc, #108]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cf24:	8a1b      	ldrh	r3, [r3, #16]
 801cf26:	429a      	cmp	r2, r3
 801cf28:	d908      	bls.n	801cf3c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cf2a:	4b19      	ldr	r3, [pc, #100]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cf2c:	8a5a      	ldrh	r2, [r3, #18]
 801cf2e:	4b18      	ldr	r3, [pc, #96]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cf30:	8a1b      	ldrh	r3, [r3, #16]
 801cf32:	1ad3      	subs	r3, r2, r3
 801cf34:	b29a      	uxth	r2, r3
 801cf36:	4b16      	ldr	r3, [pc, #88]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cf38:	829a      	strh	r2, [r3, #20]
 801cf3a:	e006      	b.n	801cf4a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801cf3c:	4b14      	ldr	r3, [pc, #80]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cf3e:	8a1b      	ldrh	r3, [r3, #16]
 801cf40:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801cf44:	b29a      	uxth	r2, r3
 801cf46:	4b12      	ldr	r3, [pc, #72]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cf48:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801cf4a:	4b11      	ldr	r3, [pc, #68]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cf4c:	8a1b      	ldrh	r3, [r3, #16]
 801cf4e:	461a      	mov	r2, r3
 801cf50:	4b10      	ldr	r3, [pc, #64]	@ (801cf94 <TRACE_TxCpltCallback+0x110>)
 801cf52:	4413      	add	r3, r2
 801cf54:	61fb      	str	r3, [r7, #28]
 801cf56:	69bb      	ldr	r3, [r7, #24]
 801cf58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf5a:	693b      	ldr	r3, [r7, #16]
 801cf5c:	f383 8810 	msr	PRIMASK, r3
}
 801cf60:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801cf62:	4b0d      	ldr	r3, [pc, #52]	@ (801cf98 <TRACE_TxCpltCallback+0x114>)
 801cf64:	68db      	ldr	r3, [r3, #12]
 801cf66:	4a0a      	ldr	r2, [pc, #40]	@ (801cf90 <TRACE_TxCpltCallback+0x10c>)
 801cf68:	8a92      	ldrh	r2, [r2, #20]
 801cf6a:	4611      	mov	r1, r2
 801cf6c:	69f8      	ldr	r0, [r7, #28]
 801cf6e:	4798      	blx	r3
 801cf70:	e00a      	b.n	801cf88 <TRACE_TxCpltCallback+0x104>
 801cf72:	69bb      	ldr	r3, [r7, #24]
 801cf74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf76:	68fb      	ldr	r3, [r7, #12]
 801cf78:	f383 8810 	msr	PRIMASK, r3
}
 801cf7c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801cf7e:	f7e5 fa27 	bl	80023d0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801cf82:	f000 f8a7 	bl	801d0d4 <TRACE_UnLock>
  }
}
 801cf86:	bf00      	nop
 801cf88:	bf00      	nop
 801cf8a:	3720      	adds	r7, #32
 801cf8c:	46bd      	mov	sp, r7
 801cf8e:	bd80      	pop	{r7, pc}
 801cf90:	20001e1c 	.word	0x20001e1c
 801cf94:	20001e34 	.word	0x20001e34
 801cf98:	0801daf0 	.word	0x0801daf0

0801cf9c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801cf9c:	b480      	push	{r7}
 801cf9e:	b087      	sub	sp, #28
 801cfa0:	af00      	add	r7, sp, #0
 801cfa2:	4603      	mov	r3, r0
 801cfa4:	6039      	str	r1, [r7, #0]
 801cfa6:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801cfa8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cfac:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cfae:	f3ef 8310 	mrs	r3, PRIMASK
 801cfb2:	60fb      	str	r3, [r7, #12]
  return(result);
 801cfb4:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cfb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cfb8:	b672      	cpsid	i
}
 801cfba:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801cfbc:	4b35      	ldr	r3, [pc, #212]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801cfbe:	8a5a      	ldrh	r2, [r3, #18]
 801cfc0:	4b34      	ldr	r3, [pc, #208]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801cfc2:	8a1b      	ldrh	r3, [r3, #16]
 801cfc4:	429a      	cmp	r2, r3
 801cfc6:	d11b      	bne.n	801d000 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cfc8:	4b32      	ldr	r3, [pc, #200]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801cfca:	8a5b      	ldrh	r3, [r3, #18]
 801cfcc:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801cfd0:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801cfd2:	88fa      	ldrh	r2, [r7, #6]
 801cfd4:	8afb      	ldrh	r3, [r7, #22]
 801cfd6:	429a      	cmp	r2, r3
 801cfd8:	d33a      	bcc.n	801d050 <TRACE_AllocateBufer+0xb4>
 801cfda:	4b2e      	ldr	r3, [pc, #184]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801cfdc:	8a1b      	ldrh	r3, [r3, #16]
 801cfde:	88fa      	ldrh	r2, [r7, #6]
 801cfe0:	429a      	cmp	r2, r3
 801cfe2:	d235      	bcs.n	801d050 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801cfe4:	4b2b      	ldr	r3, [pc, #172]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801cfe6:	2201      	movs	r2, #1
 801cfe8:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801cfea:	4b2a      	ldr	r3, [pc, #168]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801cfec:	8a5a      	ldrh	r2, [r3, #18]
 801cfee:	4b29      	ldr	r3, [pc, #164]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801cff0:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801cff2:	4b28      	ldr	r3, [pc, #160]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801cff4:	8a1b      	ldrh	r3, [r3, #16]
 801cff6:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801cff8:	4b26      	ldr	r3, [pc, #152]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801cffa:	2200      	movs	r2, #0
 801cffc:	825a      	strh	r2, [r3, #18]
 801cffe:	e027      	b.n	801d050 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d000:	4b24      	ldr	r3, [pc, #144]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801d002:	8a5a      	ldrh	r2, [r3, #18]
 801d004:	4b23      	ldr	r3, [pc, #140]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801d006:	8a1b      	ldrh	r3, [r3, #16]
 801d008:	429a      	cmp	r2, r3
 801d00a:	d91b      	bls.n	801d044 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d00c:	4b21      	ldr	r3, [pc, #132]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801d00e:	8a5b      	ldrh	r3, [r3, #18]
 801d010:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801d014:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801d016:	88fa      	ldrh	r2, [r7, #6]
 801d018:	8afb      	ldrh	r3, [r7, #22]
 801d01a:	429a      	cmp	r2, r3
 801d01c:	d318      	bcc.n	801d050 <TRACE_AllocateBufer+0xb4>
 801d01e:	4b1d      	ldr	r3, [pc, #116]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801d020:	8a1b      	ldrh	r3, [r3, #16]
 801d022:	88fa      	ldrh	r2, [r7, #6]
 801d024:	429a      	cmp	r2, r3
 801d026:	d213      	bcs.n	801d050 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d028:	4b1a      	ldr	r3, [pc, #104]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801d02a:	2201      	movs	r2, #1
 801d02c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d02e:	4b19      	ldr	r3, [pc, #100]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801d030:	8a5a      	ldrh	r2, [r3, #18]
 801d032:	4b18      	ldr	r3, [pc, #96]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801d034:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d036:	4b17      	ldr	r3, [pc, #92]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801d038:	8a1b      	ldrh	r3, [r3, #16]
 801d03a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d03c:	4b15      	ldr	r3, [pc, #84]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801d03e:	2200      	movs	r2, #0
 801d040:	825a      	strh	r2, [r3, #18]
 801d042:	e005      	b.n	801d050 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801d044:	4b13      	ldr	r3, [pc, #76]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801d046:	8a1a      	ldrh	r2, [r3, #16]
 801d048:	4b12      	ldr	r3, [pc, #72]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801d04a:	8a5b      	ldrh	r3, [r3, #18]
 801d04c:	1ad3      	subs	r3, r2, r3
 801d04e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801d050:	8afa      	ldrh	r2, [r7, #22]
 801d052:	88fb      	ldrh	r3, [r7, #6]
 801d054:	429a      	cmp	r2, r3
 801d056:	d90f      	bls.n	801d078 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801d058:	4b0e      	ldr	r3, [pc, #56]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801d05a:	8a5a      	ldrh	r2, [r3, #18]
 801d05c:	683b      	ldr	r3, [r7, #0]
 801d05e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d060:	4b0c      	ldr	r3, [pc, #48]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801d062:	8a5a      	ldrh	r2, [r3, #18]
 801d064:	88fb      	ldrh	r3, [r7, #6]
 801d066:	4413      	add	r3, r2
 801d068:	b29b      	uxth	r3, r3
 801d06a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d06e:	b29a      	uxth	r2, r3
 801d070:	4b08      	ldr	r3, [pc, #32]	@ (801d094 <TRACE_AllocateBufer+0xf8>)
 801d072:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801d074:	2300      	movs	r3, #0
 801d076:	82bb      	strh	r3, [r7, #20]
 801d078:	693b      	ldr	r3, [r7, #16]
 801d07a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d07c:	68bb      	ldr	r3, [r7, #8]
 801d07e:	f383 8810 	msr	PRIMASK, r3
}
 801d082:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801d084:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801d088:	4618      	mov	r0, r3
 801d08a:	371c      	adds	r7, #28
 801d08c:	46bd      	mov	sp, r7
 801d08e:	bc80      	pop	{r7}
 801d090:	4770      	bx	lr
 801d092:	bf00      	nop
 801d094:	20001e1c 	.word	0x20001e1c

0801d098 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801d098:	b480      	push	{r7}
 801d09a:	b085      	sub	sp, #20
 801d09c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d09e:	f3ef 8310 	mrs	r3, PRIMASK
 801d0a2:	607b      	str	r3, [r7, #4]
  return(result);
 801d0a4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d0a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d0a8:	b672      	cpsid	i
}
 801d0aa:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801d0ac:	4b08      	ldr	r3, [pc, #32]	@ (801d0d0 <TRACE_Lock+0x38>)
 801d0ae:	8adb      	ldrh	r3, [r3, #22]
 801d0b0:	3301      	adds	r3, #1
 801d0b2:	b29a      	uxth	r2, r3
 801d0b4:	4b06      	ldr	r3, [pc, #24]	@ (801d0d0 <TRACE_Lock+0x38>)
 801d0b6:	82da      	strh	r2, [r3, #22]
 801d0b8:	68fb      	ldr	r3, [r7, #12]
 801d0ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0bc:	68bb      	ldr	r3, [r7, #8]
 801d0be:	f383 8810 	msr	PRIMASK, r3
}
 801d0c2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d0c4:	bf00      	nop
 801d0c6:	3714      	adds	r7, #20
 801d0c8:	46bd      	mov	sp, r7
 801d0ca:	bc80      	pop	{r7}
 801d0cc:	4770      	bx	lr
 801d0ce:	bf00      	nop
 801d0d0:	20001e1c 	.word	0x20001e1c

0801d0d4 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801d0d4:	b480      	push	{r7}
 801d0d6:	b085      	sub	sp, #20
 801d0d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0da:	f3ef 8310 	mrs	r3, PRIMASK
 801d0de:	607b      	str	r3, [r7, #4]
  return(result);
 801d0e0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d0e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d0e4:	b672      	cpsid	i
}
 801d0e6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801d0e8:	4b08      	ldr	r3, [pc, #32]	@ (801d10c <TRACE_UnLock+0x38>)
 801d0ea:	8adb      	ldrh	r3, [r3, #22]
 801d0ec:	3b01      	subs	r3, #1
 801d0ee:	b29a      	uxth	r2, r3
 801d0f0:	4b06      	ldr	r3, [pc, #24]	@ (801d10c <TRACE_UnLock+0x38>)
 801d0f2:	82da      	strh	r2, [r3, #22]
 801d0f4:	68fb      	ldr	r3, [r7, #12]
 801d0f6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0f8:	68bb      	ldr	r3, [r7, #8]
 801d0fa:	f383 8810 	msr	PRIMASK, r3
}
 801d0fe:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d100:	bf00      	nop
 801d102:	3714      	adds	r7, #20
 801d104:	46bd      	mov	sp, r7
 801d106:	bc80      	pop	{r7}
 801d108:	4770      	bx	lr
 801d10a:	bf00      	nop
 801d10c:	20001e1c 	.word	0x20001e1c

0801d110 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801d110:	b480      	push	{r7}
 801d112:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801d114:	4b05      	ldr	r3, [pc, #20]	@ (801d12c <TRACE_IsLocked+0x1c>)
 801d116:	8adb      	ldrh	r3, [r3, #22]
 801d118:	2b00      	cmp	r3, #0
 801d11a:	bf14      	ite	ne
 801d11c:	2301      	movne	r3, #1
 801d11e:	2300      	moveq	r3, #0
 801d120:	b2db      	uxtb	r3, r3
}
 801d122:	4618      	mov	r0, r3
 801d124:	46bd      	mov	sp, r7
 801d126:	bc80      	pop	{r7}
 801d128:	4770      	bx	lr
 801d12a:	bf00      	nop
 801d12c:	20001e1c 	.word	0x20001e1c

0801d130 <memset>:
 801d130:	4402      	add	r2, r0
 801d132:	4603      	mov	r3, r0
 801d134:	4293      	cmp	r3, r2
 801d136:	d100      	bne.n	801d13a <memset+0xa>
 801d138:	4770      	bx	lr
 801d13a:	f803 1b01 	strb.w	r1, [r3], #1
 801d13e:	e7f9      	b.n	801d134 <memset+0x4>

0801d140 <__libc_init_array>:
 801d140:	b570      	push	{r4, r5, r6, lr}
 801d142:	4d0d      	ldr	r5, [pc, #52]	@ (801d178 <__libc_init_array+0x38>)
 801d144:	4c0d      	ldr	r4, [pc, #52]	@ (801d17c <__libc_init_array+0x3c>)
 801d146:	1b64      	subs	r4, r4, r5
 801d148:	10a4      	asrs	r4, r4, #2
 801d14a:	2600      	movs	r6, #0
 801d14c:	42a6      	cmp	r6, r4
 801d14e:	d109      	bne.n	801d164 <__libc_init_array+0x24>
 801d150:	4d0b      	ldr	r5, [pc, #44]	@ (801d180 <__libc_init_array+0x40>)
 801d152:	4c0c      	ldr	r4, [pc, #48]	@ (801d184 <__libc_init_array+0x44>)
 801d154:	f000 f898 	bl	801d288 <_init>
 801d158:	1b64      	subs	r4, r4, r5
 801d15a:	10a4      	asrs	r4, r4, #2
 801d15c:	2600      	movs	r6, #0
 801d15e:	42a6      	cmp	r6, r4
 801d160:	d105      	bne.n	801d16e <__libc_init_array+0x2e>
 801d162:	bd70      	pop	{r4, r5, r6, pc}
 801d164:	f855 3b04 	ldr.w	r3, [r5], #4
 801d168:	4798      	blx	r3
 801d16a:	3601      	adds	r6, #1
 801d16c:	e7ee      	b.n	801d14c <__libc_init_array+0xc>
 801d16e:	f855 3b04 	ldr.w	r3, [r5], #4
 801d172:	4798      	blx	r3
 801d174:	3601      	adds	r6, #1
 801d176:	e7f2      	b.n	801d15e <__libc_init_array+0x1e>
 801d178:	0801e1a8 	.word	0x0801e1a8
 801d17c:	0801e1a8 	.word	0x0801e1a8
 801d180:	0801e1a8 	.word	0x0801e1a8
 801d184:	0801e1ac 	.word	0x0801e1ac

0801d188 <floor>:
 801d188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d18c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801d190:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801d194:	2e13      	cmp	r6, #19
 801d196:	4602      	mov	r2, r0
 801d198:	460b      	mov	r3, r1
 801d19a:	460c      	mov	r4, r1
 801d19c:	4605      	mov	r5, r0
 801d19e:	4680      	mov	r8, r0
 801d1a0:	dc35      	bgt.n	801d20e <floor+0x86>
 801d1a2:	2e00      	cmp	r6, #0
 801d1a4:	da17      	bge.n	801d1d6 <floor+0x4e>
 801d1a6:	a334      	add	r3, pc, #208	@ (adr r3, 801d278 <floor+0xf0>)
 801d1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1ac:	f7e3 f8a6 	bl	80002fc <__adddf3>
 801d1b0:	2200      	movs	r2, #0
 801d1b2:	2300      	movs	r3, #0
 801d1b4:	f7e3 fad6 	bl	8000764 <__aeabi_dcmpgt>
 801d1b8:	b150      	cbz	r0, 801d1d0 <floor+0x48>
 801d1ba:	2c00      	cmp	r4, #0
 801d1bc:	da57      	bge.n	801d26e <floor+0xe6>
 801d1be:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801d1c2:	432c      	orrs	r4, r5
 801d1c4:	2500      	movs	r5, #0
 801d1c6:	42ac      	cmp	r4, r5
 801d1c8:	4c2d      	ldr	r4, [pc, #180]	@ (801d280 <floor+0xf8>)
 801d1ca:	bf08      	it	eq
 801d1cc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801d1d0:	4623      	mov	r3, r4
 801d1d2:	462a      	mov	r2, r5
 801d1d4:	e024      	b.n	801d220 <floor+0x98>
 801d1d6:	4f2b      	ldr	r7, [pc, #172]	@ (801d284 <floor+0xfc>)
 801d1d8:	4137      	asrs	r7, r6
 801d1da:	ea01 0c07 	and.w	ip, r1, r7
 801d1de:	ea5c 0c00 	orrs.w	ip, ip, r0
 801d1e2:	d01d      	beq.n	801d220 <floor+0x98>
 801d1e4:	a324      	add	r3, pc, #144	@ (adr r3, 801d278 <floor+0xf0>)
 801d1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1ea:	f7e3 f887 	bl	80002fc <__adddf3>
 801d1ee:	2200      	movs	r2, #0
 801d1f0:	2300      	movs	r3, #0
 801d1f2:	f7e3 fab7 	bl	8000764 <__aeabi_dcmpgt>
 801d1f6:	2800      	cmp	r0, #0
 801d1f8:	d0ea      	beq.n	801d1d0 <floor+0x48>
 801d1fa:	2c00      	cmp	r4, #0
 801d1fc:	bfbe      	ittt	lt
 801d1fe:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801d202:	4133      	asrlt	r3, r6
 801d204:	18e4      	addlt	r4, r4, r3
 801d206:	ea24 0407 	bic.w	r4, r4, r7
 801d20a:	2500      	movs	r5, #0
 801d20c:	e7e0      	b.n	801d1d0 <floor+0x48>
 801d20e:	2e33      	cmp	r6, #51	@ 0x33
 801d210:	dd0a      	ble.n	801d228 <floor+0xa0>
 801d212:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801d216:	d103      	bne.n	801d220 <floor+0x98>
 801d218:	f7e3 f870 	bl	80002fc <__adddf3>
 801d21c:	4602      	mov	r2, r0
 801d21e:	460b      	mov	r3, r1
 801d220:	4610      	mov	r0, r2
 801d222:	4619      	mov	r1, r3
 801d224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d228:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801d22c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801d230:	fa2c f707 	lsr.w	r7, ip, r7
 801d234:	4207      	tst	r7, r0
 801d236:	d0f3      	beq.n	801d220 <floor+0x98>
 801d238:	a30f      	add	r3, pc, #60	@ (adr r3, 801d278 <floor+0xf0>)
 801d23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d23e:	f7e3 f85d 	bl	80002fc <__adddf3>
 801d242:	2200      	movs	r2, #0
 801d244:	2300      	movs	r3, #0
 801d246:	f7e3 fa8d 	bl	8000764 <__aeabi_dcmpgt>
 801d24a:	2800      	cmp	r0, #0
 801d24c:	d0c0      	beq.n	801d1d0 <floor+0x48>
 801d24e:	2c00      	cmp	r4, #0
 801d250:	da0a      	bge.n	801d268 <floor+0xe0>
 801d252:	2e14      	cmp	r6, #20
 801d254:	d101      	bne.n	801d25a <floor+0xd2>
 801d256:	3401      	adds	r4, #1
 801d258:	e006      	b.n	801d268 <floor+0xe0>
 801d25a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801d25e:	2301      	movs	r3, #1
 801d260:	40b3      	lsls	r3, r6
 801d262:	441d      	add	r5, r3
 801d264:	4545      	cmp	r5, r8
 801d266:	d3f6      	bcc.n	801d256 <floor+0xce>
 801d268:	ea25 0507 	bic.w	r5, r5, r7
 801d26c:	e7b0      	b.n	801d1d0 <floor+0x48>
 801d26e:	2500      	movs	r5, #0
 801d270:	462c      	mov	r4, r5
 801d272:	e7ad      	b.n	801d1d0 <floor+0x48>
 801d274:	f3af 8000 	nop.w
 801d278:	8800759c 	.word	0x8800759c
 801d27c:	7e37e43c 	.word	0x7e37e43c
 801d280:	bff00000 	.word	0xbff00000
 801d284:	000fffff 	.word	0x000fffff

0801d288 <_init>:
 801d288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d28a:	bf00      	nop
 801d28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d28e:	bc08      	pop	{r3}
 801d290:	469e      	mov	lr, r3
 801d292:	4770      	bx	lr

0801d294 <_fini>:
 801d294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d296:	bf00      	nop
 801d298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d29a:	bc08      	pop	{r3}
 801d29c:	469e      	mov	lr, r3
 801d29e:	4770      	bx	lr
